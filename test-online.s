   1              		.file	"test.cc"
   2              	# GNU C++14 (Ubuntu 7.3.0-27ubuntu1~18.04) version 7.3.0 (x86_64-linux-gnu)
   3              	#	compiled by GNU C version 7.3.0, GMP version 6.1.2, MPFR version 4.0.1, MPC version 1.1.0, isl ve
   4              	
   5              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   6              	# options passed:  -imultiarch x86_64-linux-gnu -D_GNU_SOURCE test.cc
   7              	# -march=ivybridge -mmmx -mno-3dnow -msse -msse2 -msse3 -mssse3 -mno-sse4a
   8              	# -mcx16 -msahf -mno-movbe -maes -mno-sha -mpclmul -mpopcnt -mno-abm
   9              	# -mno-lwp -mno-fma -mno-fma4 -mno-xop -mno-bmi -mno-sgx -mno-bmi2 -mno-tbm
  10              	# -mavx -mno-avx2 -msse4.2 -msse4.1 -mno-lzcnt -mno-rtm -mno-hle -mrdrnd
  11              	# -mf16c -mfsgsbase -mno-rdseed -mno-prfchw -mno-adx -mfxsr -mxsave
  12              	# -mxsaveopt -mno-avx512f -mno-avx512er -mno-avx512cd -mno-avx512pf
  13              	# -mno-prefetchwt1 -mno-clflushopt -mno-xsavec -mno-xsaves -mno-avx512dq
  14              	# -mno-avx512bw -mno-avx512vl -mno-avx512ifma -mno-avx512vbmi
  15              	# -mno-avx5124fmaps -mno-avx5124vnniw -mno-clwb -mno-mwaitx -mno-clzero
  16              	# -mno-pku -mno-rdpid --param l1-cache-size=32
  17              	# --param l1-cache-line-size=64 --param l2-cache-size=20480
  18              	# -mtune=ivybridge -masm=att -g -O3 -fverbose-asm -fstack-protector-strong
  19              	# -Wformat -Wformat-security
  20              	# options enabled:  -fPIC -fPIE -faggressive-loop-optimizations
  21              	# -falign-labels -fasynchronous-unwind-tables -fauto-inc-dec
  22              	# -fbranch-count-reg -fcaller-saves -fchkp-check-incomplete-type
  23              	# -fchkp-check-read -fchkp-check-write -fchkp-instrument-calls
  24              	# -fchkp-narrow-bounds -fchkp-optimize -fchkp-store-bounds
  25              	# -fchkp-use-static-bounds -fchkp-use-static-const-bounds
  26              	# -fchkp-use-wrappers -fcode-hoisting -fcombine-stack-adjustments -fcommon
  27              	# -fcompare-elim -fcprop-registers -fcrossjumping -fcse-follow-jumps
  28              	# -fdefer-pop -fdelete-null-pointer-checks -fdevirtualize
  29              	# -fdevirtualize-speculatively -fdwarf2-cfi-asm -fearly-inlining
  30              	# -feliminate-unused-debug-types -fexceptions -fexpensive-optimizations
  31              	# -fforward-propagate -ffp-int-builtin-inexact -ffunction-cse -fgcse
  32              	# -fgcse-after-reload -fgcse-lm -fgnu-runtime -fgnu-unique
  33              	# -fguess-branch-probability -fhoist-adjacent-loads -fident -fif-conversion
  34              	# -fif-conversion2 -findirect-inlining -finline -finline-atomics
  35              	# -finline-functions -finline-functions-called-once
  36              	# -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	# -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	# -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	# -fira-share-save-slots -fira-share-spill-slots
  40              	# -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	# -fleading-underscore -flifetime-dse -flra-remat -flto-odr-type-merging
  42              	# -fmath-errno -fmerge-constants -fmerge-debug-strings
  43              	# -fmove-loop-invariants -fomit-frame-pointer -foptimize-sibling-calls
  44              	# -foptimize-strlen -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2
  45              	# -fplt -fpredictive-commoning -fprefetch-loop-arrays -free
  46              	# -freg-struct-return -freorder-blocks -freorder-functions
  47              	# -frerun-cse-after-loop -fsched-critical-path-heuristic
  48              	# -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  49              	# -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
  50              	# -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-fusion
  51              	# -fschedule-insns2 -fsemantic-interposition -fshow-column -fshrink-wrap
  52              	# -fshrink-wrap-separate -fsigned-zeros -fsplit-ivs-in-unroller
  53              	# -fsplit-loops -fsplit-paths -fsplit-wide-types -fssa-backprop
  54              	# -fssa-phiopt -fstack-protector-strong -fstdarg-opt -fstore-merging
  55              	# -fstrict-aliasing -fstrict-overflow -fstrict-volatile-bitfields
  56              	# -fsync-libcalls -fthread-jumps -ftoplevel-reorder -ftrapping-math
  57              	# -ftree-bit-ccp -ftree-builtin-call-dce -ftree-ccp -ftree-ch
  58              	# -ftree-coalesce-vars -ftree-copy-prop -ftree-cselim -ftree-dce
  59              	# -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre
  60              	# -ftree-loop-distribute-patterns -ftree-loop-if-convert -ftree-loop-im
  61              	# -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  62              	# -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  63              	# -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  64              	# -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  65              	# -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  66              	# -funwind-tables -fvar-tracking -fvar-tracking-assignments -fverbose-asm
  67              	# -fzero-initialized-in-bss -m128bit-long-double -m64 -m80387 -maes
  68              	# -malign-stringops -mavx -mavx256-split-unaligned-load
  69              	# -mavx256-split-unaligned-store -mcx16 -mf16c -mfancy-math-387
  70              	# -mfp-ret-in-387 -mfsgsbase -mfxsr -mglibc -mieee-fp -mlong-double-80
  71              	# -mmmx -mpclmul -mpopcnt -mpush-args -mrdrnd -mred-zone -msahf -msse
  72              	# -msse2 -msse3 -msse4 -msse4.1 -msse4.2 -mssse3 -mstv
  73              	# -mtls-direct-seg-refs -mvzeroupper -mxsave -mxsaveopt
  74              	
  75              		.text
  76              	.Ltext0:
  77              		.section	.text._ZNKSt5ctypeIcE8do_widenEc,"axG",@progbits,_ZNKSt5ctypeIcE8do_widenEc,comdat
  78              		.align 2
  79              		.p2align 4,,15
  80              		.weak	_ZNKSt5ctypeIcE8do_widenEc
  82              	_ZNKSt5ctypeIcE8do_widenEc:
  83              	.LFB1321:
  84              		.file 1 "/usr/include/c++/7/bits/locale_facets.h"
   1:/usr/include/c++/7/bits/locale_facets.h **** // Locale support -*- C++ -*-
   2:/usr/include/c++/7/bits/locale_facets.h **** 
   3:/usr/include/c++/7/bits/locale_facets.h **** // Copyright (C) 1997-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/locale_facets.h **** //
   5:/usr/include/c++/7/bits/locale_facets.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/locale_facets.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/locale_facets.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/locale_facets.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/locale_facets.h **** // any later version.
  10:/usr/include/c++/7/bits/locale_facets.h **** 
  11:/usr/include/c++/7/bits/locale_facets.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/locale_facets.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/locale_facets.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/locale_facets.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/locale_facets.h **** 
  16:/usr/include/c++/7/bits/locale_facets.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/locale_facets.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/locale_facets.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/locale_facets.h **** 
  20:/usr/include/c++/7/bits/locale_facets.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/locale_facets.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/locale_facets.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/locale_facets.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/locale_facets.h **** 
  25:/usr/include/c++/7/bits/locale_facets.h **** /** @file bits/locale_facets.h
  26:/usr/include/c++/7/bits/locale_facets.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/7/bits/locale_facets.h ****  *  Do not attempt to use it directly. @headername{locale}
  28:/usr/include/c++/7/bits/locale_facets.h ****  */
  29:/usr/include/c++/7/bits/locale_facets.h **** 
  30:/usr/include/c++/7/bits/locale_facets.h **** //
  31:/usr/include/c++/7/bits/locale_facets.h **** // ISO C++ 14882: 22.1  Locales
  32:/usr/include/c++/7/bits/locale_facets.h **** //
  33:/usr/include/c++/7/bits/locale_facets.h **** 
  34:/usr/include/c++/7/bits/locale_facets.h **** #ifndef _LOCALE_FACETS_H
  35:/usr/include/c++/7/bits/locale_facets.h **** #define _LOCALE_FACETS_H 1
  36:/usr/include/c++/7/bits/locale_facets.h **** 
  37:/usr/include/c++/7/bits/locale_facets.h **** #pragma GCC system_header
  38:/usr/include/c++/7/bits/locale_facets.h **** 
  39:/usr/include/c++/7/bits/locale_facets.h **** #include <cwctype>	// For wctype_t
  40:/usr/include/c++/7/bits/locale_facets.h **** #include <cctype>
  41:/usr/include/c++/7/bits/locale_facets.h **** #include <bits/ctype_base.h>
  42:/usr/include/c++/7/bits/locale_facets.h **** #include <iosfwd>
  43:/usr/include/c++/7/bits/locale_facets.h **** #include <bits/ios_base.h>  // For ios_base, ios_base::iostate
  44:/usr/include/c++/7/bits/locale_facets.h **** #include <streambuf>
  45:/usr/include/c++/7/bits/locale_facets.h **** #include <bits/cpp_type_traits.h>
  46:/usr/include/c++/7/bits/locale_facets.h **** #include <ext/type_traits.h>
  47:/usr/include/c++/7/bits/locale_facets.h **** #include <ext/numeric_traits.h>
  48:/usr/include/c++/7/bits/locale_facets.h **** #include <bits/streambuf_iterator.h>
  49:/usr/include/c++/7/bits/locale_facets.h **** 
  50:/usr/include/c++/7/bits/locale_facets.h **** namespace std _GLIBCXX_VISIBILITY(default)
  51:/usr/include/c++/7/bits/locale_facets.h **** {
  52:/usr/include/c++/7/bits/locale_facets.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  53:/usr/include/c++/7/bits/locale_facets.h **** 
  54:/usr/include/c++/7/bits/locale_facets.h ****   // NB: Don't instantiate required wchar_t facets if no wchar_t support.
  55:/usr/include/c++/7/bits/locale_facets.h **** #ifdef _GLIBCXX_USE_WCHAR_T
  56:/usr/include/c++/7/bits/locale_facets.h **** # define  _GLIBCXX_NUM_FACETS 28
  57:/usr/include/c++/7/bits/locale_facets.h **** # define  _GLIBCXX_NUM_CXX11_FACETS 16
  58:/usr/include/c++/7/bits/locale_facets.h **** #else
  59:/usr/include/c++/7/bits/locale_facets.h **** # define  _GLIBCXX_NUM_FACETS 14
  60:/usr/include/c++/7/bits/locale_facets.h **** # define  _GLIBCXX_NUM_CXX11_FACETS 8
  61:/usr/include/c++/7/bits/locale_facets.h **** #endif
  62:/usr/include/c++/7/bits/locale_facets.h **** #ifdef _GLIBCXX_USE_C99_STDINT_TR1
  63:/usr/include/c++/7/bits/locale_facets.h **** # define _GLIBCXX_NUM_UNICODE_FACETS 2
  64:/usr/include/c++/7/bits/locale_facets.h **** #else
  65:/usr/include/c++/7/bits/locale_facets.h **** # define _GLIBCXX_NUM_UNICODE_FACETS 0
  66:/usr/include/c++/7/bits/locale_facets.h **** #endif
  67:/usr/include/c++/7/bits/locale_facets.h **** 
  68:/usr/include/c++/7/bits/locale_facets.h ****   // Convert string to numeric value of type _Tp and store results.
  69:/usr/include/c++/7/bits/locale_facets.h ****   // NB: This is specialized for all required types, there is no
  70:/usr/include/c++/7/bits/locale_facets.h ****   // generic definition.
  71:/usr/include/c++/7/bits/locale_facets.h ****   template<typename _Tp>
  72:/usr/include/c++/7/bits/locale_facets.h ****     void
  73:/usr/include/c++/7/bits/locale_facets.h ****     __convert_to_v(const char*, _Tp&, ios_base::iostate&,
  74:/usr/include/c++/7/bits/locale_facets.h **** 		   const __c_locale&) throw();
  75:/usr/include/c++/7/bits/locale_facets.h **** 
  76:/usr/include/c++/7/bits/locale_facets.h ****   // Explicit specializations for required types.
  77:/usr/include/c++/7/bits/locale_facets.h ****   template<>
  78:/usr/include/c++/7/bits/locale_facets.h ****     void
  79:/usr/include/c++/7/bits/locale_facets.h ****     __convert_to_v(const char*, float&, ios_base::iostate&,
  80:/usr/include/c++/7/bits/locale_facets.h **** 		   const __c_locale&) throw();
  81:/usr/include/c++/7/bits/locale_facets.h **** 
  82:/usr/include/c++/7/bits/locale_facets.h ****   template<>
  83:/usr/include/c++/7/bits/locale_facets.h ****     void
  84:/usr/include/c++/7/bits/locale_facets.h ****     __convert_to_v(const char*, double&, ios_base::iostate&,
  85:/usr/include/c++/7/bits/locale_facets.h **** 		   const __c_locale&) throw();
  86:/usr/include/c++/7/bits/locale_facets.h **** 
  87:/usr/include/c++/7/bits/locale_facets.h ****   template<>
  88:/usr/include/c++/7/bits/locale_facets.h ****     void
  89:/usr/include/c++/7/bits/locale_facets.h ****     __convert_to_v(const char*, long double&, ios_base::iostate&,
  90:/usr/include/c++/7/bits/locale_facets.h **** 		   const __c_locale&) throw();
  91:/usr/include/c++/7/bits/locale_facets.h **** 
  92:/usr/include/c++/7/bits/locale_facets.h ****   // NB: __pad is a struct, rather than a function, so it can be
  93:/usr/include/c++/7/bits/locale_facets.h ****   // partially-specialized.
  94:/usr/include/c++/7/bits/locale_facets.h ****   template<typename _CharT, typename _Traits>
  95:/usr/include/c++/7/bits/locale_facets.h ****     struct __pad
  96:/usr/include/c++/7/bits/locale_facets.h ****     {
  97:/usr/include/c++/7/bits/locale_facets.h ****       static void
  98:/usr/include/c++/7/bits/locale_facets.h ****       _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
  99:/usr/include/c++/7/bits/locale_facets.h **** 	     const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
 100:/usr/include/c++/7/bits/locale_facets.h ****     };
 101:/usr/include/c++/7/bits/locale_facets.h **** 
 102:/usr/include/c++/7/bits/locale_facets.h ****   // Used by both numeric and monetary facets.
 103:/usr/include/c++/7/bits/locale_facets.h ****   // Inserts "group separator" characters into an array of characters.
 104:/usr/include/c++/7/bits/locale_facets.h ****   // It's recursive, one iteration per group.  It moves the characters
 105:/usr/include/c++/7/bits/locale_facets.h ****   // in the buffer this way: "xxxx12345" -> "12,345xxx".  Call this
 106:/usr/include/c++/7/bits/locale_facets.h ****   // only with __gsize != 0.
 107:/usr/include/c++/7/bits/locale_facets.h ****   template<typename _CharT>
 108:/usr/include/c++/7/bits/locale_facets.h ****     _CharT*
 109:/usr/include/c++/7/bits/locale_facets.h ****     __add_grouping(_CharT* __s, _CharT __sep,
 110:/usr/include/c++/7/bits/locale_facets.h **** 		   const char* __gbeg, size_t __gsize,
 111:/usr/include/c++/7/bits/locale_facets.h **** 		   const _CharT* __first, const _CharT* __last);
 112:/usr/include/c++/7/bits/locale_facets.h **** 
 113:/usr/include/c++/7/bits/locale_facets.h ****   // This template permits specializing facet output code for
 114:/usr/include/c++/7/bits/locale_facets.h ****   // ostreambuf_iterator.  For ostreambuf_iterator, sputn is
 115:/usr/include/c++/7/bits/locale_facets.h ****   // significantly more efficient than incrementing iterators.
 116:/usr/include/c++/7/bits/locale_facets.h ****   template<typename _CharT>
 117:/usr/include/c++/7/bits/locale_facets.h ****     inline
 118:/usr/include/c++/7/bits/locale_facets.h ****     ostreambuf_iterator<_CharT>
 119:/usr/include/c++/7/bits/locale_facets.h ****     __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
 120:/usr/include/c++/7/bits/locale_facets.h ****     {
 121:/usr/include/c++/7/bits/locale_facets.h ****       __s._M_put(__ws, __len);
 122:/usr/include/c++/7/bits/locale_facets.h ****       return __s;
 123:/usr/include/c++/7/bits/locale_facets.h ****     }
 124:/usr/include/c++/7/bits/locale_facets.h **** 
 125:/usr/include/c++/7/bits/locale_facets.h ****   // This is the unspecialized form of the template.
 126:/usr/include/c++/7/bits/locale_facets.h ****   template<typename _CharT, typename _OutIter>
 127:/usr/include/c++/7/bits/locale_facets.h ****     inline
 128:/usr/include/c++/7/bits/locale_facets.h ****     _OutIter
 129:/usr/include/c++/7/bits/locale_facets.h ****     __write(_OutIter __s, const _CharT* __ws, int __len)
 130:/usr/include/c++/7/bits/locale_facets.h ****     {
 131:/usr/include/c++/7/bits/locale_facets.h ****       for (int __j = 0; __j < __len; __j++, ++__s)
 132:/usr/include/c++/7/bits/locale_facets.h **** 	*__s = __ws[__j];
 133:/usr/include/c++/7/bits/locale_facets.h ****       return __s;
 134:/usr/include/c++/7/bits/locale_facets.h ****     }
 135:/usr/include/c++/7/bits/locale_facets.h **** 
 136:/usr/include/c++/7/bits/locale_facets.h **** 
 137:/usr/include/c++/7/bits/locale_facets.h ****   // 22.2.1.1  Template class ctype
 138:/usr/include/c++/7/bits/locale_facets.h ****   // Include host and configuration specific ctype enums for ctype_base.
 139:/usr/include/c++/7/bits/locale_facets.h **** 
 140:/usr/include/c++/7/bits/locale_facets.h ****   /**
 141:/usr/include/c++/7/bits/locale_facets.h ****    *  @brief  Common base for ctype facet
 142:/usr/include/c++/7/bits/locale_facets.h ****    *
 143:/usr/include/c++/7/bits/locale_facets.h ****    *  This template class provides implementations of the public functions
 144:/usr/include/c++/7/bits/locale_facets.h ****    *  that forward to the protected virtual functions.
 145:/usr/include/c++/7/bits/locale_facets.h ****    *
 146:/usr/include/c++/7/bits/locale_facets.h ****    *  This template also provides abstract stubs for the protected virtual
 147:/usr/include/c++/7/bits/locale_facets.h ****    *  functions.
 148:/usr/include/c++/7/bits/locale_facets.h ****   */
 149:/usr/include/c++/7/bits/locale_facets.h ****   template<typename _CharT>
 150:/usr/include/c++/7/bits/locale_facets.h ****     class __ctype_abstract_base : public locale::facet, public ctype_base
 151:/usr/include/c++/7/bits/locale_facets.h ****     {
 152:/usr/include/c++/7/bits/locale_facets.h ****     public:
 153:/usr/include/c++/7/bits/locale_facets.h ****       // Types:
 154:/usr/include/c++/7/bits/locale_facets.h ****       /// Typedef for the template parameter
 155:/usr/include/c++/7/bits/locale_facets.h ****       typedef _CharT char_type;
 156:/usr/include/c++/7/bits/locale_facets.h **** 
 157:/usr/include/c++/7/bits/locale_facets.h ****       /**
 158:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Test char_type classification.
 159:/usr/include/c++/7/bits/locale_facets.h ****        *
 160:/usr/include/c++/7/bits/locale_facets.h ****        *  This function finds a mask M for @a __c and compares it to
 161:/usr/include/c++/7/bits/locale_facets.h ****        *  mask @a __m.  It does so by returning the value of
 162:/usr/include/c++/7/bits/locale_facets.h ****        *  ctype<char_type>::do_is().
 163:/usr/include/c++/7/bits/locale_facets.h ****        *
 164:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char_type to compare the mask of.
 165:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __m  The mask to compare against.
 166:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  (M & __m) != 0.
 167:/usr/include/c++/7/bits/locale_facets.h ****       */
 168:/usr/include/c++/7/bits/locale_facets.h ****       bool
 169:/usr/include/c++/7/bits/locale_facets.h ****       is(mask __m, char_type __c) const
 170:/usr/include/c++/7/bits/locale_facets.h ****       { return this->do_is(__m, __c); }
 171:/usr/include/c++/7/bits/locale_facets.h **** 
 172:/usr/include/c++/7/bits/locale_facets.h ****       /**
 173:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Return a mask array.
 174:/usr/include/c++/7/bits/locale_facets.h ****        *
 175:/usr/include/c++/7/bits/locale_facets.h ****        *  This function finds the mask for each char_type in the range [lo,hi)
 176:/usr/include/c++/7/bits/locale_facets.h ****        *  and successively writes it to vec.  vec must have as many elements
 177:/usr/include/c++/7/bits/locale_facets.h ****        *  as the char array.  It does so by returning the value of
 178:/usr/include/c++/7/bits/locale_facets.h ****        *  ctype<char_type>::do_is().
 179:/usr/include/c++/7/bits/locale_facets.h ****        *
 180:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
 181:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 182:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __vec  Pointer to an array of mask storage.
 183:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
 184:/usr/include/c++/7/bits/locale_facets.h ****       */
 185:/usr/include/c++/7/bits/locale_facets.h ****       const char_type*
 186:/usr/include/c++/7/bits/locale_facets.h ****       is(const char_type *__lo, const char_type *__hi, mask *__vec) const
 187:/usr/include/c++/7/bits/locale_facets.h ****       { return this->do_is(__lo, __hi, __vec); }
 188:/usr/include/c++/7/bits/locale_facets.h **** 
 189:/usr/include/c++/7/bits/locale_facets.h ****       /**
 190:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Find char_type matching a mask
 191:/usr/include/c++/7/bits/locale_facets.h ****        *
 192:/usr/include/c++/7/bits/locale_facets.h ****        *  This function searches for and returns the first char_type c in
 193:/usr/include/c++/7/bits/locale_facets.h ****        *  [lo,hi) for which is(m,c) is true.  It does so by returning
 194:/usr/include/c++/7/bits/locale_facets.h ****        *  ctype<char_type>::do_scan_is().
 195:/usr/include/c++/7/bits/locale_facets.h ****        *
 196:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __m  The mask to compare against.
 197:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
 198:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 199:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  Pointer to matching char_type if found, else @a __hi.
 200:/usr/include/c++/7/bits/locale_facets.h ****       */
 201:/usr/include/c++/7/bits/locale_facets.h ****       const char_type*
 202:/usr/include/c++/7/bits/locale_facets.h ****       scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
 203:/usr/include/c++/7/bits/locale_facets.h ****       { return this->do_scan_is(__m, __lo, __hi); }
 204:/usr/include/c++/7/bits/locale_facets.h **** 
 205:/usr/include/c++/7/bits/locale_facets.h ****       /**
 206:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Find char_type not matching a mask
 207:/usr/include/c++/7/bits/locale_facets.h ****        *
 208:/usr/include/c++/7/bits/locale_facets.h ****        *  This function searches for and returns the first char_type c in
 209:/usr/include/c++/7/bits/locale_facets.h ****        *  [lo,hi) for which is(m,c) is false.  It does so by returning
 210:/usr/include/c++/7/bits/locale_facets.h ****        *  ctype<char_type>::do_scan_not().
 211:/usr/include/c++/7/bits/locale_facets.h ****        *
 212:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __m  The mask to compare against.
 213:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to first char in range.
 214:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 215:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  Pointer to non-matching char if found, else @a __hi.
 216:/usr/include/c++/7/bits/locale_facets.h ****       */
 217:/usr/include/c++/7/bits/locale_facets.h ****       const char_type*
 218:/usr/include/c++/7/bits/locale_facets.h ****       scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
 219:/usr/include/c++/7/bits/locale_facets.h ****       { return this->do_scan_not(__m, __lo, __hi); }
 220:/usr/include/c++/7/bits/locale_facets.h **** 
 221:/usr/include/c++/7/bits/locale_facets.h ****       /**
 222:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Convert to uppercase.
 223:/usr/include/c++/7/bits/locale_facets.h ****        *
 224:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts the argument to uppercase if possible.
 225:/usr/include/c++/7/bits/locale_facets.h ****        *  If not possible (for example, '2'), returns the argument.  It does
 226:/usr/include/c++/7/bits/locale_facets.h ****        *  so by returning ctype<char_type>::do_toupper().
 227:/usr/include/c++/7/bits/locale_facets.h ****        *
 228:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char_type to convert.
 229:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  The uppercase char_type if convertible, else @a __c.
 230:/usr/include/c++/7/bits/locale_facets.h ****       */
 231:/usr/include/c++/7/bits/locale_facets.h ****       char_type
 232:/usr/include/c++/7/bits/locale_facets.h ****       toupper(char_type __c) const
 233:/usr/include/c++/7/bits/locale_facets.h ****       { return this->do_toupper(__c); }
 234:/usr/include/c++/7/bits/locale_facets.h **** 
 235:/usr/include/c++/7/bits/locale_facets.h ****       /**
 236:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Convert array to uppercase.
 237:/usr/include/c++/7/bits/locale_facets.h ****        *
 238:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts each char_type in the range [lo,hi) to
 239:/usr/include/c++/7/bits/locale_facets.h ****        *  uppercase if possible.  Other elements remain untouched.  It does so
 240:/usr/include/c++/7/bits/locale_facets.h ****        *  by returning ctype<char_type>:: do_toupper(lo, hi).
 241:/usr/include/c++/7/bits/locale_facets.h ****        *
 242:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
 243:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 244:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
 245:/usr/include/c++/7/bits/locale_facets.h ****       */
 246:/usr/include/c++/7/bits/locale_facets.h ****       const char_type*
 247:/usr/include/c++/7/bits/locale_facets.h ****       toupper(char_type *__lo, const char_type* __hi) const
 248:/usr/include/c++/7/bits/locale_facets.h ****       { return this->do_toupper(__lo, __hi); }
 249:/usr/include/c++/7/bits/locale_facets.h **** 
 250:/usr/include/c++/7/bits/locale_facets.h ****       /**
 251:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Convert to lowercase.
 252:/usr/include/c++/7/bits/locale_facets.h ****        *
 253:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts the argument to lowercase if possible.  If
 254:/usr/include/c++/7/bits/locale_facets.h ****        *  not possible (for example, '2'), returns the argument.  It does so
 255:/usr/include/c++/7/bits/locale_facets.h ****        *  by returning ctype<char_type>::do_tolower(c).
 256:/usr/include/c++/7/bits/locale_facets.h ****        *
 257:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char_type to convert.
 258:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  The lowercase char_type if convertible, else @a __c.
 259:/usr/include/c++/7/bits/locale_facets.h ****       */
 260:/usr/include/c++/7/bits/locale_facets.h ****       char_type
 261:/usr/include/c++/7/bits/locale_facets.h ****       tolower(char_type __c) const
 262:/usr/include/c++/7/bits/locale_facets.h ****       { return this->do_tolower(__c); }
 263:/usr/include/c++/7/bits/locale_facets.h **** 
 264:/usr/include/c++/7/bits/locale_facets.h ****       /**
 265:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Convert array to lowercase.
 266:/usr/include/c++/7/bits/locale_facets.h ****        *
 267:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts each char_type in the range [__lo,__hi) to
 268:/usr/include/c++/7/bits/locale_facets.h ****        *  lowercase if possible.  Other elements remain untouched.  It does so
 269:/usr/include/c++/7/bits/locale_facets.h ****        *  by returning ctype<char_type>:: do_tolower(__lo, __hi).
 270:/usr/include/c++/7/bits/locale_facets.h ****        *
 271:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
 272:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 273:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
 274:/usr/include/c++/7/bits/locale_facets.h ****       */
 275:/usr/include/c++/7/bits/locale_facets.h ****       const char_type*
 276:/usr/include/c++/7/bits/locale_facets.h ****       tolower(char_type* __lo, const char_type* __hi) const
 277:/usr/include/c++/7/bits/locale_facets.h ****       { return this->do_tolower(__lo, __hi); }
 278:/usr/include/c++/7/bits/locale_facets.h **** 
 279:/usr/include/c++/7/bits/locale_facets.h ****       /**
 280:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Widen char to char_type
 281:/usr/include/c++/7/bits/locale_facets.h ****        *
 282:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts the char argument to char_type using the
 283:/usr/include/c++/7/bits/locale_facets.h ****        *  simplest reasonable transformation.  It does so by returning
 284:/usr/include/c++/7/bits/locale_facets.h ****        *  ctype<char_type>::do_widen(c).
 285:/usr/include/c++/7/bits/locale_facets.h ****        *
 286:/usr/include/c++/7/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 287:/usr/include/c++/7/bits/locale_facets.h ****        *  codecvt for that.
 288:/usr/include/c++/7/bits/locale_facets.h ****        *
 289:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char to convert.
 290:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  The converted char_type.
 291:/usr/include/c++/7/bits/locale_facets.h ****       */
 292:/usr/include/c++/7/bits/locale_facets.h ****       char_type
 293:/usr/include/c++/7/bits/locale_facets.h ****       widen(char __c) const
 294:/usr/include/c++/7/bits/locale_facets.h ****       { return this->do_widen(__c); }
 295:/usr/include/c++/7/bits/locale_facets.h **** 
 296:/usr/include/c++/7/bits/locale_facets.h ****       /**
 297:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Widen array to char_type
 298:/usr/include/c++/7/bits/locale_facets.h ****        *
 299:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts each char in the input to char_type using the
 300:/usr/include/c++/7/bits/locale_facets.h ****        *  simplest reasonable transformation.  It does so by returning
 301:/usr/include/c++/7/bits/locale_facets.h ****        *  ctype<char_type>::do_widen(c).
 302:/usr/include/c++/7/bits/locale_facets.h ****        *
 303:/usr/include/c++/7/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 304:/usr/include/c++/7/bits/locale_facets.h ****        *  codecvt for that.
 305:/usr/include/c++/7/bits/locale_facets.h ****        *
 306:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
 307:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 308:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __to  Pointer to the destination array.
 309:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
 310:/usr/include/c++/7/bits/locale_facets.h ****       */
 311:/usr/include/c++/7/bits/locale_facets.h ****       const char*
 312:/usr/include/c++/7/bits/locale_facets.h ****       widen(const char* __lo, const char* __hi, char_type* __to) const
 313:/usr/include/c++/7/bits/locale_facets.h ****       { return this->do_widen(__lo, __hi, __to); }
 314:/usr/include/c++/7/bits/locale_facets.h **** 
 315:/usr/include/c++/7/bits/locale_facets.h ****       /**
 316:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Narrow char_type to char
 317:/usr/include/c++/7/bits/locale_facets.h ****        *
 318:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts the char_type to char using the simplest
 319:/usr/include/c++/7/bits/locale_facets.h ****        *  reasonable transformation.  If the conversion fails, dfault is
 320:/usr/include/c++/7/bits/locale_facets.h ****        *  returned instead.  It does so by returning
 321:/usr/include/c++/7/bits/locale_facets.h ****        *  ctype<char_type>::do_narrow(__c).
 322:/usr/include/c++/7/bits/locale_facets.h ****        *
 323:/usr/include/c++/7/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 324:/usr/include/c++/7/bits/locale_facets.h ****        *  codecvt for that.
 325:/usr/include/c++/7/bits/locale_facets.h ****        *
 326:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char_type to convert.
 327:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __dfault  Char to return if conversion fails.
 328:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  The converted char.
 329:/usr/include/c++/7/bits/locale_facets.h ****       */
 330:/usr/include/c++/7/bits/locale_facets.h ****       char
 331:/usr/include/c++/7/bits/locale_facets.h ****       narrow(char_type __c, char __dfault) const
 332:/usr/include/c++/7/bits/locale_facets.h ****       { return this->do_narrow(__c, __dfault); }
 333:/usr/include/c++/7/bits/locale_facets.h **** 
 334:/usr/include/c++/7/bits/locale_facets.h ****       /**
 335:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Narrow array to char array
 336:/usr/include/c++/7/bits/locale_facets.h ****        *
 337:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts each char_type in the input to char using the
 338:/usr/include/c++/7/bits/locale_facets.h ****        *  simplest reasonable transformation and writes the results to the
 339:/usr/include/c++/7/bits/locale_facets.h ****        *  destination array.  For any char_type in the input that cannot be
 340:/usr/include/c++/7/bits/locale_facets.h ****        *  converted, @a dfault is used instead.  It does so by returning
 341:/usr/include/c++/7/bits/locale_facets.h ****        *  ctype<char_type>::do_narrow(__lo, __hi, __dfault, __to).
 342:/usr/include/c++/7/bits/locale_facets.h ****        *
 343:/usr/include/c++/7/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 344:/usr/include/c++/7/bits/locale_facets.h ****        *  codecvt for that.
 345:/usr/include/c++/7/bits/locale_facets.h ****        *
 346:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
 347:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 348:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __dfault  Char to use if conversion fails.
 349:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __to  Pointer to the destination array.
 350:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
 351:/usr/include/c++/7/bits/locale_facets.h ****       */
 352:/usr/include/c++/7/bits/locale_facets.h ****       const char_type*
 353:/usr/include/c++/7/bits/locale_facets.h ****       narrow(const char_type* __lo, const char_type* __hi,
 354:/usr/include/c++/7/bits/locale_facets.h **** 	      char __dfault, char* __to) const
 355:/usr/include/c++/7/bits/locale_facets.h ****       { return this->do_narrow(__lo, __hi, __dfault, __to); }
 356:/usr/include/c++/7/bits/locale_facets.h **** 
 357:/usr/include/c++/7/bits/locale_facets.h ****     protected:
 358:/usr/include/c++/7/bits/locale_facets.h ****       explicit
 359:/usr/include/c++/7/bits/locale_facets.h ****       __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }
 360:/usr/include/c++/7/bits/locale_facets.h **** 
 361:/usr/include/c++/7/bits/locale_facets.h ****       virtual
 362:/usr/include/c++/7/bits/locale_facets.h ****       ~__ctype_abstract_base() { }
 363:/usr/include/c++/7/bits/locale_facets.h **** 
 364:/usr/include/c++/7/bits/locale_facets.h ****       /**
 365:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Test char_type classification.
 366:/usr/include/c++/7/bits/locale_facets.h ****        *
 367:/usr/include/c++/7/bits/locale_facets.h ****        *  This function finds a mask M for @a c and compares it to mask @a m.
 368:/usr/include/c++/7/bits/locale_facets.h ****        *
 369:/usr/include/c++/7/bits/locale_facets.h ****        *  do_is() is a hook for a derived facet to change the behavior of
 370:/usr/include/c++/7/bits/locale_facets.h ****        *  classifying.  do_is() must always return the same result for the
 371:/usr/include/c++/7/bits/locale_facets.h ****        *  same input.
 372:/usr/include/c++/7/bits/locale_facets.h ****        *
 373:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char_type to find the mask of.
 374:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __m  The mask to compare against.
 375:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  (M & __m) != 0.
 376:/usr/include/c++/7/bits/locale_facets.h ****       */
 377:/usr/include/c++/7/bits/locale_facets.h ****       virtual bool
 378:/usr/include/c++/7/bits/locale_facets.h ****       do_is(mask __m, char_type __c) const = 0;
 379:/usr/include/c++/7/bits/locale_facets.h **** 
 380:/usr/include/c++/7/bits/locale_facets.h ****       /**
 381:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Return a mask array.
 382:/usr/include/c++/7/bits/locale_facets.h ****        *
 383:/usr/include/c++/7/bits/locale_facets.h ****        *  This function finds the mask for each char_type in the range [lo,hi)
 384:/usr/include/c++/7/bits/locale_facets.h ****        *  and successively writes it to vec.  vec must have as many elements
 385:/usr/include/c++/7/bits/locale_facets.h ****        *  as the input.
 386:/usr/include/c++/7/bits/locale_facets.h ****        *
 387:/usr/include/c++/7/bits/locale_facets.h ****        *  do_is() is a hook for a derived facet to change the behavior of
 388:/usr/include/c++/7/bits/locale_facets.h ****        *  classifying.  do_is() must always return the same result for the
 389:/usr/include/c++/7/bits/locale_facets.h ****        *  same input.
 390:/usr/include/c++/7/bits/locale_facets.h ****        *
 391:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
 392:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 393:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __vec  Pointer to an array of mask storage.
 394:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
 395:/usr/include/c++/7/bits/locale_facets.h ****       */
 396:/usr/include/c++/7/bits/locale_facets.h ****       virtual const char_type*
 397:/usr/include/c++/7/bits/locale_facets.h ****       do_is(const char_type* __lo, const char_type* __hi,
 398:/usr/include/c++/7/bits/locale_facets.h **** 	    mask* __vec) const = 0;
 399:/usr/include/c++/7/bits/locale_facets.h **** 
 400:/usr/include/c++/7/bits/locale_facets.h ****       /**
 401:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Find char_type matching mask
 402:/usr/include/c++/7/bits/locale_facets.h ****        *
 403:/usr/include/c++/7/bits/locale_facets.h ****        *  This function searches for and returns the first char_type c in
 404:/usr/include/c++/7/bits/locale_facets.h ****        *  [__lo,__hi) for which is(__m,c) is true.
 405:/usr/include/c++/7/bits/locale_facets.h ****        *
 406:/usr/include/c++/7/bits/locale_facets.h ****        *  do_scan_is() is a hook for a derived facet to change the behavior of
 407:/usr/include/c++/7/bits/locale_facets.h ****        *  match searching.  do_is() must always return the same result for the
 408:/usr/include/c++/7/bits/locale_facets.h ****        *  same input.
 409:/usr/include/c++/7/bits/locale_facets.h ****        *
 410:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __m  The mask to compare against.
 411:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
 412:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 413:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  Pointer to a matching char_type if found, else @a __hi.
 414:/usr/include/c++/7/bits/locale_facets.h ****       */
 415:/usr/include/c++/7/bits/locale_facets.h ****       virtual const char_type*
 416:/usr/include/c++/7/bits/locale_facets.h ****       do_scan_is(mask __m, const char_type* __lo,
 417:/usr/include/c++/7/bits/locale_facets.h **** 		 const char_type* __hi) const = 0;
 418:/usr/include/c++/7/bits/locale_facets.h **** 
 419:/usr/include/c++/7/bits/locale_facets.h ****       /**
 420:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Find char_type not matching mask
 421:/usr/include/c++/7/bits/locale_facets.h ****        *
 422:/usr/include/c++/7/bits/locale_facets.h ****        *  This function searches for and returns a pointer to the first
 423:/usr/include/c++/7/bits/locale_facets.h ****        *  char_type c of [lo,hi) for which is(m,c) is false.
 424:/usr/include/c++/7/bits/locale_facets.h ****        *
 425:/usr/include/c++/7/bits/locale_facets.h ****        *  do_scan_is() is a hook for a derived facet to change the behavior of
 426:/usr/include/c++/7/bits/locale_facets.h ****        *  match searching.  do_is() must always return the same result for the
 427:/usr/include/c++/7/bits/locale_facets.h ****        *  same input.
 428:/usr/include/c++/7/bits/locale_facets.h ****        *
 429:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __m  The mask to compare against.
 430:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
 431:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 432:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  Pointer to a non-matching char_type if found, else @a __hi.
 433:/usr/include/c++/7/bits/locale_facets.h ****       */
 434:/usr/include/c++/7/bits/locale_facets.h ****       virtual const char_type*
 435:/usr/include/c++/7/bits/locale_facets.h ****       do_scan_not(mask __m, const char_type* __lo,
 436:/usr/include/c++/7/bits/locale_facets.h **** 		  const char_type* __hi) const = 0;
 437:/usr/include/c++/7/bits/locale_facets.h **** 
 438:/usr/include/c++/7/bits/locale_facets.h ****       /**
 439:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Convert to uppercase.
 440:/usr/include/c++/7/bits/locale_facets.h ****        *
 441:/usr/include/c++/7/bits/locale_facets.h ****        *  This virtual function converts the char_type argument to uppercase
 442:/usr/include/c++/7/bits/locale_facets.h ****        *  if possible.  If not possible (for example, '2'), returns the
 443:/usr/include/c++/7/bits/locale_facets.h ****        *  argument.
 444:/usr/include/c++/7/bits/locale_facets.h ****        *
 445:/usr/include/c++/7/bits/locale_facets.h ****        *  do_toupper() is a hook for a derived facet to change the behavior of
 446:/usr/include/c++/7/bits/locale_facets.h ****        *  uppercasing.  do_toupper() must always return the same result for
 447:/usr/include/c++/7/bits/locale_facets.h ****        *  the same input.
 448:/usr/include/c++/7/bits/locale_facets.h ****        *
 449:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char_type to convert.
 450:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  The uppercase char_type if convertible, else @a __c.
 451:/usr/include/c++/7/bits/locale_facets.h ****       */
 452:/usr/include/c++/7/bits/locale_facets.h ****       virtual char_type
 453:/usr/include/c++/7/bits/locale_facets.h ****       do_toupper(char_type __c) const = 0;
 454:/usr/include/c++/7/bits/locale_facets.h **** 
 455:/usr/include/c++/7/bits/locale_facets.h ****       /**
 456:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Convert array to uppercase.
 457:/usr/include/c++/7/bits/locale_facets.h ****        *
 458:/usr/include/c++/7/bits/locale_facets.h ****        *  This virtual function converts each char_type in the range [__lo,__hi)
 459:/usr/include/c++/7/bits/locale_facets.h ****        *  to uppercase if possible.  Other elements remain untouched.
 460:/usr/include/c++/7/bits/locale_facets.h ****        *
 461:/usr/include/c++/7/bits/locale_facets.h ****        *  do_toupper() is a hook for a derived facet to change the behavior of
 462:/usr/include/c++/7/bits/locale_facets.h ****        *  uppercasing.  do_toupper() must always return the same result for
 463:/usr/include/c++/7/bits/locale_facets.h ****        *  the same input.
 464:/usr/include/c++/7/bits/locale_facets.h ****        *
 465:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
 466:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 467:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
 468:/usr/include/c++/7/bits/locale_facets.h ****       */
 469:/usr/include/c++/7/bits/locale_facets.h ****       virtual const char_type*
 470:/usr/include/c++/7/bits/locale_facets.h ****       do_toupper(char_type* __lo, const char_type* __hi) const = 0;
 471:/usr/include/c++/7/bits/locale_facets.h **** 
 472:/usr/include/c++/7/bits/locale_facets.h ****       /**
 473:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Convert to lowercase.
 474:/usr/include/c++/7/bits/locale_facets.h ****        *
 475:/usr/include/c++/7/bits/locale_facets.h ****        *  This virtual function converts the argument to lowercase if
 476:/usr/include/c++/7/bits/locale_facets.h ****        *  possible.  If not possible (for example, '2'), returns the argument.
 477:/usr/include/c++/7/bits/locale_facets.h ****        *
 478:/usr/include/c++/7/bits/locale_facets.h ****        *  do_tolower() is a hook for a derived facet to change the behavior of
 479:/usr/include/c++/7/bits/locale_facets.h ****        *  lowercasing.  do_tolower() must always return the same result for
 480:/usr/include/c++/7/bits/locale_facets.h ****        *  the same input.
 481:/usr/include/c++/7/bits/locale_facets.h ****        *
 482:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char_type to convert.
 483:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  The lowercase char_type if convertible, else @a __c.
 484:/usr/include/c++/7/bits/locale_facets.h ****       */
 485:/usr/include/c++/7/bits/locale_facets.h ****       virtual char_type
 486:/usr/include/c++/7/bits/locale_facets.h ****       do_tolower(char_type __c) const = 0;
 487:/usr/include/c++/7/bits/locale_facets.h **** 
 488:/usr/include/c++/7/bits/locale_facets.h ****       /**
 489:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Convert array to lowercase.
 490:/usr/include/c++/7/bits/locale_facets.h ****        *
 491:/usr/include/c++/7/bits/locale_facets.h ****        *  This virtual function converts each char_type in the range [__lo,__hi)
 492:/usr/include/c++/7/bits/locale_facets.h ****        *  to lowercase if possible.  Other elements remain untouched.
 493:/usr/include/c++/7/bits/locale_facets.h ****        *
 494:/usr/include/c++/7/bits/locale_facets.h ****        *  do_tolower() is a hook for a derived facet to change the behavior of
 495:/usr/include/c++/7/bits/locale_facets.h ****        *  lowercasing.  do_tolower() must always return the same result for
 496:/usr/include/c++/7/bits/locale_facets.h ****        *  the same input.
 497:/usr/include/c++/7/bits/locale_facets.h ****        *
 498:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
 499:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 500:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
 501:/usr/include/c++/7/bits/locale_facets.h ****       */
 502:/usr/include/c++/7/bits/locale_facets.h ****       virtual const char_type*
 503:/usr/include/c++/7/bits/locale_facets.h ****       do_tolower(char_type* __lo, const char_type* __hi) const = 0;
 504:/usr/include/c++/7/bits/locale_facets.h **** 
 505:/usr/include/c++/7/bits/locale_facets.h ****       /**
 506:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Widen char
 507:/usr/include/c++/7/bits/locale_facets.h ****        *
 508:/usr/include/c++/7/bits/locale_facets.h ****        *  This virtual function converts the char to char_type using the
 509:/usr/include/c++/7/bits/locale_facets.h ****        *  simplest reasonable transformation.
 510:/usr/include/c++/7/bits/locale_facets.h ****        *
 511:/usr/include/c++/7/bits/locale_facets.h ****        *  do_widen() is a hook for a derived facet to change the behavior of
 512:/usr/include/c++/7/bits/locale_facets.h ****        *  widening.  do_widen() must always return the same result for the
 513:/usr/include/c++/7/bits/locale_facets.h ****        *  same input.
 514:/usr/include/c++/7/bits/locale_facets.h ****        *
 515:/usr/include/c++/7/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 516:/usr/include/c++/7/bits/locale_facets.h ****        *  codecvt for that.
 517:/usr/include/c++/7/bits/locale_facets.h ****        *
 518:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char to convert.
 519:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  The converted char_type
 520:/usr/include/c++/7/bits/locale_facets.h ****       */
 521:/usr/include/c++/7/bits/locale_facets.h ****       virtual char_type
 522:/usr/include/c++/7/bits/locale_facets.h ****       do_widen(char __c) const = 0;
 523:/usr/include/c++/7/bits/locale_facets.h **** 
 524:/usr/include/c++/7/bits/locale_facets.h ****       /**
 525:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Widen char array
 526:/usr/include/c++/7/bits/locale_facets.h ****        *
 527:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts each char in the input to char_type using the
 528:/usr/include/c++/7/bits/locale_facets.h ****        *  simplest reasonable transformation.
 529:/usr/include/c++/7/bits/locale_facets.h ****        *
 530:/usr/include/c++/7/bits/locale_facets.h ****        *  do_widen() is a hook for a derived facet to change the behavior of
 531:/usr/include/c++/7/bits/locale_facets.h ****        *  widening.  do_widen() must always return the same result for the
 532:/usr/include/c++/7/bits/locale_facets.h ****        *  same input.
 533:/usr/include/c++/7/bits/locale_facets.h ****        *
 534:/usr/include/c++/7/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 535:/usr/include/c++/7/bits/locale_facets.h ****        *  codecvt for that.
 536:/usr/include/c++/7/bits/locale_facets.h ****        *
 537:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start range.
 538:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 539:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __to  Pointer to the destination array.
 540:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
 541:/usr/include/c++/7/bits/locale_facets.h ****       */
 542:/usr/include/c++/7/bits/locale_facets.h ****       virtual const char*
 543:/usr/include/c++/7/bits/locale_facets.h ****       do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;
 544:/usr/include/c++/7/bits/locale_facets.h **** 
 545:/usr/include/c++/7/bits/locale_facets.h ****       /**
 546:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Narrow char_type to char
 547:/usr/include/c++/7/bits/locale_facets.h ****        *
 548:/usr/include/c++/7/bits/locale_facets.h ****        *  This virtual function converts the argument to char using the
 549:/usr/include/c++/7/bits/locale_facets.h ****        *  simplest reasonable transformation.  If the conversion fails, dfault
 550:/usr/include/c++/7/bits/locale_facets.h ****        *  is returned instead.
 551:/usr/include/c++/7/bits/locale_facets.h ****        *
 552:/usr/include/c++/7/bits/locale_facets.h ****        *  do_narrow() is a hook for a derived facet to change the behavior of
 553:/usr/include/c++/7/bits/locale_facets.h ****        *  narrowing.  do_narrow() must always return the same result for the
 554:/usr/include/c++/7/bits/locale_facets.h ****        *  same input.
 555:/usr/include/c++/7/bits/locale_facets.h ****        *
 556:/usr/include/c++/7/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 557:/usr/include/c++/7/bits/locale_facets.h ****        *  codecvt for that.
 558:/usr/include/c++/7/bits/locale_facets.h ****        *
 559:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char_type to convert.
 560:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __dfault  Char to return if conversion fails.
 561:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  The converted char.
 562:/usr/include/c++/7/bits/locale_facets.h ****       */
 563:/usr/include/c++/7/bits/locale_facets.h ****       virtual char
 564:/usr/include/c++/7/bits/locale_facets.h ****       do_narrow(char_type __c, char __dfault) const = 0;
 565:/usr/include/c++/7/bits/locale_facets.h **** 
 566:/usr/include/c++/7/bits/locale_facets.h ****       /**
 567:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Narrow char_type array to char
 568:/usr/include/c++/7/bits/locale_facets.h ****        *
 569:/usr/include/c++/7/bits/locale_facets.h ****        *  This virtual function converts each char_type in the range
 570:/usr/include/c++/7/bits/locale_facets.h ****        *  [__lo,__hi) to char using the simplest reasonable
 571:/usr/include/c++/7/bits/locale_facets.h ****        *  transformation and writes the results to the destination
 572:/usr/include/c++/7/bits/locale_facets.h ****        *  array.  For any element in the input that cannot be
 573:/usr/include/c++/7/bits/locale_facets.h ****        *  converted, @a __dfault is used instead.
 574:/usr/include/c++/7/bits/locale_facets.h ****        *
 575:/usr/include/c++/7/bits/locale_facets.h ****        *  do_narrow() is a hook for a derived facet to change the behavior of
 576:/usr/include/c++/7/bits/locale_facets.h ****        *  narrowing.  do_narrow() must always return the same result for the
 577:/usr/include/c++/7/bits/locale_facets.h ****        *  same input.
 578:/usr/include/c++/7/bits/locale_facets.h ****        *
 579:/usr/include/c++/7/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 580:/usr/include/c++/7/bits/locale_facets.h ****        *  codecvt for that.
 581:/usr/include/c++/7/bits/locale_facets.h ****        *
 582:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
 583:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 584:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __dfault  Char to use if conversion fails.
 585:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __to  Pointer to the destination array.
 586:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
 587:/usr/include/c++/7/bits/locale_facets.h ****       */
 588:/usr/include/c++/7/bits/locale_facets.h ****       virtual const char_type*
 589:/usr/include/c++/7/bits/locale_facets.h ****       do_narrow(const char_type* __lo, const char_type* __hi,
 590:/usr/include/c++/7/bits/locale_facets.h **** 		char __dfault, char* __to) const = 0;
 591:/usr/include/c++/7/bits/locale_facets.h ****     };
 592:/usr/include/c++/7/bits/locale_facets.h **** 
 593:/usr/include/c++/7/bits/locale_facets.h ****   /**
 594:/usr/include/c++/7/bits/locale_facets.h ****    *  @brief  Primary class template ctype facet.
 595:/usr/include/c++/7/bits/locale_facets.h ****    *  @ingroup locales
 596:/usr/include/c++/7/bits/locale_facets.h ****    *
 597:/usr/include/c++/7/bits/locale_facets.h ****    *  This template class defines classification and conversion functions for
 598:/usr/include/c++/7/bits/locale_facets.h ****    *  character sets.  It wraps cctype functionality.  Ctype gets used by
 599:/usr/include/c++/7/bits/locale_facets.h ****    *  streams for many I/O operations.
 600:/usr/include/c++/7/bits/locale_facets.h ****    *
 601:/usr/include/c++/7/bits/locale_facets.h ****    *  This template provides the protected virtual functions the developer
 602:/usr/include/c++/7/bits/locale_facets.h ****    *  will have to replace in a derived class or specialization to make a
 603:/usr/include/c++/7/bits/locale_facets.h ****    *  working facet.  The public functions that access them are defined in
 604:/usr/include/c++/7/bits/locale_facets.h ****    *  __ctype_abstract_base, to allow for implementation flexibility.  See
 605:/usr/include/c++/7/bits/locale_facets.h ****    *  ctype<wchar_t> for an example.  The functions are documented in
 606:/usr/include/c++/7/bits/locale_facets.h ****    *  __ctype_abstract_base.
 607:/usr/include/c++/7/bits/locale_facets.h ****    *
 608:/usr/include/c++/7/bits/locale_facets.h ****    *  Note: implementations are provided for all the protected virtual
 609:/usr/include/c++/7/bits/locale_facets.h ****    *  functions, but will likely not be useful.
 610:/usr/include/c++/7/bits/locale_facets.h ****   */
 611:/usr/include/c++/7/bits/locale_facets.h ****   template<typename _CharT>
 612:/usr/include/c++/7/bits/locale_facets.h ****     class ctype : public __ctype_abstract_base<_CharT>
 613:/usr/include/c++/7/bits/locale_facets.h ****     {
 614:/usr/include/c++/7/bits/locale_facets.h ****     public:
 615:/usr/include/c++/7/bits/locale_facets.h ****       // Types:
 616:/usr/include/c++/7/bits/locale_facets.h ****       typedef _CharT			char_type;
 617:/usr/include/c++/7/bits/locale_facets.h ****       typedef typename __ctype_abstract_base<_CharT>::mask mask;
 618:/usr/include/c++/7/bits/locale_facets.h **** 
 619:/usr/include/c++/7/bits/locale_facets.h ****       /// The facet id for ctype<char_type>
 620:/usr/include/c++/7/bits/locale_facets.h ****       static locale::id			id;
 621:/usr/include/c++/7/bits/locale_facets.h **** 
 622:/usr/include/c++/7/bits/locale_facets.h ****       explicit
 623:/usr/include/c++/7/bits/locale_facets.h ****       ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }
 624:/usr/include/c++/7/bits/locale_facets.h **** 
 625:/usr/include/c++/7/bits/locale_facets.h ****    protected:
 626:/usr/include/c++/7/bits/locale_facets.h ****       virtual
 627:/usr/include/c++/7/bits/locale_facets.h ****       ~ctype();
 628:/usr/include/c++/7/bits/locale_facets.h **** 
 629:/usr/include/c++/7/bits/locale_facets.h ****       virtual bool
 630:/usr/include/c++/7/bits/locale_facets.h ****       do_is(mask __m, char_type __c) const;
 631:/usr/include/c++/7/bits/locale_facets.h **** 
 632:/usr/include/c++/7/bits/locale_facets.h ****       virtual const char_type*
 633:/usr/include/c++/7/bits/locale_facets.h ****       do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
 634:/usr/include/c++/7/bits/locale_facets.h **** 
 635:/usr/include/c++/7/bits/locale_facets.h ****       virtual const char_type*
 636:/usr/include/c++/7/bits/locale_facets.h ****       do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
 637:/usr/include/c++/7/bits/locale_facets.h **** 
 638:/usr/include/c++/7/bits/locale_facets.h ****       virtual const char_type*
 639:/usr/include/c++/7/bits/locale_facets.h ****       do_scan_not(mask __m, const char_type* __lo,
 640:/usr/include/c++/7/bits/locale_facets.h **** 		  const char_type* __hi) const;
 641:/usr/include/c++/7/bits/locale_facets.h **** 
 642:/usr/include/c++/7/bits/locale_facets.h ****       virtual char_type
 643:/usr/include/c++/7/bits/locale_facets.h ****       do_toupper(char_type __c) const;
 644:/usr/include/c++/7/bits/locale_facets.h **** 
 645:/usr/include/c++/7/bits/locale_facets.h ****       virtual const char_type*
 646:/usr/include/c++/7/bits/locale_facets.h ****       do_toupper(char_type* __lo, const char_type* __hi) const;
 647:/usr/include/c++/7/bits/locale_facets.h **** 
 648:/usr/include/c++/7/bits/locale_facets.h ****       virtual char_type
 649:/usr/include/c++/7/bits/locale_facets.h ****       do_tolower(char_type __c) const;
 650:/usr/include/c++/7/bits/locale_facets.h **** 
 651:/usr/include/c++/7/bits/locale_facets.h ****       virtual const char_type*
 652:/usr/include/c++/7/bits/locale_facets.h ****       do_tolower(char_type* __lo, const char_type* __hi) const;
 653:/usr/include/c++/7/bits/locale_facets.h **** 
 654:/usr/include/c++/7/bits/locale_facets.h ****       virtual char_type
 655:/usr/include/c++/7/bits/locale_facets.h ****       do_widen(char __c) const;
 656:/usr/include/c++/7/bits/locale_facets.h **** 
 657:/usr/include/c++/7/bits/locale_facets.h ****       virtual const char*
 658:/usr/include/c++/7/bits/locale_facets.h ****       do_widen(const char* __lo, const char* __hi, char_type* __dest) const;
 659:/usr/include/c++/7/bits/locale_facets.h **** 
 660:/usr/include/c++/7/bits/locale_facets.h ****       virtual char
 661:/usr/include/c++/7/bits/locale_facets.h ****       do_narrow(char_type, char __dfault) const;
 662:/usr/include/c++/7/bits/locale_facets.h **** 
 663:/usr/include/c++/7/bits/locale_facets.h ****       virtual const char_type*
 664:/usr/include/c++/7/bits/locale_facets.h ****       do_narrow(const char_type* __lo, const char_type* __hi,
 665:/usr/include/c++/7/bits/locale_facets.h **** 		char __dfault, char* __to) const;
 666:/usr/include/c++/7/bits/locale_facets.h ****     };
 667:/usr/include/c++/7/bits/locale_facets.h **** 
 668:/usr/include/c++/7/bits/locale_facets.h ****   template<typename _CharT>
 669:/usr/include/c++/7/bits/locale_facets.h ****     locale::id ctype<_CharT>::id;
 670:/usr/include/c++/7/bits/locale_facets.h **** 
 671:/usr/include/c++/7/bits/locale_facets.h ****   /**
 672:/usr/include/c++/7/bits/locale_facets.h ****    *  @brief  The ctype<char> specialization.
 673:/usr/include/c++/7/bits/locale_facets.h ****    *  @ingroup locales
 674:/usr/include/c++/7/bits/locale_facets.h ****    *
 675:/usr/include/c++/7/bits/locale_facets.h ****    *  This class defines classification and conversion functions for
 676:/usr/include/c++/7/bits/locale_facets.h ****    *  the char type.  It gets used by char streams for many I/O
 677:/usr/include/c++/7/bits/locale_facets.h ****    *  operations.  The char specialization provides a number of
 678:/usr/include/c++/7/bits/locale_facets.h ****    *  optimizations as well.
 679:/usr/include/c++/7/bits/locale_facets.h ****   */
 680:/usr/include/c++/7/bits/locale_facets.h ****   template<>
 681:/usr/include/c++/7/bits/locale_facets.h ****     class ctype<char> : public locale::facet, public ctype_base
 682:/usr/include/c++/7/bits/locale_facets.h ****     {
 683:/usr/include/c++/7/bits/locale_facets.h ****     public:
 684:/usr/include/c++/7/bits/locale_facets.h ****       // Types:
 685:/usr/include/c++/7/bits/locale_facets.h ****       /// Typedef for the template parameter char.
 686:/usr/include/c++/7/bits/locale_facets.h ****       typedef char		char_type;
 687:/usr/include/c++/7/bits/locale_facets.h **** 
 688:/usr/include/c++/7/bits/locale_facets.h ****     protected:
 689:/usr/include/c++/7/bits/locale_facets.h ****       // Data Members:
 690:/usr/include/c++/7/bits/locale_facets.h ****       __c_locale		_M_c_locale_ctype;
 691:/usr/include/c++/7/bits/locale_facets.h ****       bool			_M_del;
 692:/usr/include/c++/7/bits/locale_facets.h ****       __to_type			_M_toupper;
 693:/usr/include/c++/7/bits/locale_facets.h ****       __to_type			_M_tolower;
 694:/usr/include/c++/7/bits/locale_facets.h ****       const mask*		_M_table;
 695:/usr/include/c++/7/bits/locale_facets.h ****       mutable char		_M_widen_ok;
 696:/usr/include/c++/7/bits/locale_facets.h ****       mutable char		_M_widen[1 + static_cast<unsigned char>(-1)];
 697:/usr/include/c++/7/bits/locale_facets.h ****       mutable char		_M_narrow[1 + static_cast<unsigned char>(-1)];
 698:/usr/include/c++/7/bits/locale_facets.h ****       mutable char		_M_narrow_ok;	// 0 uninitialized, 1 init,
 699:/usr/include/c++/7/bits/locale_facets.h **** 						// 2 memcpy can't be used
 700:/usr/include/c++/7/bits/locale_facets.h **** 
 701:/usr/include/c++/7/bits/locale_facets.h ****     public:
 702:/usr/include/c++/7/bits/locale_facets.h ****       /// The facet id for ctype<char>
 703:/usr/include/c++/7/bits/locale_facets.h ****       static locale::id        id;
 704:/usr/include/c++/7/bits/locale_facets.h ****       /// The size of the mask table.  It is SCHAR_MAX + 1.
 705:/usr/include/c++/7/bits/locale_facets.h ****       static const size_t      table_size = 1 + static_cast<unsigned char>(-1);
 706:/usr/include/c++/7/bits/locale_facets.h **** 
 707:/usr/include/c++/7/bits/locale_facets.h ****       /**
 708:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Constructor performs initialization.
 709:/usr/include/c++/7/bits/locale_facets.h ****        *
 710:/usr/include/c++/7/bits/locale_facets.h ****        *  This is the constructor provided by the standard.
 711:/usr/include/c++/7/bits/locale_facets.h ****        *
 712:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __table If non-zero, table is used as the per-char mask.
 713:/usr/include/c++/7/bits/locale_facets.h ****        *               Else classic_table() is used.
 714:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __del   If true, passes ownership of table to this facet.
 715:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __refs  Passed to the base facet class.
 716:/usr/include/c++/7/bits/locale_facets.h ****       */
 717:/usr/include/c++/7/bits/locale_facets.h ****       explicit
 718:/usr/include/c++/7/bits/locale_facets.h ****       ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
 719:/usr/include/c++/7/bits/locale_facets.h **** 
 720:/usr/include/c++/7/bits/locale_facets.h ****       /**
 721:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Constructor performs static initialization.
 722:/usr/include/c++/7/bits/locale_facets.h ****        *
 723:/usr/include/c++/7/bits/locale_facets.h ****        *  This constructor is used to construct the initial C locale facet.
 724:/usr/include/c++/7/bits/locale_facets.h ****        *
 725:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __cloc  Handle to C locale data.
 726:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __table If non-zero, table is used as the per-char mask.
 727:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __del   If true, passes ownership of table to this facet.
 728:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __refs  Passed to the base facet class.
 729:/usr/include/c++/7/bits/locale_facets.h ****       */
 730:/usr/include/c++/7/bits/locale_facets.h ****       explicit
 731:/usr/include/c++/7/bits/locale_facets.h ****       ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
 732:/usr/include/c++/7/bits/locale_facets.h **** 	    size_t __refs = 0);
 733:/usr/include/c++/7/bits/locale_facets.h **** 
 734:/usr/include/c++/7/bits/locale_facets.h ****       /**
 735:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Test char classification.
 736:/usr/include/c++/7/bits/locale_facets.h ****        *
 737:/usr/include/c++/7/bits/locale_facets.h ****        *  This function compares the mask table[c] to @a __m.
 738:/usr/include/c++/7/bits/locale_facets.h ****        *
 739:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char to compare the mask of.
 740:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __m  The mask to compare against.
 741:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  True if __m & table[__c] is true, false otherwise.
 742:/usr/include/c++/7/bits/locale_facets.h ****       */
 743:/usr/include/c++/7/bits/locale_facets.h ****       inline bool
 744:/usr/include/c++/7/bits/locale_facets.h ****       is(mask __m, char __c) const;
 745:/usr/include/c++/7/bits/locale_facets.h **** 
 746:/usr/include/c++/7/bits/locale_facets.h ****       /**
 747:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Return a mask array.
 748:/usr/include/c++/7/bits/locale_facets.h ****        *
 749:/usr/include/c++/7/bits/locale_facets.h ****        *  This function finds the mask for each char in the range [lo, hi) and
 750:/usr/include/c++/7/bits/locale_facets.h ****        *  successively writes it to vec.  vec must have as many elements as
 751:/usr/include/c++/7/bits/locale_facets.h ****        *  the char array.
 752:/usr/include/c++/7/bits/locale_facets.h ****        *
 753:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
 754:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 755:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __vec  Pointer to an array of mask storage.
 756:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
 757:/usr/include/c++/7/bits/locale_facets.h ****       */
 758:/usr/include/c++/7/bits/locale_facets.h ****       inline const char*
 759:/usr/include/c++/7/bits/locale_facets.h ****       is(const char* __lo, const char* __hi, mask* __vec) const;
 760:/usr/include/c++/7/bits/locale_facets.h **** 
 761:/usr/include/c++/7/bits/locale_facets.h ****       /**
 762:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Find char matching a mask
 763:/usr/include/c++/7/bits/locale_facets.h ****        *
 764:/usr/include/c++/7/bits/locale_facets.h ****        *  This function searches for and returns the first char in [lo,hi) for
 765:/usr/include/c++/7/bits/locale_facets.h ****        *  which is(m,char) is true.
 766:/usr/include/c++/7/bits/locale_facets.h ****        *
 767:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __m  The mask to compare against.
 768:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
 769:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 770:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  Pointer to a matching char if found, else @a __hi.
 771:/usr/include/c++/7/bits/locale_facets.h ****       */
 772:/usr/include/c++/7/bits/locale_facets.h ****       inline const char*
 773:/usr/include/c++/7/bits/locale_facets.h ****       scan_is(mask __m, const char* __lo, const char* __hi) const;
 774:/usr/include/c++/7/bits/locale_facets.h **** 
 775:/usr/include/c++/7/bits/locale_facets.h ****       /**
 776:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Find char not matching a mask
 777:/usr/include/c++/7/bits/locale_facets.h ****        *
 778:/usr/include/c++/7/bits/locale_facets.h ****        *  This function searches for and returns a pointer to the first char
 779:/usr/include/c++/7/bits/locale_facets.h ****        *  in [__lo,__hi) for which is(m,char) is false.
 780:/usr/include/c++/7/bits/locale_facets.h ****        *
 781:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __m  The mask to compare against.
 782:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
 783:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 784:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  Pointer to a non-matching char if found, else @a __hi.
 785:/usr/include/c++/7/bits/locale_facets.h ****       */
 786:/usr/include/c++/7/bits/locale_facets.h ****       inline const char*
 787:/usr/include/c++/7/bits/locale_facets.h ****       scan_not(mask __m, const char* __lo, const char* __hi) const;
 788:/usr/include/c++/7/bits/locale_facets.h **** 
 789:/usr/include/c++/7/bits/locale_facets.h ****       /**
 790:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Convert to uppercase.
 791:/usr/include/c++/7/bits/locale_facets.h ****        *
 792:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts the char argument to uppercase if possible.
 793:/usr/include/c++/7/bits/locale_facets.h ****        *  If not possible (for example, '2'), returns the argument.
 794:/usr/include/c++/7/bits/locale_facets.h ****        *
 795:/usr/include/c++/7/bits/locale_facets.h ****        *  toupper() acts as if it returns ctype<char>::do_toupper(c).
 796:/usr/include/c++/7/bits/locale_facets.h ****        *  do_toupper() must always return the same result for the same input.
 797:/usr/include/c++/7/bits/locale_facets.h ****        *
 798:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char to convert.
 799:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  The uppercase char if convertible, else @a __c.
 800:/usr/include/c++/7/bits/locale_facets.h ****       */
 801:/usr/include/c++/7/bits/locale_facets.h ****       char_type
 802:/usr/include/c++/7/bits/locale_facets.h ****       toupper(char_type __c) const
 803:/usr/include/c++/7/bits/locale_facets.h ****       { return this->do_toupper(__c); }
 804:/usr/include/c++/7/bits/locale_facets.h **** 
 805:/usr/include/c++/7/bits/locale_facets.h ****       /**
 806:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Convert array to uppercase.
 807:/usr/include/c++/7/bits/locale_facets.h ****        *
 808:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts each char in the range [__lo,__hi) to uppercase
 809:/usr/include/c++/7/bits/locale_facets.h ****        *  if possible.  Other chars remain untouched.
 810:/usr/include/c++/7/bits/locale_facets.h ****        *
 811:/usr/include/c++/7/bits/locale_facets.h ****        *  toupper() acts as if it returns ctype<char>:: do_toupper(__lo, __hi).
 812:/usr/include/c++/7/bits/locale_facets.h ****        *  do_toupper() must always return the same result for the same input.
 813:/usr/include/c++/7/bits/locale_facets.h ****        *
 814:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to first char in range.
 815:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 816:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
 817:/usr/include/c++/7/bits/locale_facets.h ****       */
 818:/usr/include/c++/7/bits/locale_facets.h ****       const char_type*
 819:/usr/include/c++/7/bits/locale_facets.h ****       toupper(char_type *__lo, const char_type* __hi) const
 820:/usr/include/c++/7/bits/locale_facets.h ****       { return this->do_toupper(__lo, __hi); }
 821:/usr/include/c++/7/bits/locale_facets.h **** 
 822:/usr/include/c++/7/bits/locale_facets.h ****       /**
 823:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Convert to lowercase.
 824:/usr/include/c++/7/bits/locale_facets.h ****        *
 825:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts the char argument to lowercase if possible.
 826:/usr/include/c++/7/bits/locale_facets.h ****        *  If not possible (for example, '2'), returns the argument.
 827:/usr/include/c++/7/bits/locale_facets.h ****        *
 828:/usr/include/c++/7/bits/locale_facets.h ****        *  tolower() acts as if it returns ctype<char>::do_tolower(__c).
 829:/usr/include/c++/7/bits/locale_facets.h ****        *  do_tolower() must always return the same result for the same input.
 830:/usr/include/c++/7/bits/locale_facets.h ****        *
 831:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char to convert.
 832:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  The lowercase char if convertible, else @a __c.
 833:/usr/include/c++/7/bits/locale_facets.h ****       */
 834:/usr/include/c++/7/bits/locale_facets.h ****       char_type
 835:/usr/include/c++/7/bits/locale_facets.h ****       tolower(char_type __c) const
 836:/usr/include/c++/7/bits/locale_facets.h ****       { return this->do_tolower(__c); }
 837:/usr/include/c++/7/bits/locale_facets.h **** 
 838:/usr/include/c++/7/bits/locale_facets.h ****       /**
 839:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Convert array to lowercase.
 840:/usr/include/c++/7/bits/locale_facets.h ****        *
 841:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts each char in the range [lo,hi) to lowercase
 842:/usr/include/c++/7/bits/locale_facets.h ****        *  if possible.  Other chars remain untouched.
 843:/usr/include/c++/7/bits/locale_facets.h ****        *
 844:/usr/include/c++/7/bits/locale_facets.h ****        *  tolower() acts as if it returns ctype<char>:: do_tolower(__lo, __hi).
 845:/usr/include/c++/7/bits/locale_facets.h ****        *  do_tolower() must always return the same result for the same input.
 846:/usr/include/c++/7/bits/locale_facets.h ****        *
 847:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to first char in range.
 848:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 849:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
 850:/usr/include/c++/7/bits/locale_facets.h ****       */
 851:/usr/include/c++/7/bits/locale_facets.h ****       const char_type*
 852:/usr/include/c++/7/bits/locale_facets.h ****       tolower(char_type* __lo, const char_type* __hi) const
 853:/usr/include/c++/7/bits/locale_facets.h ****       { return this->do_tolower(__lo, __hi); }
 854:/usr/include/c++/7/bits/locale_facets.h **** 
 855:/usr/include/c++/7/bits/locale_facets.h ****       /**
 856:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Widen char
 857:/usr/include/c++/7/bits/locale_facets.h ****        *
 858:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts the char to char_type using the simplest
 859:/usr/include/c++/7/bits/locale_facets.h ****        *  reasonable transformation.  For an underived ctype<char> facet, the
 860:/usr/include/c++/7/bits/locale_facets.h ****        *  argument will be returned unchanged.
 861:/usr/include/c++/7/bits/locale_facets.h ****        *
 862:/usr/include/c++/7/bits/locale_facets.h ****        *  This function works as if it returns ctype<char>::do_widen(c).
 863:/usr/include/c++/7/bits/locale_facets.h ****        *  do_widen() must always return the same result for the same input.
 864:/usr/include/c++/7/bits/locale_facets.h ****        *
 865:/usr/include/c++/7/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 866:/usr/include/c++/7/bits/locale_facets.h ****        *  codecvt for that.
 867:/usr/include/c++/7/bits/locale_facets.h ****        *
 868:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char to convert.
 869:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  The converted character.
 870:/usr/include/c++/7/bits/locale_facets.h ****       */
 871:/usr/include/c++/7/bits/locale_facets.h ****       char_type
 872:/usr/include/c++/7/bits/locale_facets.h ****       widen(char __c) const
 873:/usr/include/c++/7/bits/locale_facets.h ****       {
 874:/usr/include/c++/7/bits/locale_facets.h **** 	if (_M_widen_ok)
 875:/usr/include/c++/7/bits/locale_facets.h **** 	  return _M_widen[static_cast<unsigned char>(__c)];
 876:/usr/include/c++/7/bits/locale_facets.h **** 	this->_M_widen_init();
 877:/usr/include/c++/7/bits/locale_facets.h **** 	return this->do_widen(__c);
 878:/usr/include/c++/7/bits/locale_facets.h ****       }
 879:/usr/include/c++/7/bits/locale_facets.h **** 
 880:/usr/include/c++/7/bits/locale_facets.h ****       /**
 881:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Widen char array
 882:/usr/include/c++/7/bits/locale_facets.h ****        *
 883:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts each char in the input to char using the
 884:/usr/include/c++/7/bits/locale_facets.h ****        *  simplest reasonable transformation.  For an underived ctype<char>
 885:/usr/include/c++/7/bits/locale_facets.h ****        *  facet, the argument will be copied unchanged.
 886:/usr/include/c++/7/bits/locale_facets.h ****        *
 887:/usr/include/c++/7/bits/locale_facets.h ****        *  This function works as if it returns ctype<char>::do_widen(c).
 888:/usr/include/c++/7/bits/locale_facets.h ****        *  do_widen() must always return the same result for the same input.
 889:/usr/include/c++/7/bits/locale_facets.h ****        *
 890:/usr/include/c++/7/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 891:/usr/include/c++/7/bits/locale_facets.h ****        *  codecvt for that.
 892:/usr/include/c++/7/bits/locale_facets.h ****        *
 893:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to first char in range.
 894:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 895:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __to  Pointer to the destination array.
 896:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
 897:/usr/include/c++/7/bits/locale_facets.h ****       */
 898:/usr/include/c++/7/bits/locale_facets.h ****       const char*
 899:/usr/include/c++/7/bits/locale_facets.h ****       widen(const char* __lo, const char* __hi, char_type* __to) const
 900:/usr/include/c++/7/bits/locale_facets.h ****       {
 901:/usr/include/c++/7/bits/locale_facets.h **** 	if (_M_widen_ok == 1)
 902:/usr/include/c++/7/bits/locale_facets.h **** 	  {
 903:/usr/include/c++/7/bits/locale_facets.h **** 	    __builtin_memcpy(__to, __lo, __hi - __lo);
 904:/usr/include/c++/7/bits/locale_facets.h **** 	    return __hi;
 905:/usr/include/c++/7/bits/locale_facets.h **** 	  }
 906:/usr/include/c++/7/bits/locale_facets.h **** 	if (!_M_widen_ok)
 907:/usr/include/c++/7/bits/locale_facets.h **** 	  _M_widen_init();
 908:/usr/include/c++/7/bits/locale_facets.h **** 	return this->do_widen(__lo, __hi, __to);
 909:/usr/include/c++/7/bits/locale_facets.h ****       }
 910:/usr/include/c++/7/bits/locale_facets.h **** 
 911:/usr/include/c++/7/bits/locale_facets.h ****       /**
 912:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Narrow char
 913:/usr/include/c++/7/bits/locale_facets.h ****        *
 914:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts the char to char using the simplest
 915:/usr/include/c++/7/bits/locale_facets.h ****        *  reasonable transformation.  If the conversion fails, dfault is
 916:/usr/include/c++/7/bits/locale_facets.h ****        *  returned instead.  For an underived ctype<char> facet, @a c
 917:/usr/include/c++/7/bits/locale_facets.h ****        *  will be returned unchanged.
 918:/usr/include/c++/7/bits/locale_facets.h ****        *
 919:/usr/include/c++/7/bits/locale_facets.h ****        *  This function works as if it returns ctype<char>::do_narrow(c).
 920:/usr/include/c++/7/bits/locale_facets.h ****        *  do_narrow() must always return the same result for the same input.
 921:/usr/include/c++/7/bits/locale_facets.h ****        *
 922:/usr/include/c++/7/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 923:/usr/include/c++/7/bits/locale_facets.h ****        *  codecvt for that.
 924:/usr/include/c++/7/bits/locale_facets.h ****        *
 925:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char to convert.
 926:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __dfault  Char to return if conversion fails.
 927:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  The converted character.
 928:/usr/include/c++/7/bits/locale_facets.h ****       */
 929:/usr/include/c++/7/bits/locale_facets.h ****       char
 930:/usr/include/c++/7/bits/locale_facets.h ****       narrow(char_type __c, char __dfault) const
 931:/usr/include/c++/7/bits/locale_facets.h ****       {
 932:/usr/include/c++/7/bits/locale_facets.h **** 	if (_M_narrow[static_cast<unsigned char>(__c)])
 933:/usr/include/c++/7/bits/locale_facets.h **** 	  return _M_narrow[static_cast<unsigned char>(__c)];
 934:/usr/include/c++/7/bits/locale_facets.h **** 	const char __t = do_narrow(__c, __dfault);
 935:/usr/include/c++/7/bits/locale_facets.h **** 	if (__t != __dfault)
 936:/usr/include/c++/7/bits/locale_facets.h **** 	  _M_narrow[static_cast<unsigned char>(__c)] = __t;
 937:/usr/include/c++/7/bits/locale_facets.h **** 	return __t;
 938:/usr/include/c++/7/bits/locale_facets.h ****       }
 939:/usr/include/c++/7/bits/locale_facets.h **** 
 940:/usr/include/c++/7/bits/locale_facets.h ****       /**
 941:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Narrow char array
 942:/usr/include/c++/7/bits/locale_facets.h ****        *
 943:/usr/include/c++/7/bits/locale_facets.h ****        *  This function converts each char in the input to char using the
 944:/usr/include/c++/7/bits/locale_facets.h ****        *  simplest reasonable transformation and writes the results to the
 945:/usr/include/c++/7/bits/locale_facets.h ****        *  destination array.  For any char in the input that cannot be
 946:/usr/include/c++/7/bits/locale_facets.h ****        *  converted, @a dfault is used instead.  For an underived ctype<char>
 947:/usr/include/c++/7/bits/locale_facets.h ****        *  facet, the argument will be copied unchanged.
 948:/usr/include/c++/7/bits/locale_facets.h ****        *
 949:/usr/include/c++/7/bits/locale_facets.h ****        *  This function works as if it returns ctype<char>::do_narrow(lo, hi,
 950:/usr/include/c++/7/bits/locale_facets.h ****        *  dfault, to).  do_narrow() must always return the same result for the
 951:/usr/include/c++/7/bits/locale_facets.h ****        *  same input.
 952:/usr/include/c++/7/bits/locale_facets.h ****        *
 953:/usr/include/c++/7/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
 954:/usr/include/c++/7/bits/locale_facets.h ****        *  codecvt for that.
 955:/usr/include/c++/7/bits/locale_facets.h ****        *
 956:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
 957:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
 958:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __dfault  Char to use if conversion fails.
 959:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __to  Pointer to the destination array.
 960:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
 961:/usr/include/c++/7/bits/locale_facets.h ****       */
 962:/usr/include/c++/7/bits/locale_facets.h ****       const char_type*
 963:/usr/include/c++/7/bits/locale_facets.h ****       narrow(const char_type* __lo, const char_type* __hi,
 964:/usr/include/c++/7/bits/locale_facets.h **** 	     char __dfault, char* __to) const
 965:/usr/include/c++/7/bits/locale_facets.h ****       {
 966:/usr/include/c++/7/bits/locale_facets.h **** 	if (__builtin_expect(_M_narrow_ok == 1, true))
 967:/usr/include/c++/7/bits/locale_facets.h **** 	  {
 968:/usr/include/c++/7/bits/locale_facets.h **** 	    __builtin_memcpy(__to, __lo, __hi - __lo);
 969:/usr/include/c++/7/bits/locale_facets.h **** 	    return __hi;
 970:/usr/include/c++/7/bits/locale_facets.h **** 	  }
 971:/usr/include/c++/7/bits/locale_facets.h **** 	if (!_M_narrow_ok)
 972:/usr/include/c++/7/bits/locale_facets.h **** 	  _M_narrow_init();
 973:/usr/include/c++/7/bits/locale_facets.h **** 	return this->do_narrow(__lo, __hi, __dfault, __to);
 974:/usr/include/c++/7/bits/locale_facets.h ****       }
 975:/usr/include/c++/7/bits/locale_facets.h **** 
 976:/usr/include/c++/7/bits/locale_facets.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 977:/usr/include/c++/7/bits/locale_facets.h ****       // DR 695. ctype<char>::classic_table() not accessible.
 978:/usr/include/c++/7/bits/locale_facets.h ****       /// Returns a pointer to the mask table provided to the constructor, or
 979:/usr/include/c++/7/bits/locale_facets.h ****       /// the default from classic_table() if none was provided.
 980:/usr/include/c++/7/bits/locale_facets.h ****       const mask*
 981:/usr/include/c++/7/bits/locale_facets.h ****       table() const throw()
 982:/usr/include/c++/7/bits/locale_facets.h ****       { return _M_table; }
 983:/usr/include/c++/7/bits/locale_facets.h **** 
 984:/usr/include/c++/7/bits/locale_facets.h ****       /// Returns a pointer to the C locale mask table.
 985:/usr/include/c++/7/bits/locale_facets.h ****       static const mask*
 986:/usr/include/c++/7/bits/locale_facets.h ****       classic_table() throw();
 987:/usr/include/c++/7/bits/locale_facets.h ****     protected:
 988:/usr/include/c++/7/bits/locale_facets.h **** 
 989:/usr/include/c++/7/bits/locale_facets.h ****       /**
 990:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Destructor.
 991:/usr/include/c++/7/bits/locale_facets.h ****        *
 992:/usr/include/c++/7/bits/locale_facets.h ****        *  This function deletes table() if @a del was true in the
 993:/usr/include/c++/7/bits/locale_facets.h ****        *  constructor.
 994:/usr/include/c++/7/bits/locale_facets.h ****       */
 995:/usr/include/c++/7/bits/locale_facets.h ****       virtual
 996:/usr/include/c++/7/bits/locale_facets.h ****       ~ctype();
 997:/usr/include/c++/7/bits/locale_facets.h **** 
 998:/usr/include/c++/7/bits/locale_facets.h ****       /**
 999:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Convert to uppercase.
1000:/usr/include/c++/7/bits/locale_facets.h ****        *
1001:/usr/include/c++/7/bits/locale_facets.h ****        *  This virtual function converts the char argument to uppercase if
1002:/usr/include/c++/7/bits/locale_facets.h ****        *  possible.  If not possible (for example, '2'), returns the argument.
1003:/usr/include/c++/7/bits/locale_facets.h ****        *
1004:/usr/include/c++/7/bits/locale_facets.h ****        *  do_toupper() is a hook for a derived facet to change the behavior of
1005:/usr/include/c++/7/bits/locale_facets.h ****        *  uppercasing.  do_toupper() must always return the same result for
1006:/usr/include/c++/7/bits/locale_facets.h ****        *  the same input.
1007:/usr/include/c++/7/bits/locale_facets.h ****        *
1008:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char to convert.
1009:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  The uppercase char if convertible, else @a __c.
1010:/usr/include/c++/7/bits/locale_facets.h ****       */
1011:/usr/include/c++/7/bits/locale_facets.h ****       virtual char_type
1012:/usr/include/c++/7/bits/locale_facets.h ****       do_toupper(char_type __c) const;
1013:/usr/include/c++/7/bits/locale_facets.h **** 
1014:/usr/include/c++/7/bits/locale_facets.h ****       /**
1015:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Convert array to uppercase.
1016:/usr/include/c++/7/bits/locale_facets.h ****        *
1017:/usr/include/c++/7/bits/locale_facets.h ****        *  This virtual function converts each char in the range [lo,hi) to
1018:/usr/include/c++/7/bits/locale_facets.h ****        *  uppercase if possible.  Other chars remain untouched.
1019:/usr/include/c++/7/bits/locale_facets.h ****        *
1020:/usr/include/c++/7/bits/locale_facets.h ****        *  do_toupper() is a hook for a derived facet to change the behavior of
1021:/usr/include/c++/7/bits/locale_facets.h ****        *  uppercasing.  do_toupper() must always return the same result for
1022:/usr/include/c++/7/bits/locale_facets.h ****        *  the same input.
1023:/usr/include/c++/7/bits/locale_facets.h ****        *
1024:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to start of range.
1025:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
1026:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
1027:/usr/include/c++/7/bits/locale_facets.h ****       */
1028:/usr/include/c++/7/bits/locale_facets.h ****       virtual const char_type*
1029:/usr/include/c++/7/bits/locale_facets.h ****       do_toupper(char_type* __lo, const char_type* __hi) const;
1030:/usr/include/c++/7/bits/locale_facets.h **** 
1031:/usr/include/c++/7/bits/locale_facets.h ****       /**
1032:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Convert to lowercase.
1033:/usr/include/c++/7/bits/locale_facets.h ****        *
1034:/usr/include/c++/7/bits/locale_facets.h ****        *  This virtual function converts the char argument to lowercase if
1035:/usr/include/c++/7/bits/locale_facets.h ****        *  possible.  If not possible (for example, '2'), returns the argument.
1036:/usr/include/c++/7/bits/locale_facets.h ****        *
1037:/usr/include/c++/7/bits/locale_facets.h ****        *  do_tolower() is a hook for a derived facet to change the behavior of
1038:/usr/include/c++/7/bits/locale_facets.h ****        *  lowercasing.  do_tolower() must always return the same result for
1039:/usr/include/c++/7/bits/locale_facets.h ****        *  the same input.
1040:/usr/include/c++/7/bits/locale_facets.h ****        *
1041:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char to convert.
1042:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  The lowercase char if convertible, else @a __c.
1043:/usr/include/c++/7/bits/locale_facets.h ****       */
1044:/usr/include/c++/7/bits/locale_facets.h ****       virtual char_type
1045:/usr/include/c++/7/bits/locale_facets.h ****       do_tolower(char_type __c) const;
1046:/usr/include/c++/7/bits/locale_facets.h **** 
1047:/usr/include/c++/7/bits/locale_facets.h ****       /**
1048:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Convert array to lowercase.
1049:/usr/include/c++/7/bits/locale_facets.h ****        *
1050:/usr/include/c++/7/bits/locale_facets.h ****        *  This virtual function converts each char in the range [lo,hi) to
1051:/usr/include/c++/7/bits/locale_facets.h ****        *  lowercase if possible.  Other chars remain untouched.
1052:/usr/include/c++/7/bits/locale_facets.h ****        *
1053:/usr/include/c++/7/bits/locale_facets.h ****        *  do_tolower() is a hook for a derived facet to change the behavior of
1054:/usr/include/c++/7/bits/locale_facets.h ****        *  lowercasing.  do_tolower() must always return the same result for
1055:/usr/include/c++/7/bits/locale_facets.h ****        *  the same input.
1056:/usr/include/c++/7/bits/locale_facets.h ****        *
1057:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __lo  Pointer to first char in range.
1058:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __hi  Pointer to end of range.
1059:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  @a __hi.
1060:/usr/include/c++/7/bits/locale_facets.h ****       */
1061:/usr/include/c++/7/bits/locale_facets.h ****       virtual const char_type*
1062:/usr/include/c++/7/bits/locale_facets.h ****       do_tolower(char_type* __lo, const char_type* __hi) const;
1063:/usr/include/c++/7/bits/locale_facets.h **** 
1064:/usr/include/c++/7/bits/locale_facets.h ****       /**
1065:/usr/include/c++/7/bits/locale_facets.h ****        *  @brief  Widen char
1066:/usr/include/c++/7/bits/locale_facets.h ****        *
1067:/usr/include/c++/7/bits/locale_facets.h ****        *  This virtual function converts the char to char using the simplest
1068:/usr/include/c++/7/bits/locale_facets.h ****        *  reasonable transformation.  For an underived ctype<char> facet, the
1069:/usr/include/c++/7/bits/locale_facets.h ****        *  argument will be returned unchanged.
1070:/usr/include/c++/7/bits/locale_facets.h ****        *
1071:/usr/include/c++/7/bits/locale_facets.h ****        *  do_widen() is a hook for a derived facet to change the behavior of
1072:/usr/include/c++/7/bits/locale_facets.h ****        *  widening.  do_widen() must always return the same result for the
1073:/usr/include/c++/7/bits/locale_facets.h ****        *  same input.
1074:/usr/include/c++/7/bits/locale_facets.h ****        *
1075:/usr/include/c++/7/bits/locale_facets.h ****        *  Note: this is not what you want for codepage conversions.  See
1076:/usr/include/c++/7/bits/locale_facets.h ****        *  codecvt for that.
1077:/usr/include/c++/7/bits/locale_facets.h ****        *
1078:/usr/include/c++/7/bits/locale_facets.h ****        *  @param __c  The char to convert.
1079:/usr/include/c++/7/bits/locale_facets.h ****        *  @return  The converted character.
1080:/usr/include/c++/7/bits/locale_facets.h ****       */
1081:/usr/include/c++/7/bits/locale_facets.h ****       virtual char_type
1082:/usr/include/c++/7/bits/locale_facets.h ****       do_widen(char __c) const
  85              		.loc 1 1082 0
  86              		.cfi_startproc
  87              	.LVL0:
  88              	# /usr/include/c++/7/bits/locale_facets.h:1083:       { return __c; }
1083:/usr/include/c++/7/bits/locale_facets.h ****       { return __c; }
  89              		.loc 1 1083 0
  90 0000 89F0     		movl	%esi, %eax	# __c,
  91 0002 C3       		ret
  92              		.cfi_endproc
  93              	.LFE1321:
  95              		.section	.text._ZN11measurement15IteratorCompareI11SortableRefEEbPT_S3_,"axG",@progbits,_ZN11measu
  96              		.p2align 4,,15
  97              		.weak	_ZN11measurement15IteratorCompareI11SortableRefEEbPT_S3_
  99              	_ZN11measurement15IteratorCompareI11SortableRefEEbPT_S3_:
 100              	.LFB3694:
 101              		.file 2 "Measure.h"
   1:Measure.h     **** 
   2:Measure.h     **** #ifndef MEASURE_H
   3:Measure.h     **** #define MEASURE_H
   4:Measure.h     **** 
   5:Measure.h     **** #include <string>
   6:Measure.h     **** #include <vector>
   7:Measure.h     **** 
   8:Measure.h     **** #include "Result.h"
   9:Measure.h     **** #include "ArrayHelpers.h"
  10:Measure.h     **** #include "Performancing.h"
  11:Measure.h     **** #include "QuickSort.h"
  12:Measure.h     **** #include "Quicksort_Copy.h"
  13:Measure.h     **** #include "Randomisation.generated.h"
  14:Measure.h     **** #include "StructHelpers.generated.h"
  15:Measure.h     **** #include "DebugHelper.h"
  16:Measure.h     **** 
  17:Measure.h     **** namespace measurement
  18:Measure.h     **** {
  19:Measure.h     ****     
  20:Measure.h     **** template <typename TValueType>
  21:Measure.h     **** void Measure(
  22:Measure.h     ****     Performancing* perf,
  23:Measure.h     ****     int numberOfIterations,
  24:Measure.h     ****     size_t arraySize,
  25:Measure.h     ****     int measureIteration,
  26:Measure.h     ****     std::string sorterName,
  27:Measure.h     ****     void(*sortFunc)(TValueType*,size_t))
  28:Measure.h     **** {
  29:Measure.h     ****     TValueType *arr = (TValueType*) malloc(sizeof(TValueType) * arraySize);
  30:Measure.h     ****     
  31:Measure.h     ****     int numberOfBadSorts = 0;
  32:Measure.h     ****     randomisation::GenerateRandomArray(arr, arraySize);
  33:Measure.h     ****     sortFunc(arr, arraySize);
  34:Measure.h     ****     if (!IsSorted(arr, arraySize)) 
  35:Measure.h     ****     {
  36:Measure.h     ****         numberOfBadSorts += 1;
  37:Measure.h     ****     }
  38:Measure.h     **** 
  39:Measure.h     ****     uint64_t key_iter = 1;
  40:Measure.h     ****     uint64_t ref_iter = 1;
  41:Measure.h     ****     uint64_t key_value;
  42:Measure.h     ****     uint64_t ref_value;
  43:Measure.h     ****     perf->StartMeasuring();
  44:Measure.h     ****     for (int i = 0; i < numberOfIterations; i += 1)
  45:Measure.h     ****     {
  46:Measure.h     ****         randomisation::GenerateRandomArray(arr, arraySize);
  47:Measure.h     ****         key_iter = 1;
  48:Measure.h     ****         ref_iter = 1;
  49:Measure.h     ****         PutPermutationValues(arr, arraySize, key_value, key_iter, ref_value, ref_iter);
  50:Measure.h     ****         sortFunc(arr, arraySize);
  51:Measure.h     **** 
  52:Measure.h     ****         if (!IsSortedAndPermutation(arr, arraySize, key_iter, key_value, ref_iter, ref_value))
  53:Measure.h     ****         {
  54:Measure.h     ****             numberOfBadSorts += 1;
  55:Measure.h     ****         }
  56:Measure.h     ****     }
  57:Measure.h     ****     perf->StopMeasuring();
  58:Measure.h     **** 
  59:Measure.h     ****     result::WriteResultLine(
  60:Measure.h     ****         sorterName,
  61:Measure.h     ****         perf,
  62:Measure.h     ****         sizeof(TValueType),
  63:Measure.h     ****         arraySize,
  64:Measure.h     ****         measureIteration,
  65:Measure.h     ****         numberOfIterations,
  66:Measure.h     ****         numberOfBadSorts,
  67:Measure.h     ****         true
  68:Measure.h     ****     );
  69:Measure.h     **** 
  70:Measure.h     ****     free(arr);
  71:Measure.h     **** }
  72:Measure.h     **** 
  73:Measure.h     **** template <typename TValueType>
  74:Measure.h     **** void MeasureInRow(
  75:Measure.h     ****     Performancing* perf,
  76:Measure.h     ****     int numberOfArrays,
  77:Measure.h     ****     size_t arraySize,
  78:Measure.h     ****     int measureIteration,
  79:Measure.h     ****     std::string sorterName,
  80:Measure.h     ****     void(*sortFunc)(TValueType*,size_t))
  81:Measure.h     **** {
  82:Measure.h     ****     TValueType *arr = (TValueType*) malloc(sizeof(TValueType) * numberOfArrays * arraySize);
  83:Measure.h     ****     TValueType *arrEnd = arr + numberOfArrays * arraySize;
  84:Measure.h     ****     TValueType *compare = (TValueType*) malloc(sizeof(TValueType) * numberOfArrays * arraySize);
  85:Measure.h     ****     TValueType *compareEnd = compare + numberOfArrays * arraySize;
  86:Measure.h     ****     TValueType warmupArr[arraySize];
  87:Measure.h     **** 
  88:Measure.h     ****     randomisation::GenerateRandomArray(arr, numberOfArrays * arraySize);
  89:Measure.h     ****     CopyArray(arr, compare, numberOfArrays * arraySize);
  90:Measure.h     ****     randomisation::GenerateRandomArray(warmupArr, arraySize);
  91:Measure.h     **** 
  92:Measure.h     ****     for (TValueType* current = compare; current < compareEnd; current += arraySize)
  93:Measure.h     ****     {
  94:Measure.h     ****         insertionsort::InsertionSort(current, arraySize);
  95:Measure.h     ****     }
  96:Measure.h     **** 
  97:Measure.h     ****     int numberOfBadSorts = 0;
  98:Measure.h     ****     sortFunc(warmupArr, arraySize);
  99:Measure.h     ****     if (!IsSorted(warmupArr, arraySize))
 100:Measure.h     ****     {
 101:Measure.h     ****         numberOfBadSorts += 1;
 102:Measure.h     ****     }
 103:Measure.h     ****     
 104:Measure.h     ****     perf->StartMeasuring();
 105:Measure.h     ****     for (TValueType* current = arr; current < arrEnd; current += arraySize)
 106:Measure.h     ****     {
 107:Measure.h     ****         sortFunc(current, arraySize);
 108:Measure.h     ****     }
 109:Measure.h     ****     perf->StopMeasuring();
 110:Measure.h     **** 
 111:Measure.h     ****     for (int i = 0; i < numberOfArrays; i += 1)
 112:Measure.h     ****     {
 113:Measure.h     ****         if (!IsSameArray(&arr[i * arraySize], &compare[i * arraySize], arraySize))
 114:Measure.h     ****         {
 115:Measure.h     ****             numberOfBadSorts += 1;
 116:Measure.h     ****         }
 117:Measure.h     ****     }
 118:Measure.h     **** 
 119:Measure.h     ****     result::WriteResultLine(
 120:Measure.h     ****         sorterName, 
 121:Measure.h     ****         perf, 
 122:Measure.h     ****         sizeof(TValueType),
 123:Measure.h     ****         arraySize,
 124:Measure.h     ****         measureIteration,
 125:Measure.h     ****         numberOfArrays,
 126:Measure.h     ****         numberOfBadSorts,
 127:Measure.h     ****         true
 128:Measure.h     ****     );
 129:Measure.h     **** 
 130:Measure.h     ****     free(arr);
 131:Measure.h     ****     free(compare);
 132:Measure.h     **** }
 133:Measure.h     **** 
 134:Measure.h     **** template <typename TValueType>
 135:Measure.h     **** void MeasureSampleSort(
 136:Measure.h     ****     Performancing* perf,
 137:Measure.h     ****     int numberOfIterations,
 138:Measure.h     ****     size_t arraySize,
 139:Measure.h     ****     int measureIteration,
 140:Measure.h     ****     std::string sorterName,
 141:Measure.h     ****     void(*sortFunc)(TValueType*,size_t,size_t,void(*)(TValueType*,size_t), bool(*)(uint64_t&,TValue
 142:Measure.h     ****     void(*baseCaseSortFunc)(TValueType*,size_t))
 143:Measure.h     **** {
 144:Measure.h     ****     TValueType *arr = (TValueType*) malloc(sizeof(TValueType) * arraySize);
 145:Measure.h     ****     randomisation::GenerateRandomArray(arr, arraySize);
 146:Measure.h     ****     int numberOfBadSorts = 0;
 147:Measure.h     ****     uint64_t key_iter = 1;
 148:Measure.h     ****     uint64_t ref_iter = 1;
 149:Measure.h     ****     uint64_t key_value;
 150:Measure.h     ****     uint64_t ref_value;
 151:Measure.h     ****     PutPermutationValues(arr, arraySize, key_value, key_iter, ref_value, ref_iter);
 152:Measure.h     ****     sortFunc(arr, arraySize, 16, baseCaseSortFunc, &quicksort::templateLess<TValueType>, &GetKey<TV
 153:Measure.h     ****     if (!IsSortedAndPermutation(arr, arraySize, key_iter, key_value, ref_iter, ref_value))
 154:Measure.h     ****     {
 155:Measure.h     ****         numberOfBadSorts += 1;
 156:Measure.h     ****     }
 157:Measure.h     **** 
 158:Measure.h     ****     perf->StartMeasuring();
 159:Measure.h     ****     for (int i = 0; i < numberOfIterations; i += 1)
 160:Measure.h     ****     {
 161:Measure.h     ****         randomisation::GenerateRandomArray(arr, arraySize);
 162:Measure.h     ****         key_iter = 1;
 163:Measure.h     ****         ref_iter = 1;
 164:Measure.h     ****         PutPermutationValues(arr, arraySize, key_value, key_iter, ref_value, ref_iter);
 165:Measure.h     ****         sortFunc(arr, arraySize, 16, baseCaseSortFunc, &quicksort::templateLess<TValueType>, &GetKe
 166:Measure.h     ****         if (!IsSortedAndPermutation(arr, arraySize, key_iter, key_value, ref_iter, ref_value))
 167:Measure.h     ****         {
 168:Measure.h     ****             numberOfBadSorts += 1;
 169:Measure.h     ****         }
 170:Measure.h     ****     }
 171:Measure.h     ****     perf->StopMeasuring();
 172:Measure.h     **** 
 173:Measure.h     ****     result::WriteResultLine(
 174:Measure.h     ****         sorterName,
 175:Measure.h     ****         perf,
 176:Measure.h     ****         sizeof(TValueType),
 177:Measure.h     ****         arraySize,
 178:Measure.h     ****         measureIteration,
 179:Measure.h     ****         numberOfIterations,
 180:Measure.h     ****         numberOfBadSorts,
 181:Measure.h     ****         true
 182:Measure.h     ****     );
 183:Measure.h     **** 
 184:Measure.h     ****     free(arr);
 185:Measure.h     **** }
 186:Measure.h     **** 
 187:Measure.h     **** template <typename TValueType>
 188:Measure.h     **** void BaseCaseSortBlank(TValueType* arr, size_t arraySize) {}
 189:Measure.h     **** 
 190:Measure.h     **** template <typename TValueType>
 191:Measure.h     **** bool IteratorCompare(TValueType* left, TValueType* right)
 102              		.loc 2 191 0
 103              		.cfi_startproc
 104              	.LVL1:
 105              	.LBB1378:
 106              	.LBB1379:
 107              	# Sortable.generated.h:34: 		return left.key < right.key;
 108              		.file 3 "Sortable.generated.h"
   1:Sortable.generated.h **** //------------------------------------------------------------------------------
   2:Sortable.generated.h **** // <auto-generated>
   3:Sortable.generated.h **** //     This code was auto-generated
   4:Sortable.generated.h **** //
   5:Sortable.generated.h **** //     Changes to this file may cause incorrect behavior and will be lost if
   6:Sortable.generated.h **** //     the code is regenerated.
   7:Sortable.generated.h **** // </auto-generated>
   8:Sortable.generated.h **** //------------------------------------------------------------------------------
   9:Sortable.generated.h **** 
  10:Sortable.generated.h **** 
  11:Sortable.generated.h **** #ifndef SORTABLE_GENERATED_H
  12:Sortable.generated.h **** #define SORTABLE_GENERATED_H
  13:Sortable.generated.h **** 
  14:Sortable.generated.h **** #define ArraySize 16
  15:Sortable.generated.h **** #include <inttypes.h>
  16:Sortable.generated.h **** struct SortableRef
  17:Sortable.generated.h **** {
  18:Sortable.generated.h **** 	uint64_t key;
  19:Sortable.generated.h **** 	uint64_t reference;
  20:Sortable.generated.h **** 	friend bool operator>(const SortableRef& left, const SortableRef& right)
  21:Sortable.generated.h **** 	{
  22:Sortable.generated.h **** 		return left.key > right.key;
  23:Sortable.generated.h **** 	}
  24:Sortable.generated.h **** 	friend bool operator>=(const SortableRef& left, const SortableRef& right)
  25:Sortable.generated.h **** 	{
  26:Sortable.generated.h **** 		return left.key >= right.key;
  27:Sortable.generated.h **** 	}
  28:Sortable.generated.h **** 	friend bool operator==(const SortableRef& left, const SortableRef& right)
  29:Sortable.generated.h **** 	{
  30:Sortable.generated.h **** 		return left.key == right.key;
  31:Sortable.generated.h **** 	}
  32:Sortable.generated.h **** 	friend bool operator<(const SortableRef& left, const SortableRef& right)
  33:Sortable.generated.h **** 	{
  34:Sortable.generated.h **** 		return left.key < right.key;
 109              		.loc 3 34 0
 110 0000 488B06   		movq	(%rsi), %rax	# MEM[(long unsigned int *)right_3(D)], tmp95
 111 0003 483907   		cmpq	%rax, (%rdi)	# tmp95, MEM[(long unsigned int *)left_2(D)]
 112 0006 0F92C0   		setb	%al	#, tmp93
 113              	.LBE1379:
 114              	.LBE1378:
 115              	# Measure.h:194: }
 192:Measure.h     **** {
 193:Measure.h     ****     return *left < *right;
 194:Measure.h     **** }
 116              		.loc 2 194 0
 117 0009 C3       		ret
 118              		.cfi_endproc
 119              	.LFE3694:
 121              		.section	.text._ZN11measurement13NormalCompareI11SortableRefEEbRT_S3_,"axG",@progbits,_ZN11measure
 122              		.p2align 4,,15
 123              		.weak	_ZN11measurement13NormalCompareI11SortableRefEEbRT_S3_
 125              	_ZN11measurement13NormalCompareI11SortableRefEEbRT_S3_:
 126              	.LFB3698:
 195:Measure.h     **** 
 196:Measure.h     **** template <typename TValueType>
 197:Measure.h     **** bool NormalCompare(TValueType& left, TValueType& right)
 127              		.loc 2 197 0
 128              		.cfi_startproc
 129              	.LVL2:
 130              	.LBB1382:
 131              	.LBB1383:
 132              	# Sortable.generated.h:34: 		return left.key < right.key;
 133              		.loc 3 34 0
 134 0000 488B06   		movq	(%rsi), %rax	# MEM[(long unsigned int *)right_3(D)], tmp95
 135 0003 483907   		cmpq	%rax, (%rdi)	# tmp95, MEM[(long unsigned int *)left_2(D)]
 136 0006 0F92C0   		setb	%al	#, tmp93
 137              	.LBE1383:
 138              	.LBE1382:
 139              	# Measure.h:200: }
 198:Measure.h     **** {
 199:Measure.h     ****     return left < right;
 200:Measure.h     **** }
 140              		.loc 2 200 0
 141 0009 C3       		ret
 142              		.cfi_endproc
 143              	.LFE3698:
 145              		.text
 146              		.p2align 4,,15
 147              		.globl	_ZN13randomisation7SetSeedEm
 149              	_ZN13randomisation7SetSeedEm:
 150              	.LFB2473:
 151              		.file 4 "Randomisation.h"
   1:Randomisation.h **** 
   2:Randomisation.h **** #ifndef RANDOMISATION_H
   3:Randomisation.h **** #define RANDOMISATION_H
   4:Randomisation.h **** 
   5:Randomisation.h **** #include <stdlib.h>
   6:Randomisation.h **** #include <inttypes.h>
   7:Randomisation.h **** #include <stdexcept>
   8:Randomisation.h **** 
   9:Randomisation.h **** #include "Sortable.generated.h"
  10:Randomisation.h **** 
  11:Randomisation.h **** namespace randomisation {
  12:Randomisation.h **** 
  13:Randomisation.h **** uint64_t _seed = 1;
  14:Randomisation.h **** 
  15:Randomisation.h **** void SetSeed(uint64_t seed) {
 152              		.loc 4 15 0
 153              		.cfi_startproc
 154              	.LVL3:
 155              	# Randomisation.h:16:     _seed = seed;
  16:Randomisation.h ****     _seed = seed;
 156              		.loc 4 16 0
 157 0000 48893D00 		movq	%rdi, _ZN13randomisation5_seedE(%rip)	# seed, _seed
 157      000000
 158              	# Randomisation.h:17: }
  17:Randomisation.h **** }
 159              		.loc 4 17 0
 160 0007 C3       		ret
 161              		.cfi_endproc
 162              	.LFE2473:
 164 0008 0F1F8400 		.p2align 4,,15
 164      00000000 
 165              		.globl	_ZN13randomisation20GenerateRandomUint64Ev
 167              	_ZN13randomisation20GenerateRandomUint64Ev:
 168              	.LFB2474:
  18:Randomisation.h **** 
  19:Randomisation.h **** uint64_t GenerateRandomUint64() {
 169              		.loc 4 19 0
 170              		.cfi_startproc
 171              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     _seed = _seed * 48271 % 2147483647;
 172              		.loc 4 20 0
 173 0010 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp90
 173      0000008F 
 173      BC0000
 174 001b 48BA0500 		movabsq	$8589934597, %rdx	#, tmp93
 174      00000200 
 174      0000
 175 0025 4889C8   		movq	%rcx, %rax	# tmp90, tmp101
 176 0028 48F7E2   		mulq	%rdx	# tmp93
 177 002b 4889C8   		movq	%rcx, %rax	# tmp90, tmp94
 178 002e 4829D0   		subq	%rdx, %rax	# tmp92, tmp94
 179 0031 48D1E8   		shrq	%rax	# tmp95
 180 0034 4801D0   		addq	%rdx, %rax	# tmp92, tmp96
 181 0037 48C1E81E 		shrq	$30, %rax	#, <retval>
 182 003b 4889C2   		movq	%rax, %rdx	# <retval>, tmp98
 183 003e 48C1E21F 		salq	$31, %rdx	#, tmp98
 184 0042 4829C2   		subq	%rax, %rdx	# <retval>, tmp98
 185 0045 4829D1   		subq	%rdx, %rcx	# tmp99, tmp90
 186 0048 4889C8   		movq	%rcx, %rax	# tmp90, <retval>
 187 004b 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# <retval>, _seed
 187      000000
 188              	# Randomisation.h:22: }
  21:Randomisation.h ****     return _seed;
  22:Randomisation.h **** }
 189              		.loc 4 22 0
 190 0052 C3       		ret
 191              		.cfi_endproc
 192              	.LFE2474:
 194 0053 0F1F0066 		.p2align 4,,15
 194      2E0F1F84 
 194      00000000 
 194      00
 195              		.globl	_ZN13randomisation19GenerateRandomArrayI11SortableRefEEvPT_m
 197              	_ZN13randomisation19GenerateRandomArrayI11SortableRefEEvPT_m:
 198              	.LFB2476:
 199              		.file 5 "Randomisation.generated.h"
   1:Randomisation.generated.h **** //------------------------------------------------------------------------------
   2:Randomisation.generated.h **** // <auto-generated>
   3:Randomisation.generated.h **** //     This code was auto-generated
   4:Randomisation.generated.h **** //
   5:Randomisation.generated.h **** //     Changes to this file may cause incorrect behavior and will be lost if
   6:Randomisation.generated.h **** //     the code is regenerated.
   7:Randomisation.generated.h **** // </auto-generated>
   8:Randomisation.generated.h **** //------------------------------------------------------------------------------
   9:Randomisation.generated.h **** 
  10:Randomisation.generated.h **** #ifndef RANDOMISATION_GENERATED_H
  11:Randomisation.generated.h **** #define RANDOMISATION_GENERATED_H
  12:Randomisation.generated.h **** 
  13:Randomisation.generated.h **** #include "Randomisation.h"
  14:Randomisation.generated.h **** namespace randomisation
  15:Randomisation.generated.h **** {
  16:Randomisation.generated.h **** template <typename TValueType>
  17:Randomisation.generated.h **** void GenerateRandomArray(TValueType* arr, size_t arraySize)
  18:Randomisation.generated.h **** {
  19:Randomisation.generated.h **** 	throw std::logic_error("randomisation::GenerateRandomArray => Not implemented for generic type");
  20:Randomisation.generated.h **** }
  21:Randomisation.generated.h **** template<>
  22:Randomisation.generated.h **** void GenerateRandomArray<SortableRef>(SortableRef* arr, size_t arraySize)
  23:Randomisation.generated.h **** {
 200              		.loc 5 23 0
 201              		.cfi_startproc
 202              	.LVL4:
 203              	.LBB1384:
 204              	.LBB1385:
 205              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 206              		.loc 4 20 0
 207 0060 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp120
 207      0000008F 
 207      BC0000
 208 006b 49B90500 		movabsq	$8589934597, %r9	#, tmp123
 208      00000200 
 208      0000
 209 0075 4889C8   		movq	%rcx, %rax	# tmp120, tmp148
 210 0078 49F7E1   		mulq	%r9	# tmp123
 211 007b 4889C8   		movq	%rcx, %rax	# tmp120, tmp124
 212 007e 4829D0   		subq	%rdx, %rax	# tmp122, tmp124
 213 0081 48D1E8   		shrq	%rax	# tmp125
 214 0084 4801C2   		addq	%rax, %rdx	# tmp125, tmp126
 215 0087 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.374
 216 008b 4889D0   		movq	%rdx, %rax	# _seed_lsm.374, tmp128
 217 008e 48C1E01F 		salq	$31, %rax	#, tmp128
 218 0092 4829D0   		subq	%rdx, %rax	# _seed_lsm.374, tmp129
 219 0095 4829C1   		subq	%rax, %rcx	# tmp129, tmp120
 220 0098 4889CA   		movq	%rcx, %rdx	# tmp120, _seed_lsm.374
 221 009b 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.374, _seed
 221      000000
 222              	.LVL5:
 223              	.LBE1385:
 224              	.LBE1384:
 225              	.LBB1386:
 226              	# Randomisation.generated.h:25: 	for (int i = 0; i < arraySize; i += 1)
  24:Randomisation.generated.h **** 	uint64_t reference = randomisation::GenerateRandomUint64();
  25:Randomisation.generated.h **** 	for (int i = 0; i < arraySize; i += 1)
 227              		.loc 5 25 0
 228 00a2 4885F6   		testq	%rsi, %rsi	# arraySize
 229 00a5 745A     		je	.L14	#,
 230 00a7 48C1E604 		salq	$4, %rsi	#, tmp130
 231              	.LVL6:
 232 00ab 4C8D0437 		leaq	(%rdi,%rsi), %r8	#, _37
 233 00af 4889CE   		movq	%rcx, %rsi	# _seed_lsm.374, ivtmp.382
 234              	.LVL7:
 235              		.p2align 4,,10
 236 00b2 660F1F44 		.p2align 3
 236      0000
 237              	.L9:
 238              	.LBB1387:
 239              	.LBB1388:
 240              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 241              		.loc 4 20 0 discriminator 2
 242 00b8 4869CA8F 		imulq	$48271, %rdx, %rcx	#, _seed_lsm.374, tmp131
 242      BC0000
 243              	.LBE1388:
 244              	.LBE1387:
 245              	# Randomisation.generated.h:28: 		arr[i].reference = reference + i;
  26:Randomisation.generated.h **** 	{
  27:Randomisation.generated.h **** 		arr[i].key = randomisation::GenerateRandomUint64();
  28:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 246              		.loc 5 28 0 discriminator 2
 247 00bf 48897708 		movq	%rsi, 8(%rdi)	# ivtmp.382, MEM[base: _31, offset: 8B]
 248 00c3 4883C710 		addq	$16, %rdi	#, ivtmp.381
 249 00c7 4883C601 		addq	$1, %rsi	#, ivtmp.382
 250              	.LVL8:
 251              	.LBB1391:
 252              	.LBB1389:
 253              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 254              		.loc 4 20 0 discriminator 2
 255 00cb 4889C8   		movq	%rcx, %rax	# tmp131, tmp149
 256 00ce 49F7E1   		mulq	%r9	# tmp133
 257 00d1 4889C8   		movq	%rcx, %rax	# tmp131, tmp134
 258 00d4 4829D0   		subq	%rdx, %rax	# tmp132, tmp134
 259 00d7 48D1E8   		shrq	%rax	# tmp135
 260 00da 4801C2   		addq	%rax, %rdx	# tmp135, tmp136
 261 00dd 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.374
 262 00e1 4889D0   		movq	%rdx, %rax	# _seed_lsm.374, tmp138
 263 00e4 48C1E01F 		salq	$31, %rax	#, tmp138
 264 00e8 4829D0   		subq	%rdx, %rax	# _seed_lsm.374, tmp139
 265 00eb 4829C1   		subq	%rax, %rcx	# tmp139, tmp131
 266              	.LBE1389:
 267              	.LBE1391:
 268              	# Randomisation.generated.h:27: 		arr[i].key = randomisation::GenerateRandomUint64();
  27:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 269              		.loc 5 27 0 discriminator 2
 270 00ee 48894FF0 		movq	%rcx, -16(%rdi)	# _seed_lsm.374, MEM[base: _31, offset: 0B]
 271              	.LBB1392:
 272              	.LBB1390:
 273              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 274              		.loc 4 20 0 discriminator 2
 275 00f2 4889CA   		movq	%rcx, %rdx	# tmp131, _seed_lsm.374
 276              	.LBE1390:
 277              	.LBE1392:
 278              	# Randomisation.generated.h:25: 	for (int i = 0; i < arraySize; i += 1)
  25:Randomisation.generated.h **** 	{
 279              		.loc 5 25 0 discriminator 2
 280 00f5 4939F8   		cmpq	%rdi, %r8	# ivtmp.381, _37
 281 00f8 75BE     		jne	.L9	#,
 282 00fa 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.374, _seed
 282      000000
 283              	.L14:
 284              	.LBE1386:
 285              	# Randomisation.generated.h:30: }
  29:Randomisation.generated.h **** 	}
  30:Randomisation.generated.h **** }
 286              		.loc 5 30 0
 287 0101 C3       		ret
 288              		.cfi_endproc
 289              	.LFE2476:
 291 0102 0F1F4000 		.p2align 4,,15
 291      662E0F1F 
 291      84000000 
 291      0000
 292              		.globl	_ZN13randomisation19GenerateRandomArrayI17Sortable_JumpXchgEEvPT_m
 294              	_ZN13randomisation19GenerateRandomArrayI17Sortable_JumpXchgEEvPT_m:
 295              	.LFB2477:
  31:Randomisation.generated.h **** template<>
  32:Randomisation.generated.h **** void GenerateRandomArray<Sortable_JumpXchg>(Sortable_JumpXchg* arr, size_t arraySize)
  33:Randomisation.generated.h **** {
 296              		.loc 5 33 0
 297              		.cfi_startproc
 298              	.LVL9:
 299              	.LBB1393:
 300              	# Randomisation.generated.h:34: 	for (int i = 0; i < arraySize; i += 1)
  34:Randomisation.generated.h **** 	for (int i = 0; i < arraySize; i += 1)
 301              		.loc 5 34 0
 302 0110 4885F6   		testq	%rsi, %rsi	# arraySize
 303 0113 7455     		je	.L22	#,
 304 0115 4C8D04F7 		leaq	(%rdi,%rsi,8), %r8	#, _15
 305              	.LBB1394:
 306              	.LBB1395:
 307              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 308              		.loc 4 20 0
 309 0119 48BE0500 		movabsq	$8589934597, %rsi	#, tmp100
 309      00000200 
 309      0000
 310              	.LVL10:
 311              		.p2align 4,,10
 312 0123 0F1F4400 		.p2align 3
 312      00
 313              	.L17:
 314              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 315              		.loc 4 20 0 is_stmt 0 discriminator 2
 316 0128 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp97
 316      0000008F 
 316      BC0000
 317 0133 4883C708 		addq	$8, %rdi	#, ivtmp.392
 318 0137 4889C8   		movq	%rcx, %rax	# tmp97, tmp107
 319 013a 48F7E6   		mulq	%rsi	# tmp100
 320 013d 4889C8   		movq	%rcx, %rax	# tmp97, tmp101
 321 0140 4829D0   		subq	%rdx, %rax	# tmp99, tmp101
 322 0143 48D1E8   		shrq	%rax	# tmp102
 323 0146 4801C2   		addq	%rax, %rdx	# tmp102, tmp103
 324 0149 48C1EA1E 		shrq	$30, %rdx	#, _13
 325 014d 4889D0   		movq	%rdx, %rax	# _13, tmp105
 326 0150 48C1E01F 		salq	$31, %rax	#, tmp105
 327 0154 4829D0   		subq	%rdx, %rax	# _13, tmp106
 328 0157 4829C1   		subq	%rax, %rcx	# tmp106, tmp97
 329 015a 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _13, _seed
 329      000000
 330              	.LBE1395:
 331              	.LBE1394:
 332              	# Randomisation.generated.h:36: 		arr[i].key = randomisation::GenerateRandomUint64();
  35:Randomisation.generated.h **** 	{
  36:Randomisation.generated.h **** 		arr[i].key = randomisation::GenerateRandomUint64();
 333              		.loc 5 36 0 is_stmt 1 discriminator 2
 334 0161 48894FF8 		movq	%rcx, -8(%rdi)	# _13, MEM[base: _22, offset: 0B]
 335              	# Randomisation.generated.h:34: 	for (int i = 0; i < arraySize; i += 1)
  34:Randomisation.generated.h **** 	{
 336              		.loc 5 34 0 discriminator 2
 337 0165 4939F8   		cmpq	%rdi, %r8	# ivtmp.392, _15
 338 0168 75BE     		jne	.L17	#,
 339              	.L22:
 340              	.LBE1393:
 341              	# Randomisation.generated.h:38: }
  37:Randomisation.generated.h **** 	}
  38:Randomisation.generated.h **** }
 342              		.loc 5 38 0
 343 016a C3       		ret
 344              		.cfi_endproc
 345              	.LFE2477:
 347 016b 0F1F4400 		.p2align 4,,15
 347      00
 348              		.globl	_ZN13randomisation19GenerateRandomArrayI20SortableRef_JumpXchgEEvPT_m
 350              	_ZN13randomisation19GenerateRandomArrayI20SortableRef_JumpXchgEEvPT_m:
 351              	.LFB2478:
  39:Randomisation.generated.h **** template<>
  40:Randomisation.generated.h **** void GenerateRandomArray<SortableRef_JumpXchg>(SortableRef_JumpXchg* arr, size_t arraySize)
  41:Randomisation.generated.h **** {
 352              		.loc 5 41 0
 353              		.cfi_startproc
 354              	.LVL11:
 355              	.LBB1396:
 356              	.LBB1397:
 357              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 358              		.loc 4 20 0
 359 0170 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp98
 359      0000008F 
 359      BC0000
 360 017b 49B90500 		movabsq	$8589934597, %r9	#, tmp101
 360      00000200 
 360      0000
 361 0185 4889C8   		movq	%rcx, %rax	# tmp98, tmp126
 362 0188 49F7E1   		mulq	%r9	# tmp101
 363 018b 4889C8   		movq	%rcx, %rax	# tmp98, tmp102
 364 018e 4829D0   		subq	%rdx, %rax	# tmp100, tmp102
 365 0191 48D1E8   		shrq	%rax	# tmp103
 366 0194 4801C2   		addq	%rax, %rdx	# tmp103, tmp104
 367 0197 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.394
 368 019b 4889D0   		movq	%rdx, %rax	# _seed_lsm.394, tmp106
 369 019e 48C1E01F 		salq	$31, %rax	#, tmp106
 370 01a2 4829D0   		subq	%rdx, %rax	# _seed_lsm.394, tmp107
 371 01a5 4829C1   		subq	%rax, %rcx	# tmp107, tmp98
 372 01a8 4889CA   		movq	%rcx, %rdx	# tmp98, _seed_lsm.394
 373 01ab 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.394, _seed
 373      000000
 374              	.LVL12:
 375              	.LBE1397:
 376              	.LBE1396:
 377              	.LBB1398:
 378              	# Randomisation.generated.h:43: 	for (int i = 0; i < arraySize; i += 1)
  42:Randomisation.generated.h **** 	uint64_t reference = randomisation::GenerateRandomUint64();
  43:Randomisation.generated.h **** 	for (int i = 0; i < arraySize; i += 1)
 379              		.loc 5 43 0
 380 01b2 4885F6   		testq	%rsi, %rsi	# arraySize
 381 01b5 745A     		je	.L30	#,
 382 01b7 48C1E604 		salq	$4, %rsi	#, tmp108
 383              	.LVL13:
 384 01bb 4C8D0437 		leaq	(%rdi,%rsi), %r8	#, _37
 385 01bf 4889CE   		movq	%rcx, %rsi	# _seed_lsm.394, ivtmp.402
 386              	.LVL14:
 387              		.p2align 4,,10
 388 01c2 660F1F44 		.p2align 3
 388      0000
 389              	.L25:
 390              	.LBB1399:
 391              	.LBB1400:
 392              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 393              		.loc 4 20 0 discriminator 2
 394 01c8 4869CA8F 		imulq	$48271, %rdx, %rcx	#, _seed_lsm.394, tmp109
 394      BC0000
 395              	.LBE1400:
 396              	.LBE1399:
 397              	# Randomisation.generated.h:46: 		arr[i].reference = reference + i;
  44:Randomisation.generated.h **** 	{
  45:Randomisation.generated.h **** 		arr[i].key = randomisation::GenerateRandomUint64();
  46:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 398              		.loc 5 46 0 discriminator 2
 399 01cf 48897708 		movq	%rsi, 8(%rdi)	# ivtmp.402, MEM[base: _31, offset: 8B]
 400 01d3 4883C710 		addq	$16, %rdi	#, ivtmp.401
 401 01d7 4883C601 		addq	$1, %rsi	#, ivtmp.402
 402              	.LVL15:
 403              	.LBB1403:
 404              	.LBB1401:
 405              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 406              		.loc 4 20 0 discriminator 2
 407 01db 4889C8   		movq	%rcx, %rax	# tmp109, tmp127
 408 01de 49F7E1   		mulq	%r9	# tmp111
 409 01e1 4889C8   		movq	%rcx, %rax	# tmp109, tmp112
 410 01e4 4829D0   		subq	%rdx, %rax	# tmp110, tmp112
 411 01e7 48D1E8   		shrq	%rax	# tmp113
 412 01ea 4801C2   		addq	%rax, %rdx	# tmp113, tmp114
 413 01ed 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.394
 414 01f1 4889D0   		movq	%rdx, %rax	# _seed_lsm.394, tmp116
 415 01f4 48C1E01F 		salq	$31, %rax	#, tmp116
 416 01f8 4829D0   		subq	%rdx, %rax	# _seed_lsm.394, tmp117
 417 01fb 4829C1   		subq	%rax, %rcx	# tmp117, tmp109
 418              	.LBE1401:
 419              	.LBE1403:
 420              	# Randomisation.generated.h:45: 		arr[i].key = randomisation::GenerateRandomUint64();
  45:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 421              		.loc 5 45 0 discriminator 2
 422 01fe 48894FF0 		movq	%rcx, -16(%rdi)	# _seed_lsm.394, MEM[base: _31, offset: 0B]
 423              	.LBB1404:
 424              	.LBB1402:
 425              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 426              		.loc 4 20 0 discriminator 2
 427 0202 4889CA   		movq	%rcx, %rdx	# tmp109, _seed_lsm.394
 428              	.LBE1402:
 429              	.LBE1404:
 430              	# Randomisation.generated.h:43: 	for (int i = 0; i < arraySize; i += 1)
  43:Randomisation.generated.h **** 	{
 431              		.loc 5 43 0 discriminator 2
 432 0205 4939F8   		cmpq	%rdi, %r8	# ivtmp.401, _37
 433 0208 75BE     		jne	.L25	#,
 434 020a 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.394, _seed
 434      000000
 435              	.L30:
 436              	.LBE1398:
 437              	# Randomisation.generated.h:48: }
  47:Randomisation.generated.h **** 	}
  48:Randomisation.generated.h **** }
 438              		.loc 5 48 0
 439 0211 C3       		ret
 440              		.cfi_endproc
 441              	.LFE2478:
 443 0212 0F1F4000 		.p2align 4,,15
 443      662E0F1F 
 443      84000000 
 443      0000
 444              		.globl	_ZN13randomisation19GenerateRandomArrayI20Sortable_TwoCmovTempEEvPT_m
 446              	_ZN13randomisation19GenerateRandomArrayI20Sortable_TwoCmovTempEEvPT_m:
 447              	.LFB2479:
  49:Randomisation.generated.h **** template<>
  50:Randomisation.generated.h **** void GenerateRandomArray<Sortable_TwoCmovTemp>(Sortable_TwoCmovTemp* arr, size_t arraySize)
  51:Randomisation.generated.h **** {
 448              		.loc 5 51 0
 449              		.cfi_startproc
 450              	.LVL16:
 451              	.LBB1405:
 452              	# Randomisation.generated.h:52: 	for (int i = 0; i < arraySize; i += 1)
  52:Randomisation.generated.h **** 	for (int i = 0; i < arraySize; i += 1)
 453              		.loc 5 52 0
 454 0220 4885F6   		testq	%rsi, %rsi	# arraySize
 455 0223 7455     		je	.L38	#,
 456 0225 4C8D04F7 		leaq	(%rdi,%rsi,8), %r8	#, _15
 457              	.LBB1406:
 458              	.LBB1407:
 459              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 460              		.loc 4 20 0
 461 0229 48BE0500 		movabsq	$8589934597, %rsi	#, tmp100
 461      00000200 
 461      0000
 462              	.LVL17:
 463              		.p2align 4,,10
 464 0233 0F1F4400 		.p2align 3
 464      00
 465              	.L33:
 466              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 467              		.loc 4 20 0 is_stmt 0 discriminator 2
 468 0238 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp97
 468      0000008F 
 468      BC0000
 469 0243 4883C708 		addq	$8, %rdi	#, ivtmp.411
 470 0247 4889C8   		movq	%rcx, %rax	# tmp97, tmp107
 471 024a 48F7E6   		mulq	%rsi	# tmp100
 472 024d 4889C8   		movq	%rcx, %rax	# tmp97, tmp101
 473 0250 4829D0   		subq	%rdx, %rax	# tmp99, tmp101
 474 0253 48D1E8   		shrq	%rax	# tmp102
 475 0256 4801C2   		addq	%rax, %rdx	# tmp102, tmp103
 476 0259 48C1EA1E 		shrq	$30, %rdx	#, _13
 477 025d 4889D0   		movq	%rdx, %rax	# _13, tmp105
 478 0260 48C1E01F 		salq	$31, %rax	#, tmp105
 479 0264 4829D0   		subq	%rdx, %rax	# _13, tmp106
 480 0267 4829C1   		subq	%rax, %rcx	# tmp106, tmp97
 481 026a 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _13, _seed
 481      000000
 482              	.LBE1407:
 483              	.LBE1406:
 484              	# Randomisation.generated.h:54: 		arr[i].key = randomisation::GenerateRandomUint64();
  53:Randomisation.generated.h **** 	{
  54:Randomisation.generated.h **** 		arr[i].key = randomisation::GenerateRandomUint64();
 485              		.loc 5 54 0 is_stmt 1 discriminator 2
 486 0271 48894FF8 		movq	%rcx, -8(%rdi)	# _13, MEM[base: _22, offset: 0B]
 487              	# Randomisation.generated.h:52: 	for (int i = 0; i < arraySize; i += 1)
  52:Randomisation.generated.h **** 	{
 488              		.loc 5 52 0 discriminator 2
 489 0275 4939F8   		cmpq	%rdi, %r8	# ivtmp.411, _15
 490 0278 75BE     		jne	.L33	#,
 491              	.L38:
 492              	.LBE1405:
 493              	# Randomisation.generated.h:56: }
  55:Randomisation.generated.h **** 	}
  56:Randomisation.generated.h **** }
 494              		.loc 5 56 0
 495 027a C3       		ret
 496              		.cfi_endproc
 497              	.LFE2479:
 499 027b 0F1F4400 		.p2align 4,,15
 499      00
 500              		.globl	_ZN13randomisation19GenerateRandomArrayI24SortableRef_FourCmovTempEEvPT_m
 502              	_ZN13randomisation19GenerateRandomArrayI24SortableRef_FourCmovTempEEvPT_m:
 503              	.LFB2480:
  57:Randomisation.generated.h **** template<>
  58:Randomisation.generated.h **** void GenerateRandomArray<SortableRef_FourCmovTemp>(SortableRef_FourCmovTemp* arr, size_t arraySize)
  59:Randomisation.generated.h **** {
 504              		.loc 5 59 0
 505              		.cfi_startproc
 506              	.LVL18:
 507              	.LBB1408:
 508              	.LBB1409:
 509              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 510              		.loc 4 20 0
 511 0280 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp98
 511      0000008F 
 511      BC0000
 512 028b 49B90500 		movabsq	$8589934597, %r9	#, tmp101
 512      00000200 
 512      0000
 513 0295 4889C8   		movq	%rcx, %rax	# tmp98, tmp126
 514 0298 49F7E1   		mulq	%r9	# tmp101
 515 029b 4889C8   		movq	%rcx, %rax	# tmp98, tmp102
 516 029e 4829D0   		subq	%rdx, %rax	# tmp100, tmp102
 517 02a1 48D1E8   		shrq	%rax	# tmp103
 518 02a4 4801C2   		addq	%rax, %rdx	# tmp103, tmp104
 519 02a7 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.413
 520 02ab 4889D0   		movq	%rdx, %rax	# _seed_lsm.413, tmp106
 521 02ae 48C1E01F 		salq	$31, %rax	#, tmp106
 522 02b2 4829D0   		subq	%rdx, %rax	# _seed_lsm.413, tmp107
 523 02b5 4829C1   		subq	%rax, %rcx	# tmp107, tmp98
 524 02b8 4889CA   		movq	%rcx, %rdx	# tmp98, _seed_lsm.413
 525 02bb 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.413, _seed
 525      000000
 526              	.LVL19:
 527              	.LBE1409:
 528              	.LBE1408:
 529              	.LBB1410:
 530              	# Randomisation.generated.h:61: 	for (int i = 0; i < arraySize; i += 1)
  60:Randomisation.generated.h **** 	uint64_t reference = randomisation::GenerateRandomUint64();
  61:Randomisation.generated.h **** 	for (int i = 0; i < arraySize; i += 1)
 531              		.loc 5 61 0
 532 02c2 4885F6   		testq	%rsi, %rsi	# arraySize
 533 02c5 745A     		je	.L46	#,
 534 02c7 48C1E604 		salq	$4, %rsi	#, tmp108
 535              	.LVL20:
 536 02cb 4C8D0437 		leaq	(%rdi,%rsi), %r8	#, _37
 537 02cf 4889CE   		movq	%rcx, %rsi	# _seed_lsm.413, ivtmp.421
 538              	.LVL21:
 539              		.p2align 4,,10
 540 02d2 660F1F44 		.p2align 3
 540      0000
 541              	.L41:
 542              	.LBB1411:
 543              	.LBB1412:
 544              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 545              		.loc 4 20 0 discriminator 2
 546 02d8 4869CA8F 		imulq	$48271, %rdx, %rcx	#, _seed_lsm.413, tmp109
 546      BC0000
 547              	.LBE1412:
 548              	.LBE1411:
 549              	# Randomisation.generated.h:64: 		arr[i].reference = reference + i;
  62:Randomisation.generated.h **** 	{
  63:Randomisation.generated.h **** 		arr[i].key = randomisation::GenerateRandomUint64();
  64:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 550              		.loc 5 64 0 discriminator 2
 551 02df 48897708 		movq	%rsi, 8(%rdi)	# ivtmp.421, MEM[base: _31, offset: 8B]
 552 02e3 4883C710 		addq	$16, %rdi	#, ivtmp.420
 553 02e7 4883C601 		addq	$1, %rsi	#, ivtmp.421
 554              	.LVL22:
 555              	.LBB1415:
 556              	.LBB1413:
 557              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 558              		.loc 4 20 0 discriminator 2
 559 02eb 4889C8   		movq	%rcx, %rax	# tmp109, tmp127
 560 02ee 49F7E1   		mulq	%r9	# tmp111
 561 02f1 4889C8   		movq	%rcx, %rax	# tmp109, tmp112
 562 02f4 4829D0   		subq	%rdx, %rax	# tmp110, tmp112
 563 02f7 48D1E8   		shrq	%rax	# tmp113
 564 02fa 4801C2   		addq	%rax, %rdx	# tmp113, tmp114
 565 02fd 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.413
 566 0301 4889D0   		movq	%rdx, %rax	# _seed_lsm.413, tmp116
 567 0304 48C1E01F 		salq	$31, %rax	#, tmp116
 568 0308 4829D0   		subq	%rdx, %rax	# _seed_lsm.413, tmp117
 569 030b 4829C1   		subq	%rax, %rcx	# tmp117, tmp109
 570              	.LBE1413:
 571              	.LBE1415:
 572              	# Randomisation.generated.h:63: 		arr[i].key = randomisation::GenerateRandomUint64();
  63:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 573              		.loc 5 63 0 discriminator 2
 574 030e 48894FF0 		movq	%rcx, -16(%rdi)	# _seed_lsm.413, MEM[base: _31, offset: 0B]
 575              	.LBB1416:
 576              	.LBB1414:
 577              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 578              		.loc 4 20 0 discriminator 2
 579 0312 4889CA   		movq	%rcx, %rdx	# tmp109, _seed_lsm.413
 580              	.LBE1414:
 581              	.LBE1416:
 582              	# Randomisation.generated.h:61: 	for (int i = 0; i < arraySize; i += 1)
  61:Randomisation.generated.h **** 	{
 583              		.loc 5 61 0 discriminator 2
 584 0315 4939F8   		cmpq	%rdi, %r8	# ivtmp.420, _37
 585 0318 75BE     		jne	.L41	#,
 586 031a 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.413, _seed
 586      000000
 587              	.L46:
 588              	.LBE1410:
 589              	# Randomisation.generated.h:66: }
  65:Randomisation.generated.h **** 	}
  66:Randomisation.generated.h **** }
 590              		.loc 5 66 0
 591 0321 C3       		ret
 592              		.cfi_endproc
 593              	.LFE2480:
 595 0322 0F1F4000 		.p2align 4,,15
 595      662E0F1F 
 595      84000000 
 595      0000
 596              		.globl	_ZN13randomisation19GenerateRandomArrayI30SortableRef_FourCmovTemp_SplitEEvPT_m
 598              	_ZN13randomisation19GenerateRandomArrayI30SortableRef_FourCmovTemp_SplitEEvPT_m:
 599              	.LFB2481:
  67:Randomisation.generated.h **** template<>
  68:Randomisation.generated.h **** void GenerateRandomArray<SortableRef_FourCmovTemp_Split>(SortableRef_FourCmovTemp_Split* arr, size_
  69:Randomisation.generated.h **** {
 600              		.loc 5 69 0
 601              		.cfi_startproc
 602              	.LVL23:
 603              	.LBB1417:
 604              	.LBB1418:
 605              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 606              		.loc 4 20 0
 607 0330 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp98
 607      0000008F 
 607      BC0000
 608 033b 49B90500 		movabsq	$8589934597, %r9	#, tmp101
 608      00000200 
 608      0000
 609 0345 4889C8   		movq	%rcx, %rax	# tmp98, tmp126
 610 0348 49F7E1   		mulq	%r9	# tmp101
 611 034b 4889C8   		movq	%rcx, %rax	# tmp98, tmp102
 612 034e 4829D0   		subq	%rdx, %rax	# tmp100, tmp102
 613 0351 48D1E8   		shrq	%rax	# tmp103
 614 0354 4801C2   		addq	%rax, %rdx	# tmp103, tmp104
 615 0357 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.425
 616 035b 4889D0   		movq	%rdx, %rax	# _seed_lsm.425, tmp106
 617 035e 48C1E01F 		salq	$31, %rax	#, tmp106
 618 0362 4829D0   		subq	%rdx, %rax	# _seed_lsm.425, tmp107
 619 0365 4829C1   		subq	%rax, %rcx	# tmp107, tmp98
 620 0368 4889CA   		movq	%rcx, %rdx	# tmp98, _seed_lsm.425
 621 036b 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.425, _seed
 621      000000
 622              	.LVL24:
 623              	.LBE1418:
 624              	.LBE1417:
 625              	.LBB1419:
 626              	# Randomisation.generated.h:71: 	for (int i = 0; i < arraySize; i += 1)
  70:Randomisation.generated.h **** 	uint64_t reference = randomisation::GenerateRandomUint64();
  71:Randomisation.generated.h **** 	for (int i = 0; i < arraySize; i += 1)
 627              		.loc 5 71 0
 628 0372 4885F6   		testq	%rsi, %rsi	# arraySize
 629 0375 745A     		je	.L54	#,
 630 0377 48C1E604 		salq	$4, %rsi	#, tmp108
 631              	.LVL25:
 632 037b 4C8D0437 		leaq	(%rdi,%rsi), %r8	#, _37
 633 037f 4889CE   		movq	%rcx, %rsi	# _seed_lsm.425, ivtmp.433
 634              	.LVL26:
 635              		.p2align 4,,10
 636 0382 660F1F44 		.p2align 3
 636      0000
 637              	.L49:
 638              	.LBB1420:
 639              	.LBB1421:
 640              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 641              		.loc 4 20 0 discriminator 2
 642 0388 4869CA8F 		imulq	$48271, %rdx, %rcx	#, _seed_lsm.425, tmp109
 642      BC0000
 643              	.LBE1421:
 644              	.LBE1420:
 645              	# Randomisation.generated.h:74: 		arr[i].reference = reference + i;
  72:Randomisation.generated.h **** 	{
  73:Randomisation.generated.h **** 		arr[i].key = randomisation::GenerateRandomUint64();
  74:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 646              		.loc 5 74 0 discriminator 2
 647 038f 48897708 		movq	%rsi, 8(%rdi)	# ivtmp.433, MEM[base: _31, offset: 8B]
 648 0393 4883C710 		addq	$16, %rdi	#, ivtmp.432
 649 0397 4883C601 		addq	$1, %rsi	#, ivtmp.433
 650              	.LVL27:
 651              	.LBB1424:
 652              	.LBB1422:
 653              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 654              		.loc 4 20 0 discriminator 2
 655 039b 4889C8   		movq	%rcx, %rax	# tmp109, tmp127
 656 039e 49F7E1   		mulq	%r9	# tmp111
 657 03a1 4889C8   		movq	%rcx, %rax	# tmp109, tmp112
 658 03a4 4829D0   		subq	%rdx, %rax	# tmp110, tmp112
 659 03a7 48D1E8   		shrq	%rax	# tmp113
 660 03aa 4801C2   		addq	%rax, %rdx	# tmp113, tmp114
 661 03ad 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.425
 662 03b1 4889D0   		movq	%rdx, %rax	# _seed_lsm.425, tmp116
 663 03b4 48C1E01F 		salq	$31, %rax	#, tmp116
 664 03b8 4829D0   		subq	%rdx, %rax	# _seed_lsm.425, tmp117
 665 03bb 4829C1   		subq	%rax, %rcx	# tmp117, tmp109
 666              	.LBE1422:
 667              	.LBE1424:
 668              	# Randomisation.generated.h:73: 		arr[i].key = randomisation::GenerateRandomUint64();
  73:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 669              		.loc 5 73 0 discriminator 2
 670 03be 48894FF0 		movq	%rcx, -16(%rdi)	# _seed_lsm.425, MEM[base: _31, offset: 0B]
 671              	.LBB1425:
 672              	.LBB1423:
 673              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 674              		.loc 4 20 0 discriminator 2
 675 03c2 4889CA   		movq	%rcx, %rdx	# tmp109, _seed_lsm.425
 676              	.LBE1423:
 677              	.LBE1425:
 678              	# Randomisation.generated.h:71: 	for (int i = 0; i < arraySize; i += 1)
  71:Randomisation.generated.h **** 	{
 679              		.loc 5 71 0 discriminator 2
 680 03c5 4939F8   		cmpq	%rdi, %r8	# ivtmp.432, _37
 681 03c8 75BE     		jne	.L49	#,
 682 03ca 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.425, _seed
 682      000000
 683              	.L54:
 684              	.LBE1419:
 685              	# Randomisation.generated.h:76: }
  75:Randomisation.generated.h **** 	}
  76:Randomisation.generated.h **** }
 686              		.loc 5 76 0
 687 03d1 C3       		ret
 688              		.cfi_endproc
 689              	.LFE2481:
 691 03d2 0F1F4000 		.p2align 4,,15
 691      662E0F1F 
 691      84000000 
 691      0000
 692              		.globl	_ZN13randomisation19GenerateRandomArrayI30Sortable_ThreeCmovRegisterTempEEvPT_m
 694              	_ZN13randomisation19GenerateRandomArrayI30Sortable_ThreeCmovRegisterTempEEvPT_m:
 695              	.LFB2482:
  77:Randomisation.generated.h **** template<>
  78:Randomisation.generated.h **** void GenerateRandomArray<Sortable_ThreeCmovRegisterTemp>(Sortable_ThreeCmovRegisterTemp* arr, size_
  79:Randomisation.generated.h **** {
 696              		.loc 5 79 0
 697              		.cfi_startproc
 698              	.LVL28:
 699              	.LBB1426:
 700              	# Randomisation.generated.h:80: 	for (int i = 0; i < arraySize; i += 1)
  80:Randomisation.generated.h **** 	for (int i = 0; i < arraySize; i += 1)
 701              		.loc 5 80 0
 702 03e0 4885F6   		testq	%rsi, %rsi	# arraySize
 703 03e3 7455     		je	.L62	#,
 704 03e5 4C8D04F7 		leaq	(%rdi,%rsi,8), %r8	#, _15
 705              	.LBB1427:
 706              	.LBB1428:
 707              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 708              		.loc 4 20 0
 709 03e9 48BE0500 		movabsq	$8589934597, %rsi	#, tmp100
 709      00000200 
 709      0000
 710              	.LVL29:
 711              		.p2align 4,,10
 712 03f3 0F1F4400 		.p2align 3
 712      00
 713              	.L57:
 714              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 715              		.loc 4 20 0 is_stmt 0 discriminator 2
 716 03f8 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp97
 716      0000008F 
 716      BC0000
 717 0403 4883C708 		addq	$8, %rdi	#, ivtmp.442
 718 0407 4889C8   		movq	%rcx, %rax	# tmp97, tmp107
 719 040a 48F7E6   		mulq	%rsi	# tmp100
 720 040d 4889C8   		movq	%rcx, %rax	# tmp97, tmp101
 721 0410 4829D0   		subq	%rdx, %rax	# tmp99, tmp101
 722 0413 48D1E8   		shrq	%rax	# tmp102
 723 0416 4801C2   		addq	%rax, %rdx	# tmp102, tmp103
 724 0419 48C1EA1E 		shrq	$30, %rdx	#, _13
 725 041d 4889D0   		movq	%rdx, %rax	# _13, tmp105
 726 0420 48C1E01F 		salq	$31, %rax	#, tmp105
 727 0424 4829D0   		subq	%rdx, %rax	# _13, tmp106
 728 0427 4829C1   		subq	%rax, %rcx	# tmp106, tmp97
 729 042a 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _13, _seed
 729      000000
 730              	.LBE1428:
 731              	.LBE1427:
 732              	# Randomisation.generated.h:82: 		arr[i].key = randomisation::GenerateRandomUint64();
  81:Randomisation.generated.h **** 	{
  82:Randomisation.generated.h **** 		arr[i].key = randomisation::GenerateRandomUint64();
 733              		.loc 5 82 0 is_stmt 1 discriminator 2
 734 0431 48894FF8 		movq	%rcx, -8(%rdi)	# _13, MEM[base: _22, offset: 0B]
 735              	# Randomisation.generated.h:80: 	for (int i = 0; i < arraySize; i += 1)
  80:Randomisation.generated.h **** 	{
 736              		.loc 5 80 0 discriminator 2
 737 0435 4939F8   		cmpq	%rdi, %r8	# ivtmp.442, _15
 738 0438 75BE     		jne	.L57	#,
 739              	.L62:
 740              	.LBE1426:
 741              	# Randomisation.generated.h:84: }
  83:Randomisation.generated.h **** 	}
  84:Randomisation.generated.h **** }
 742              		.loc 5 84 0
 743 043a C3       		ret
 744              		.cfi_endproc
 745              	.LFE2482:
 747 043b 0F1F4400 		.p2align 4,,15
 747      00
 748              		.globl	_ZN13randomisation19GenerateRandomArrayI31SortableRef_SixCmovRegisterTempEEvPT_m
 750              	_ZN13randomisation19GenerateRandomArrayI31SortableRef_SixCmovRegisterTempEEvPT_m:
 751              	.LFB2483:
  85:Randomisation.generated.h **** template<>
  86:Randomisation.generated.h **** void GenerateRandomArray<SortableRef_SixCmovRegisterTemp>(SortableRef_SixCmovRegisterTemp* arr, siz
  87:Randomisation.generated.h **** {
 752              		.loc 5 87 0
 753              		.cfi_startproc
 754              	.LVL30:
 755              	.LBB1429:
 756              	.LBB1430:
 757              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 758              		.loc 4 20 0
 759 0440 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp98
 759      0000008F 
 759      BC0000
 760 044b 49B90500 		movabsq	$8589934597, %r9	#, tmp101
 760      00000200 
 760      0000
 761 0455 4889C8   		movq	%rcx, %rax	# tmp98, tmp126
 762 0458 49F7E1   		mulq	%r9	# tmp101
 763 045b 4889C8   		movq	%rcx, %rax	# tmp98, tmp102
 764 045e 4829D0   		subq	%rdx, %rax	# tmp100, tmp102
 765 0461 48D1E8   		shrq	%rax	# tmp103
 766 0464 4801C2   		addq	%rax, %rdx	# tmp103, tmp104
 767 0467 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.444
 768 046b 4889D0   		movq	%rdx, %rax	# _seed_lsm.444, tmp106
 769 046e 48C1E01F 		salq	$31, %rax	#, tmp106
 770 0472 4829D0   		subq	%rdx, %rax	# _seed_lsm.444, tmp107
 771 0475 4829C1   		subq	%rax, %rcx	# tmp107, tmp98
 772 0478 4889CA   		movq	%rcx, %rdx	# tmp98, _seed_lsm.444
 773 047b 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.444, _seed
 773      000000
 774              	.LVL31:
 775              	.LBE1430:
 776              	.LBE1429:
 777              	.LBB1431:
 778              	# Randomisation.generated.h:89: 	for (int i = 0; i < arraySize; i += 1)
  88:Randomisation.generated.h **** 	uint64_t reference = randomisation::GenerateRandomUint64();
  89:Randomisation.generated.h **** 	for (int i = 0; i < arraySize; i += 1)
 779              		.loc 5 89 0
 780 0482 4885F6   		testq	%rsi, %rsi	# arraySize
 781 0485 745A     		je	.L70	#,
 782 0487 48C1E604 		salq	$4, %rsi	#, tmp108
 783              	.LVL32:
 784 048b 4C8D0437 		leaq	(%rdi,%rsi), %r8	#, _37
 785 048f 4889CE   		movq	%rcx, %rsi	# _seed_lsm.444, ivtmp.452
 786              	.LVL33:
 787              		.p2align 4,,10
 788 0492 660F1F44 		.p2align 3
 788      0000
 789              	.L65:
 790              	.LBB1432:
 791              	.LBB1433:
 792              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 793              		.loc 4 20 0 discriminator 2
 794 0498 4869CA8F 		imulq	$48271, %rdx, %rcx	#, _seed_lsm.444, tmp109
 794      BC0000
 795              	.LBE1433:
 796              	.LBE1432:
 797              	# Randomisation.generated.h:92: 		arr[i].reference = reference + i;
  90:Randomisation.generated.h **** 	{
  91:Randomisation.generated.h **** 		arr[i].key = randomisation::GenerateRandomUint64();
  92:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 798              		.loc 5 92 0 discriminator 2
 799 049f 48897708 		movq	%rsi, 8(%rdi)	# ivtmp.452, MEM[base: _31, offset: 8B]
 800 04a3 4883C710 		addq	$16, %rdi	#, ivtmp.451
 801 04a7 4883C601 		addq	$1, %rsi	#, ivtmp.452
 802              	.LVL34:
 803              	.LBB1436:
 804              	.LBB1434:
 805              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 806              		.loc 4 20 0 discriminator 2
 807 04ab 4889C8   		movq	%rcx, %rax	# tmp109, tmp127
 808 04ae 49F7E1   		mulq	%r9	# tmp111
 809 04b1 4889C8   		movq	%rcx, %rax	# tmp109, tmp112
 810 04b4 4829D0   		subq	%rdx, %rax	# tmp110, tmp112
 811 04b7 48D1E8   		shrq	%rax	# tmp113
 812 04ba 4801C2   		addq	%rax, %rdx	# tmp113, tmp114
 813 04bd 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.444
 814 04c1 4889D0   		movq	%rdx, %rax	# _seed_lsm.444, tmp116
 815 04c4 48C1E01F 		salq	$31, %rax	#, tmp116
 816 04c8 4829D0   		subq	%rdx, %rax	# _seed_lsm.444, tmp117
 817 04cb 4829C1   		subq	%rax, %rcx	# tmp117, tmp109
 818              	.LBE1434:
 819              	.LBE1436:
 820              	# Randomisation.generated.h:91: 		arr[i].key = randomisation::GenerateRandomUint64();
  91:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 821              		.loc 5 91 0 discriminator 2
 822 04ce 48894FF0 		movq	%rcx, -16(%rdi)	# _seed_lsm.444, MEM[base: _31, offset: 0B]
 823              	.LBB1437:
 824              	.LBB1435:
 825              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 826              		.loc 4 20 0 discriminator 2
 827 04d2 4889CA   		movq	%rcx, %rdx	# tmp109, _seed_lsm.444
 828              	.LBE1435:
 829              	.LBE1437:
 830              	# Randomisation.generated.h:89: 	for (int i = 0; i < arraySize; i += 1)
  89:Randomisation.generated.h **** 	{
 831              		.loc 5 89 0 discriminator 2
 832 04d5 4939F8   		cmpq	%rdi, %r8	# ivtmp.451, _37
 833 04d8 75BE     		jne	.L65	#,
 834 04da 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.444, _seed
 834      000000
 835              	.L70:
 836              	.LBE1431:
 837              	# Randomisation.generated.h:94: }
  93:Randomisation.generated.h **** 	}
  94:Randomisation.generated.h **** }
 838              		.loc 5 94 0
 839 04e1 C3       		ret
 840              		.cfi_endproc
 841              	.LFE2483:
 843 04e2 0F1F4000 		.p2align 4,,15
 843      662E0F1F 
 843      84000000 
 843      0000
 844              		.globl	_ZN13randomisation19GenerateRandomArrayI24SortableRef_ClangVersionEEvPT_m
 846              	_ZN13randomisation19GenerateRandomArrayI24SortableRef_ClangVersionEEvPT_m:
 847              	.LFB2484:
  95:Randomisation.generated.h **** template<>
  96:Randomisation.generated.h **** void GenerateRandomArray<SortableRef_ClangVersion>(SortableRef_ClangVersion* arr, size_t arraySize)
  97:Randomisation.generated.h **** {
 848              		.loc 5 97 0
 849              		.cfi_startproc
 850              	.LVL35:
 851              	.LBB1438:
 852              	.LBB1439:
 853              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 854              		.loc 4 20 0
 855 04f0 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp98
 855      0000008F 
 855      BC0000
 856 04fb 49B90500 		movabsq	$8589934597, %r9	#, tmp101
 856      00000200 
 856      0000
 857 0505 4889C8   		movq	%rcx, %rax	# tmp98, tmp126
 858 0508 49F7E1   		mulq	%r9	# tmp101
 859 050b 4889C8   		movq	%rcx, %rax	# tmp98, tmp102
 860 050e 4829D0   		subq	%rdx, %rax	# tmp100, tmp102
 861 0511 48D1E8   		shrq	%rax	# tmp103
 862 0514 4801C2   		addq	%rax, %rdx	# tmp103, tmp104
 863 0517 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.456
 864 051b 4889D0   		movq	%rdx, %rax	# _seed_lsm.456, tmp106
 865 051e 48C1E01F 		salq	$31, %rax	#, tmp106
 866 0522 4829D0   		subq	%rdx, %rax	# _seed_lsm.456, tmp107
 867 0525 4829C1   		subq	%rax, %rcx	# tmp107, tmp98
 868 0528 4889CA   		movq	%rcx, %rdx	# tmp98, _seed_lsm.456
 869 052b 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.456, _seed
 869      000000
 870              	.LVL36:
 871              	.LBE1439:
 872              	.LBE1438:
 873              	.LBB1440:
 874              	# Randomisation.generated.h:99: 	for (int i = 0; i < arraySize; i += 1)
  98:Randomisation.generated.h **** 	uint64_t reference = randomisation::GenerateRandomUint64();
  99:Randomisation.generated.h **** 	for (int i = 0; i < arraySize; i += 1)
 875              		.loc 5 99 0
 876 0532 4885F6   		testq	%rsi, %rsi	# arraySize
 877 0535 745A     		je	.L78	#,
 878 0537 48C1E604 		salq	$4, %rsi	#, tmp108
 879              	.LVL37:
 880 053b 4C8D0437 		leaq	(%rdi,%rsi), %r8	#, _37
 881 053f 4889CE   		movq	%rcx, %rsi	# _seed_lsm.456, ivtmp.464
 882              	.LVL38:
 883              		.p2align 4,,10
 884 0542 660F1F44 		.p2align 3
 884      0000
 885              	.L73:
 886              	.LBB1441:
 887              	.LBB1442:
 888              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 889              		.loc 4 20 0 discriminator 2
 890 0548 4869CA8F 		imulq	$48271, %rdx, %rcx	#, _seed_lsm.456, tmp109
 890      BC0000
 891              	.LBE1442:
 892              	.LBE1441:
 893              	# Randomisation.generated.h:102: 		arr[i].reference = reference + i;
 100:Randomisation.generated.h **** 	{
 101:Randomisation.generated.h **** 		arr[i].key = randomisation::GenerateRandomUint64();
 102:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 894              		.loc 5 102 0 discriminator 2
 895 054f 48897708 		movq	%rsi, 8(%rdi)	# ivtmp.464, MEM[base: _31, offset: 8B]
 896 0553 4883C710 		addq	$16, %rdi	#, ivtmp.463
 897 0557 4883C601 		addq	$1, %rsi	#, ivtmp.464
 898              	.LVL39:
 899              	.LBB1445:
 900              	.LBB1443:
 901              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 902              		.loc 4 20 0 discriminator 2
 903 055b 4889C8   		movq	%rcx, %rax	# tmp109, tmp127
 904 055e 49F7E1   		mulq	%r9	# tmp111
 905 0561 4889C8   		movq	%rcx, %rax	# tmp109, tmp112
 906 0564 4829D0   		subq	%rdx, %rax	# tmp110, tmp112
 907 0567 48D1E8   		shrq	%rax	# tmp113
 908 056a 4801C2   		addq	%rax, %rdx	# tmp113, tmp114
 909 056d 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.456
 910 0571 4889D0   		movq	%rdx, %rax	# _seed_lsm.456, tmp116
 911 0574 48C1E01F 		salq	$31, %rax	#, tmp116
 912 0578 4829D0   		subq	%rdx, %rax	# _seed_lsm.456, tmp117
 913 057b 4829C1   		subq	%rax, %rcx	# tmp117, tmp109
 914              	.LBE1443:
 915              	.LBE1445:
 916              	# Randomisation.generated.h:101: 		arr[i].key = randomisation::GenerateRandomUint64();
 101:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 917              		.loc 5 101 0 discriminator 2
 918 057e 48894FF0 		movq	%rcx, -16(%rdi)	# _seed_lsm.456, MEM[base: _31, offset: 0B]
 919              	.LBB1446:
 920              	.LBB1444:
 921              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 922              		.loc 4 20 0 discriminator 2
 923 0582 4889CA   		movq	%rcx, %rdx	# tmp109, _seed_lsm.456
 924              	.LBE1444:
 925              	.LBE1446:
 926              	# Randomisation.generated.h:99: 	for (int i = 0; i < arraySize; i += 1)
  99:Randomisation.generated.h **** 	{
 927              		.loc 5 99 0 discriminator 2
 928 0585 4939F8   		cmpq	%rdi, %r8	# ivtmp.463, _37
 929 0588 75BE     		jne	.L73	#,
 930 058a 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.456, _seed
 930      000000
 931              	.L78:
 932              	.LBE1440:
 933              	# Randomisation.generated.h:104: }
 103:Randomisation.generated.h **** 	}
 104:Randomisation.generated.h **** }
 934              		.loc 5 104 0
 935 0591 C3       		ret
 936              		.cfi_endproc
 937              	.LFE2484:
 939 0592 0F1F4000 		.p2align 4,,15
 939      662E0F1F 
 939      84000000 
 939      0000
 940              		.globl	_ZN13randomisation19GenerateRandomArrayI15SortableRef_TieEEvPT_m
 942              	_ZN13randomisation19GenerateRandomArrayI15SortableRef_TieEEvPT_m:
 943              	.LFB2485:
 105:Randomisation.generated.h **** template<>
 106:Randomisation.generated.h **** void GenerateRandomArray<SortableRef_Tie>(SortableRef_Tie* arr, size_t arraySize)
 107:Randomisation.generated.h **** {
 944              		.loc 5 107 0
 945              		.cfi_startproc
 946              	.LVL40:
 947              	.LBB1447:
 948              	.LBB1448:
 949              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 950              		.loc 4 20 0
 951 05a0 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp98
 951      0000008F 
 951      BC0000
 952 05ab 49B90500 		movabsq	$8589934597, %r9	#, tmp101
 952      00000200 
 952      0000
 953 05b5 4889C8   		movq	%rcx, %rax	# tmp98, tmp126
 954 05b8 49F7E1   		mulq	%r9	# tmp101
 955 05bb 4889C8   		movq	%rcx, %rax	# tmp98, tmp102
 956 05be 4829D0   		subq	%rdx, %rax	# tmp100, tmp102
 957 05c1 48D1E8   		shrq	%rax	# tmp103
 958 05c4 4801C2   		addq	%rax, %rdx	# tmp103, tmp104
 959 05c7 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.468
 960 05cb 4889D0   		movq	%rdx, %rax	# _seed_lsm.468, tmp106
 961 05ce 48C1E01F 		salq	$31, %rax	#, tmp106
 962 05d2 4829D0   		subq	%rdx, %rax	# _seed_lsm.468, tmp107
 963 05d5 4829C1   		subq	%rax, %rcx	# tmp107, tmp98
 964 05d8 4889CA   		movq	%rcx, %rdx	# tmp98, _seed_lsm.468
 965 05db 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.468, _seed
 965      000000
 966              	.LVL41:
 967              	.LBE1448:
 968              	.LBE1447:
 969              	.LBB1449:
 970              	# Randomisation.generated.h:109: 	for (int i = 0; i < arraySize; i += 1)
 108:Randomisation.generated.h **** 	uint64_t reference = randomisation::GenerateRandomUint64();
 109:Randomisation.generated.h **** 	for (int i = 0; i < arraySize; i += 1)
 971              		.loc 5 109 0
 972 05e2 4885F6   		testq	%rsi, %rsi	# arraySize
 973 05e5 745A     		je	.L86	#,
 974 05e7 48C1E604 		salq	$4, %rsi	#, tmp108
 975              	.LVL42:
 976 05eb 4C8D0437 		leaq	(%rdi,%rsi), %r8	#, _37
 977 05ef 4889CE   		movq	%rcx, %rsi	# _seed_lsm.468, ivtmp.476
 978              	.LVL43:
 979              		.p2align 4,,10
 980 05f2 660F1F44 		.p2align 3
 980      0000
 981              	.L81:
 982              	.LBB1450:
 983              	.LBB1451:
 984              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 985              		.loc 4 20 0 discriminator 2
 986 05f8 4869CA8F 		imulq	$48271, %rdx, %rcx	#, _seed_lsm.468, tmp109
 986      BC0000
 987              	.LBE1451:
 988              	.LBE1450:
 989              	# Randomisation.generated.h:112: 		arr[i].reference = reference + i;
 110:Randomisation.generated.h **** 	{
 111:Randomisation.generated.h **** 		arr[i].key = randomisation::GenerateRandomUint64();
 112:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 990              		.loc 5 112 0 discriminator 2
 991 05ff 48897708 		movq	%rsi, 8(%rdi)	# ivtmp.476, MEM[base: _31, offset: 8B]
 992 0603 4883C710 		addq	$16, %rdi	#, ivtmp.475
 993 0607 4883C601 		addq	$1, %rsi	#, ivtmp.476
 994              	.LVL44:
 995              	.LBB1454:
 996              	.LBB1452:
 997              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 998              		.loc 4 20 0 discriminator 2
 999 060b 4889C8   		movq	%rcx, %rax	# tmp109, tmp127
 1000 060e 49F7E1   		mulq	%r9	# tmp111
 1001 0611 4889C8   		movq	%rcx, %rax	# tmp109, tmp112
 1002 0614 4829D0   		subq	%rdx, %rax	# tmp110, tmp112
 1003 0617 48D1E8   		shrq	%rax	# tmp113
 1004 061a 4801C2   		addq	%rax, %rdx	# tmp113, tmp114
 1005 061d 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.468
 1006 0621 4889D0   		movq	%rdx, %rax	# _seed_lsm.468, tmp116
 1007 0624 48C1E01F 		salq	$31, %rax	#, tmp116
 1008 0628 4829D0   		subq	%rdx, %rax	# _seed_lsm.468, tmp117
 1009 062b 4829C1   		subq	%rax, %rcx	# tmp117, tmp109
 1010              	.LBE1452:
 1011              	.LBE1454:
 1012              	# Randomisation.generated.h:111: 		arr[i].key = randomisation::GenerateRandomUint64();
 111:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 1013              		.loc 5 111 0 discriminator 2
 1014 062e 48894FF0 		movq	%rcx, -16(%rdi)	# _seed_lsm.468, MEM[base: _31, offset: 0B]
 1015              	.LBB1455:
 1016              	.LBB1453:
 1017              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1018              		.loc 4 20 0 discriminator 2
 1019 0632 4889CA   		movq	%rcx, %rdx	# tmp109, _seed_lsm.468
 1020              	.LBE1453:
 1021              	.LBE1455:
 1022              	# Randomisation.generated.h:109: 	for (int i = 0; i < arraySize; i += 1)
 109:Randomisation.generated.h **** 	{
 1023              		.loc 5 109 0 discriminator 2
 1024 0635 4939F8   		cmpq	%rdi, %r8	# ivtmp.475, _37
 1025 0638 75BE     		jne	.L81	#,
 1026 063a 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.468, _seed
 1026      000000
 1027              	.L86:
 1028              	.LBE1449:
 1029              	# Randomisation.generated.h:114: }
 113:Randomisation.generated.h **** 	}
 114:Randomisation.generated.h **** }
 1030              		.loc 5 114 0
 1031 0641 C3       		ret
 1032              		.cfi_endproc
 1033              	.LFE2485:
 1035 0642 0F1F4000 		.p2align 4,,15
 1035      662E0F1F 
 1035      84000000 
 1035      0000
 1036              		.globl	_ZN13randomisation19GenerateRandomArrayI17SortableRef_QMarkEEvPT_m
 1038              	_ZN13randomisation19GenerateRandomArrayI17SortableRef_QMarkEEvPT_m:
 1039              	.LFB2486:
 115:Randomisation.generated.h **** template<>
 116:Randomisation.generated.h **** void GenerateRandomArray<SortableRef_QMark>(SortableRef_QMark* arr, size_t arraySize)
 117:Randomisation.generated.h **** {
 1040              		.loc 5 117 0
 1041              		.cfi_startproc
 1042              	.LVL45:
 1043              	.LBB1456:
 1044              	.LBB1457:
 1045              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1046              		.loc 4 20 0
 1047 0650 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp98
 1047      0000008F 
 1047      BC0000
 1048 065b 49B90500 		movabsq	$8589934597, %r9	#, tmp101
 1048      00000200 
 1048      0000
 1049 0665 4889C8   		movq	%rcx, %rax	# tmp98, tmp126
 1050 0668 49F7E1   		mulq	%r9	# tmp101
 1051 066b 4889C8   		movq	%rcx, %rax	# tmp98, tmp102
 1052 066e 4829D0   		subq	%rdx, %rax	# tmp100, tmp102
 1053 0671 48D1E8   		shrq	%rax	# tmp103
 1054 0674 4801C2   		addq	%rax, %rdx	# tmp103, tmp104
 1055 0677 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.480
 1056 067b 4889D0   		movq	%rdx, %rax	# _seed_lsm.480, tmp106
 1057 067e 48C1E01F 		salq	$31, %rax	#, tmp106
 1058 0682 4829D0   		subq	%rdx, %rax	# _seed_lsm.480, tmp107
 1059 0685 4829C1   		subq	%rax, %rcx	# tmp107, tmp98
 1060 0688 4889CA   		movq	%rcx, %rdx	# tmp98, _seed_lsm.480
 1061 068b 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.480, _seed
 1061      000000
 1062              	.LVL46:
 1063              	.LBE1457:
 1064              	.LBE1456:
 1065              	.LBB1458:
 1066              	# Randomisation.generated.h:119: 	for (int i = 0; i < arraySize; i += 1)
 118:Randomisation.generated.h **** 	uint64_t reference = randomisation::GenerateRandomUint64();
 119:Randomisation.generated.h **** 	for (int i = 0; i < arraySize; i += 1)
 1067              		.loc 5 119 0
 1068 0692 4885F6   		testq	%rsi, %rsi	# arraySize
 1069 0695 745A     		je	.L94	#,
 1070 0697 48C1E604 		salq	$4, %rsi	#, tmp108
 1071              	.LVL47:
 1072 069b 4C8D0437 		leaq	(%rdi,%rsi), %r8	#, _37
 1073 069f 4889CE   		movq	%rcx, %rsi	# _seed_lsm.480, ivtmp.488
 1074              	.LVL48:
 1075              		.p2align 4,,10
 1076 06a2 660F1F44 		.p2align 3
 1076      0000
 1077              	.L89:
 1078              	.LBB1459:
 1079              	.LBB1460:
 1080              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1081              		.loc 4 20 0 discriminator 2
 1082 06a8 4869CA8F 		imulq	$48271, %rdx, %rcx	#, _seed_lsm.480, tmp109
 1082      BC0000
 1083              	.LBE1460:
 1084              	.LBE1459:
 1085              	# Randomisation.generated.h:122: 		arr[i].reference = reference + i;
 120:Randomisation.generated.h **** 	{
 121:Randomisation.generated.h **** 		arr[i].key = randomisation::GenerateRandomUint64();
 122:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 1086              		.loc 5 122 0 discriminator 2
 1087 06af 48897708 		movq	%rsi, 8(%rdi)	# ivtmp.488, MEM[base: _31, offset: 8B]
 1088 06b3 4883C710 		addq	$16, %rdi	#, ivtmp.487
 1089 06b7 4883C601 		addq	$1, %rsi	#, ivtmp.488
 1090              	.LVL49:
 1091              	.LBB1463:
 1092              	.LBB1461:
 1093              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1094              		.loc 4 20 0 discriminator 2
 1095 06bb 4889C8   		movq	%rcx, %rax	# tmp109, tmp127
 1096 06be 49F7E1   		mulq	%r9	# tmp111
 1097 06c1 4889C8   		movq	%rcx, %rax	# tmp109, tmp112
 1098 06c4 4829D0   		subq	%rdx, %rax	# tmp110, tmp112
 1099 06c7 48D1E8   		shrq	%rax	# tmp113
 1100 06ca 4801C2   		addq	%rax, %rdx	# tmp113, tmp114
 1101 06cd 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.480
 1102 06d1 4889D0   		movq	%rdx, %rax	# _seed_lsm.480, tmp116
 1103 06d4 48C1E01F 		salq	$31, %rax	#, tmp116
 1104 06d8 4829D0   		subq	%rdx, %rax	# _seed_lsm.480, tmp117
 1105 06db 4829C1   		subq	%rax, %rcx	# tmp117, tmp109
 1106              	.LBE1461:
 1107              	.LBE1463:
 1108              	# Randomisation.generated.h:121: 		arr[i].key = randomisation::GenerateRandomUint64();
 121:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 1109              		.loc 5 121 0 discriminator 2
 1110 06de 48894FF0 		movq	%rcx, -16(%rdi)	# _seed_lsm.480, MEM[base: _31, offset: 0B]
 1111              	.LBB1464:
 1112              	.LBB1462:
 1113              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1114              		.loc 4 20 0 discriminator 2
 1115 06e2 4889CA   		movq	%rcx, %rdx	# tmp109, _seed_lsm.480
 1116              	.LBE1462:
 1117              	.LBE1464:
 1118              	# Randomisation.generated.h:119: 	for (int i = 0; i < arraySize; i += 1)
 119:Randomisation.generated.h **** 	{
 1119              		.loc 5 119 0 discriminator 2
 1120 06e5 4939F8   		cmpq	%rdi, %r8	# ivtmp.487, _37
 1121 06e8 75BE     		jne	.L89	#,
 1122 06ea 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.480, _seed
 1122      000000
 1123              	.L94:
 1124              	.LBE1458:
 1125              	# Randomisation.generated.h:124: }
 123:Randomisation.generated.h **** 	}
 124:Randomisation.generated.h **** }
 1126              		.loc 5 124 0
 1127 06f1 C3       		ret
 1128              		.cfi_endproc
 1129              	.LFE2486:
 1131 06f2 0F1F4000 		.p2align 4,,15
 1131      662E0F1F 
 1131      84000000 
 1131      0000
 1132              		.globl	_ZN13randomisation19GenerateRandomArrayI22SortableRef_StlVersionEEvPT_m
 1134              	_ZN13randomisation19GenerateRandomArrayI22SortableRef_StlVersionEEvPT_m:
 1135              	.LFB2487:
 125:Randomisation.generated.h **** template<>
 126:Randomisation.generated.h **** void GenerateRandomArray<SortableRef_StlVersion>(SortableRef_StlVersion* arr, size_t arraySize)
 127:Randomisation.generated.h **** {
 1136              		.loc 5 127 0
 1137              		.cfi_startproc
 1138              	.LVL50:
 1139              	.LBB1465:
 1140              	.LBB1466:
 1141              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1142              		.loc 4 20 0
 1143 0700 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp98
 1143      0000008F 
 1143      BC0000
 1144 070b 49B90500 		movabsq	$8589934597, %r9	#, tmp101
 1144      00000200 
 1144      0000
 1145 0715 4889C8   		movq	%rcx, %rax	# tmp98, tmp126
 1146 0718 49F7E1   		mulq	%r9	# tmp101
 1147 071b 4889C8   		movq	%rcx, %rax	# tmp98, tmp102
 1148 071e 4829D0   		subq	%rdx, %rax	# tmp100, tmp102
 1149 0721 48D1E8   		shrq	%rax	# tmp103
 1150 0724 4801C2   		addq	%rax, %rdx	# tmp103, tmp104
 1151 0727 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.492
 1152 072b 4889D0   		movq	%rdx, %rax	# _seed_lsm.492, tmp106
 1153 072e 48C1E01F 		salq	$31, %rax	#, tmp106
 1154 0732 4829D0   		subq	%rdx, %rax	# _seed_lsm.492, tmp107
 1155 0735 4829C1   		subq	%rax, %rcx	# tmp107, tmp98
 1156 0738 4889CA   		movq	%rcx, %rdx	# tmp98, _seed_lsm.492
 1157 073b 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.492, _seed
 1157      000000
 1158              	.LVL51:
 1159              	.LBE1466:
 1160              	.LBE1465:
 1161              	.LBB1467:
 1162              	# Randomisation.generated.h:129: 	for (int i = 0; i < arraySize; i += 1)
 128:Randomisation.generated.h **** 	uint64_t reference = randomisation::GenerateRandomUint64();
 129:Randomisation.generated.h **** 	for (int i = 0; i < arraySize; i += 1)
 1163              		.loc 5 129 0
 1164 0742 4885F6   		testq	%rsi, %rsi	# arraySize
 1165 0745 745A     		je	.L102	#,
 1166 0747 48C1E604 		salq	$4, %rsi	#, tmp108
 1167              	.LVL52:
 1168 074b 4C8D0437 		leaq	(%rdi,%rsi), %r8	#, _37
 1169 074f 4889CE   		movq	%rcx, %rsi	# _seed_lsm.492, ivtmp.500
 1170              	.LVL53:
 1171              		.p2align 4,,10
 1172 0752 660F1F44 		.p2align 3
 1172      0000
 1173              	.L97:
 1174              	.LBB1468:
 1175              	.LBB1469:
 1176              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1177              		.loc 4 20 0 discriminator 2
 1178 0758 4869CA8F 		imulq	$48271, %rdx, %rcx	#, _seed_lsm.492, tmp109
 1178      BC0000
 1179              	.LBE1469:
 1180              	.LBE1468:
 1181              	# Randomisation.generated.h:132: 		arr[i].reference = reference + i;
 130:Randomisation.generated.h **** 	{
 131:Randomisation.generated.h **** 		arr[i].key = randomisation::GenerateRandomUint64();
 132:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 1182              		.loc 5 132 0 discriminator 2
 1183 075f 48897708 		movq	%rsi, 8(%rdi)	# ivtmp.500, MEM[base: _31, offset: 8B]
 1184 0763 4883C710 		addq	$16, %rdi	#, ivtmp.499
 1185 0767 4883C601 		addq	$1, %rsi	#, ivtmp.500
 1186              	.LVL54:
 1187              	.LBB1472:
 1188              	.LBB1470:
 1189              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1190              		.loc 4 20 0 discriminator 2
 1191 076b 4889C8   		movq	%rcx, %rax	# tmp109, tmp127
 1192 076e 49F7E1   		mulq	%r9	# tmp111
 1193 0771 4889C8   		movq	%rcx, %rax	# tmp109, tmp112
 1194 0774 4829D0   		subq	%rdx, %rax	# tmp110, tmp112
 1195 0777 48D1E8   		shrq	%rax	# tmp113
 1196 077a 4801C2   		addq	%rax, %rdx	# tmp113, tmp114
 1197 077d 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.492
 1198 0781 4889D0   		movq	%rdx, %rax	# _seed_lsm.492, tmp116
 1199 0784 48C1E01F 		salq	$31, %rax	#, tmp116
 1200 0788 4829D0   		subq	%rdx, %rax	# _seed_lsm.492, tmp117
 1201 078b 4829C1   		subq	%rax, %rcx	# tmp117, tmp109
 1202              	.LBE1470:
 1203              	.LBE1472:
 1204              	# Randomisation.generated.h:131: 		arr[i].key = randomisation::GenerateRandomUint64();
 131:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 1205              		.loc 5 131 0 discriminator 2
 1206 078e 48894FF0 		movq	%rcx, -16(%rdi)	# _seed_lsm.492, MEM[base: _31, offset: 0B]
 1207              	.LBB1473:
 1208              	.LBB1471:
 1209              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1210              		.loc 4 20 0 discriminator 2
 1211 0792 4889CA   		movq	%rcx, %rdx	# tmp109, _seed_lsm.492
 1212              	.LBE1471:
 1213              	.LBE1473:
 1214              	# Randomisation.generated.h:129: 	for (int i = 0; i < arraySize; i += 1)
 129:Randomisation.generated.h **** 	{
 1215              		.loc 5 129 0 discriminator 2
 1216 0795 4939F8   		cmpq	%rdi, %r8	# ivtmp.499, _37
 1217 0798 75BE     		jne	.L97	#,
 1218 079a 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.492, _seed
 1218      000000
 1219              	.L102:
 1220              	.LBE1467:
 1221              	# Randomisation.generated.h:134: }
 133:Randomisation.generated.h **** 	}
 134:Randomisation.generated.h **** }
 1222              		.loc 5 134 0
 1223 07a1 C3       		ret
 1224              		.cfi_endproc
 1225              	.LFE2487:
 1227 07a2 0F1F4000 		.p2align 4,,15
 1227      662E0F1F 
 1227      84000000 
 1227      0000
 1228              		.globl	_ZN13randomisation19GenerateRandomArrayI28SortableRef_PointerOptimizedEEvPT_m
 1230              	_ZN13randomisation19GenerateRandomArrayI28SortableRef_PointerOptimizedEEvPT_m:
 1231              	.LFB2488:
 135:Randomisation.generated.h **** template<>
 136:Randomisation.generated.h **** void GenerateRandomArray<SortableRef_PointerOptimized>(SortableRef_PointerOptimized* arr, size_t ar
 137:Randomisation.generated.h **** {
 1232              		.loc 5 137 0
 1233              		.cfi_startproc
 1234              	.LVL55:
 1235              	.LBB1474:
 1236              	.LBB1475:
 1237              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1238              		.loc 4 20 0
 1239 07b0 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp98
 1239      0000008F 
 1239      BC0000
 1240 07bb 49B90500 		movabsq	$8589934597, %r9	#, tmp101
 1240      00000200 
 1240      0000
 1241 07c5 4889C8   		movq	%rcx, %rax	# tmp98, tmp126
 1242 07c8 49F7E1   		mulq	%r9	# tmp101
 1243 07cb 4889C8   		movq	%rcx, %rax	# tmp98, tmp102
 1244 07ce 4829D0   		subq	%rdx, %rax	# tmp100, tmp102
 1245 07d1 48D1E8   		shrq	%rax	# tmp103
 1246 07d4 4801C2   		addq	%rax, %rdx	# tmp103, tmp104
 1247 07d7 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.504
 1248 07db 4889D0   		movq	%rdx, %rax	# _seed_lsm.504, tmp106
 1249 07de 48C1E01F 		salq	$31, %rax	#, tmp106
 1250 07e2 4829D0   		subq	%rdx, %rax	# _seed_lsm.504, tmp107
 1251 07e5 4829C1   		subq	%rax, %rcx	# tmp107, tmp98
 1252 07e8 4889CA   		movq	%rcx, %rdx	# tmp98, _seed_lsm.504
 1253 07eb 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.504, _seed
 1253      000000
 1254              	.LVL56:
 1255              	.LBE1475:
 1256              	.LBE1474:
 1257              	.LBB1476:
 1258              	# Randomisation.generated.h:139: 	for (int i = 0; i < arraySize; i += 1)
 138:Randomisation.generated.h **** 	uint64_t reference = randomisation::GenerateRandomUint64();
 139:Randomisation.generated.h **** 	for (int i = 0; i < arraySize; i += 1)
 1259              		.loc 5 139 0
 1260 07f2 4885F6   		testq	%rsi, %rsi	# arraySize
 1261 07f5 745A     		je	.L110	#,
 1262 07f7 48C1E604 		salq	$4, %rsi	#, tmp108
 1263              	.LVL57:
 1264 07fb 4C8D0437 		leaq	(%rdi,%rsi), %r8	#, _37
 1265 07ff 4889CE   		movq	%rcx, %rsi	# _seed_lsm.504, ivtmp.512
 1266              	.LVL58:
 1267              		.p2align 4,,10
 1268 0802 660F1F44 		.p2align 3
 1268      0000
 1269              	.L105:
 1270              	.LBB1477:
 1271              	.LBB1478:
 1272              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1273              		.loc 4 20 0 discriminator 2
 1274 0808 4869CA8F 		imulq	$48271, %rdx, %rcx	#, _seed_lsm.504, tmp109
 1274      BC0000
 1275              	.LBE1478:
 1276              	.LBE1477:
 1277              	# Randomisation.generated.h:142: 		arr[i].reference = reference + i;
 140:Randomisation.generated.h **** 	{
 141:Randomisation.generated.h **** 		arr[i].key = randomisation::GenerateRandomUint64();
 142:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 1278              		.loc 5 142 0 discriminator 2
 1279 080f 48897708 		movq	%rsi, 8(%rdi)	# ivtmp.512, MEM[base: _31, offset: 8B]
 1280 0813 4883C710 		addq	$16, %rdi	#, ivtmp.511
 1281 0817 4883C601 		addq	$1, %rsi	#, ivtmp.512
 1282              	.LVL59:
 1283              	.LBB1481:
 1284              	.LBB1479:
 1285              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1286              		.loc 4 20 0 discriminator 2
 1287 081b 4889C8   		movq	%rcx, %rax	# tmp109, tmp127
 1288 081e 49F7E1   		mulq	%r9	# tmp111
 1289 0821 4889C8   		movq	%rcx, %rax	# tmp109, tmp112
 1290 0824 4829D0   		subq	%rdx, %rax	# tmp110, tmp112
 1291 0827 48D1E8   		shrq	%rax	# tmp113
 1292 082a 4801C2   		addq	%rax, %rdx	# tmp113, tmp114
 1293 082d 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.504
 1294 0831 4889D0   		movq	%rdx, %rax	# _seed_lsm.504, tmp116
 1295 0834 48C1E01F 		salq	$31, %rax	#, tmp116
 1296 0838 4829D0   		subq	%rdx, %rax	# _seed_lsm.504, tmp117
 1297 083b 4829C1   		subq	%rax, %rcx	# tmp117, tmp109
 1298              	.LBE1479:
 1299              	.LBE1481:
 1300              	# Randomisation.generated.h:141: 		arr[i].key = randomisation::GenerateRandomUint64();
 141:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 1301              		.loc 5 141 0 discriminator 2
 1302 083e 48894FF0 		movq	%rcx, -16(%rdi)	# _seed_lsm.504, MEM[base: _31, offset: 0B]
 1303              	.LBB1482:
 1304              	.LBB1480:
 1305              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1306              		.loc 4 20 0 discriminator 2
 1307 0842 4889CA   		movq	%rcx, %rdx	# tmp109, _seed_lsm.504
 1308              	.LBE1480:
 1309              	.LBE1482:
 1310              	# Randomisation.generated.h:139: 	for (int i = 0; i < arraySize; i += 1)
 139:Randomisation.generated.h **** 	{
 1311              		.loc 5 139 0 discriminator 2
 1312 0845 4939F8   		cmpq	%rdi, %r8	# ivtmp.511, _37
 1313 0848 75BE     		jne	.L105	#,
 1314 084a 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.504, _seed
 1314      000000
 1315              	.L110:
 1316              	.LBE1476:
 1317              	# Randomisation.generated.h:144: }
 143:Randomisation.generated.h **** 	}
 144:Randomisation.generated.h **** }
 1318              		.loc 5 144 0
 1319 0851 C3       		ret
 1320              		.cfi_endproc
 1321              	.LFE2488:
 1323 0852 0F1F4000 		.p2align 4,,15
 1323      662E0F1F 
 1323      84000000 
 1323      0000
 1324              		.globl	_ZN13randomisation19GenerateRandomArrayI33SortableRef_ArrayIndex_FirstCheckEEvPT_m
 1326              	_ZN13randomisation19GenerateRandomArrayI33SortableRef_ArrayIndex_FirstCheckEEvPT_m:
 1327              	.LFB2489:
 145:Randomisation.generated.h **** template<>
 146:Randomisation.generated.h **** void GenerateRandomArray<SortableRef_ArrayIndex_FirstCheck>(SortableRef_ArrayIndex_FirstCheck* arr,
 147:Randomisation.generated.h **** {
 1328              		.loc 5 147 0
 1329              		.cfi_startproc
 1330              	.LVL60:
 1331              	.LBB1483:
 1332              	.LBB1484:
 1333              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1334              		.loc 4 20 0
 1335 0860 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp98
 1335      0000008F 
 1335      BC0000
 1336 086b 49B90500 		movabsq	$8589934597, %r9	#, tmp101
 1336      00000200 
 1336      0000
 1337 0875 4889C8   		movq	%rcx, %rax	# tmp98, tmp126
 1338 0878 49F7E1   		mulq	%r9	# tmp101
 1339 087b 4889C8   		movq	%rcx, %rax	# tmp98, tmp102
 1340 087e 4829D0   		subq	%rdx, %rax	# tmp100, tmp102
 1341 0881 48D1E8   		shrq	%rax	# tmp103
 1342 0884 4801C2   		addq	%rax, %rdx	# tmp103, tmp104
 1343 0887 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.516
 1344 088b 4889D0   		movq	%rdx, %rax	# _seed_lsm.516, tmp106
 1345 088e 48C1E01F 		salq	$31, %rax	#, tmp106
 1346 0892 4829D0   		subq	%rdx, %rax	# _seed_lsm.516, tmp107
 1347 0895 4829C1   		subq	%rax, %rcx	# tmp107, tmp98
 1348 0898 4889CA   		movq	%rcx, %rdx	# tmp98, _seed_lsm.516
 1349 089b 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.516, _seed
 1349      000000
 1350              	.LVL61:
 1351              	.LBE1484:
 1352              	.LBE1483:
 1353              	.LBB1485:
 1354              	# Randomisation.generated.h:149: 	for (int i = 0; i < arraySize; i += 1)
 148:Randomisation.generated.h **** 	uint64_t reference = randomisation::GenerateRandomUint64();
 149:Randomisation.generated.h **** 	for (int i = 0; i < arraySize; i += 1)
 1355              		.loc 5 149 0
 1356 08a2 4885F6   		testq	%rsi, %rsi	# arraySize
 1357 08a5 745A     		je	.L118	#,
 1358 08a7 48C1E604 		salq	$4, %rsi	#, tmp108
 1359              	.LVL62:
 1360 08ab 4C8D0437 		leaq	(%rdi,%rsi), %r8	#, _37
 1361 08af 4889CE   		movq	%rcx, %rsi	# _seed_lsm.516, ivtmp.524
 1362              	.LVL63:
 1363              		.p2align 4,,10
 1364 08b2 660F1F44 		.p2align 3
 1364      0000
 1365              	.L113:
 1366              	.LBB1486:
 1367              	.LBB1487:
 1368              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1369              		.loc 4 20 0 discriminator 2
 1370 08b8 4869CA8F 		imulq	$48271, %rdx, %rcx	#, _seed_lsm.516, tmp109
 1370      BC0000
 1371              	.LBE1487:
 1372              	.LBE1486:
 1373              	# Randomisation.generated.h:152: 		arr[i].reference = reference + i;
 150:Randomisation.generated.h **** 	{
 151:Randomisation.generated.h **** 		arr[i].key = randomisation::GenerateRandomUint64();
 152:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 1374              		.loc 5 152 0 discriminator 2
 1375 08bf 48897708 		movq	%rsi, 8(%rdi)	# ivtmp.524, MEM[base: _31, offset: 8B]
 1376 08c3 4883C710 		addq	$16, %rdi	#, ivtmp.523
 1377 08c7 4883C601 		addq	$1, %rsi	#, ivtmp.524
 1378              	.LVL64:
 1379              	.LBB1490:
 1380              	.LBB1488:
 1381              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1382              		.loc 4 20 0 discriminator 2
 1383 08cb 4889C8   		movq	%rcx, %rax	# tmp109, tmp127
 1384 08ce 49F7E1   		mulq	%r9	# tmp111
 1385 08d1 4889C8   		movq	%rcx, %rax	# tmp109, tmp112
 1386 08d4 4829D0   		subq	%rdx, %rax	# tmp110, tmp112
 1387 08d7 48D1E8   		shrq	%rax	# tmp113
 1388 08da 4801C2   		addq	%rax, %rdx	# tmp113, tmp114
 1389 08dd 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.516
 1390 08e1 4889D0   		movq	%rdx, %rax	# _seed_lsm.516, tmp116
 1391 08e4 48C1E01F 		salq	$31, %rax	#, tmp116
 1392 08e8 4829D0   		subq	%rdx, %rax	# _seed_lsm.516, tmp117
 1393 08eb 4829C1   		subq	%rax, %rcx	# tmp117, tmp109
 1394              	.LBE1488:
 1395              	.LBE1490:
 1396              	# Randomisation.generated.h:151: 		arr[i].key = randomisation::GenerateRandomUint64();
 151:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 1397              		.loc 5 151 0 discriminator 2
 1398 08ee 48894FF0 		movq	%rcx, -16(%rdi)	# _seed_lsm.516, MEM[base: _31, offset: 0B]
 1399              	.LBB1491:
 1400              	.LBB1489:
 1401              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 1402              		.loc 4 20 0 discriminator 2
 1403 08f2 4889CA   		movq	%rcx, %rdx	# tmp109, _seed_lsm.516
 1404              	.LBE1489:
 1405              	.LBE1491:
 1406              	# Randomisation.generated.h:149: 	for (int i = 0; i < arraySize; i += 1)
 149:Randomisation.generated.h **** 	{
 1407              		.loc 5 149 0 discriminator 2
 1408 08f5 4939F8   		cmpq	%rdi, %r8	# ivtmp.523, _37
 1409 08f8 75BE     		jne	.L113	#,
 1410 08fa 48890D00 		movq	%rcx, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.516, _seed
 1410      000000
 1411              	.L118:
 1412              	.LBE1485:
 1413              	# Randomisation.generated.h:154: }
 153:Randomisation.generated.h **** 	}
 154:Randomisation.generated.h **** }
 1414              		.loc 5 154 0
 1415 0901 C3       		ret
 1416              		.cfi_endproc
 1417              	.LFE2489:
 1419              		.section	.rodata.str1.8,"aMS",@progbits,1
 1420              		.align 8
 1421              	.LC0:
 1422 0000 52657375 		.string	"Result Mapping: s = sorter, m = metric, v = value, ss = struct_size, a = array_size, i = 
 1422      6C74204D 
 1422      61707069 
 1422      6E673A20 
 1422      73203D20 
 1423              		.text
 1424 0902 0F1F4000 		.p2align 4,,15
 1424      662E0F1F 
 1424      84000000 
 1424      0000
 1425              		.globl	_ZN6result32WriteAbbreviationExplanatoryLineEv
 1427              	_ZN6result32WriteAbbreviationExplanatoryLineEv:
 1428              	.LFB2920:
 1429              		.file 6 "Result.h"
   1:Result.h      **** 
   2:Result.h      **** #ifndef RESULT_H
   3:Result.h      **** #define RESULT_H
   4:Result.h      **** 
   5:Result.h      **** #include <inttypes.h>
   6:Result.h      **** #include <string>
   7:Result.h      **** #include <stdexcept>
   8:Result.h      **** #include <iostream>
   9:Result.h      **** 
  10:Result.h      **** #include "Enumerations.h"
  11:Result.h      **** #include "Performancing.h"
  12:Result.h      **** #include "EnvironmentInfo.h"
  13:Result.h      **** 
  14:Result.h      **** namespace result {
  15:Result.h      **** 
  16:Result.h      **** void WriteAbbreviationExplanatoryLine()
  17:Result.h      **** {
 1430              		.loc 6 17 0
 1431              		.cfi_startproc
 1432              	.LVL65:
 1433              	.LBB1492:
 1434              	.LBB1493:
 1435              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:104:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 1436              		.file 7 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2018 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   _G_va_list __ap) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 _G_va_list __ap))
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_ISOC99 || defined __USE_UNIX98
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    _G_va_list __ap) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, _G_va_list __ap))
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, _G_va_list __ap);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  _G_va_list __ap);
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
 1437              		.loc 7 104 0
 1438 0910 488D3D00 		leaq	.LC0(%rip), %rdi	#,
 1438      000000
 1439 0917 E9000000 		jmp	puts@PLT	#
 1439      00
 1440              	.LVL66:
 1441              	.LBE1493:
 1442              	.LBE1492:
 1443              		.cfi_endproc
 1444              	.LFE2920:
 1446              		.section	.rodata.str1.1,"aMS",@progbits,1
 1447              	.LC1:
 1448 0000 43707520 		.string	"Cpu Cycles"
 1448      4379636C 
 1448      657300
 1449              	.LC2:
 1450 000b 43616368 		.string	"Cache Misses"
 1450      65204D69 
 1450      73736573 
 1450      00
 1451              	.LC3:
 1452 0018 4272616E 		.string	"Branch Misses"
 1452      6368204D 
 1452      69737365 
 1452      7300
 1453              		.section	.rodata.str1.8
 1454 00bb 00000000 		.align 8
 1454      00
 1455              	.LC4:
 1456 00c0 52657375 		.string	"Result_h::WriteResultLine => Missing Performance Metric!"
 1456      6C745F68 
 1456      3A3A5772 
 1456      69746552 
 1456      6573756C 
 1457 00f9 00000000 		.align 8
 1457      000000
 1458              	.LC5:
 1459 0100 52455355 		.string	"RESULT\ts=%s\tm=%s\tv=%lu\tss=%i\ta=%zu\ti=%i\tn=%i\tb=%i\tc=%i\n"
 1459      4C540973 
 1459      3D257309 
 1459      6D3D2573 
 1459      09763D25 
 1460              		.text
 1461 091c 0F1F4000 		.p2align 4,,15
 1462              		.globl	_ZN6result15WriteResultLineENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13Performa
 1464              	_ZN6result15WriteResultLineENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP13Performancingimi
 1465              	.LFB2921:
  18:Result.h      ****     printf("Result Mapping: s = sorter, m = metric, v = value, ss = struct_size, a = array_size, i 
  19:Result.h      **** }
  20:Result.h      **** 
  21:Result.h      **** void WriteResultLine(
  22:Result.h      ****     std::string sorter, 
  23:Result.h      ****     Performancing* perf, 
  24:Result.h      ****     int structSize,
  25:Result.h      ****     size_t arraySize,
  26:Result.h      ****     int measureIteration,
  27:Result.h      ****     int numberOfIterations, 
  28:Result.h      ****     int numberOfBadSorts,
  29:Result.h      ****     bool isActualSorterMeasurement) 
  30:Result.h      **** {
 1466              		.loc 6 30 0
 1467              		.cfi_startproc
 1468              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1469              		.cfi_lsda 0x1b,.LLSDA2921
 1470              	.LVL67:
 1471 0920 55       		pushq	%rbp	#
 1472              		.cfi_def_cfa_offset 16
 1473              		.cfi_offset 6, -16
 1474 0921 4889E5   		movq	%rsp, %rbp	#,
 1475              		.cfi_def_cfa_register 6
 1476 0924 4157     		pushq	%r15	#
 1477              		.cfi_offset 15, -24
 1478 0926 4589CF   		movl	%r9d, %r15d	# numberOfIterations, numberOfIterations
 1479 0929 4156     		pushq	%r14	#
 1480              		.cfi_offset 14, -32
 1481 092b 4589C6   		movl	%r8d, %r14d	# measureIteration, measureIteration
 1482 092e 4155     		pushq	%r13	#
 1483              		.cfi_offset 13, -40
 1484 0930 4989FD   		movq	%rdi, %r13	# sorter, sorter
 1485              	# Result.h:33:     switch (perf->GetMetric()) {
  31:Result.h      ****     std::string metric_name;
  32:Result.h      **** 
  33:Result.h      ****     switch (perf->GetMetric()) {
 1486              		.loc 6 33 0
 1487 0933 4889F7   		movq	%rsi, %rdi	# perf,
 1488              	.LVL68:
 1489              	# Result.h:30: {
  30:Result.h      ****     std::string metric_name;
 1490              		.loc 6 30 0
 1491 0936 4154     		pushq	%r12	#
 1492              		.cfi_offset 12, -48
 1493 0938 4989F4   		movq	%rsi, %r12	# perf, perf
 1494 093b 53       		pushq	%rbx	#
 1495              		.cfi_offset 3, -56
 1496              	.LBB1562:
 1497              	.LBB1563:
 1498              	.LBB1564:
 1499              	.LBB1565:
 1500              	.LBB1566:
 1501              	# /usr/include/c++/7/bits/basic_string.h:149: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 1502              		.file 8 "/usr/include/c++/7/bits/basic_string.h"
   1:/usr/include/c++/7/bits/basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/c++/7/bits/basic_string.h **** 
   3:/usr/include/c++/7/bits/basic_string.h **** // Copyright (C) 1997-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/basic_string.h **** //
   5:/usr/include/c++/7/bits/basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/basic_string.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/basic_string.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/basic_string.h **** // any later version.
  10:/usr/include/c++/7/bits/basic_string.h **** 
  11:/usr/include/c++/7/bits/basic_string.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/basic_string.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/basic_string.h **** 
  16:/usr/include/c++/7/bits/basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/basic_string.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/basic_string.h **** 
  20:/usr/include/c++/7/bits/basic_string.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/basic_string.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/basic_string.h **** 
  25:/usr/include/c++/7/bits/basic_string.h **** /** @file bits/basic_string.h
  26:/usr/include/c++/7/bits/basic_string.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/7/bits/basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/7/bits/basic_string.h ****  */
  29:/usr/include/c++/7/bits/basic_string.h **** 
  30:/usr/include/c++/7/bits/basic_string.h **** //
  31:/usr/include/c++/7/bits/basic_string.h **** // ISO C++ 14882: 21 Strings library
  32:/usr/include/c++/7/bits/basic_string.h **** //
  33:/usr/include/c++/7/bits/basic_string.h **** 
  34:/usr/include/c++/7/bits/basic_string.h **** #ifndef _BASIC_STRING_H
  35:/usr/include/c++/7/bits/basic_string.h **** #define _BASIC_STRING_H 1
  36:/usr/include/c++/7/bits/basic_string.h **** 
  37:/usr/include/c++/7/bits/basic_string.h **** #pragma GCC system_header
  38:/usr/include/c++/7/bits/basic_string.h **** 
  39:/usr/include/c++/7/bits/basic_string.h **** #include <ext/atomicity.h>
  40:/usr/include/c++/7/bits/basic_string.h **** #include <ext/alloc_traits.h>
  41:/usr/include/c++/7/bits/basic_string.h **** #include <debug/debug.h>
  42:/usr/include/c++/7/bits/basic_string.h **** 
  43:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
  44:/usr/include/c++/7/bits/basic_string.h **** #include <initializer_list>
  45:/usr/include/c++/7/bits/basic_string.h **** #endif
  46:/usr/include/c++/7/bits/basic_string.h **** 
  47:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
  48:/usr/include/c++/7/bits/basic_string.h **** # include <string_view>
  49:/usr/include/c++/7/bits/basic_string.h **** #endif
  50:/usr/include/c++/7/bits/basic_string.h **** 
  51:/usr/include/c++/7/bits/basic_string.h **** 
  52:/usr/include/c++/7/bits/basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/include/c++/7/bits/basic_string.h **** {
  54:/usr/include/c++/7/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/include/c++/7/bits/basic_string.h **** 
  56:/usr/include/c++/7/bits/basic_string.h **** #if _GLIBCXX_USE_CXX11_ABI
  57:/usr/include/c++/7/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  58:/usr/include/c++/7/bits/basic_string.h ****   /**
  59:/usr/include/c++/7/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
  60:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  61:/usr/include/c++/7/bits/basic_string.h ****    *
  62:/usr/include/c++/7/bits/basic_string.h ****    *  @ingroup strings
  63:/usr/include/c++/7/bits/basic_string.h ****    *  @ingroup sequences
  64:/usr/include/c++/7/bits/basic_string.h ****    *
  65:/usr/include/c++/7/bits/basic_string.h ****    *  @tparam _CharT  Type of character
  66:/usr/include/c++/7/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
  67:/usr/include/c++/7/bits/basic_string.h ****    *                   char_traits<_CharT>.
  68:/usr/include/c++/7/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  69:/usr/include/c++/7/bits/basic_string.h ****    *
  70:/usr/include/c++/7/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  71:/usr/include/c++/7/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
  72:/usr/include/c++/7/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  73:/usr/include/c++/7/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
  74:/usr/include/c++/7/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  75:/usr/include/c++/7/bits/basic_string.h ****    */
  76:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
  77:/usr/include/c++/7/bits/basic_string.h ****     class basic_string
  78:/usr/include/c++/7/bits/basic_string.h ****     {
  79:/usr/include/c++/7/bits/basic_string.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  80:/usr/include/c++/7/bits/basic_string.h **** 	rebind<_CharT>::other _Char_alloc_type;
  81:/usr/include/c++/7/bits/basic_string.h ****       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
  82:/usr/include/c++/7/bits/basic_string.h **** 
  83:/usr/include/c++/7/bits/basic_string.h ****       // Types:
  84:/usr/include/c++/7/bits/basic_string.h ****     public:
  85:/usr/include/c++/7/bits/basic_string.h ****       typedef _Traits					traits_type;
  86:/usr/include/c++/7/bits/basic_string.h ****       typedef typename _Traits::char_type		value_type;
  87:/usr/include/c++/7/bits/basic_string.h ****       typedef _Char_alloc_type				allocator_type;
  88:/usr/include/c++/7/bits/basic_string.h ****       typedef typename _Alloc_traits::size_type		size_type;
  89:/usr/include/c++/7/bits/basic_string.h ****       typedef typename _Alloc_traits::difference_type	difference_type;
  90:/usr/include/c++/7/bits/basic_string.h ****       typedef typename _Alloc_traits::reference		reference;
  91:/usr/include/c++/7/bits/basic_string.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
  92:/usr/include/c++/7/bits/basic_string.h ****       typedef typename _Alloc_traits::pointer		pointer;
  93:/usr/include/c++/7/bits/basic_string.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
  94:/usr/include/c++/7/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
  95:/usr/include/c++/7/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
  96:/usr/include/c++/7/bits/basic_string.h **** 							const_iterator;
  97:/usr/include/c++/7/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
  98:/usr/include/c++/7/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
  99:/usr/include/c++/7/bits/basic_string.h **** 
 100:/usr/include/c++/7/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
 101:/usr/include/c++/7/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
 102:/usr/include/c++/7/bits/basic_string.h **** 
 103:/usr/include/c++/7/bits/basic_string.h ****     private:
 104:/usr/include/c++/7/bits/basic_string.h ****       // type used for positions in insert, erase etc.
 105:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus < 201103L
 106:/usr/include/c++/7/bits/basic_string.h ****       typedef iterator __const_iterator;
 107:/usr/include/c++/7/bits/basic_string.h **** #else
 108:/usr/include/c++/7/bits/basic_string.h ****       typedef const_iterator __const_iterator;
 109:/usr/include/c++/7/bits/basic_string.h **** #endif
 110:/usr/include/c++/7/bits/basic_string.h **** 
 111:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
 112:/usr/include/c++/7/bits/basic_string.h ****       // A helper type for avoiding boiler-plate.
 113:/usr/include/c++/7/bits/basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
 114:/usr/include/c++/7/bits/basic_string.h **** 
 115:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp, typename _Res>
 116:/usr/include/c++/7/bits/basic_string.h **** 	using _If_sv = enable_if_t<
 117:/usr/include/c++/7/bits/basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
 118:/usr/include/c++/7/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
 119:/usr/include/c++/7/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
 120:/usr/include/c++/7/bits/basic_string.h **** 	  _Res>;
 121:/usr/include/c++/7/bits/basic_string.h **** 
 122:/usr/include/c++/7/bits/basic_string.h ****       // Allows an implicit conversion to __sv_type.
 123:/usr/include/c++/7/bits/basic_string.h ****       static __sv_type
 124:/usr/include/c++/7/bits/basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
 125:/usr/include/c++/7/bits/basic_string.h ****       { return __svt; }
 126:/usr/include/c++/7/bits/basic_string.h **** 
 127:/usr/include/c++/7/bits/basic_string.h ****       // Wraps a string_view by explicit conversion and thus
 128:/usr/include/c++/7/bits/basic_string.h ****       // allows to add an internal constructor that does not
 129:/usr/include/c++/7/bits/basic_string.h ****       // participate in overload resolution when a string_view
 130:/usr/include/c++/7/bits/basic_string.h ****       // is provided.
 131:/usr/include/c++/7/bits/basic_string.h ****       struct __sv_wrapper
 132:/usr/include/c++/7/bits/basic_string.h ****       {
 133:/usr/include/c++/7/bits/basic_string.h **** 	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
 134:/usr/include/c++/7/bits/basic_string.h **** 	__sv_type _M_sv;
 135:/usr/include/c++/7/bits/basic_string.h ****       };
 136:/usr/include/c++/7/bits/basic_string.h **** #endif
 137:/usr/include/c++/7/bits/basic_string.h **** 
 138:/usr/include/c++/7/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 139:/usr/include/c++/7/bits/basic_string.h ****       struct _Alloc_hider : allocator_type // TODO check __is_final
 140:/usr/include/c++/7/bits/basic_string.h ****       {
 141:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus < 201103L
 142:/usr/include/c++/7/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 143:/usr/include/c++/7/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 144:/usr/include/c++/7/bits/basic_string.h **** #else
 145:/usr/include/c++/7/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a)
 146:/usr/include/c++/7/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 147:/usr/include/c++/7/bits/basic_string.h **** 
 148:/usr/include/c++/7/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 149:/usr/include/c++/7/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 1503              		.loc 8 149 0
 1504 093c 488D5DA0 		leaq	-96(%rbp), %rbx	#, tmp129
 1505              	.LBE1566:
 1506              	.LBE1565:
 1507              	.LBE1564:
 1508              	.LBE1563:
 1509              	.LBE1562:
 1510              	# Result.h:30: {
  30:Result.h      ****     std::string metric_name;
 1511              		.loc 6 30 0
 1512 0940 4883EC48 		subq	$72, %rsp	#,
 1513              	# Result.h:30: {
  30:Result.h      ****     std::string metric_name;
 1514              		.loc 6 30 0
 1515 0944 8B4518   		movl	24(%rbp), %eax	# isActualSorterMeasurement, isActualSorterMeasurement
 1516 0947 89559C   		movl	%edx, -100(%rbp)	# structSize, %sfp
 1517 094a 48894D90 		movq	%rcx, -112(%rbp)	# arraySize, %sfp
 1518              	.LBB1577:
 1519              	.LBB1575:
 1520              	.LBB1569:
 1521              	.LBB1570:
 1522              	.LBB1571:
 1523              	# /usr/include/c++/7/bits/basic_string.h:172:       { _M_string_length = __length; }
 150:/usr/include/c++/7/bits/basic_string.h **** #endif
 151:/usr/include/c++/7/bits/basic_string.h **** 
 152:/usr/include/c++/7/bits/basic_string.h **** 	pointer _M_p; // The actual data.
 153:/usr/include/c++/7/bits/basic_string.h ****       };
 154:/usr/include/c++/7/bits/basic_string.h **** 
 155:/usr/include/c++/7/bits/basic_string.h ****       _Alloc_hider	_M_dataplus;
 156:/usr/include/c++/7/bits/basic_string.h ****       size_type		_M_string_length;
 157:/usr/include/c++/7/bits/basic_string.h **** 
 158:/usr/include/c++/7/bits/basic_string.h ****       enum { _S_local_capacity = 15 / sizeof(_CharT) };
 159:/usr/include/c++/7/bits/basic_string.h **** 
 160:/usr/include/c++/7/bits/basic_string.h ****       union
 161:/usr/include/c++/7/bits/basic_string.h ****       {
 162:/usr/include/c++/7/bits/basic_string.h **** 	_CharT           _M_local_buf[_S_local_capacity + 1];
 163:/usr/include/c++/7/bits/basic_string.h **** 	size_type        _M_allocated_capacity;
 164:/usr/include/c++/7/bits/basic_string.h ****       };
 165:/usr/include/c++/7/bits/basic_string.h **** 
 166:/usr/include/c++/7/bits/basic_string.h ****       void
 167:/usr/include/c++/7/bits/basic_string.h ****       _M_data(pointer __p)
 168:/usr/include/c++/7/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 169:/usr/include/c++/7/bits/basic_string.h **** 
 170:/usr/include/c++/7/bits/basic_string.h ****       void
 171:/usr/include/c++/7/bits/basic_string.h ****       _M_length(size_type __length)
 172:/usr/include/c++/7/bits/basic_string.h ****       { _M_string_length = __length; }
 1524              		.loc 8 172 0
 1525 094e 48C745A8 		movq	$0, -88(%rbp)	#, MEM[(size_type *)&metric_name + 8B]
 1525      00000000 
 1526              	.LBE1571:
 1527              	.LBE1570:
 1528              	.LBB1572:
 1529              	.LBB1573:
 1530              	# /usr/include/c++/7/bits/char_traits.h:285:       { __c1 = __c2; }
 1531              		.file 9 "/usr/include/c++/7/bits/char_traits.h"
   1:/usr/include/c++/7/bits/char_traits.h **** // Character Traits for use by standard string and iostream -*- C++ -*-
   2:/usr/include/c++/7/bits/char_traits.h **** 
   3:/usr/include/c++/7/bits/char_traits.h **** // Copyright (C) 1997-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/char_traits.h **** //
   5:/usr/include/c++/7/bits/char_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/char_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/char_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/char_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/char_traits.h **** // any later version.
  10:/usr/include/c++/7/bits/char_traits.h **** 
  11:/usr/include/c++/7/bits/char_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/char_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/char_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/char_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/char_traits.h **** 
  16:/usr/include/c++/7/bits/char_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/char_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/char_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/char_traits.h **** 
  20:/usr/include/c++/7/bits/char_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/char_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/char_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/char_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/char_traits.h **** 
  25:/usr/include/c++/7/bits/char_traits.h **** /** @file bits/char_traits.h
  26:/usr/include/c++/7/bits/char_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/7/bits/char_traits.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/7/bits/char_traits.h ****  */
  29:/usr/include/c++/7/bits/char_traits.h **** 
  30:/usr/include/c++/7/bits/char_traits.h **** //
  31:/usr/include/c++/7/bits/char_traits.h **** // ISO C++ 14882: 21  Strings library
  32:/usr/include/c++/7/bits/char_traits.h **** //
  33:/usr/include/c++/7/bits/char_traits.h **** 
  34:/usr/include/c++/7/bits/char_traits.h **** #ifndef _CHAR_TRAITS_H
  35:/usr/include/c++/7/bits/char_traits.h **** #define _CHAR_TRAITS_H 1
  36:/usr/include/c++/7/bits/char_traits.h **** 
  37:/usr/include/c++/7/bits/char_traits.h **** #pragma GCC system_header
  38:/usr/include/c++/7/bits/char_traits.h **** 
  39:/usr/include/c++/7/bits/char_traits.h **** #include <bits/stl_algobase.h>  // std::copy, std::fill_n
  40:/usr/include/c++/7/bits/char_traits.h **** #include <bits/postypes.h>      // For streampos
  41:/usr/include/c++/7/bits/char_traits.h **** #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.
  42:/usr/include/c++/7/bits/char_traits.h **** 
  43:/usr/include/c++/7/bits/char_traits.h **** #ifndef _GLIBCXX_ALWAYS_INLINE
  44:/usr/include/c++/7/bits/char_traits.h **** #define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))
  45:/usr/include/c++/7/bits/char_traits.h **** #endif
  46:/usr/include/c++/7/bits/char_traits.h **** 
  47:/usr/include/c++/7/bits/char_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  48:/usr/include/c++/7/bits/char_traits.h **** {
  49:/usr/include/c++/7/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  50:/usr/include/c++/7/bits/char_traits.h **** 
  51:/usr/include/c++/7/bits/char_traits.h ****   /**
  52:/usr/include/c++/7/bits/char_traits.h ****    *  @brief  Mapping from character type to associated types.
  53:/usr/include/c++/7/bits/char_traits.h ****    *
  54:/usr/include/c++/7/bits/char_traits.h ****    *  @note This is an implementation class for the generic version
  55:/usr/include/c++/7/bits/char_traits.h ****    *  of char_traits.  It defines int_type, off_type, pos_type, and
  56:/usr/include/c++/7/bits/char_traits.h ****    *  state_type.  By default these are unsigned long, streamoff,
  57:/usr/include/c++/7/bits/char_traits.h ****    *  streampos, and mbstate_t.  Users who need a different set of
  58:/usr/include/c++/7/bits/char_traits.h ****    *  types, but who don't need to change the definitions of any function
  59:/usr/include/c++/7/bits/char_traits.h ****    *  defined in char_traits, can specialize __gnu_cxx::_Char_types
  60:/usr/include/c++/7/bits/char_traits.h ****    *  while leaving __gnu_cxx::char_traits alone. */
  61:/usr/include/c++/7/bits/char_traits.h ****   template<typename _CharT>
  62:/usr/include/c++/7/bits/char_traits.h ****     struct _Char_types
  63:/usr/include/c++/7/bits/char_traits.h ****     {
  64:/usr/include/c++/7/bits/char_traits.h ****       typedef unsigned long   int_type;
  65:/usr/include/c++/7/bits/char_traits.h ****       typedef std::streampos  pos_type;
  66:/usr/include/c++/7/bits/char_traits.h ****       typedef std::streamoff  off_type;
  67:/usr/include/c++/7/bits/char_traits.h ****       typedef std::mbstate_t  state_type;
  68:/usr/include/c++/7/bits/char_traits.h ****     };
  69:/usr/include/c++/7/bits/char_traits.h **** 
  70:/usr/include/c++/7/bits/char_traits.h **** 
  71:/usr/include/c++/7/bits/char_traits.h ****   /**
  72:/usr/include/c++/7/bits/char_traits.h ****    *  @brief  Base class used to implement std::char_traits.
  73:/usr/include/c++/7/bits/char_traits.h ****    *
  74:/usr/include/c++/7/bits/char_traits.h ****    *  @note For any given actual character type, this definition is
  75:/usr/include/c++/7/bits/char_traits.h ****    *  probably wrong.  (Most of the member functions are likely to be
  76:/usr/include/c++/7/bits/char_traits.h ****    *  right, but the int_type and state_type typedefs, and the eof()
  77:/usr/include/c++/7/bits/char_traits.h ****    *  member function, are likely to be wrong.)  The reason this class
  78:/usr/include/c++/7/bits/char_traits.h ****    *  exists is so users can specialize it.  Classes in namespace std
  79:/usr/include/c++/7/bits/char_traits.h ****    *  may not be specialized for fundamental types, but classes in
  80:/usr/include/c++/7/bits/char_traits.h ****    *  namespace __gnu_cxx may be.
  81:/usr/include/c++/7/bits/char_traits.h ****    *
  82:/usr/include/c++/7/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
  83:/usr/include/c++/7/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
  84:/usr/include/c++/7/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.  
  85:/usr/include/c++/7/bits/char_traits.h ****    */
  86:/usr/include/c++/7/bits/char_traits.h ****   template<typename _CharT>
  87:/usr/include/c++/7/bits/char_traits.h ****     struct char_traits
  88:/usr/include/c++/7/bits/char_traits.h ****     {
  89:/usr/include/c++/7/bits/char_traits.h ****       typedef _CharT                                    char_type;
  90:/usr/include/c++/7/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::int_type    int_type;
  91:/usr/include/c++/7/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::pos_type    pos_type;
  92:/usr/include/c++/7/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::off_type    off_type;
  93:/usr/include/c++/7/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::state_type  state_type;
  94:/usr/include/c++/7/bits/char_traits.h **** 
  95:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR void
  96:/usr/include/c++/7/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2)
  97:/usr/include/c++/7/bits/char_traits.h ****       { __c1 = __c2; }
  98:/usr/include/c++/7/bits/char_traits.h **** 
  99:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 100:/usr/include/c++/7/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2)
 101:/usr/include/c++/7/bits/char_traits.h ****       { return __c1 == __c2; }
 102:/usr/include/c++/7/bits/char_traits.h **** 
 103:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 104:/usr/include/c++/7/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2)
 105:/usr/include/c++/7/bits/char_traits.h ****       { return __c1 < __c2; }
 106:/usr/include/c++/7/bits/char_traits.h **** 
 107:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR int
 108:/usr/include/c++/7/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, std::size_t __n);
 109:/usr/include/c++/7/bits/char_traits.h **** 
 110:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR std::size_t
 111:/usr/include/c++/7/bits/char_traits.h ****       length(const char_type* __s);
 112:/usr/include/c++/7/bits/char_traits.h **** 
 113:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR const char_type*
 114:/usr/include/c++/7/bits/char_traits.h ****       find(const char_type* __s, std::size_t __n, const char_type& __a);
 115:/usr/include/c++/7/bits/char_traits.h **** 
 116:/usr/include/c++/7/bits/char_traits.h ****       static char_type*
 117:/usr/include/c++/7/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, std::size_t __n);
 118:/usr/include/c++/7/bits/char_traits.h **** 
 119:/usr/include/c++/7/bits/char_traits.h ****       static char_type*
 120:/usr/include/c++/7/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, std::size_t __n);
 121:/usr/include/c++/7/bits/char_traits.h **** 
 122:/usr/include/c++/7/bits/char_traits.h ****       static char_type*
 123:/usr/include/c++/7/bits/char_traits.h ****       assign(char_type* __s, std::size_t __n, char_type __a);
 124:/usr/include/c++/7/bits/char_traits.h **** 
 125:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR char_type
 126:/usr/include/c++/7/bits/char_traits.h ****       to_char_type(const int_type& __c)
 127:/usr/include/c++/7/bits/char_traits.h ****       { return static_cast<char_type>(__c); }
 128:/usr/include/c++/7/bits/char_traits.h **** 
 129:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 130:/usr/include/c++/7/bits/char_traits.h ****       to_int_type(const char_type& __c)
 131:/usr/include/c++/7/bits/char_traits.h ****       { return static_cast<int_type>(__c); }
 132:/usr/include/c++/7/bits/char_traits.h **** 
 133:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 134:/usr/include/c++/7/bits/char_traits.h ****       eq_int_type(const int_type& __c1, const int_type& __c2)
 135:/usr/include/c++/7/bits/char_traits.h ****       { return __c1 == __c2; }
 136:/usr/include/c++/7/bits/char_traits.h **** 
 137:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 138:/usr/include/c++/7/bits/char_traits.h ****       eof()
 139:/usr/include/c++/7/bits/char_traits.h ****       { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }
 140:/usr/include/c++/7/bits/char_traits.h **** 
 141:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 142:/usr/include/c++/7/bits/char_traits.h ****       not_eof(const int_type& __c)
 143:/usr/include/c++/7/bits/char_traits.h ****       { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
 144:/usr/include/c++/7/bits/char_traits.h ****     };
 145:/usr/include/c++/7/bits/char_traits.h **** 
 146:/usr/include/c++/7/bits/char_traits.h ****   template<typename _CharT>
 147:/usr/include/c++/7/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR int
 148:/usr/include/c++/7/bits/char_traits.h ****     char_traits<_CharT>::
 149:/usr/include/c++/7/bits/char_traits.h ****     compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
 150:/usr/include/c++/7/bits/char_traits.h ****     {
 151:/usr/include/c++/7/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 152:/usr/include/c++/7/bits/char_traits.h **** 	if (lt(__s1[__i], __s2[__i]))
 153:/usr/include/c++/7/bits/char_traits.h **** 	  return -1;
 154:/usr/include/c++/7/bits/char_traits.h **** 	else if (lt(__s2[__i], __s1[__i]))
 155:/usr/include/c++/7/bits/char_traits.h **** 	  return 1;
 156:/usr/include/c++/7/bits/char_traits.h ****       return 0;
 157:/usr/include/c++/7/bits/char_traits.h ****     }
 158:/usr/include/c++/7/bits/char_traits.h **** 
 159:/usr/include/c++/7/bits/char_traits.h ****   template<typename _CharT>
 160:/usr/include/c++/7/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR std::size_t
 161:/usr/include/c++/7/bits/char_traits.h ****     char_traits<_CharT>::
 162:/usr/include/c++/7/bits/char_traits.h ****     length(const char_type* __p)
 163:/usr/include/c++/7/bits/char_traits.h ****     {
 164:/usr/include/c++/7/bits/char_traits.h ****       std::size_t __i = 0;
 165:/usr/include/c++/7/bits/char_traits.h ****       while (!eq(__p[__i], char_type()))
 166:/usr/include/c++/7/bits/char_traits.h ****         ++__i;
 167:/usr/include/c++/7/bits/char_traits.h ****       return __i;
 168:/usr/include/c++/7/bits/char_traits.h ****     }
 169:/usr/include/c++/7/bits/char_traits.h **** 
 170:/usr/include/c++/7/bits/char_traits.h ****   template<typename _CharT>
 171:/usr/include/c++/7/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR const typename char_traits<_CharT>::char_type*
 172:/usr/include/c++/7/bits/char_traits.h ****     char_traits<_CharT>::
 173:/usr/include/c++/7/bits/char_traits.h ****     find(const char_type* __s, std::size_t __n, const char_type& __a)
 174:/usr/include/c++/7/bits/char_traits.h ****     {
 175:/usr/include/c++/7/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 176:/usr/include/c++/7/bits/char_traits.h ****         if (eq(__s[__i], __a))
 177:/usr/include/c++/7/bits/char_traits.h ****           return __s + __i;
 178:/usr/include/c++/7/bits/char_traits.h ****       return 0;
 179:/usr/include/c++/7/bits/char_traits.h ****     }
 180:/usr/include/c++/7/bits/char_traits.h **** 
 181:/usr/include/c++/7/bits/char_traits.h ****   template<typename _CharT>
 182:/usr/include/c++/7/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 183:/usr/include/c++/7/bits/char_traits.h ****     char_traits<_CharT>::
 184:/usr/include/c++/7/bits/char_traits.h ****     move(char_type* __s1, const char_type* __s2, std::size_t __n)
 185:/usr/include/c++/7/bits/char_traits.h ****     {
 186:/usr/include/c++/7/bits/char_traits.h ****       return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
 187:/usr/include/c++/7/bits/char_traits.h **** 						    __n * sizeof(char_type)));
 188:/usr/include/c++/7/bits/char_traits.h ****     }
 189:/usr/include/c++/7/bits/char_traits.h **** 
 190:/usr/include/c++/7/bits/char_traits.h ****   template<typename _CharT>
 191:/usr/include/c++/7/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 192:/usr/include/c++/7/bits/char_traits.h ****     char_traits<_CharT>::
 193:/usr/include/c++/7/bits/char_traits.h ****     copy(char_type* __s1, const char_type* __s2, std::size_t __n)
 194:/usr/include/c++/7/bits/char_traits.h ****     {
 195:/usr/include/c++/7/bits/char_traits.h ****       // NB: Inline std::copy so no recursive dependencies.
 196:/usr/include/c++/7/bits/char_traits.h ****       std::copy(__s2, __s2 + __n, __s1);
 197:/usr/include/c++/7/bits/char_traits.h ****       return __s1;
 198:/usr/include/c++/7/bits/char_traits.h ****     }
 199:/usr/include/c++/7/bits/char_traits.h **** 
 200:/usr/include/c++/7/bits/char_traits.h ****   template<typename _CharT>
 201:/usr/include/c++/7/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 202:/usr/include/c++/7/bits/char_traits.h ****     char_traits<_CharT>::
 203:/usr/include/c++/7/bits/char_traits.h ****     assign(char_type* __s, std::size_t __n, char_type __a)
 204:/usr/include/c++/7/bits/char_traits.h ****     {
 205:/usr/include/c++/7/bits/char_traits.h ****       // NB: Inline std::fill_n so no recursive dependencies.
 206:/usr/include/c++/7/bits/char_traits.h ****       std::fill_n(__s, __n, __a);
 207:/usr/include/c++/7/bits/char_traits.h ****       return __s;
 208:/usr/include/c++/7/bits/char_traits.h ****     }
 209:/usr/include/c++/7/bits/char_traits.h **** 
 210:/usr/include/c++/7/bits/char_traits.h **** _GLIBCXX_END_NAMESPACE_VERSION
 211:/usr/include/c++/7/bits/char_traits.h **** } // namespace
 212:/usr/include/c++/7/bits/char_traits.h **** 
 213:/usr/include/c++/7/bits/char_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
 214:/usr/include/c++/7/bits/char_traits.h **** {
 215:/usr/include/c++/7/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 216:/usr/include/c++/7/bits/char_traits.h **** 
 217:/usr/include/c++/7/bits/char_traits.h **** #if __cplusplus > 201402
 218:/usr/include/c++/7/bits/char_traits.h **** #define __cpp_lib_constexpr_char_traits 201611
 219:/usr/include/c++/7/bits/char_traits.h **** 
 220:/usr/include/c++/7/bits/char_traits.h ****   /**
 221:/usr/include/c++/7/bits/char_traits.h ****    *  @brief Determine whether the characters of a NULL-terminated
 222:/usr/include/c++/7/bits/char_traits.h ****    *  string are known at compile time.
 223:/usr/include/c++/7/bits/char_traits.h ****    *  @param  __s  The string.
 224:/usr/include/c++/7/bits/char_traits.h ****    *
 225:/usr/include/c++/7/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 226:/usr/include/c++/7/bits/char_traits.h ****    */
 227:/usr/include/c++/7/bits/char_traits.h ****   template<typename _CharT>
 228:/usr/include/c++/7/bits/char_traits.h ****     static _GLIBCXX_ALWAYS_INLINE constexpr bool
 229:/usr/include/c++/7/bits/char_traits.h ****     __constant_string_p(const _CharT* __s)
 230:/usr/include/c++/7/bits/char_traits.h ****     {
 231:/usr/include/c++/7/bits/char_traits.h ****       while (__builtin_constant_p(*__s) && *__s)
 232:/usr/include/c++/7/bits/char_traits.h **** 	__s++;
 233:/usr/include/c++/7/bits/char_traits.h ****       return __builtin_constant_p(*__s);
 234:/usr/include/c++/7/bits/char_traits.h ****     }
 235:/usr/include/c++/7/bits/char_traits.h **** 
 236:/usr/include/c++/7/bits/char_traits.h ****   /**
 237:/usr/include/c++/7/bits/char_traits.h ****    *  @brief Determine whether the characters of a character array are
 238:/usr/include/c++/7/bits/char_traits.h ****    *  known at compile time.
 239:/usr/include/c++/7/bits/char_traits.h ****    *  @param  __a  The character array.
 240:/usr/include/c++/7/bits/char_traits.h ****    *  @param  __n  Number of characters.
 241:/usr/include/c++/7/bits/char_traits.h ****    *
 242:/usr/include/c++/7/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 243:/usr/include/c++/7/bits/char_traits.h ****    */
 244:/usr/include/c++/7/bits/char_traits.h ****   template<typename _CharT>
 245:/usr/include/c++/7/bits/char_traits.h ****     static _GLIBCXX_ALWAYS_INLINE constexpr bool
 246:/usr/include/c++/7/bits/char_traits.h ****     __constant_char_array_p(const _CharT* __a, size_t __n)
 247:/usr/include/c++/7/bits/char_traits.h ****     {
 248:/usr/include/c++/7/bits/char_traits.h ****       size_t __i = 0;
 249:/usr/include/c++/7/bits/char_traits.h ****       while (__builtin_constant_p(__a[__i]) && __i < __n)
 250:/usr/include/c++/7/bits/char_traits.h **** 	__i++;
 251:/usr/include/c++/7/bits/char_traits.h ****       return __i == __n;
 252:/usr/include/c++/7/bits/char_traits.h ****     }
 253:/usr/include/c++/7/bits/char_traits.h **** #endif
 254:/usr/include/c++/7/bits/char_traits.h **** 
 255:/usr/include/c++/7/bits/char_traits.h ****   // 21.1
 256:/usr/include/c++/7/bits/char_traits.h ****   /**
 257:/usr/include/c++/7/bits/char_traits.h ****    *  @brief  Basis for explicit traits specializations.
 258:/usr/include/c++/7/bits/char_traits.h ****    *
 259:/usr/include/c++/7/bits/char_traits.h ****    *  @note  For any given actual character type, this definition is
 260:/usr/include/c++/7/bits/char_traits.h ****    *  probably wrong.  Since this is just a thin wrapper around
 261:/usr/include/c++/7/bits/char_traits.h ****    *  __gnu_cxx::char_traits, it is possible to achieve a more
 262:/usr/include/c++/7/bits/char_traits.h ****    *  appropriate definition by specializing __gnu_cxx::char_traits.
 263:/usr/include/c++/7/bits/char_traits.h ****    *
 264:/usr/include/c++/7/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
 265:/usr/include/c++/7/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
 266:/usr/include/c++/7/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.
 267:/usr/include/c++/7/bits/char_traits.h ****   */
 268:/usr/include/c++/7/bits/char_traits.h ****   template<class _CharT>
 269:/usr/include/c++/7/bits/char_traits.h ****     struct char_traits : public __gnu_cxx::char_traits<_CharT>
 270:/usr/include/c++/7/bits/char_traits.h ****     { };
 271:/usr/include/c++/7/bits/char_traits.h **** 
 272:/usr/include/c++/7/bits/char_traits.h **** 
 273:/usr/include/c++/7/bits/char_traits.h ****   /// 21.1.3.1  char_traits specializations
 274:/usr/include/c++/7/bits/char_traits.h ****   template<>
 275:/usr/include/c++/7/bits/char_traits.h ****     struct char_traits<char>
 276:/usr/include/c++/7/bits/char_traits.h ****     {
 277:/usr/include/c++/7/bits/char_traits.h ****       typedef char              char_type;
 278:/usr/include/c++/7/bits/char_traits.h ****       typedef int               int_type;
 279:/usr/include/c++/7/bits/char_traits.h ****       typedef streampos         pos_type;
 280:/usr/include/c++/7/bits/char_traits.h ****       typedef streamoff         off_type;
 281:/usr/include/c++/7/bits/char_traits.h ****       typedef mbstate_t         state_type;
 282:/usr/include/c++/7/bits/char_traits.h **** 
 283:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR void
 284:/usr/include/c++/7/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 285:/usr/include/c++/7/bits/char_traits.h ****       { __c1 = __c2; }
 1532              		.loc 9 285 0
 1533 0956 C645B000 		movb	$0, -80(%rbp)	#, MEM[(char_type &)&metric_name + 16]
 1534              	.LBE1573:
 1535              	.LBE1572:
 1536              	.LBE1569:
 1537              	.LBE1575:
 1538              	.LBE1577:
 1539              	# Result.h:30: {
  30:Result.h      ****     std::string metric_name;
 1540              		.loc 6 30 0
 1541 095a 894598   		movl	%eax, -104(%rbp)	# isActualSorterMeasurement, %sfp
 1542 095d 64488B04 		movq	%fs:40, %rax	#, tmp130
 1542      25280000 
 1542      00
 1543 0966 488945C8 		movq	%rax, -56(%rbp)	# tmp130, D.83533
 1544 096a 31C0     		xorl	%eax, %eax	# tmp130
 1545              	.LVL69:
 1546              	.LBB1578:
 1547              	.LBB1576:
 1548              	.LBB1574:
 1549              	.LBB1568:
 1550              	.LBB1567:
 1551              	# /usr/include/c++/7/bits/basic_string.h:149: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 149:/usr/include/c++/7/bits/basic_string.h **** #endif
 1552              		.loc 8 149 0
 1553 096c 488D4310 		leaq	16(%rbx), %rax	#, tmp110
 1554 0970 488945A0 		movq	%rax, -96(%rbp)	# tmp110, MEM[(struct _Alloc_hider *)&metric_name]._M_p
 1555              	.LVL70:
 1556              	.LEHB0:
 1557              	.LBE1567:
 1558              	.LBE1568:
 1559              	.LBE1574:
 1560              	.LBE1576:
 1561              	.LBE1578:
 1562              	# Result.h:33:     switch (perf->GetMetric()) {
 1563              		.loc 6 33 0
 1564 0974 E8000000 		call	_ZN13Performancing9GetMetricEv@PLT	#
 1564      00
 1565              	.LVL71:
 1566              	.LEHE0:
 1567 0979 83F801   		cmpl	$1, %eax	#, _7
 1568 097c 0F840E01 		je	.L122	#,
 1568      0000
 1569              	# Result.h:33:     switch (perf->GetMetric()) {
 1570              		.loc 6 33 0 is_stmt 0 discriminator 1
 1571 0982 83F802   		cmpl	$2, %eax	#, _7
 1572 0985 7441     		je	.L123	#,
 1573 0987 85C0     		testl	%eax, %eax	# _7
 1574 0989 0F84D900 		je	.L136	#,
 1574      0000
 1575              	# Result.h:44:             throw std::logic_error("Result_h::WriteResultLine => Missing Performance
  34:Result.h      ****         case PerformanceMetric::CPU_CYCLES:
  35:Result.h      ****             metric_name = "Cpu Cycles";
  36:Result.h      ****             break;
  37:Result.h      ****         case PerformanceMetric::CACHE_MISSES:
  38:Result.h      ****             metric_name = "Cache Misses";
  39:Result.h      ****             break;
  40:Result.h      ****         case PerformanceMetric::BRANCH_MISSES:
  41:Result.h      ****             metric_name = "Branch Misses";
  42:Result.h      ****             break;
  43:Result.h      ****         default:
  44:Result.h      ****             throw std::logic_error("Result_h::WriteResultLine => Missing Performance Metric!");
 1576              		.loc 6 44 0 is_stmt 1
 1577 098f BF100000 		movl	$16, %edi	#,
 1577      00
 1578 0994 E8000000 		call	__cxa_allocate_exception@PLT	#
 1578      00
 1579              	.LVL72:
 1580 0999 488D3500 		leaq	.LC4(%rip), %rsi	#,
 1580      000000
 1581 09a0 4889C7   		movq	%rax, %rdi	# _19,
 1582 09a3 4989C4   		movq	%rax, %r12	#, _19
 1583              	.LVL73:
 1584              	.LEHB1:
 1585 09a6 E8000000 		call	_ZNSt11logic_errorC1EPKc@PLT	#
 1585      00
 1586              	.LVL74:
 1587              	.LEHE1:
 1588              	# Result.h:44:             throw std::logic_error("Result_h::WriteResultLine => Missing Performance
 1589              		.loc 6 44 0 is_stmt 0 discriminator 2
 1590 09ab 488B1500 		movq	_ZNSt11logic_errorD1Ev@GOTPCREL(%rip), %rdx	#,
 1590      000000
 1591 09b2 488D3500 		leaq	_ZTISt11logic_error(%rip), %rsi	#,
 1591      000000
 1592 09b9 4C89E7   		movq	%r12, %rdi	# _19,
 1593              	.LEHB2:
 1594 09bc E8000000 		call	__cxa_throw@PLT	#
 1594      00
 1595              	.LVL75:
 1596              		.p2align 4,,10
 1597 09c1 0F1F8000 		.p2align 3
 1597      000000
 1598              	.L123:
 1599              	.LBB1579:
 1600              	.LBB1580:
 1601              	.LBB1581:
 1602              	# /usr/include/c++/7/bits/basic_string.h:1420: 			  traits_type::length(__s));
 173:/usr/include/c++/7/bits/basic_string.h **** 
 174:/usr/include/c++/7/bits/basic_string.h ****       pointer
 175:/usr/include/c++/7/bits/basic_string.h ****       _M_data() const
 176:/usr/include/c++/7/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 177:/usr/include/c++/7/bits/basic_string.h **** 
 178:/usr/include/c++/7/bits/basic_string.h ****       pointer
 179:/usr/include/c++/7/bits/basic_string.h ****       _M_local_data()
 180:/usr/include/c++/7/bits/basic_string.h ****       {
 181:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
 182:/usr/include/c++/7/bits/basic_string.h **** 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 183:/usr/include/c++/7/bits/basic_string.h **** #else
 184:/usr/include/c++/7/bits/basic_string.h **** 	return pointer(_M_local_buf);
 185:/usr/include/c++/7/bits/basic_string.h **** #endif
 186:/usr/include/c++/7/bits/basic_string.h ****       }
 187:/usr/include/c++/7/bits/basic_string.h **** 
 188:/usr/include/c++/7/bits/basic_string.h ****       const_pointer
 189:/usr/include/c++/7/bits/basic_string.h ****       _M_local_data() const
 190:/usr/include/c++/7/bits/basic_string.h ****       {
 191:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
 192:/usr/include/c++/7/bits/basic_string.h **** 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 193:/usr/include/c++/7/bits/basic_string.h **** #else
 194:/usr/include/c++/7/bits/basic_string.h **** 	return const_pointer(_M_local_buf);
 195:/usr/include/c++/7/bits/basic_string.h **** #endif
 196:/usr/include/c++/7/bits/basic_string.h ****       }
 197:/usr/include/c++/7/bits/basic_string.h **** 
 198:/usr/include/c++/7/bits/basic_string.h ****       void
 199:/usr/include/c++/7/bits/basic_string.h ****       _M_capacity(size_type __capacity)
 200:/usr/include/c++/7/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 201:/usr/include/c++/7/bits/basic_string.h **** 
 202:/usr/include/c++/7/bits/basic_string.h ****       void
 203:/usr/include/c++/7/bits/basic_string.h ****       _M_set_length(size_type __n)
 204:/usr/include/c++/7/bits/basic_string.h ****       {
 205:/usr/include/c++/7/bits/basic_string.h **** 	_M_length(__n);
 206:/usr/include/c++/7/bits/basic_string.h **** 	traits_type::assign(_M_data()[__n], _CharT());
 207:/usr/include/c++/7/bits/basic_string.h ****       }
 208:/usr/include/c++/7/bits/basic_string.h **** 
 209:/usr/include/c++/7/bits/basic_string.h ****       bool
 210:/usr/include/c++/7/bits/basic_string.h ****       _M_is_local() const
 211:/usr/include/c++/7/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 212:/usr/include/c++/7/bits/basic_string.h **** 
 213:/usr/include/c++/7/bits/basic_string.h ****       // Create & Destroy
 214:/usr/include/c++/7/bits/basic_string.h ****       pointer
 215:/usr/include/c++/7/bits/basic_string.h ****       _M_create(size_type&, size_type);
 216:/usr/include/c++/7/bits/basic_string.h **** 
 217:/usr/include/c++/7/bits/basic_string.h ****       void
 218:/usr/include/c++/7/bits/basic_string.h ****       _M_dispose()
 219:/usr/include/c++/7/bits/basic_string.h ****       {
 220:/usr/include/c++/7/bits/basic_string.h **** 	if (!_M_is_local())
 221:/usr/include/c++/7/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 222:/usr/include/c++/7/bits/basic_string.h ****       }
 223:/usr/include/c++/7/bits/basic_string.h **** 
 224:/usr/include/c++/7/bits/basic_string.h ****       void
 225:/usr/include/c++/7/bits/basic_string.h ****       _M_destroy(size_type __size) throw()
 226:/usr/include/c++/7/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 227:/usr/include/c++/7/bits/basic_string.h **** 
 228:/usr/include/c++/7/bits/basic_string.h ****       // _M_construct_aux is used to implement the 21.3.1 para 15 which
 229:/usr/include/c++/7/bits/basic_string.h ****       // requires special behaviour if _InIterator is an integral type
 230:/usr/include/c++/7/bits/basic_string.h ****       template<typename _InIterator>
 231:/usr/include/c++/7/bits/basic_string.h ****         void
 232:/usr/include/c++/7/bits/basic_string.h ****         _M_construct_aux(_InIterator __beg, _InIterator __end,
 233:/usr/include/c++/7/bits/basic_string.h **** 			 std::__false_type)
 234:/usr/include/c++/7/bits/basic_string.h **** 	{
 235:/usr/include/c++/7/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 236:/usr/include/c++/7/bits/basic_string.h ****           _M_construct(__beg, __end, _Tag());
 237:/usr/include/c++/7/bits/basic_string.h **** 	}
 238:/usr/include/c++/7/bits/basic_string.h **** 
 239:/usr/include/c++/7/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 240:/usr/include/c++/7/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
 241:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Integer>
 242:/usr/include/c++/7/bits/basic_string.h ****         void
 243:/usr/include/c++/7/bits/basic_string.h ****         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 244:/usr/include/c++/7/bits/basic_string.h **** 	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
 245:/usr/include/c++/7/bits/basic_string.h **** 
 246:/usr/include/c++/7/bits/basic_string.h ****       void
 247:/usr/include/c++/7/bits/basic_string.h ****       _M_construct_aux_2(size_type __req, _CharT __c)
 248:/usr/include/c++/7/bits/basic_string.h ****       { _M_construct(__req, __c); }
 249:/usr/include/c++/7/bits/basic_string.h **** 
 250:/usr/include/c++/7/bits/basic_string.h ****       template<typename _InIterator>
 251:/usr/include/c++/7/bits/basic_string.h ****         void
 252:/usr/include/c++/7/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end)
 253:/usr/include/c++/7/bits/basic_string.h **** 	{
 254:/usr/include/c++/7/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
 255:/usr/include/c++/7/bits/basic_string.h **** 	  _M_construct_aux(__beg, __end, _Integral());
 256:/usr/include/c++/7/bits/basic_string.h ****         }
 257:/usr/include/c++/7/bits/basic_string.h **** 
 258:/usr/include/c++/7/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
 259:/usr/include/c++/7/bits/basic_string.h ****       template<typename _InIterator>
 260:/usr/include/c++/7/bits/basic_string.h ****         void
 261:/usr/include/c++/7/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end,
 262:/usr/include/c++/7/bits/basic_string.h **** 		     std::input_iterator_tag);
 263:/usr/include/c++/7/bits/basic_string.h **** 
 264:/usr/include/c++/7/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
 265:/usr/include/c++/7/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
 266:/usr/include/c++/7/bits/basic_string.h ****       template<typename _FwdIterator>
 267:/usr/include/c++/7/bits/basic_string.h ****         void
 268:/usr/include/c++/7/bits/basic_string.h ****         _M_construct(_FwdIterator __beg, _FwdIterator __end,
 269:/usr/include/c++/7/bits/basic_string.h **** 		     std::forward_iterator_tag);
 270:/usr/include/c++/7/bits/basic_string.h **** 
 271:/usr/include/c++/7/bits/basic_string.h ****       void
 272:/usr/include/c++/7/bits/basic_string.h ****       _M_construct(size_type __req, _CharT __c);
 273:/usr/include/c++/7/bits/basic_string.h **** 
 274:/usr/include/c++/7/bits/basic_string.h ****       allocator_type&
 275:/usr/include/c++/7/bits/basic_string.h ****       _M_get_allocator()
 276:/usr/include/c++/7/bits/basic_string.h ****       { return _M_dataplus; }
 277:/usr/include/c++/7/bits/basic_string.h **** 
 278:/usr/include/c++/7/bits/basic_string.h ****       const allocator_type&
 279:/usr/include/c++/7/bits/basic_string.h ****       _M_get_allocator() const
 280:/usr/include/c++/7/bits/basic_string.h ****       { return _M_dataplus; }
 281:/usr/include/c++/7/bits/basic_string.h **** 
 282:/usr/include/c++/7/bits/basic_string.h ****     private:
 283:/usr/include/c++/7/bits/basic_string.h **** 
 284:/usr/include/c++/7/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
 285:/usr/include/c++/7/bits/basic_string.h ****       // The explicit instantiations in misc-inst.cc require this due to
 286:/usr/include/c++/7/bits/basic_string.h ****       // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
 287:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp, bool _Requires =
 288:/usr/include/c++/7/bits/basic_string.h **** 	       !__are_same<_Tp, _CharT*>::__value
 289:/usr/include/c++/7/bits/basic_string.h **** 	       && !__are_same<_Tp, const _CharT*>::__value
 290:/usr/include/c++/7/bits/basic_string.h **** 	       && !__are_same<_Tp, iterator>::__value
 291:/usr/include/c++/7/bits/basic_string.h **** 	       && !__are_same<_Tp, const_iterator>::__value>
 292:/usr/include/c++/7/bits/basic_string.h **** 	struct __enable_if_not_native_iterator
 293:/usr/include/c++/7/bits/basic_string.h **** 	{ typedef basic_string& __type; };
 294:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
 295:/usr/include/c++/7/bits/basic_string.h **** 	struct __enable_if_not_native_iterator<_Tp, false> { };
 296:/usr/include/c++/7/bits/basic_string.h **** #endif
 297:/usr/include/c++/7/bits/basic_string.h **** 
 298:/usr/include/c++/7/bits/basic_string.h ****       size_type
 299:/usr/include/c++/7/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
 300:/usr/include/c++/7/bits/basic_string.h ****       {
 301:/usr/include/c++/7/bits/basic_string.h **** 	if (__pos > this->size())
 302:/usr/include/c++/7/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 303:/usr/include/c++/7/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
 304:/usr/include/c++/7/bits/basic_string.h **** 				   __s, __pos, this->size());
 305:/usr/include/c++/7/bits/basic_string.h **** 	return __pos;
 306:/usr/include/c++/7/bits/basic_string.h ****       }
 307:/usr/include/c++/7/bits/basic_string.h **** 
 308:/usr/include/c++/7/bits/basic_string.h ****       void
 309:/usr/include/c++/7/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 310:/usr/include/c++/7/bits/basic_string.h ****       {
 311:/usr/include/c++/7/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
 312:/usr/include/c++/7/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
 313:/usr/include/c++/7/bits/basic_string.h ****       }
 314:/usr/include/c++/7/bits/basic_string.h **** 
 315:/usr/include/c++/7/bits/basic_string.h **** 
 316:/usr/include/c++/7/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
 317:/usr/include/c++/7/bits/basic_string.h ****       size_type
 318:/usr/include/c++/7/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 319:/usr/include/c++/7/bits/basic_string.h ****       {
 320:/usr/include/c++/7/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
 321:/usr/include/c++/7/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
 322:/usr/include/c++/7/bits/basic_string.h ****       }
 323:/usr/include/c++/7/bits/basic_string.h **** 
 324:/usr/include/c++/7/bits/basic_string.h ****       // True if _Rep and source do not overlap.
 325:/usr/include/c++/7/bits/basic_string.h ****       bool
 326:/usr/include/c++/7/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 327:/usr/include/c++/7/bits/basic_string.h ****       {
 328:/usr/include/c++/7/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
 329:/usr/include/c++/7/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 330:/usr/include/c++/7/bits/basic_string.h ****       }
 331:/usr/include/c++/7/bits/basic_string.h **** 
 332:/usr/include/c++/7/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
 333:/usr/include/c++/7/bits/basic_string.h ****       // traits_type::copy/move/assign.
 334:/usr/include/c++/7/bits/basic_string.h ****       static void
 335:/usr/include/c++/7/bits/basic_string.h ****       _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 336:/usr/include/c++/7/bits/basic_string.h ****       {
 337:/usr/include/c++/7/bits/basic_string.h **** 	if (__n == 1)
 338:/usr/include/c++/7/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 339:/usr/include/c++/7/bits/basic_string.h **** 	else
 340:/usr/include/c++/7/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
 341:/usr/include/c++/7/bits/basic_string.h ****       }
 342:/usr/include/c++/7/bits/basic_string.h **** 
 343:/usr/include/c++/7/bits/basic_string.h ****       static void
 344:/usr/include/c++/7/bits/basic_string.h ****       _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 345:/usr/include/c++/7/bits/basic_string.h ****       {
 346:/usr/include/c++/7/bits/basic_string.h **** 	if (__n == 1)
 347:/usr/include/c++/7/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 348:/usr/include/c++/7/bits/basic_string.h **** 	else
 349:/usr/include/c++/7/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);
 350:/usr/include/c++/7/bits/basic_string.h ****       }
 351:/usr/include/c++/7/bits/basic_string.h **** 
 352:/usr/include/c++/7/bits/basic_string.h ****       static void
 353:/usr/include/c++/7/bits/basic_string.h ****       _S_assign(_CharT* __d, size_type __n, _CharT __c)
 354:/usr/include/c++/7/bits/basic_string.h ****       {
 355:/usr/include/c++/7/bits/basic_string.h **** 	if (__n == 1)
 356:/usr/include/c++/7/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
 357:/usr/include/c++/7/bits/basic_string.h **** 	else
 358:/usr/include/c++/7/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);
 359:/usr/include/c++/7/bits/basic_string.h ****       }
 360:/usr/include/c++/7/bits/basic_string.h **** 
 361:/usr/include/c++/7/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
 362:/usr/include/c++/7/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
 363:/usr/include/c++/7/bits/basic_string.h ****       template<class _Iterator>
 364:/usr/include/c++/7/bits/basic_string.h ****         static void
 365:/usr/include/c++/7/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 366:/usr/include/c++/7/bits/basic_string.h ****         {
 367:/usr/include/c++/7/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
 368:/usr/include/c++/7/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
 369:/usr/include/c++/7/bits/basic_string.h **** 	}
 370:/usr/include/c++/7/bits/basic_string.h **** 
 371:/usr/include/c++/7/bits/basic_string.h ****       static void
 372:/usr/include/c++/7/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
 373:/usr/include/c++/7/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 374:/usr/include/c++/7/bits/basic_string.h **** 
 375:/usr/include/c++/7/bits/basic_string.h ****       static void
 376:/usr/include/c++/7/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
 377:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 378:/usr/include/c++/7/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 379:/usr/include/c++/7/bits/basic_string.h **** 
 380:/usr/include/c++/7/bits/basic_string.h ****       static void
 381:/usr/include/c++/7/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 382:/usr/include/c++/7/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 383:/usr/include/c++/7/bits/basic_string.h **** 
 384:/usr/include/c++/7/bits/basic_string.h ****       static void
 385:/usr/include/c++/7/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 386:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 387:/usr/include/c++/7/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 388:/usr/include/c++/7/bits/basic_string.h **** 
 389:/usr/include/c++/7/bits/basic_string.h ****       static int
 390:/usr/include/c++/7/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 391:/usr/include/c++/7/bits/basic_string.h ****       {
 392:/usr/include/c++/7/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
 393:/usr/include/c++/7/bits/basic_string.h **** 
 394:/usr/include/c++/7/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
 395:/usr/include/c++/7/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
 396:/usr/include/c++/7/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
 397:/usr/include/c++/7/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
 398:/usr/include/c++/7/bits/basic_string.h **** 	else
 399:/usr/include/c++/7/bits/basic_string.h **** 	  return int(__d);
 400:/usr/include/c++/7/bits/basic_string.h ****       }
 401:/usr/include/c++/7/bits/basic_string.h **** 
 402:/usr/include/c++/7/bits/basic_string.h ****       void
 403:/usr/include/c++/7/bits/basic_string.h ****       _M_assign(const basic_string&);
 404:/usr/include/c++/7/bits/basic_string.h **** 
 405:/usr/include/c++/7/bits/basic_string.h ****       void
 406:/usr/include/c++/7/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
 407:/usr/include/c++/7/bits/basic_string.h **** 		size_type __len2);
 408:/usr/include/c++/7/bits/basic_string.h **** 
 409:/usr/include/c++/7/bits/basic_string.h ****       void
 410:/usr/include/c++/7/bits/basic_string.h ****       _M_erase(size_type __pos, size_type __n);
 411:/usr/include/c++/7/bits/basic_string.h **** 
 412:/usr/include/c++/7/bits/basic_string.h ****     public:
 413:/usr/include/c++/7/bits/basic_string.h ****       // Construct/copy/destroy:
 414:/usr/include/c++/7/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
 415:/usr/include/c++/7/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
 416:/usr/include/c++/7/bits/basic_string.h **** 
 417:/usr/include/c++/7/bits/basic_string.h ****       /**
 418:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
 419:/usr/include/c++/7/bits/basic_string.h ****        */
 420:/usr/include/c++/7/bits/basic_string.h ****       basic_string()
 421:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 422:/usr/include/c++/7/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 423:/usr/include/c++/7/bits/basic_string.h ****       { _M_set_length(0); }
 424:/usr/include/c++/7/bits/basic_string.h **** 
 425:/usr/include/c++/7/bits/basic_string.h ****       /**
 426:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
 427:/usr/include/c++/7/bits/basic_string.h ****        */
 428:/usr/include/c++/7/bits/basic_string.h ****       explicit
 429:/usr/include/c++/7/bits/basic_string.h ****       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT
 430:/usr/include/c++/7/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 431:/usr/include/c++/7/bits/basic_string.h ****       { _M_set_length(0); }
 432:/usr/include/c++/7/bits/basic_string.h **** 
 433:/usr/include/c++/7/bits/basic_string.h ****       /**
 434:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a __str.
 435:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string.
 436:/usr/include/c++/7/bits/basic_string.h ****        */
 437:/usr/include/c++/7/bits/basic_string.h ****       basic_string(const basic_string& __str)
 438:/usr/include/c++/7/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 439:/usr/include/c++/7/bits/basic_string.h **** 		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 440:/usr/include/c++/7/bits/basic_string.h ****       { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 441:/usr/include/c++/7/bits/basic_string.h **** 
 442:/usr/include/c++/7/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 443:/usr/include/c++/7/bits/basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
 444:/usr/include/c++/7/bits/basic_string.h ****       /**
 445:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 446:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string.
 447:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 448:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 449:/usr/include/c++/7/bits/basic_string.h ****        */
 450:/usr/include/c++/7/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 451:/usr/include/c++/7/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 452:/usr/include/c++/7/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 453:/usr/include/c++/7/bits/basic_string.h ****       {
 454:/usr/include/c++/7/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 455:/usr/include/c++/7/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 456:/usr/include/c++/7/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, npos));
 457:/usr/include/c++/7/bits/basic_string.h ****       }
 458:/usr/include/c++/7/bits/basic_string.h **** 
 459:/usr/include/c++/7/bits/basic_string.h ****       /**
 460:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 461:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string.
 462:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 463:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 464:/usr/include/c++/7/bits/basic_string.h ****        */
 465:/usr/include/c++/7/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 466:/usr/include/c++/7/bits/basic_string.h **** 		   size_type __n)
 467:/usr/include/c++/7/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 468:/usr/include/c++/7/bits/basic_string.h ****       {
 469:/usr/include/c++/7/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 470:/usr/include/c++/7/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 471:/usr/include/c++/7/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 472:/usr/include/c++/7/bits/basic_string.h ****       }
 473:/usr/include/c++/7/bits/basic_string.h **** 
 474:/usr/include/c++/7/bits/basic_string.h ****       /**
 475:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 476:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string.
 477:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 478:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 479:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 480:/usr/include/c++/7/bits/basic_string.h ****        */
 481:/usr/include/c++/7/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 482:/usr/include/c++/7/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a)
 483:/usr/include/c++/7/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 484:/usr/include/c++/7/bits/basic_string.h ****       {
 485:/usr/include/c++/7/bits/basic_string.h **** 	const _CharT* __start
 486:/usr/include/c++/7/bits/basic_string.h **** 	  = __str._M_data() + __str._M_check(__pos, "string::string");
 487:/usr/include/c++/7/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 488:/usr/include/c++/7/bits/basic_string.h ****       }
 489:/usr/include/c++/7/bits/basic_string.h **** 
 490:/usr/include/c++/7/bits/basic_string.h ****       /**
 491:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
 492:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __s  Source character %array.
 493:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 494:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 495:/usr/include/c++/7/bits/basic_string.h ****        *
 496:/usr/include/c++/7/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
 497:/usr/include/c++/7/bits/basic_string.h ****        *  has no special meaning.
 498:/usr/include/c++/7/bits/basic_string.h ****        */
 499:/usr/include/c++/7/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
 500:/usr/include/c++/7/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 501:/usr/include/c++/7/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 502:/usr/include/c++/7/bits/basic_string.h ****       { _M_construct(__s, __s + __n); }
 503:/usr/include/c++/7/bits/basic_string.h **** 
 504:/usr/include/c++/7/bits/basic_string.h ****       /**
 505:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
 506:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __s  Source C string.
 507:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 508:/usr/include/c++/7/bits/basic_string.h ****        */
 509:/usr/include/c++/7/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 510:/usr/include/c++/7/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 511:/usr/include/c++/7/bits/basic_string.h ****       { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 512:/usr/include/c++/7/bits/basic_string.h **** 
 513:/usr/include/c++/7/bits/basic_string.h ****       /**
 514:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
 515:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __n  Number of characters.
 516:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __c  Character to use.
 517:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 518:/usr/include/c++/7/bits/basic_string.h ****        */
 519:/usr/include/c++/7/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 520:/usr/include/c++/7/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 521:/usr/include/c++/7/bits/basic_string.h ****       { _M_construct(__n, __c); }
 522:/usr/include/c++/7/bits/basic_string.h **** 
 523:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
 524:/usr/include/c++/7/bits/basic_string.h ****       /**
 525:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Move construct string.
 526:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string.
 527:/usr/include/c++/7/bits/basic_string.h ****        *
 528:/usr/include/c++/7/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
 529:/usr/include/c++/7/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
 530:/usr/include/c++/7/bits/basic_string.h ****        **/
 531:/usr/include/c++/7/bits/basic_string.h ****       basic_string(basic_string&& __str) noexcept
 532:/usr/include/c++/7/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 533:/usr/include/c++/7/bits/basic_string.h ****       {
 534:/usr/include/c++/7/bits/basic_string.h **** 	if (__str._M_is_local())
 535:/usr/include/c++/7/bits/basic_string.h **** 	  {
 536:/usr/include/c++/7/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 537:/usr/include/c++/7/bits/basic_string.h **** 			      _S_local_capacity + 1);
 538:/usr/include/c++/7/bits/basic_string.h **** 	  }
 539:/usr/include/c++/7/bits/basic_string.h **** 	else
 540:/usr/include/c++/7/bits/basic_string.h **** 	  {
 541:/usr/include/c++/7/bits/basic_string.h **** 	    _M_data(__str._M_data());
 542:/usr/include/c++/7/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 543:/usr/include/c++/7/bits/basic_string.h **** 	  }
 544:/usr/include/c++/7/bits/basic_string.h **** 
 545:/usr/include/c++/7/bits/basic_string.h **** 	// Must use _M_length() here not _M_set_length() because
 546:/usr/include/c++/7/bits/basic_string.h **** 	// basic_stringbuf relies on writing into unallocated capacity so
 547:/usr/include/c++/7/bits/basic_string.h **** 	// we mess up the contents if we put a '\0' in the string.
 548:/usr/include/c++/7/bits/basic_string.h **** 	_M_length(__str.length());
 549:/usr/include/c++/7/bits/basic_string.h **** 	__str._M_data(__str._M_local_data());
 550:/usr/include/c++/7/bits/basic_string.h **** 	__str._M_set_length(0);
 551:/usr/include/c++/7/bits/basic_string.h ****       }
 552:/usr/include/c++/7/bits/basic_string.h **** 
 553:/usr/include/c++/7/bits/basic_string.h ****       /**
 554:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
 555:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
 556:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 557:/usr/include/c++/7/bits/basic_string.h ****        */
 558:/usr/include/c++/7/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
 559:/usr/include/c++/7/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 560:/usr/include/c++/7/bits/basic_string.h ****       { _M_construct(__l.begin(), __l.end()); }
 561:/usr/include/c++/7/bits/basic_string.h **** 
 562:/usr/include/c++/7/bits/basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
 563:/usr/include/c++/7/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 564:/usr/include/c++/7/bits/basic_string.h ****       { _M_construct(__str.begin(), __str.end()); }
 565:/usr/include/c++/7/bits/basic_string.h **** 
 566:/usr/include/c++/7/bits/basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
 567:/usr/include/c++/7/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_always_equal())
 568:/usr/include/c++/7/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 569:/usr/include/c++/7/bits/basic_string.h ****       {
 570:/usr/include/c++/7/bits/basic_string.h **** 	if (__str._M_is_local())
 571:/usr/include/c++/7/bits/basic_string.h **** 	  {
 572:/usr/include/c++/7/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 573:/usr/include/c++/7/bits/basic_string.h **** 			      _S_local_capacity + 1);
 574:/usr/include/c++/7/bits/basic_string.h **** 	    _M_length(__str.length());
 575:/usr/include/c++/7/bits/basic_string.h **** 	    __str._M_set_length(0);
 576:/usr/include/c++/7/bits/basic_string.h **** 	  }
 577:/usr/include/c++/7/bits/basic_string.h **** 	else if (_Alloc_traits::_S_always_equal()
 578:/usr/include/c++/7/bits/basic_string.h **** 	    || __str.get_allocator() == __a)
 579:/usr/include/c++/7/bits/basic_string.h **** 	  {
 580:/usr/include/c++/7/bits/basic_string.h **** 	    _M_data(__str._M_data());
 581:/usr/include/c++/7/bits/basic_string.h **** 	    _M_length(__str.length());
 582:/usr/include/c++/7/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 583:/usr/include/c++/7/bits/basic_string.h **** 	    __str._M_data(__str._M_local_buf);
 584:/usr/include/c++/7/bits/basic_string.h **** 	    __str._M_set_length(0);
 585:/usr/include/c++/7/bits/basic_string.h **** 	  }
 586:/usr/include/c++/7/bits/basic_string.h **** 	else
 587:/usr/include/c++/7/bits/basic_string.h **** 	  _M_construct(__str.begin(), __str.end());
 588:/usr/include/c++/7/bits/basic_string.h ****       }
 589:/usr/include/c++/7/bits/basic_string.h **** 
 590:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
 591:/usr/include/c++/7/bits/basic_string.h **** 
 592:/usr/include/c++/7/bits/basic_string.h ****       /**
 593:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
 594:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __beg  Start of range.
 595:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __end  End of range.
 596:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 597:/usr/include/c++/7/bits/basic_string.h ****        */
 598:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
 599:/usr/include/c++/7/bits/basic_string.h ****       template<typename _InputIterator,
 600:/usr/include/c++/7/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 601:/usr/include/c++/7/bits/basic_string.h **** #else
 602:/usr/include/c++/7/bits/basic_string.h ****       template<typename _InputIterator>
 603:/usr/include/c++/7/bits/basic_string.h **** #endif
 604:/usr/include/c++/7/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
 605:/usr/include/c++/7/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 606:/usr/include/c++/7/bits/basic_string.h **** 	: _M_dataplus(_M_local_data(), __a)
 607:/usr/include/c++/7/bits/basic_string.h **** 	{ _M_construct(__beg, __end); }
 608:/usr/include/c++/7/bits/basic_string.h **** 
 609:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
 610:/usr/include/c++/7/bits/basic_string.h ****       /**
 611:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string from a substring of a string_view.
 612:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __t   Source object convertible to string view.
 613:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __pos The index of the first character to copy from __t.
 614:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __n   The number of characters to copy from __t.
 615:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a   Allocator to use.
 616:/usr/include/c++/7/bits/basic_string.h ****        */
 617:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 618:/usr/include/c++/7/bits/basic_string.h **** 	basic_string(const _Tp& __t, size_type __pos, size_type __n,
 619:/usr/include/c++/7/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 620:/usr/include/c++/7/bits/basic_string.h **** 	: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }
 621:/usr/include/c++/7/bits/basic_string.h **** 
 622:/usr/include/c++/7/bits/basic_string.h ****       /**
 623:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string from a string_view.
 624:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __t  Source object convertible to string view.
 625:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 626:/usr/include/c++/7/bits/basic_string.h ****        */
 627:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 628:/usr/include/c++/7/bits/basic_string.h **** 	explicit
 629:/usr/include/c++/7/bits/basic_string.h **** 	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
 630:/usr/include/c++/7/bits/basic_string.h **** 	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
 631:/usr/include/c++/7/bits/basic_string.h **** 
 632:/usr/include/c++/7/bits/basic_string.h ****       /**
 633:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
 634:/usr/include/c++/7/bits/basic_string.h ****        *          wrapper.
 635:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __svw  string view wrapper.
 636:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 637:/usr/include/c++/7/bits/basic_string.h ****        */
 638:/usr/include/c++/7/bits/basic_string.h ****       explicit
 639:/usr/include/c++/7/bits/basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
 640:/usr/include/c++/7/bits/basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
 641:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
 642:/usr/include/c++/7/bits/basic_string.h **** 
 643:/usr/include/c++/7/bits/basic_string.h ****       /**
 644:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Destroy the string instance.
 645:/usr/include/c++/7/bits/basic_string.h ****        */
 646:/usr/include/c++/7/bits/basic_string.h ****       ~basic_string()
 647:/usr/include/c++/7/bits/basic_string.h ****       { _M_dispose(); }
 648:/usr/include/c++/7/bits/basic_string.h **** 
 649:/usr/include/c++/7/bits/basic_string.h ****       /**
 650:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
 651:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string.
 652:/usr/include/c++/7/bits/basic_string.h ****        */
 653:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
 654:/usr/include/c++/7/bits/basic_string.h ****       operator=(const basic_string& __str)
 655:/usr/include/c++/7/bits/basic_string.h ****       {
 656:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
 657:/usr/include/c++/7/bits/basic_string.h **** 	if (_Alloc_traits::_S_propagate_on_copy_assign())
 658:/usr/include/c++/7/bits/basic_string.h **** 	  {
 659:/usr/include/c++/7/bits/basic_string.h **** 	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
 660:/usr/include/c++/7/bits/basic_string.h **** 		&& _M_get_allocator() != __str._M_get_allocator())
 661:/usr/include/c++/7/bits/basic_string.h **** 	      {
 662:/usr/include/c++/7/bits/basic_string.h **** 		// Propagating allocator cannot free existing storage so must
 663:/usr/include/c++/7/bits/basic_string.h **** 		// deallocate it before replacing current allocator.
 664:/usr/include/c++/7/bits/basic_string.h **** 		if (__str.size() <= _S_local_capacity)
 665:/usr/include/c++/7/bits/basic_string.h **** 		  {
 666:/usr/include/c++/7/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
 667:/usr/include/c++/7/bits/basic_string.h **** 		    _M_data(_M_local_data());
 668:/usr/include/c++/7/bits/basic_string.h **** 		    _M_set_length(0);
 669:/usr/include/c++/7/bits/basic_string.h **** 		  }
 670:/usr/include/c++/7/bits/basic_string.h **** 		else
 671:/usr/include/c++/7/bits/basic_string.h **** 		  {
 672:/usr/include/c++/7/bits/basic_string.h **** 		    const auto __len = __str.size();
 673:/usr/include/c++/7/bits/basic_string.h **** 		    auto __alloc = __str._M_get_allocator();
 674:/usr/include/c++/7/bits/basic_string.h **** 		    // If this allocation throws there are no effects:
 675:/usr/include/c++/7/bits/basic_string.h **** 		    auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
 676:/usr/include/c++/7/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
 677:/usr/include/c++/7/bits/basic_string.h **** 		    _M_data(__ptr);
 678:/usr/include/c++/7/bits/basic_string.h **** 		    _M_capacity(__len);
 679:/usr/include/c++/7/bits/basic_string.h **** 		    _M_set_length(__len);
 680:/usr/include/c++/7/bits/basic_string.h **** 		  }
 681:/usr/include/c++/7/bits/basic_string.h **** 	      }
 682:/usr/include/c++/7/bits/basic_string.h **** 	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
 683:/usr/include/c++/7/bits/basic_string.h **** 	  }
 684:/usr/include/c++/7/bits/basic_string.h **** #endif
 685:/usr/include/c++/7/bits/basic_string.h **** 	return this->assign(__str);
 686:/usr/include/c++/7/bits/basic_string.h ****       }
 687:/usr/include/c++/7/bits/basic_string.h **** 
 688:/usr/include/c++/7/bits/basic_string.h ****       /**
 689:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
 690:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
 691:/usr/include/c++/7/bits/basic_string.h ****        */
 692:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
 693:/usr/include/c++/7/bits/basic_string.h ****       operator=(const _CharT* __s)
 694:/usr/include/c++/7/bits/basic_string.h ****       { return this->assign(__s); }
 695:/usr/include/c++/7/bits/basic_string.h **** 
 696:/usr/include/c++/7/bits/basic_string.h ****       /**
 697:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
 698:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __c  Source character.
 699:/usr/include/c++/7/bits/basic_string.h ****        *
 700:/usr/include/c++/7/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
 701:/usr/include/c++/7/bits/basic_string.h ****        *  (*this)[0] == @a c.
 702:/usr/include/c++/7/bits/basic_string.h ****        */
 703:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
 704:/usr/include/c++/7/bits/basic_string.h ****       operator=(_CharT __c)
 705:/usr/include/c++/7/bits/basic_string.h ****       {
 706:/usr/include/c++/7/bits/basic_string.h **** 	this->assign(1, __c);
 707:/usr/include/c++/7/bits/basic_string.h **** 	return *this;
 708:/usr/include/c++/7/bits/basic_string.h ****       }
 709:/usr/include/c++/7/bits/basic_string.h **** 
 710:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
 711:/usr/include/c++/7/bits/basic_string.h ****       /**
 712:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
 713:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string.
 714:/usr/include/c++/7/bits/basic_string.h ****        *
 715:/usr/include/c++/7/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
 716:/usr/include/c++/7/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
 717:/usr/include/c++/7/bits/basic_string.h ****        **/
 718:/usr/include/c++/7/bits/basic_string.h ****       // PR 58265, this should be noexcept.
 719:/usr/include/c++/7/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 720:/usr/include/c++/7/bits/basic_string.h ****       // 2063. Contradictory requirements for string move assignment
 721:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
 722:/usr/include/c++/7/bits/basic_string.h ****       operator=(basic_string&& __str)
 723:/usr/include/c++/7/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 724:/usr/include/c++/7/bits/basic_string.h ****       {
 725:/usr/include/c++/7/bits/basic_string.h **** 	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
 726:/usr/include/c++/7/bits/basic_string.h **** 	    && !_Alloc_traits::_S_always_equal()
 727:/usr/include/c++/7/bits/basic_string.h **** 	    && _M_get_allocator() != __str._M_get_allocator())
 728:/usr/include/c++/7/bits/basic_string.h **** 	  {
 729:/usr/include/c++/7/bits/basic_string.h **** 	    // Destroy existing storage before replacing allocator.
 730:/usr/include/c++/7/bits/basic_string.h **** 	    _M_destroy(_M_allocated_capacity);
 731:/usr/include/c++/7/bits/basic_string.h **** 	    _M_data(_M_local_data());
 732:/usr/include/c++/7/bits/basic_string.h **** 	    _M_set_length(0);
 733:/usr/include/c++/7/bits/basic_string.h **** 	  }
 734:/usr/include/c++/7/bits/basic_string.h **** 	// Replace allocator if POCMA is true.
 735:/usr/include/c++/7/bits/basic_string.h **** 	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
 736:/usr/include/c++/7/bits/basic_string.h **** 
 737:/usr/include/c++/7/bits/basic_string.h **** 	if (!__str._M_is_local()
 738:/usr/include/c++/7/bits/basic_string.h **** 	    && (_Alloc_traits::_S_propagate_on_move_assign()
 739:/usr/include/c++/7/bits/basic_string.h **** 	      || _Alloc_traits::_S_always_equal()))
 740:/usr/include/c++/7/bits/basic_string.h **** 	  {
 741:/usr/include/c++/7/bits/basic_string.h **** 	    pointer __data = nullptr;
 742:/usr/include/c++/7/bits/basic_string.h **** 	    size_type __capacity;
 743:/usr/include/c++/7/bits/basic_string.h **** 	    if (!_M_is_local())
 744:/usr/include/c++/7/bits/basic_string.h **** 	      {
 745:/usr/include/c++/7/bits/basic_string.h **** 		if (_Alloc_traits::_S_always_equal())
 746:/usr/include/c++/7/bits/basic_string.h **** 		  {
 747:/usr/include/c++/7/bits/basic_string.h **** 		    __data = _M_data();
 748:/usr/include/c++/7/bits/basic_string.h **** 		    __capacity = _M_allocated_capacity;
 749:/usr/include/c++/7/bits/basic_string.h **** 		  }
 750:/usr/include/c++/7/bits/basic_string.h **** 		else
 751:/usr/include/c++/7/bits/basic_string.h **** 		  _M_destroy(_M_allocated_capacity);
 752:/usr/include/c++/7/bits/basic_string.h **** 	      }
 753:/usr/include/c++/7/bits/basic_string.h **** 
 754:/usr/include/c++/7/bits/basic_string.h **** 	    _M_data(__str._M_data());
 755:/usr/include/c++/7/bits/basic_string.h **** 	    _M_length(__str.length());
 756:/usr/include/c++/7/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 757:/usr/include/c++/7/bits/basic_string.h **** 	    if (__data)
 758:/usr/include/c++/7/bits/basic_string.h **** 	      {
 759:/usr/include/c++/7/bits/basic_string.h **** 		__str._M_data(__data);
 760:/usr/include/c++/7/bits/basic_string.h **** 		__str._M_capacity(__capacity);
 761:/usr/include/c++/7/bits/basic_string.h **** 	      }
 762:/usr/include/c++/7/bits/basic_string.h **** 	    else
 763:/usr/include/c++/7/bits/basic_string.h **** 	      __str._M_data(__str._M_local_buf);
 764:/usr/include/c++/7/bits/basic_string.h **** 	  }
 765:/usr/include/c++/7/bits/basic_string.h **** 	else
 766:/usr/include/c++/7/bits/basic_string.h **** 	    assign(__str);
 767:/usr/include/c++/7/bits/basic_string.h **** 	__str.clear();
 768:/usr/include/c++/7/bits/basic_string.h **** 	return *this;
 769:/usr/include/c++/7/bits/basic_string.h ****       }
 770:/usr/include/c++/7/bits/basic_string.h **** 
 771:/usr/include/c++/7/bits/basic_string.h ****       /**
 772:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
 773:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
 774:/usr/include/c++/7/bits/basic_string.h ****        */
 775:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
 776:/usr/include/c++/7/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
 777:/usr/include/c++/7/bits/basic_string.h ****       {
 778:/usr/include/c++/7/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
 779:/usr/include/c++/7/bits/basic_string.h **** 	return *this;
 780:/usr/include/c++/7/bits/basic_string.h ****       }
 781:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
 782:/usr/include/c++/7/bits/basic_string.h **** 
 783:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
 784:/usr/include/c++/7/bits/basic_string.h ****       /**
 785:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to string constructed from a string_view.
 786:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __svt  An object convertible to string_view.
 787:/usr/include/c++/7/bits/basic_string.h ****        */
 788:/usr/include/c++/7/bits/basic_string.h ****      template<typename _Tp>
 789:/usr/include/c++/7/bits/basic_string.h ****        _If_sv<_Tp, basic_string&>
 790:/usr/include/c++/7/bits/basic_string.h ****        operator=(const _Tp& __svt)
 791:/usr/include/c++/7/bits/basic_string.h ****        { return this->assign(__svt); }
 792:/usr/include/c++/7/bits/basic_string.h **** 
 793:/usr/include/c++/7/bits/basic_string.h ****       /**
 794:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Convert to a string_view.
 795:/usr/include/c++/7/bits/basic_string.h ****        *  @return A string_view.
 796:/usr/include/c++/7/bits/basic_string.h ****        */
 797:/usr/include/c++/7/bits/basic_string.h ****       operator __sv_type() const noexcept
 798:/usr/include/c++/7/bits/basic_string.h ****       { return __sv_type(data(), size()); }
 799:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
 800:/usr/include/c++/7/bits/basic_string.h **** 
 801:/usr/include/c++/7/bits/basic_string.h ****       // Iterators:
 802:/usr/include/c++/7/bits/basic_string.h ****       /**
 803:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
 804:/usr/include/c++/7/bits/basic_string.h ****        *  the %string.
 805:/usr/include/c++/7/bits/basic_string.h ****        */
 806:/usr/include/c++/7/bits/basic_string.h ****       iterator
 807:/usr/include/c++/7/bits/basic_string.h ****       begin() _GLIBCXX_NOEXCEPT
 808:/usr/include/c++/7/bits/basic_string.h ****       { return iterator(_M_data()); }
 809:/usr/include/c++/7/bits/basic_string.h **** 
 810:/usr/include/c++/7/bits/basic_string.h ****       /**
 811:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 812:/usr/include/c++/7/bits/basic_string.h ****        *  character in the %string.
 813:/usr/include/c++/7/bits/basic_string.h ****        */
 814:/usr/include/c++/7/bits/basic_string.h ****       const_iterator
 815:/usr/include/c++/7/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
 816:/usr/include/c++/7/bits/basic_string.h ****       { return const_iterator(_M_data()); }
 817:/usr/include/c++/7/bits/basic_string.h **** 
 818:/usr/include/c++/7/bits/basic_string.h ****       /**
 819:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
 820:/usr/include/c++/7/bits/basic_string.h ****        *  character in the %string.
 821:/usr/include/c++/7/bits/basic_string.h ****        */
 822:/usr/include/c++/7/bits/basic_string.h ****       iterator
 823:/usr/include/c++/7/bits/basic_string.h ****       end() _GLIBCXX_NOEXCEPT
 824:/usr/include/c++/7/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 825:/usr/include/c++/7/bits/basic_string.h **** 
 826:/usr/include/c++/7/bits/basic_string.h ****       /**
 827:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 828:/usr/include/c++/7/bits/basic_string.h ****        *  last character in the %string.
 829:/usr/include/c++/7/bits/basic_string.h ****        */
 830:/usr/include/c++/7/bits/basic_string.h ****       const_iterator
 831:/usr/include/c++/7/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
 832:/usr/include/c++/7/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
 833:/usr/include/c++/7/bits/basic_string.h **** 
 834:/usr/include/c++/7/bits/basic_string.h ****       /**
 835:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
 836:/usr/include/c++/7/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
 837:/usr/include/c++/7/bits/basic_string.h ****        *  order.
 838:/usr/include/c++/7/bits/basic_string.h ****        */
 839:/usr/include/c++/7/bits/basic_string.h ****       reverse_iterator
 840:/usr/include/c++/7/bits/basic_string.h ****       rbegin() _GLIBCXX_NOEXCEPT
 841:/usr/include/c++/7/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
 842:/usr/include/c++/7/bits/basic_string.h **** 
 843:/usr/include/c++/7/bits/basic_string.h ****       /**
 844:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 845:/usr/include/c++/7/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 846:/usr/include/c++/7/bits/basic_string.h ****        *  reverse element order.
 847:/usr/include/c++/7/bits/basic_string.h ****        */
 848:/usr/include/c++/7/bits/basic_string.h ****       const_reverse_iterator
 849:/usr/include/c++/7/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 850:/usr/include/c++/7/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 851:/usr/include/c++/7/bits/basic_string.h **** 
 852:/usr/include/c++/7/bits/basic_string.h ****       /**
 853:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
 854:/usr/include/c++/7/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
 855:/usr/include/c++/7/bits/basic_string.h ****        *  element order.
 856:/usr/include/c++/7/bits/basic_string.h ****        */
 857:/usr/include/c++/7/bits/basic_string.h ****       reverse_iterator
 858:/usr/include/c++/7/bits/basic_string.h ****       rend() _GLIBCXX_NOEXCEPT
 859:/usr/include/c++/7/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
 860:/usr/include/c++/7/bits/basic_string.h **** 
 861:/usr/include/c++/7/bits/basic_string.h ****       /**
 862:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 863:/usr/include/c++/7/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 864:/usr/include/c++/7/bits/basic_string.h ****        *  is done in reverse element order.
 865:/usr/include/c++/7/bits/basic_string.h ****        */
 866:/usr/include/c++/7/bits/basic_string.h ****       const_reverse_iterator
 867:/usr/include/c++/7/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
 868:/usr/include/c++/7/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 869:/usr/include/c++/7/bits/basic_string.h **** 
 870:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
 871:/usr/include/c++/7/bits/basic_string.h ****       /**
 872:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 873:/usr/include/c++/7/bits/basic_string.h ****        *  character in the %string.
 874:/usr/include/c++/7/bits/basic_string.h ****        */
 875:/usr/include/c++/7/bits/basic_string.h ****       const_iterator
 876:/usr/include/c++/7/bits/basic_string.h ****       cbegin() const noexcept
 877:/usr/include/c++/7/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
 878:/usr/include/c++/7/bits/basic_string.h **** 
 879:/usr/include/c++/7/bits/basic_string.h ****       /**
 880:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 881:/usr/include/c++/7/bits/basic_string.h ****        *  last character in the %string.
 882:/usr/include/c++/7/bits/basic_string.h ****        */
 883:/usr/include/c++/7/bits/basic_string.h ****       const_iterator
 884:/usr/include/c++/7/bits/basic_string.h ****       cend() const noexcept
 885:/usr/include/c++/7/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
 886:/usr/include/c++/7/bits/basic_string.h **** 
 887:/usr/include/c++/7/bits/basic_string.h ****       /**
 888:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 889:/usr/include/c++/7/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 890:/usr/include/c++/7/bits/basic_string.h ****        *  reverse element order.
 891:/usr/include/c++/7/bits/basic_string.h ****        */
 892:/usr/include/c++/7/bits/basic_string.h ****       const_reverse_iterator
 893:/usr/include/c++/7/bits/basic_string.h ****       crbegin() const noexcept
 894:/usr/include/c++/7/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 895:/usr/include/c++/7/bits/basic_string.h **** 
 896:/usr/include/c++/7/bits/basic_string.h ****       /**
 897:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 898:/usr/include/c++/7/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 899:/usr/include/c++/7/bits/basic_string.h ****        *  is done in reverse element order.
 900:/usr/include/c++/7/bits/basic_string.h ****        */
 901:/usr/include/c++/7/bits/basic_string.h ****       const_reverse_iterator
 902:/usr/include/c++/7/bits/basic_string.h ****       crend() const noexcept
 903:/usr/include/c++/7/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 904:/usr/include/c++/7/bits/basic_string.h **** #endif
 905:/usr/include/c++/7/bits/basic_string.h **** 
 906:/usr/include/c++/7/bits/basic_string.h ****     public:
 907:/usr/include/c++/7/bits/basic_string.h ****       // Capacity:
 908:/usr/include/c++/7/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 909:/usr/include/c++/7/bits/basic_string.h ****       ///  null-termination.
 910:/usr/include/c++/7/bits/basic_string.h ****       size_type
 911:/usr/include/c++/7/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
 912:/usr/include/c++/7/bits/basic_string.h ****       { return _M_string_length; }
 913:/usr/include/c++/7/bits/basic_string.h **** 
 914:/usr/include/c++/7/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 915:/usr/include/c++/7/bits/basic_string.h ****       ///  null-termination.
 916:/usr/include/c++/7/bits/basic_string.h ****       size_type
 917:/usr/include/c++/7/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
 918:/usr/include/c++/7/bits/basic_string.h ****       { return _M_string_length; }
 919:/usr/include/c++/7/bits/basic_string.h **** 
 920:/usr/include/c++/7/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
 921:/usr/include/c++/7/bits/basic_string.h ****       size_type
 922:/usr/include/c++/7/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
 923:/usr/include/c++/7/bits/basic_string.h ****       { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 924:/usr/include/c++/7/bits/basic_string.h **** 
 925:/usr/include/c++/7/bits/basic_string.h ****       /**
 926:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 927:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 928:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
 929:/usr/include/c++/7/bits/basic_string.h ****        *
 930:/usr/include/c++/7/bits/basic_string.h ****        *  This function will %resize the %string to the specified
 931:/usr/include/c++/7/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
 932:/usr/include/c++/7/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
 933:/usr/include/c++/7/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
 934:/usr/include/c++/7/bits/basic_string.h ****        */
 935:/usr/include/c++/7/bits/basic_string.h ****       void
 936:/usr/include/c++/7/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
 937:/usr/include/c++/7/bits/basic_string.h **** 
 938:/usr/include/c++/7/bits/basic_string.h ****       /**
 939:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 940:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 941:/usr/include/c++/7/bits/basic_string.h ****        *
 942:/usr/include/c++/7/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
 943:/usr/include/c++/7/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
 944:/usr/include/c++/7/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
 945:/usr/include/c++/7/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
 946:/usr/include/c++/7/bits/basic_string.h ****        *  setting them to 0.
 947:/usr/include/c++/7/bits/basic_string.h ****        */
 948:/usr/include/c++/7/bits/basic_string.h ****       void
 949:/usr/include/c++/7/bits/basic_string.h ****       resize(size_type __n)
 950:/usr/include/c++/7/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
 951:/usr/include/c++/7/bits/basic_string.h **** 
 952:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
 953:/usr/include/c++/7/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
 954:/usr/include/c++/7/bits/basic_string.h ****       void
 955:/usr/include/c++/7/bits/basic_string.h ****       shrink_to_fit() noexcept
 956:/usr/include/c++/7/bits/basic_string.h ****       {
 957:/usr/include/c++/7/bits/basic_string.h **** #if __cpp_exceptions
 958:/usr/include/c++/7/bits/basic_string.h **** 	if (capacity() > size())
 959:/usr/include/c++/7/bits/basic_string.h **** 	  {
 960:/usr/include/c++/7/bits/basic_string.h **** 	    try
 961:/usr/include/c++/7/bits/basic_string.h **** 	      { reserve(0); }
 962:/usr/include/c++/7/bits/basic_string.h **** 	    catch(...)
 963:/usr/include/c++/7/bits/basic_string.h **** 	      { }
 964:/usr/include/c++/7/bits/basic_string.h **** 	  }
 965:/usr/include/c++/7/bits/basic_string.h **** #endif
 966:/usr/include/c++/7/bits/basic_string.h ****       }
 967:/usr/include/c++/7/bits/basic_string.h **** #endif
 968:/usr/include/c++/7/bits/basic_string.h **** 
 969:/usr/include/c++/7/bits/basic_string.h ****       /**
 970:/usr/include/c++/7/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
 971:/usr/include/c++/7/bits/basic_string.h ****        *  before needing to allocate more memory.
 972:/usr/include/c++/7/bits/basic_string.h ****        */
 973:/usr/include/c++/7/bits/basic_string.h ****       size_type
 974:/usr/include/c++/7/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
 975:/usr/include/c++/7/bits/basic_string.h ****       {
 976:/usr/include/c++/7/bits/basic_string.h **** 	return _M_is_local() ? size_type(_S_local_capacity)
 977:/usr/include/c++/7/bits/basic_string.h **** 	                     : _M_allocated_capacity;
 978:/usr/include/c++/7/bits/basic_string.h ****       }
 979:/usr/include/c++/7/bits/basic_string.h **** 
 980:/usr/include/c++/7/bits/basic_string.h ****       /**
 981:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 982:/usr/include/c++/7/bits/basic_string.h ****        *          characters.
 983:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
 984:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
 985:/usr/include/c++/7/bits/basic_string.h ****        *
 986:/usr/include/c++/7/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
 987:/usr/include/c++/7/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
 988:/usr/include/c++/7/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
 989:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.
 990:/usr/include/c++/7/bits/basic_string.h ****        *
 991:/usr/include/c++/7/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
 992:/usr/include/c++/7/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
 993:/usr/include/c++/7/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
 994:/usr/include/c++/7/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
 995:/usr/include/c++/7/bits/basic_string.h ****        *  data.
 996:/usr/include/c++/7/bits/basic_string.h ****        */
 997:/usr/include/c++/7/bits/basic_string.h ****       void
 998:/usr/include/c++/7/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
 999:/usr/include/c++/7/bits/basic_string.h **** 
1000:/usr/include/c++/7/bits/basic_string.h ****       /**
1001:/usr/include/c++/7/bits/basic_string.h ****        *  Erases the string, making it empty.
1002:/usr/include/c++/7/bits/basic_string.h ****        */
1003:/usr/include/c++/7/bits/basic_string.h ****       void
1004:/usr/include/c++/7/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
1005:/usr/include/c++/7/bits/basic_string.h ****       { _M_set_length(0); }
1006:/usr/include/c++/7/bits/basic_string.h **** 
1007:/usr/include/c++/7/bits/basic_string.h ****       /**
1008:/usr/include/c++/7/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
1009:/usr/include/c++/7/bits/basic_string.h ****        *  <code>*this == ""</code>.
1010:/usr/include/c++/7/bits/basic_string.h ****        */
1011:/usr/include/c++/7/bits/basic_string.h ****       bool
1012:/usr/include/c++/7/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
1013:/usr/include/c++/7/bits/basic_string.h ****       { return this->size() == 0; }
1014:/usr/include/c++/7/bits/basic_string.h **** 
1015:/usr/include/c++/7/bits/basic_string.h ****       // Element access:
1016:/usr/include/c++/7/bits/basic_string.h ****       /**
1017:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1018:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1019:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
1020:/usr/include/c++/7/bits/basic_string.h ****        *
1021:/usr/include/c++/7/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1022:/usr/include/c++/7/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1023:/usr/include/c++/7/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1024:/usr/include/c++/7/bits/basic_string.h ****        *  see at().)
1025:/usr/include/c++/7/bits/basic_string.h ****        */
1026:/usr/include/c++/7/bits/basic_string.h ****       const_reference
1027:/usr/include/c++/7/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
1028:/usr/include/c++/7/bits/basic_string.h ****       {
1029:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1030:/usr/include/c++/7/bits/basic_string.h **** 	return _M_data()[__pos];
1031:/usr/include/c++/7/bits/basic_string.h ****       }
1032:/usr/include/c++/7/bits/basic_string.h **** 
1033:/usr/include/c++/7/bits/basic_string.h ****       /**
1034:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1035:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1036:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1037:/usr/include/c++/7/bits/basic_string.h ****        *
1038:/usr/include/c++/7/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1039:/usr/include/c++/7/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1040:/usr/include/c++/7/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1041:/usr/include/c++/7/bits/basic_string.h ****        *  see at().)
1042:/usr/include/c++/7/bits/basic_string.h ****        */
1043:/usr/include/c++/7/bits/basic_string.h ****       reference
1044:/usr/include/c++/7/bits/basic_string.h ****       operator[](size_type __pos)
1045:/usr/include/c++/7/bits/basic_string.h ****       {
1046:/usr/include/c++/7/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
1047:/usr/include/c++/7/bits/basic_string.h **** 	// and in C++11 mode.
1048:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1049:/usr/include/c++/7/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
1050:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
1051:/usr/include/c++/7/bits/basic_string.h **** 	return _M_data()[__pos];
1052:/usr/include/c++/7/bits/basic_string.h ****       }
1053:/usr/include/c++/7/bits/basic_string.h **** 
1054:/usr/include/c++/7/bits/basic_string.h ****       /**
1055:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1056:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n The index of the character to access.
1057:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
1058:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1059:/usr/include/c++/7/bits/basic_string.h ****        *
1060:/usr/include/c++/7/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1061:/usr/include/c++/7/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1062:/usr/include/c++/7/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1063:/usr/include/c++/7/bits/basic_string.h ****        */
1064:/usr/include/c++/7/bits/basic_string.h ****       const_reference
1065:/usr/include/c++/7/bits/basic_string.h ****       at(size_type __n) const
1066:/usr/include/c++/7/bits/basic_string.h ****       {
1067:/usr/include/c++/7/bits/basic_string.h **** 	if (__n >= this->size())
1068:/usr/include/c++/7/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1069:/usr/include/c++/7/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1070:/usr/include/c++/7/bits/basic_string.h **** 				       "(which is %zu)"),
1071:/usr/include/c++/7/bits/basic_string.h **** 				   __n, this->size());
1072:/usr/include/c++/7/bits/basic_string.h **** 	return _M_data()[__n];
1073:/usr/include/c++/7/bits/basic_string.h ****       }
1074:/usr/include/c++/7/bits/basic_string.h **** 
1075:/usr/include/c++/7/bits/basic_string.h ****       /**
1076:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1077:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n The index of the character to access.
1078:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1079:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1080:/usr/include/c++/7/bits/basic_string.h ****        *
1081:/usr/include/c++/7/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1082:/usr/include/c++/7/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1083:/usr/include/c++/7/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1084:/usr/include/c++/7/bits/basic_string.h ****        */
1085:/usr/include/c++/7/bits/basic_string.h ****       reference
1086:/usr/include/c++/7/bits/basic_string.h ****       at(size_type __n)
1087:/usr/include/c++/7/bits/basic_string.h ****       {
1088:/usr/include/c++/7/bits/basic_string.h **** 	if (__n >= size())
1089:/usr/include/c++/7/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1090:/usr/include/c++/7/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1091:/usr/include/c++/7/bits/basic_string.h **** 				       "(which is %zu)"),
1092:/usr/include/c++/7/bits/basic_string.h **** 				   __n, this->size());
1093:/usr/include/c++/7/bits/basic_string.h **** 	return _M_data()[__n];
1094:/usr/include/c++/7/bits/basic_string.h ****       }
1095:/usr/include/c++/7/bits/basic_string.h **** 
1096:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
1097:/usr/include/c++/7/bits/basic_string.h ****       /**
1098:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
1099:/usr/include/c++/7/bits/basic_string.h ****        *  element of the %string.
1100:/usr/include/c++/7/bits/basic_string.h ****        */
1101:/usr/include/c++/7/bits/basic_string.h ****       reference
1102:/usr/include/c++/7/bits/basic_string.h ****       front() noexcept
1103:/usr/include/c++/7/bits/basic_string.h ****       {
1104:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1105:/usr/include/c++/7/bits/basic_string.h **** 	return operator[](0);
1106:/usr/include/c++/7/bits/basic_string.h ****       }
1107:/usr/include/c++/7/bits/basic_string.h **** 
1108:/usr/include/c++/7/bits/basic_string.h ****       /**
1109:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
1110:/usr/include/c++/7/bits/basic_string.h ****        *  element of the %string.
1111:/usr/include/c++/7/bits/basic_string.h ****        */
1112:/usr/include/c++/7/bits/basic_string.h ****       const_reference
1113:/usr/include/c++/7/bits/basic_string.h ****       front() const noexcept
1114:/usr/include/c++/7/bits/basic_string.h ****       {
1115:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1116:/usr/include/c++/7/bits/basic_string.h **** 	return operator[](0);
1117:/usr/include/c++/7/bits/basic_string.h ****       }
1118:/usr/include/c++/7/bits/basic_string.h **** 
1119:/usr/include/c++/7/bits/basic_string.h ****       /**
1120:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
1121:/usr/include/c++/7/bits/basic_string.h ****        *  element of the %string.
1122:/usr/include/c++/7/bits/basic_string.h ****        */
1123:/usr/include/c++/7/bits/basic_string.h ****       reference
1124:/usr/include/c++/7/bits/basic_string.h ****       back() noexcept
1125:/usr/include/c++/7/bits/basic_string.h ****       {
1126:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1127:/usr/include/c++/7/bits/basic_string.h **** 	return operator[](this->size() - 1);
1128:/usr/include/c++/7/bits/basic_string.h ****       }
1129:/usr/include/c++/7/bits/basic_string.h **** 
1130:/usr/include/c++/7/bits/basic_string.h ****       /**
1131:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
1132:/usr/include/c++/7/bits/basic_string.h ****        *  last element of the %string.
1133:/usr/include/c++/7/bits/basic_string.h ****        */
1134:/usr/include/c++/7/bits/basic_string.h ****       const_reference
1135:/usr/include/c++/7/bits/basic_string.h ****       back() const noexcept
1136:/usr/include/c++/7/bits/basic_string.h ****       {
1137:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1138:/usr/include/c++/7/bits/basic_string.h **** 	return operator[](this->size() - 1);
1139:/usr/include/c++/7/bits/basic_string.h ****       }
1140:/usr/include/c++/7/bits/basic_string.h **** #endif
1141:/usr/include/c++/7/bits/basic_string.h **** 
1142:/usr/include/c++/7/bits/basic_string.h ****       // Modifiers:
1143:/usr/include/c++/7/bits/basic_string.h ****       /**
1144:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a string to this string.
1145:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  The string to append.
1146:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1147:/usr/include/c++/7/bits/basic_string.h ****        */
1148:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1149:/usr/include/c++/7/bits/basic_string.h ****       operator+=(const basic_string& __str)
1150:/usr/include/c++/7/bits/basic_string.h ****       { return this->append(__str); }
1151:/usr/include/c++/7/bits/basic_string.h **** 
1152:/usr/include/c++/7/bits/basic_string.h ****       /**
1153:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a C string.
1154:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  The C string to append.
1155:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1156:/usr/include/c++/7/bits/basic_string.h ****        */
1157:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1158:/usr/include/c++/7/bits/basic_string.h ****       operator+=(const _CharT* __s)
1159:/usr/include/c++/7/bits/basic_string.h ****       { return this->append(__s); }
1160:/usr/include/c++/7/bits/basic_string.h **** 
1161:/usr/include/c++/7/bits/basic_string.h ****       /**
1162:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a character.
1163:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  The character to append.
1164:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1165:/usr/include/c++/7/bits/basic_string.h ****        */
1166:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1167:/usr/include/c++/7/bits/basic_string.h ****       operator+=(_CharT __c)
1168:/usr/include/c++/7/bits/basic_string.h ****       {
1169:/usr/include/c++/7/bits/basic_string.h **** 	this->push_back(__c);
1170:/usr/include/c++/7/bits/basic_string.h **** 	return *this;
1171:/usr/include/c++/7/bits/basic_string.h ****       }
1172:/usr/include/c++/7/bits/basic_string.h **** 
1173:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
1174:/usr/include/c++/7/bits/basic_string.h ****       /**
1175:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1176:/usr/include/c++/7/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
1177:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1178:/usr/include/c++/7/bits/basic_string.h ****        */
1179:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1180:/usr/include/c++/7/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
1181:/usr/include/c++/7/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1182:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
1183:/usr/include/c++/7/bits/basic_string.h **** 
1184:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
1185:/usr/include/c++/7/bits/basic_string.h ****       /**
1186:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a string_view.
1187:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1188:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1189:/usr/include/c++/7/bits/basic_string.h ****        */
1190:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
1191:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1192:/usr/include/c++/7/bits/basic_string.h **** 	operator+=(const _Tp& __svt)
1193:/usr/include/c++/7/bits/basic_string.h **** 	{ return this->append(__svt); }
1194:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
1195:/usr/include/c++/7/bits/basic_string.h **** 
1196:/usr/include/c++/7/bits/basic_string.h ****       /**
1197:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a string to this string.
1198:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  The string to append.
1199:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1200:/usr/include/c++/7/bits/basic_string.h ****        */
1201:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1202:/usr/include/c++/7/bits/basic_string.h ****       append(const basic_string& __str)
1203:/usr/include/c++/7/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
1204:/usr/include/c++/7/bits/basic_string.h **** 
1205:/usr/include/c++/7/bits/basic_string.h ****       /**
1206:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a substring.
1207:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  The string to append.
1208:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
1209:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1210:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1211:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
1212:/usr/include/c++/7/bits/basic_string.h ****        *
1213:/usr/include/c++/7/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
1214:/usr/include/c++/7/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
1215:/usr/include/c++/7/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
1216:/usr/include/c++/7/bits/basic_string.h ****        *  remainder of @a __str is appended.
1217:/usr/include/c++/7/bits/basic_string.h ****        */
1218:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1219:/usr/include/c++/7/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n = npos)
1220:/usr/include/c++/7/bits/basic_string.h ****       { return _M_append(__str._M_data()
1221:/usr/include/c++/7/bits/basic_string.h **** 			 + __str._M_check(__pos, "basic_string::append"),
1222:/usr/include/c++/7/bits/basic_string.h **** 			 __str._M_limit(__pos, __n)); }
1223:/usr/include/c++/7/bits/basic_string.h **** 
1224:/usr/include/c++/7/bits/basic_string.h ****       /**
1225:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a C substring.
1226:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  The C string to append.
1227:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1228:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1229:/usr/include/c++/7/bits/basic_string.h ****        */
1230:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1231:/usr/include/c++/7/bits/basic_string.h ****       append(const _CharT* __s, size_type __n)
1232:/usr/include/c++/7/bits/basic_string.h ****       {
1233:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1234:/usr/include/c++/7/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1235:/usr/include/c++/7/bits/basic_string.h **** 	return _M_append(__s, __n);
1236:/usr/include/c++/7/bits/basic_string.h ****       }
1237:/usr/include/c++/7/bits/basic_string.h **** 
1238:/usr/include/c++/7/bits/basic_string.h ****       /**
1239:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a C string.
1240:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  The C string to append.
1241:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1242:/usr/include/c++/7/bits/basic_string.h ****        */
1243:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1244:/usr/include/c++/7/bits/basic_string.h ****       append(const _CharT* __s)
1245:/usr/include/c++/7/bits/basic_string.h ****       {
1246:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1247:/usr/include/c++/7/bits/basic_string.h **** 	const size_type __n = traits_type::length(__s);
1248:/usr/include/c++/7/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1249:/usr/include/c++/7/bits/basic_string.h **** 	return _M_append(__s, __n);
1250:/usr/include/c++/7/bits/basic_string.h ****       }
1251:/usr/include/c++/7/bits/basic_string.h **** 
1252:/usr/include/c++/7/bits/basic_string.h ****       /**
1253:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append multiple characters.
1254:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1255:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  The character to use.
1256:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1257:/usr/include/c++/7/bits/basic_string.h ****        *
1258:/usr/include/c++/7/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
1259:/usr/include/c++/7/bits/basic_string.h ****        */
1260:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1261:/usr/include/c++/7/bits/basic_string.h ****       append(size_type __n, _CharT __c)
1262:/usr/include/c++/7/bits/basic_string.h ****       { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
1263:/usr/include/c++/7/bits/basic_string.h **** 
1264:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
1265:/usr/include/c++/7/bits/basic_string.h ****       /**
1266:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1267:/usr/include/c++/7/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
1268:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1269:/usr/include/c++/7/bits/basic_string.h ****        */
1270:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1271:/usr/include/c++/7/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
1272:/usr/include/c++/7/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1273:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
1274:/usr/include/c++/7/bits/basic_string.h **** 
1275:/usr/include/c++/7/bits/basic_string.h ****       /**
1276:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a range of characters.
1277:/usr/include/c++/7/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1278:/usr/include/c++/7/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1279:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1280:/usr/include/c++/7/bits/basic_string.h ****        *
1281:/usr/include/c++/7/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
1282:/usr/include/c++/7/bits/basic_string.h ****        */
1283:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
1284:/usr/include/c++/7/bits/basic_string.h ****       template<class _InputIterator,
1285:/usr/include/c++/7/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1286:/usr/include/c++/7/bits/basic_string.h **** #else
1287:/usr/include/c++/7/bits/basic_string.h ****       template<class _InputIterator>
1288:/usr/include/c++/7/bits/basic_string.h **** #endif
1289:/usr/include/c++/7/bits/basic_string.h ****         basic_string&
1290:/usr/include/c++/7/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
1291:/usr/include/c++/7/bits/basic_string.h ****         { return this->replace(end(), end(), __first, __last); }
1292:/usr/include/c++/7/bits/basic_string.h **** 
1293:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
1294:/usr/include/c++/7/bits/basic_string.h ****       /**
1295:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a string_view.
1296:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1297:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1298:/usr/include/c++/7/bits/basic_string.h ****        */
1299:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
1300:/usr/include/c++/7/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1301:/usr/include/c++/7/bits/basic_string.h ****         append(const _Tp& __svt)
1302:/usr/include/c++/7/bits/basic_string.h ****         {
1303:/usr/include/c++/7/bits/basic_string.h ****           __sv_type __sv = __svt;
1304:/usr/include/c++/7/bits/basic_string.h ****           return this->append(__sv.data(), __sv.size());
1305:/usr/include/c++/7/bits/basic_string.h ****         }
1306:/usr/include/c++/7/bits/basic_string.h **** 
1307:/usr/include/c++/7/bits/basic_string.h ****       /**
1308:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a range of characters from a string_view.
1309:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended from.
1310:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos The position in the string_view to append from.
1311:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n   The number of characters to append from the string_view.
1312:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1313:/usr/include/c++/7/bits/basic_string.h ****        */
1314:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
1315:/usr/include/c++/7/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1316:/usr/include/c++/7/bits/basic_string.h **** 	append(const _Tp& __svt, size_type __pos, size_type __n = npos)
1317:/usr/include/c++/7/bits/basic_string.h **** 	{
1318:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1319:/usr/include/c++/7/bits/basic_string.h **** 	  return _M_append(__sv.data()
1320:/usr/include/c++/7/bits/basic_string.h **** 			   + __sv._M_check(__pos, "basic_string::append"),
1321:/usr/include/c++/7/bits/basic_string.h **** 			   __sv._M_limit(__pos, __n));
1322:/usr/include/c++/7/bits/basic_string.h **** 	}
1323:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
1324:/usr/include/c++/7/bits/basic_string.h **** 
1325:/usr/include/c++/7/bits/basic_string.h ****       /**
1326:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a single character.
1327:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to append.
1328:/usr/include/c++/7/bits/basic_string.h ****        */
1329:/usr/include/c++/7/bits/basic_string.h ****       void
1330:/usr/include/c++/7/bits/basic_string.h ****       push_back(_CharT __c)
1331:/usr/include/c++/7/bits/basic_string.h ****       {
1332:/usr/include/c++/7/bits/basic_string.h **** 	const size_type __size = this->size();
1333:/usr/include/c++/7/bits/basic_string.h **** 	if (__size + 1 > this->capacity())
1334:/usr/include/c++/7/bits/basic_string.h **** 	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
1335:/usr/include/c++/7/bits/basic_string.h **** 	traits_type::assign(this->_M_data()[__size], __c);
1336:/usr/include/c++/7/bits/basic_string.h **** 	this->_M_set_length(__size + 1);
1337:/usr/include/c++/7/bits/basic_string.h ****       }
1338:/usr/include/c++/7/bits/basic_string.h **** 
1339:/usr/include/c++/7/bits/basic_string.h ****       /**
1340:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1341:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string to use.
1342:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1343:/usr/include/c++/7/bits/basic_string.h ****        */
1344:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1345:/usr/include/c++/7/bits/basic_string.h ****       assign(const basic_string& __str)
1346:/usr/include/c++/7/bits/basic_string.h ****       {
1347:/usr/include/c++/7/bits/basic_string.h **** 	this->_M_assign(__str);
1348:/usr/include/c++/7/bits/basic_string.h **** 	return *this;
1349:/usr/include/c++/7/bits/basic_string.h ****       }
1350:/usr/include/c++/7/bits/basic_string.h **** 
1351:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
1352:/usr/include/c++/7/bits/basic_string.h ****       /**
1353:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1354:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string to use.
1355:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1356:/usr/include/c++/7/bits/basic_string.h ****        *
1357:/usr/include/c++/7/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
1358:/usr/include/c++/7/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
1359:/usr/include/c++/7/bits/basic_string.h ****        */
1360:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1361:/usr/include/c++/7/bits/basic_string.h ****       assign(basic_string&& __str)
1362:/usr/include/c++/7/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
1363:/usr/include/c++/7/bits/basic_string.h ****       {
1364:/usr/include/c++/7/bits/basic_string.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1365:/usr/include/c++/7/bits/basic_string.h **** 	// 2063. Contradictory requirements for string move assignment
1366:/usr/include/c++/7/bits/basic_string.h **** 	return *this = std::move(__str);
1367:/usr/include/c++/7/bits/basic_string.h ****       }
1368:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
1369:/usr/include/c++/7/bits/basic_string.h **** 
1370:/usr/include/c++/7/bits/basic_string.h ****       /**
1371:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
1372:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  The string to use.
1373:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
1374:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1375:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1376:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
1377:/usr/include/c++/7/bits/basic_string.h ****        *
1378:/usr/include/c++/7/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
1379:/usr/include/c++/7/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
1380:/usr/include/c++/7/bits/basic_string.h ****        *  is larger than the number of available characters in @a
1381:/usr/include/c++/7/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
1382:/usr/include/c++/7/bits/basic_string.h ****        */
1383:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1384:/usr/include/c++/7/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n = npos)
1385:/usr/include/c++/7/bits/basic_string.h ****       { return _M_replace(size_type(0), this->size(), __str._M_data()
1386:/usr/include/c++/7/bits/basic_string.h **** 			  + __str._M_check(__pos, "basic_string::assign"),
1387:/usr/include/c++/7/bits/basic_string.h **** 			  __str._M_limit(__pos, __n)); }
1388:/usr/include/c++/7/bits/basic_string.h **** 
1389:/usr/include/c++/7/bits/basic_string.h ****       /**
1390:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to a C substring.
1391:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  The C string to use.
1392:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1393:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1394:/usr/include/c++/7/bits/basic_string.h ****        *
1395:/usr/include/c++/7/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
1396:/usr/include/c++/7/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
1397:/usr/include/c++/7/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
1398:/usr/include/c++/7/bits/basic_string.h ****        */
1399:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1400:/usr/include/c++/7/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n)
1401:/usr/include/c++/7/bits/basic_string.h ****       {
1402:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1403:/usr/include/c++/7/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s, __n);
1404:/usr/include/c++/7/bits/basic_string.h ****       }
1405:/usr/include/c++/7/bits/basic_string.h **** 
1406:/usr/include/c++/7/bits/basic_string.h ****       /**
1407:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
1408:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  The C string to use.
1409:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1410:/usr/include/c++/7/bits/basic_string.h ****        *
1411:/usr/include/c++/7/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
1412:/usr/include/c++/7/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
1413:/usr/include/c++/7/bits/basic_string.h ****        *  function returns.
1414:/usr/include/c++/7/bits/basic_string.h ****        */
1415:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1416:/usr/include/c++/7/bits/basic_string.h ****       assign(const _CharT* __s)
1417:/usr/include/c++/7/bits/basic_string.h ****       {
1418:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1419:/usr/include/c++/7/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s,
1420:/usr/include/c++/7/bits/basic_string.h **** 			  traits_type::length(__s));
 1603              		.loc 8 1420 0 is_stmt 1
 1604 09c8 488B55A8 		movq	-88(%rbp), %rdx	# MEM[(const struct basic_string *)&metric_name + 8B],
 1605 09cc 41B80D00 		movl	$13, %r8d	#,
 1605      0000
 1606 09d2 31F6     		xorl	%esi, %esi	#
 1607 09d4 4889DF   		movq	%rbx, %rdi	# tmp129,
 1608 09d7 488D0D00 		leaq	.LC3(%rip), %rcx	#,
 1608      000000
 1609 09de E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT	#
 1609      00
 1610              	.LVL76:
 1611              	.L125:
 1612              	.LBE1581:
 1613              	.LBE1580:
 1614              	.LBE1579:
 1615              	# Result.h:47:     printf(
  45:Result.h      ****     }
  46:Result.h      **** 
  47:Result.h      ****     printf(
 1616              		.loc 6 47 0
 1617 09e3 0FB64598 		movzbl	-104(%rbp), %eax	# %sfp, tmp119
 1618 09e7 4C89E7   		movq	%r12, %rdi	# perf,
 1619 09ea 83F001   		xorl	$1, %eax	#, tmp119
 1620 09ed 0FB6C0   		movzbl	%al, %eax	# tmp119, _45
 1621 09f0 894598   		movl	%eax, -104(%rbp)	# _45, %sfp
 1622 09f3 E8000000 		call	_ZN13Performancing8GetValueEv@PLT	#
 1622      00
 1623              	.LVL77:
 1624 09f8 4989C0   		movq	%rax, %r8	#, _10
 1625              	.LVL78:
 1626              	.LBB1582:
 1627              	.LBB1583:
 1628              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:104:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 1629              		.loc 7 104 0
 1630 09fb 8B4598   		movl	-104(%rbp), %eax	# %sfp, _45
 1631 09fe 4883EC08 		subq	$8, %rsp	#,
 1632 0a02 BF010000 		movl	$1, %edi	#,
 1632      00
 1633 0a07 448B4D9C 		movl	-100(%rbp), %r9d	# %sfp,
 1634 0a0b 488D3500 		leaq	.LC5(%rip), %rsi	#,
 1634      000000
 1635 0a12 488B4DA0 		movq	-96(%rbp), %rcx	# MEM[(const struct basic_string *)&metric_name],
 1636 0a16 498B5500 		movq	0(%r13), %rdx	# MEM[(const struct basic_string *)sorter_11(D)],
 1637 0a1a 50       		pushq	%rax	# _45
 1638 0a1b 8B4510   		movl	16(%rbp), %eax	# numberOfBadSorts, numberOfBadSorts
 1639 0a1e 50       		pushq	%rax	# numberOfBadSorts
 1640 0a1f 31C0     		xorl	%eax, %eax	#
 1641 0a21 4157     		pushq	%r15	# numberOfIterations
 1642 0a23 4156     		pushq	%r14	# measureIteration
 1643 0a25 FF7590   		pushq	-112(%rbp)	# %sfp
 1644              		.cfi_escape 0x2e,0x30
 1645 0a28 E8000000 		call	__printf_chk@PLT	#
 1645      00
 1646              	.LVL79:
 1647              	.LBE1583:
 1648              	.LBE1582:
 1649              	.LBB1585:
 1650              	.LBB1586:
 1651              	.LBB1587:
 1652              	.LBB1588:
 1653              	.LBB1589:
 1654              	# /usr/include/c++/7/bits/basic_string.h:211:       { return _M_data() == _M_local_data(); }
 211:/usr/include/c++/7/bits/basic_string.h **** 
 1655              		.loc 8 211 0 discriminator 5
 1656 0a2d 488B7DA0 		movq	-96(%rbp), %rdi	# MEM[(const struct basic_string *)&metric_name], _25
 1657              	.LBE1589:
 1658              	.LBE1588:
 1659              	# /usr/include/c++/7/bits/basic_string.h:220: 	if (!_M_is_local())
 220:/usr/include/c++/7/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1660              		.loc 8 220 0 discriminator 5
 1661 0a31 4883C310 		addq	$16, %rbx	#, tmp122
 1662              	.LVL80:
 1663              	.LBE1587:
 1664              	.LBE1586:
 1665              	.LBE1585:
 1666              	.LBB1596:
 1667              	.LBB1584:
 1668              	# /usr/include/x86_64-linux-gnu/bits/stdio2.h:104:   return __printf_chk (__USE_FORTIFY_LEVEL - 1, 
 1669              		.loc 7 104 0 discriminator 5
 1670 0a35 4883C430 		addq	$48, %rsp	#,
 1671              	.LVL81:
 1672              	.LBE1584:
 1673              	.LBE1596:
 1674              	.LBB1597:
 1675              	.LBB1595:
 1676              	.LBB1594:
 1677              	# /usr/include/c++/7/bits/basic_string.h:220: 	if (!_M_is_local())
 220:/usr/include/c++/7/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1678              		.loc 8 220 0 discriminator 5
 1679 0a39 4839DF   		cmpq	%rbx, %rdi	# tmp122, _25
 1680 0a3c 7405     		je	.L120	#,
 1681              	.LVL82:
 1682              	.LBB1590:
 1683              	.LBB1591:
 1684              	.LBB1592:
 1685              	.LBB1593:
 1686              	# /usr/include/c++/7/ext/new_allocator.h:125: 	::operator delete(__p);
 1687              		.file 10 "/usr/include/c++/7/ext/new_allocator.h"
   1:/usr/include/c++/7/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/7/ext/new_allocator.h **** 
   3:/usr/include/c++/7/ext/new_allocator.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/ext/new_allocator.h **** //
   5:/usr/include/c++/7/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/7/ext/new_allocator.h **** 
  11:/usr/include/c++/7/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/ext/new_allocator.h **** 
  16:/usr/include/c++/7/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/ext/new_allocator.h **** 
  20:/usr/include/c++/7/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/ext/new_allocator.h **** 
  25:/usr/include/c++/7/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/7/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/7/ext/new_allocator.h ****  */
  28:/usr/include/c++/7/ext/new_allocator.h **** 
  29:/usr/include/c++/7/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/7/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/7/ext/new_allocator.h **** 
  32:/usr/include/c++/7/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/7/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/7/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/7/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/7/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/7/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/7/ext/new_allocator.h **** #endif
  39:/usr/include/c++/7/ext/new_allocator.h **** 
  40:/usr/include/c++/7/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/7/ext/new_allocator.h **** {
  42:/usr/include/c++/7/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/7/ext/new_allocator.h **** 
  44:/usr/include/c++/7/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/c++/7/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/c++/7/ext/new_allocator.h **** 
  47:/usr/include/c++/7/ext/new_allocator.h ****   /**
  48:/usr/include/c++/7/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/c++/7/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/c++/7/ext/new_allocator.h ****    *
  51:/usr/include/c++/7/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  52:/usr/include/c++/7/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/c++/7/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/usr/include/c++/7/ext/new_allocator.h ****    *
  55:/usr/include/c++/7/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/c++/7/ext/new_allocator.h ****    */
  57:/usr/include/c++/7/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/c++/7/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/c++/7/ext/new_allocator.h ****     {
  60:/usr/include/c++/7/ext/new_allocator.h ****     public:
  61:/usr/include/c++/7/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/c++/7/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/c++/7/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/c++/7/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/c++/7/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/c++/7/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/c++/7/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/c++/7/ext/new_allocator.h **** 
  69:/usr/include/c++/7/ext/new_allocator.h ****       template<typename _Tp1>
  70:/usr/include/c++/7/ext/new_allocator.h **** 	struct rebind
  71:/usr/include/c++/7/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  72:/usr/include/c++/7/ext/new_allocator.h **** 
  73:/usr/include/c++/7/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/c++/7/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/c++/7/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/c++/7/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/c++/7/ext/new_allocator.h **** #endif
  78:/usr/include/c++/7/ext/new_allocator.h **** 
  79:/usr/include/c++/7/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/c++/7/ext/new_allocator.h **** 
  81:/usr/include/c++/7/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  82:/usr/include/c++/7/ext/new_allocator.h **** 
  83:/usr/include/c++/7/ext/new_allocator.h ****       template<typename _Tp1>
  84:/usr/include/c++/7/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  85:/usr/include/c++/7/ext/new_allocator.h **** 
  86:/usr/include/c++/7/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  87:/usr/include/c++/7/ext/new_allocator.h **** 
  88:/usr/include/c++/7/ext/new_allocator.h ****       pointer
  89:/usr/include/c++/7/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  90:/usr/include/c++/7/ext/new_allocator.h ****       { return std::__addressof(__x); }
  91:/usr/include/c++/7/ext/new_allocator.h **** 
  92:/usr/include/c++/7/ext/new_allocator.h ****       const_pointer
  93:/usr/include/c++/7/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  94:/usr/include/c++/7/ext/new_allocator.h ****       { return std::__addressof(__x); }
  95:/usr/include/c++/7/ext/new_allocator.h **** 
  96:/usr/include/c++/7/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  97:/usr/include/c++/7/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  98:/usr/include/c++/7/ext/new_allocator.h ****       pointer
  99:/usr/include/c++/7/ext/new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 100:/usr/include/c++/7/ext/new_allocator.h ****       {
 101:/usr/include/c++/7/ext/new_allocator.h **** 	if (__n > this->max_size())
 102:/usr/include/c++/7/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 103:/usr/include/c++/7/ext/new_allocator.h **** 
 104:/usr/include/c++/7/ext/new_allocator.h **** #if __cpp_aligned_new
 105:/usr/include/c++/7/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 106:/usr/include/c++/7/ext/new_allocator.h **** 	  {
 107:/usr/include/c++/7/ext/new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 108:/usr/include/c++/7/ext/new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 109:/usr/include/c++/7/ext/new_allocator.h **** 	  }
 110:/usr/include/c++/7/ext/new_allocator.h **** #endif
 111:/usr/include/c++/7/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 112:/usr/include/c++/7/ext/new_allocator.h ****       }
 113:/usr/include/c++/7/ext/new_allocator.h **** 
 114:/usr/include/c++/7/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 115:/usr/include/c++/7/ext/new_allocator.h ****       void
 116:/usr/include/c++/7/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 117:/usr/include/c++/7/ext/new_allocator.h ****       {
 118:/usr/include/c++/7/ext/new_allocator.h **** #if __cpp_aligned_new
 119:/usr/include/c++/7/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 120:/usr/include/c++/7/ext/new_allocator.h **** 	  {
 121:/usr/include/c++/7/ext/new_allocator.h **** 	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
 122:/usr/include/c++/7/ext/new_allocator.h **** 	    return;
 123:/usr/include/c++/7/ext/new_allocator.h **** 	  }
 124:/usr/include/c++/7/ext/new_allocator.h **** #endif
 125:/usr/include/c++/7/ext/new_allocator.h **** 	::operator delete(__p);
 1688              		.loc 10 125 0
 1689 0a3e E8000000 		call	_ZdlPv@PLT	#
 1689      00
 1690              	.LVL83:
 1691              	.L120:
 1692              	.LBE1593:
 1693              	.LBE1592:
 1694              	.LBE1591:
 1695              	.LBE1590:
 1696              	.LBE1594:
 1697              	.LBE1595:
 1698              	.LBE1597:
 1699              	# Result.h:59: }
  48:Result.h      ****         "RESULT\ts=%s\tm=%s\tv=%" PRIu64 "\tss=%i\ta=%zu\ti=%i\tn=%i\tb=%i\tc=%i\n", 
  49:Result.h      **** 
  50:Result.h      ****         sorter.c_str(), 
  51:Result.h      ****         metric_name.c_str(), 
  52:Result.h      ****         perf->GetValue(), 
  53:Result.h      ****         structSize,
  54:Result.h      ****         arraySize,
  55:Result.h      ****         measureIteration,
  56:Result.h      ****         numberOfIterations, 
  57:Result.h      ****         numberOfBadSorts,
  58:Result.h      ****         isActualSorterMeasurement ? 0 : 1); 
  59:Result.h      **** }
 1700              		.loc 6 59 0
 1701 0a43 488B45C8 		movq	-56(%rbp), %rax	# D.83533, tmp131
 1702 0a47 64483304 		xorq	%fs:40, %rax	#, tmp131
 1702      25280000 
 1702      00
 1703 0a50 757E     		jne	.L137	#,
 1704 0a52 488D65D8 		leaq	-40(%rbp), %rsp	#,
 1705 0a56 5B       		popq	%rbx	#
 1706              	.LVL84:
 1707 0a57 415C     		popq	%r12	#
 1708              	.LVL85:
 1709 0a59 415D     		popq	%r13	#
 1710              	.LVL86:
 1711 0a5b 415E     		popq	%r14	#
 1712              	.LVL87:
 1713 0a5d 415F     		popq	%r15	#
 1714              	.LVL88:
 1715 0a5f 5D       		popq	%rbp	#
 1716              		.cfi_remember_state
 1717              		.cfi_def_cfa 7, 8
 1718              	.LVL89:
 1719 0a60 C3       		ret
 1720              	.LVL90:
 1721              		.p2align 4,,10
 1722 0a61 0F1F8000 		.p2align 3
 1722      000000
 1723              	.L136:
 1724              		.cfi_restore_state
 1725              	.LBB1598:
 1726              	.LBB1599:
 1727              	.LBB1600:
 1728              	# /usr/include/c++/7/bits/basic_string.h:1420: 			  traits_type::length(__s));
 1729              		.loc 8 1420 0
 1730 0a68 488B55A8 		movq	-88(%rbp), %rdx	# MEM[(const struct basic_string *)&metric_name + 8B],
 1731 0a6c 41B80A00 		movl	$10, %r8d	#,
 1731      0000
 1732 0a72 31F6     		xorl	%esi, %esi	#
 1733 0a74 4889DF   		movq	%rbx, %rdi	# tmp129,
 1734 0a77 488D0D00 		leaq	.LC1(%rip), %rcx	#,
 1734      000000
 1735              		.cfi_escape 0x2e,0
 1736 0a7e E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT	#
 1736      00
 1737              	.LVL91:
 1738 0a83 E95BFFFF 		jmp	.L125	#
 1738      FF
 1739              	.LVL92:
 1740 0a88 0F1F8400 		.p2align 4,,10
 1740      00000000 
 1741              		.p2align 3
 1742              	.L122:
 1743              	.LBE1600:
 1744              	.LBE1599:
 1745              	.LBE1598:
 1746              	.LBB1601:
 1747              	.LBB1602:
 1748              	.LBB1603:
 1749 0a90 488B55A8 		movq	-88(%rbp), %rdx	# MEM[(const struct basic_string *)&metric_name + 8B],
 1750 0a94 41B80C00 		movl	$12, %r8d	#,
 1750      0000
 1751 0a9a 31F6     		xorl	%esi, %esi	#
 1752 0a9c 4889DF   		movq	%rbx, %rdi	# tmp129,
 1753 0a9f 488D0D00 		leaq	.LC2(%rip), %rcx	#,
 1753      000000
 1754 0aa6 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm@PLT	#
 1754      00
 1755              	.LVL93:
 1756              	.LEHE2:
 1757 0aab E933FFFF 		jmp	.L125	#
 1757      FF
 1758              	.LVL94:
 1759              	.L131:
 1760 0ab0 4989C7   		movq	%rax, %r15	#, tmp123
 1761              	.LVL95:
 1762 0ab3 C5F877   		vzeroupper
 1763              	.LVL96:
 1764              	.L128:
 1765              	.LBE1603:
 1766              	.LBE1602:
 1767              	.LBE1601:
 1768              	.LBB1604:
 1769              	.LBB1605:
 1770              	.LBB1606:
 1771              	.LBB1607:
 1772              	.LBB1608:
 1773              	# /usr/include/c++/7/bits/basic_string.h:211:       { return _M_data() == _M_local_data(); }
 211:/usr/include/c++/7/bits/basic_string.h **** 
 1774              		.loc 8 211 0
 1775 0ab6 488B7DA0 		movq	-96(%rbp), %rdi	# MEM[(const struct basic_string *)&metric_name], _26
 1776              	.LVL97:
 1777              	.LBE1608:
 1778              	.LBE1607:
 1779              	# /usr/include/c++/7/bits/basic_string.h:220: 	if (!_M_is_local())
 220:/usr/include/c++/7/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1780              		.loc 8 220 0
 1781 0aba 4883C310 		addq	$16, %rbx	#, tmp128
 1782              	.LVL98:
 1783 0abe 4839DF   		cmpq	%rbx, %rdi	# tmp128, _26
 1784 0ac1 7405     		je	.L129	#,
 1785              	.LVL99:
 1786              	.LBB1609:
 1787              	.LBB1610:
 1788              	.LBB1611:
 1789              	.LBB1612:
 1790              	# /usr/include/c++/7/ext/new_allocator.h:125: 	::operator delete(__p);
 1791              		.loc 10 125 0
 1792 0ac3 E8000000 		call	_ZdlPv@PLT	#
 1792      00
 1793              	.LVL100:
 1794              	.L129:
 1795 0ac8 4C89FF   		movq	%r15, %rdi	# tmp123,
 1796              	.LEHB3:
 1797 0acb E8000000 		call	_Unwind_Resume@PLT	#
 1797      00
 1798              	.LVL101:
 1799              	.LEHE3:
 1800              	.L137:
 1801              	.LBE1612:
 1802              	.LBE1611:
 1803              	.LBE1610:
 1804              	.LBE1609:
 1805              	.LBE1606:
 1806              	.LBE1605:
 1807              	.LBE1604:
 1808              	# Result.h:59: }
 1809              		.loc 6 59 0
 1810 0ad0 E8000000 		call	__stack_chk_fail@PLT	#
 1810      00
 1811              	.LVL102:
 1812              	.L132:
 1813 0ad5 4989C6   		movq	%rax, %r14	#, tmp124
 1814              	.LVL103:
 1815              	# Result.h:44:             throw std::logic_error("Result_h::WriteResultLine => Missing Performance
  44:Result.h      ****     }
 1816              		.loc 6 44 0
 1817 0ad8 4C89E7   		movq	%r12, %rdi	# _19,
 1818 0adb C5F877   		vzeroupper
 1819 0ade E8000000 		call	__cxa_free_exception@PLT	#
 1819      00
 1820              	.LVL104:
 1821 0ae3 4D89F7   		movq	%r14, %r15	# tmp124, tmp123
 1822              	.LVL105:
 1823 0ae6 EBCE     		jmp	.L128	#
 1824              		.cfi_endproc
 1825              	.LFE2921:
 1826              		.globl	__gxx_personality_v0
 1827              		.section	.gcc_except_table,"a",@progbits
 1828              	.LLSDA2921:
 1829 0000 FF       		.byte	0xff
 1830 0001 FF       		.byte	0xff
 1831 0002 01       		.byte	0x1
 1832 0003 17       		.uleb128 .LLSDACSE2921-.LLSDACSB2921
 1833              	.LLSDACSB2921:
 1834 0004 54       		.uleb128 .LEHB0-.LFB2921
 1835 0005 05       		.uleb128 .LEHE0-.LEHB0
 1836 0006 9003     		.uleb128 .L131-.LFB2921
 1837 0008 00       		.uleb128 0
 1838 0009 8601     		.uleb128 .LEHB1-.LFB2921
 1839 000b 05       		.uleb128 .LEHE1-.LEHB1
 1840 000c B503     		.uleb128 .L132-.LFB2921
 1841 000e 00       		.uleb128 0
 1842 000f 9C01     		.uleb128 .LEHB2-.LFB2921
 1843 0011 EF01     		.uleb128 .LEHE2-.LEHB2
 1844 0013 9003     		.uleb128 .L131-.LFB2921
 1845 0015 00       		.uleb128 0
 1846 0016 AB03     		.uleb128 .LEHB3-.LFB2921
 1847 0018 05       		.uleb128 .LEHE3-.LEHB3
 1848 0019 00       		.uleb128 0
 1849 001a 00       		.uleb128 0
 1850              	.LLSDACSE2921:
 1851              		.text
 1853              		.section	.rodata._ZN5debug9WriteLineIJPKcEEEvDpT_.str1.8,"aMS",@progbits,1
 1854              		.align 8
 1855              	.LC6:
 1856 0000 62617369 		.string	"basic_string::_M_construct null not valid"
 1856      635F7374 
 1856      72696E67 
 1856      3A3A5F4D 
 1856      5F636F6E 
 1857              		.section	.text._ZN5debug9WriteLineIJPKcEEEvDpT_,"axG",@progbits,_ZN5debug9WriteLineIJPKcEEEvDpT_,c
 1858              		.p2align 4,,15
 1859              		.weak	_ZN5debug9WriteLineIJPKcEEEvDpT_
 1861              	_ZN5debug9WriteLineIJPKcEEEvDpT_:
 1862              	.LFB3697:
 1863              		.file 11 "DebugHelper.h"
   1:DebugHelper.h **** 
   2:DebugHelper.h **** #ifndef DEBUG_HELPER_H
   3:DebugHelper.h **** #define DEBUG_HELPER_H
   4:DebugHelper.h **** 
   5:DebugHelper.h **** #include <iostream>
   6:DebugHelper.h **** #include <fstream>
   7:DebugHelper.h **** 
   8:DebugHelper.h **** #include <string>
   9:DebugHelper.h **** #include <vector>
  10:DebugHelper.h **** 
  11:DebugHelper.h **** namespace debug
  12:DebugHelper.h **** {
  13:DebugHelper.h ****     
  14:DebugHelper.h **** template <typename... TInputs>
  15:DebugHelper.h **** void WriteLine(TInputs... inputs)
 1864              		.loc 11 15 0
 1865              		.cfi_startproc
 1866              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1867              		.cfi_lsda 0x1b,.LLSDA3697
 1868              	.LVL106:
 1869 0000 4156     		pushq	%r14	#
 1870              		.cfi_def_cfa_offset 16
 1871              		.cfi_offset 14, -16
 1872 0002 4155     		pushq	%r13	#
 1873              		.cfi_def_cfa_offset 24
 1874              		.cfi_offset 13, -24
 1875 0004 4154     		pushq	%r12	#
 1876              		.cfi_def_cfa_offset 32
 1877              		.cfi_offset 12, -32
 1878 0006 55       		pushq	%rbp	#
 1879              		.cfi_def_cfa_offset 40
 1880              		.cfi_offset 6, -40
 1881 0007 53       		pushq	%rbx	#
 1882              		.cfi_def_cfa_offset 48
 1883              		.cfi_offset 3, -48
 1884 0008 4883EC40 		subq	$64, %rsp	#,
 1885              		.cfi_def_cfa_offset 112
 1886              	# DebugHelper.h:15: void WriteLine(TInputs... inputs)
 1887              		.loc 11 15 0
 1888 000c 64488B04 		movq	%fs:40, %rax	#, tmp222
 1888      25280000 
 1888      00
 1889 0015 48894424 		movq	%rax, 56(%rsp)	# tmp222, D.83946
 1889      38
 1890 001a 31C0     		xorl	%eax, %eax	# tmp222
 1891              	.LVL107:
 1892              	.LBB2014:
 1893              	.LBB2015:
 1894              	.LBB2016:
 1895              	.LBB2017:
 1896              	.LBB2018:
 1897              	.LBB2019:
 1898              	# /usr/include/c++/7/bits/basic_string.h:146: 	: allocator_type(__a), _M_p(__dat) { }
 146:/usr/include/c++/7/bits/basic_string.h **** 
 1899              		.loc 8 146 0
 1900 001c 488D6C24 		leaq	16(%rsp), %rbp	#, tmp220
 1900      10
 1901              	.LVL108:
 1902 0021 488D5D10 		leaq	16(%rbp), %rbx	#, tmp150
 1903 0025 48895C24 		movq	%rbx, 16(%rsp)	# tmp150, MEM[(struct _Alloc_hider *)&D.76151]._M_p
 1903      10
 1904              	.LVL109:
 1905              	.LBE2019:
 1906              	.LBE2018:
 1907              	.LBE2017:
 1908              	# /usr/include/c++/7/bits/basic_string.h:511:       { _M_construct(__s, __s ? __s + traits_type::le
 511:/usr/include/c++/7/bits/basic_string.h **** 
 1909              		.loc 8 511 0
 1910 002a 4885FF   		testq	%rdi, %rdi	# inputs#0
 1911 002d 0F845703 		je	.L139	#,
 1911      0000
 1912 0033 4989FC   		movq	%rdi, %r12	# inputs#0, inputs#0
 1913              	.LVL110:
 1914              	.LBB2020:
 1915              	.LBB2021:
 1916              	# /usr/include/c++/7/bits/char_traits.h:320: 	return __builtin_strlen(__s);
 286:/usr/include/c++/7/bits/char_traits.h **** 
 287:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 288:/usr/include/c++/7/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 289:/usr/include/c++/7/bits/char_traits.h ****       { return __c1 == __c2; }
 290:/usr/include/c++/7/bits/char_traits.h **** 
 291:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 292:/usr/include/c++/7/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 293:/usr/include/c++/7/bits/char_traits.h ****       {
 294:/usr/include/c++/7/bits/char_traits.h **** 	// LWG 467.
 295:/usr/include/c++/7/bits/char_traits.h **** 	return (static_cast<unsigned char>(__c1)
 296:/usr/include/c++/7/bits/char_traits.h **** 		< static_cast<unsigned char>(__c2));
 297:/usr/include/c++/7/bits/char_traits.h ****       }
 298:/usr/include/c++/7/bits/char_traits.h **** 
 299:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR int
 300:/usr/include/c++/7/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, size_t __n)
 301:/usr/include/c++/7/bits/char_traits.h ****       {
 302:/usr/include/c++/7/bits/char_traits.h **** #if __cplusplus > 201402
 303:/usr/include/c++/7/bits/char_traits.h **** 	if (__builtin_constant_p(__n)
 304:/usr/include/c++/7/bits/char_traits.h **** 	    && __constant_char_array_p(__s1, __n)
 305:/usr/include/c++/7/bits/char_traits.h **** 	    && __constant_char_array_p(__s2, __n))
 306:/usr/include/c++/7/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);
 307:/usr/include/c++/7/bits/char_traits.h **** #endif
 308:/usr/include/c++/7/bits/char_traits.h **** 	if (__n == 0)
 309:/usr/include/c++/7/bits/char_traits.h **** 	  return 0;
 310:/usr/include/c++/7/bits/char_traits.h **** 	return __builtin_memcmp(__s1, __s2, __n);
 311:/usr/include/c++/7/bits/char_traits.h ****       }
 312:/usr/include/c++/7/bits/char_traits.h **** 
 313:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR size_t
 314:/usr/include/c++/7/bits/char_traits.h ****       length(const char_type* __s)
 315:/usr/include/c++/7/bits/char_traits.h ****       {
 316:/usr/include/c++/7/bits/char_traits.h **** #if __cplusplus > 201402
 317:/usr/include/c++/7/bits/char_traits.h **** 	if (__constant_string_p(__s))
 318:/usr/include/c++/7/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::length(__s);
 319:/usr/include/c++/7/bits/char_traits.h **** #endif
 320:/usr/include/c++/7/bits/char_traits.h **** 	return __builtin_strlen(__s);
 1917              		.loc 9 320 0
 1918 0036 E8000000 		call	strlen@PLT	#
 1918      00
 1919              	.LVL111:
 1920 003b 4989C5   		movq	%rax, %r13	# prephitmp_5, tmp152
 1921              	.LVL112:
 1922              	.LBE2021:
 1923              	.LBE2020:
 1924              	.LBB2022:
 1925              	.LBB2023:
 1926              	.LBB2024:
 1927              	.LBB2025:
 1928              	.LBB2026:
 1929              	.LBB2027:
 1930              	# /usr/include/c++/7/bits/basic_string.tcc:215: 	size_type __dnew = static_cast<size_type>(std::dis
 1931              		.file 12 "/usr/include/c++/7/bits/basic_string.tcc"
   1:/usr/include/c++/7/bits/basic_string.tcc **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/c++/7/bits/basic_string.tcc **** 
   3:/usr/include/c++/7/bits/basic_string.tcc **** // Copyright (C) 1997-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/basic_string.tcc **** //
   5:/usr/include/c++/7/bits/basic_string.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/basic_string.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/basic_string.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/basic_string.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/basic_string.tcc **** // any later version.
  10:/usr/include/c++/7/bits/basic_string.tcc **** 
  11:/usr/include/c++/7/bits/basic_string.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/basic_string.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/basic_string.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/basic_string.tcc **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/basic_string.tcc **** 
  16:/usr/include/c++/7/bits/basic_string.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/basic_string.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/basic_string.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/basic_string.tcc **** 
  20:/usr/include/c++/7/bits/basic_string.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/basic_string.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/basic_string.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/basic_string.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/basic_string.tcc **** 
  25:/usr/include/c++/7/bits/basic_string.tcc **** /** @file bits/basic_string.tcc
  26:/usr/include/c++/7/bits/basic_string.tcc ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/7/bits/basic_string.tcc ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/c++/7/bits/basic_string.tcc ****  */
  29:/usr/include/c++/7/bits/basic_string.tcc **** 
  30:/usr/include/c++/7/bits/basic_string.tcc **** //
  31:/usr/include/c++/7/bits/basic_string.tcc **** // ISO C++ 14882: 21  Strings library
  32:/usr/include/c++/7/bits/basic_string.tcc **** //
  33:/usr/include/c++/7/bits/basic_string.tcc **** 
  34:/usr/include/c++/7/bits/basic_string.tcc **** // Written by Jason Merrill based upon the specification by Takanori Adachi
  35:/usr/include/c++/7/bits/basic_string.tcc **** // in ANSI X3J16/94-0013R2.  Rewritten by Nathan Myers to ISO-14882.
  36:/usr/include/c++/7/bits/basic_string.tcc **** // Non-reference-counted implementation written by Paolo Carlini and
  37:/usr/include/c++/7/bits/basic_string.tcc **** // updated by Jonathan Wakely for ISO-14882-2011.
  38:/usr/include/c++/7/bits/basic_string.tcc **** 
  39:/usr/include/c++/7/bits/basic_string.tcc **** #ifndef _BASIC_STRING_TCC
  40:/usr/include/c++/7/bits/basic_string.tcc **** #define _BASIC_STRING_TCC 1
  41:/usr/include/c++/7/bits/basic_string.tcc **** 
  42:/usr/include/c++/7/bits/basic_string.tcc **** #pragma GCC system_header
  43:/usr/include/c++/7/bits/basic_string.tcc **** 
  44:/usr/include/c++/7/bits/basic_string.tcc **** #include <bits/cxxabi_forced.h>
  45:/usr/include/c++/7/bits/basic_string.tcc **** 
  46:/usr/include/c++/7/bits/basic_string.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  47:/usr/include/c++/7/bits/basic_string.tcc **** {
  48:/usr/include/c++/7/bits/basic_string.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  49:/usr/include/c++/7/bits/basic_string.tcc **** 
  50:/usr/include/c++/7/bits/basic_string.tcc **** #if _GLIBCXX_USE_CXX11_ABI
  51:/usr/include/c++/7/bits/basic_string.tcc **** 
  52:/usr/include/c++/7/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  53:/usr/include/c++/7/bits/basic_string.tcc ****     const typename basic_string<_CharT, _Traits, _Alloc>::size_type
  54:/usr/include/c++/7/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::npos;
  55:/usr/include/c++/7/bits/basic_string.tcc **** 
  56:/usr/include/c++/7/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  57:/usr/include/c++/7/bits/basic_string.tcc ****     void
  58:/usr/include/c++/7/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
  59:/usr/include/c++/7/bits/basic_string.tcc ****     swap(basic_string& __s) _GLIBCXX_NOEXCEPT
  60:/usr/include/c++/7/bits/basic_string.tcc ****     {
  61:/usr/include/c++/7/bits/basic_string.tcc ****       if (this == &__s)
  62:/usr/include/c++/7/bits/basic_string.tcc **** 	return;
  63:/usr/include/c++/7/bits/basic_string.tcc **** 
  64:/usr/include/c++/7/bits/basic_string.tcc ****       _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());
  65:/usr/include/c++/7/bits/basic_string.tcc **** 
  66:/usr/include/c++/7/bits/basic_string.tcc ****       if (_M_is_local())
  67:/usr/include/c++/7/bits/basic_string.tcc **** 	if (__s._M_is_local())
  68:/usr/include/c++/7/bits/basic_string.tcc **** 	  {
  69:/usr/include/c++/7/bits/basic_string.tcc **** 	    if (length() && __s.length())
  70:/usr/include/c++/7/bits/basic_string.tcc **** 	      {
  71:/usr/include/c++/7/bits/basic_string.tcc **** 		_CharT __tmp_data[_S_local_capacity + 1];
  72:/usr/include/c++/7/bits/basic_string.tcc **** 		traits_type::copy(__tmp_data, __s._M_local_buf,
  73:/usr/include/c++/7/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  74:/usr/include/c++/7/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  75:/usr/include/c++/7/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  76:/usr/include/c++/7/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __tmp_data,
  77:/usr/include/c++/7/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  78:/usr/include/c++/7/bits/basic_string.tcc **** 	      }
  79:/usr/include/c++/7/bits/basic_string.tcc **** 	    else if (__s.length())
  80:/usr/include/c++/7/bits/basic_string.tcc **** 	      {
  81:/usr/include/c++/7/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __s._M_local_buf,
  82:/usr/include/c++/7/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  83:/usr/include/c++/7/bits/basic_string.tcc **** 		_M_length(__s.length());
  84:/usr/include/c++/7/bits/basic_string.tcc **** 		__s._M_set_length(0);
  85:/usr/include/c++/7/bits/basic_string.tcc **** 		return;
  86:/usr/include/c++/7/bits/basic_string.tcc **** 	      }
  87:/usr/include/c++/7/bits/basic_string.tcc **** 	    else if (length())
  88:/usr/include/c++/7/bits/basic_string.tcc **** 	      {
  89:/usr/include/c++/7/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  90:/usr/include/c++/7/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  91:/usr/include/c++/7/bits/basic_string.tcc **** 		__s._M_length(length());
  92:/usr/include/c++/7/bits/basic_string.tcc **** 		_M_set_length(0);
  93:/usr/include/c++/7/bits/basic_string.tcc **** 		return;
  94:/usr/include/c++/7/bits/basic_string.tcc **** 	      }
  95:/usr/include/c++/7/bits/basic_string.tcc **** 	  }
  96:/usr/include/c++/7/bits/basic_string.tcc **** 	else
  97:/usr/include/c++/7/bits/basic_string.tcc **** 	  {
  98:/usr/include/c++/7/bits/basic_string.tcc **** 	    const size_type __tmp_capacity = __s._M_allocated_capacity;
  99:/usr/include/c++/7/bits/basic_string.tcc **** 	    traits_type::copy(__s._M_local_buf, _M_local_buf,
 100:/usr/include/c++/7/bits/basic_string.tcc **** 			      _S_local_capacity + 1);
 101:/usr/include/c++/7/bits/basic_string.tcc **** 	    _M_data(__s._M_data());
 102:/usr/include/c++/7/bits/basic_string.tcc **** 	    __s._M_data(__s._M_local_buf);
 103:/usr/include/c++/7/bits/basic_string.tcc **** 	    _M_capacity(__tmp_capacity);
 104:/usr/include/c++/7/bits/basic_string.tcc **** 	  }
 105:/usr/include/c++/7/bits/basic_string.tcc ****       else
 106:/usr/include/c++/7/bits/basic_string.tcc **** 	{
 107:/usr/include/c++/7/bits/basic_string.tcc **** 	  const size_type __tmp_capacity = _M_allocated_capacity;
 108:/usr/include/c++/7/bits/basic_string.tcc **** 	  if (__s._M_is_local())
 109:/usr/include/c++/7/bits/basic_string.tcc **** 	    {
 110:/usr/include/c++/7/bits/basic_string.tcc **** 	      traits_type::copy(_M_local_buf, __s._M_local_buf,
 111:/usr/include/c++/7/bits/basic_string.tcc **** 				_S_local_capacity + 1);
 112:/usr/include/c++/7/bits/basic_string.tcc **** 	      __s._M_data(_M_data());
 113:/usr/include/c++/7/bits/basic_string.tcc **** 	      _M_data(_M_local_buf);
 114:/usr/include/c++/7/bits/basic_string.tcc **** 	    }
 115:/usr/include/c++/7/bits/basic_string.tcc **** 	  else
 116:/usr/include/c++/7/bits/basic_string.tcc **** 	    {
 117:/usr/include/c++/7/bits/basic_string.tcc **** 	      pointer __tmp_ptr = _M_data();
 118:/usr/include/c++/7/bits/basic_string.tcc **** 	      _M_data(__s._M_data());
 119:/usr/include/c++/7/bits/basic_string.tcc **** 	      __s._M_data(__tmp_ptr);
 120:/usr/include/c++/7/bits/basic_string.tcc **** 	      _M_capacity(__s._M_allocated_capacity);
 121:/usr/include/c++/7/bits/basic_string.tcc **** 	    }
 122:/usr/include/c++/7/bits/basic_string.tcc **** 	  __s._M_capacity(__tmp_capacity);
 123:/usr/include/c++/7/bits/basic_string.tcc **** 	}
 124:/usr/include/c++/7/bits/basic_string.tcc **** 
 125:/usr/include/c++/7/bits/basic_string.tcc ****       const size_type __tmp_length = length();
 126:/usr/include/c++/7/bits/basic_string.tcc ****       _M_length(__s.length());
 127:/usr/include/c++/7/bits/basic_string.tcc ****       __s._M_length(__tmp_length);
 128:/usr/include/c++/7/bits/basic_string.tcc ****     }
 129:/usr/include/c++/7/bits/basic_string.tcc **** 
 130:/usr/include/c++/7/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 131:/usr/include/c++/7/bits/basic_string.tcc ****     typename basic_string<_CharT, _Traits, _Alloc>::pointer
 132:/usr/include/c++/7/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 133:/usr/include/c++/7/bits/basic_string.tcc ****     _M_create(size_type& __capacity, size_type __old_capacity)
 134:/usr/include/c++/7/bits/basic_string.tcc ****     {
 135:/usr/include/c++/7/bits/basic_string.tcc ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 136:/usr/include/c++/7/bits/basic_string.tcc ****       // 83.  String::npos vs. string::max_size()
 137:/usr/include/c++/7/bits/basic_string.tcc ****       if (__capacity > max_size())
 138:/usr/include/c++/7/bits/basic_string.tcc **** 	std::__throw_length_error(__N("basic_string::_M_create"));
 139:/usr/include/c++/7/bits/basic_string.tcc **** 
 140:/usr/include/c++/7/bits/basic_string.tcc ****       // The below implements an exponential growth policy, necessary to
 141:/usr/include/c++/7/bits/basic_string.tcc ****       // meet amortized linear time requirements of the library: see
 142:/usr/include/c++/7/bits/basic_string.tcc ****       // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.
 143:/usr/include/c++/7/bits/basic_string.tcc ****       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 144:/usr/include/c++/7/bits/basic_string.tcc **** 	{
 145:/usr/include/c++/7/bits/basic_string.tcc **** 	  __capacity = 2 * __old_capacity;
 146:/usr/include/c++/7/bits/basic_string.tcc **** 	  // Never allocate a string bigger than max_size.
 147:/usr/include/c++/7/bits/basic_string.tcc **** 	  if (__capacity > max_size())
 148:/usr/include/c++/7/bits/basic_string.tcc **** 	    __capacity = max_size();
 149:/usr/include/c++/7/bits/basic_string.tcc **** 	}
 150:/usr/include/c++/7/bits/basic_string.tcc **** 
 151:/usr/include/c++/7/bits/basic_string.tcc ****       // NB: Need an array of char_type[__capacity], plus a terminating
 152:/usr/include/c++/7/bits/basic_string.tcc ****       // null char_type() element.
 153:/usr/include/c++/7/bits/basic_string.tcc ****       return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
 154:/usr/include/c++/7/bits/basic_string.tcc ****     }
 155:/usr/include/c++/7/bits/basic_string.tcc **** 
 156:/usr/include/c++/7/bits/basic_string.tcc ****   // NB: This is the special case for Input Iterators, used in
 157:/usr/include/c++/7/bits/basic_string.tcc ****   // istreambuf_iterators, etc.
 158:/usr/include/c++/7/bits/basic_string.tcc ****   // Input Iterators have a cost structure very different from
 159:/usr/include/c++/7/bits/basic_string.tcc ****   // pointers, calling for a different coding style.
 160:/usr/include/c++/7/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 161:/usr/include/c++/7/bits/basic_string.tcc ****     template<typename _InIterator>
 162:/usr/include/c++/7/bits/basic_string.tcc ****       void
 163:/usr/include/c++/7/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 164:/usr/include/c++/7/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 165:/usr/include/c++/7/bits/basic_string.tcc **** 		   std::input_iterator_tag)
 166:/usr/include/c++/7/bits/basic_string.tcc ****       {
 167:/usr/include/c++/7/bits/basic_string.tcc **** 	size_type __len = 0;
 168:/usr/include/c++/7/bits/basic_string.tcc **** 	size_type __capacity = size_type(_S_local_capacity);
 169:/usr/include/c++/7/bits/basic_string.tcc **** 
 170:/usr/include/c++/7/bits/basic_string.tcc **** 	while (__beg != __end && __len < __capacity)
 171:/usr/include/c++/7/bits/basic_string.tcc **** 	  {
 172:/usr/include/c++/7/bits/basic_string.tcc **** 	    _M_data()[__len++] = *__beg;
 173:/usr/include/c++/7/bits/basic_string.tcc **** 	    ++__beg;
 174:/usr/include/c++/7/bits/basic_string.tcc **** 	  }
 175:/usr/include/c++/7/bits/basic_string.tcc **** 
 176:/usr/include/c++/7/bits/basic_string.tcc **** 	__try
 177:/usr/include/c++/7/bits/basic_string.tcc **** 	  {
 178:/usr/include/c++/7/bits/basic_string.tcc **** 	    while (__beg != __end)
 179:/usr/include/c++/7/bits/basic_string.tcc **** 	      {
 180:/usr/include/c++/7/bits/basic_string.tcc **** 		if (__len == __capacity)
 181:/usr/include/c++/7/bits/basic_string.tcc **** 		  {
 182:/usr/include/c++/7/bits/basic_string.tcc **** 		    // Allocate more space.
 183:/usr/include/c++/7/bits/basic_string.tcc **** 		    __capacity = __len + 1;
 184:/usr/include/c++/7/bits/basic_string.tcc **** 		    pointer __another = _M_create(__capacity, __len);
 185:/usr/include/c++/7/bits/basic_string.tcc **** 		    this->_S_copy(__another, _M_data(), __len);
 186:/usr/include/c++/7/bits/basic_string.tcc **** 		    _M_dispose();
 187:/usr/include/c++/7/bits/basic_string.tcc **** 		    _M_data(__another);
 188:/usr/include/c++/7/bits/basic_string.tcc **** 		    _M_capacity(__capacity);
 189:/usr/include/c++/7/bits/basic_string.tcc **** 		  }
 190:/usr/include/c++/7/bits/basic_string.tcc **** 		_M_data()[__len++] = *__beg;
 191:/usr/include/c++/7/bits/basic_string.tcc **** 		++__beg;
 192:/usr/include/c++/7/bits/basic_string.tcc **** 	      }
 193:/usr/include/c++/7/bits/basic_string.tcc **** 	  }
 194:/usr/include/c++/7/bits/basic_string.tcc **** 	__catch(...)
 195:/usr/include/c++/7/bits/basic_string.tcc **** 	  {
 196:/usr/include/c++/7/bits/basic_string.tcc **** 	    _M_dispose();
 197:/usr/include/c++/7/bits/basic_string.tcc **** 	    __throw_exception_again;
 198:/usr/include/c++/7/bits/basic_string.tcc **** 	  }
 199:/usr/include/c++/7/bits/basic_string.tcc **** 
 200:/usr/include/c++/7/bits/basic_string.tcc **** 	_M_set_length(__len);
 201:/usr/include/c++/7/bits/basic_string.tcc ****       }
 202:/usr/include/c++/7/bits/basic_string.tcc **** 
 203:/usr/include/c++/7/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 204:/usr/include/c++/7/bits/basic_string.tcc ****     template<typename _InIterator>
 205:/usr/include/c++/7/bits/basic_string.tcc ****       void
 206:/usr/include/c++/7/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 207:/usr/include/c++/7/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 208:/usr/include/c++/7/bits/basic_string.tcc **** 		   std::forward_iterator_tag)
 209:/usr/include/c++/7/bits/basic_string.tcc ****       {
 210:/usr/include/c++/7/bits/basic_string.tcc **** 	// NB: Not required, but considered best practice.
 211:/usr/include/c++/7/bits/basic_string.tcc **** 	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 212:/usr/include/c++/7/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 213:/usr/include/c++/7/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 214:/usr/include/c++/7/bits/basic_string.tcc **** 
 215:/usr/include/c++/7/bits/basic_string.tcc **** 	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 1932              		.loc 12 215 0
 1933 003e 48894424 		movq	%rax, 8(%rsp)	# prephitmp_5, __dnew
 1933      08
 1934              	# /usr/include/c++/7/bits/basic_string.tcc:217: 	if (__dnew > size_type(_S_local_capacity))
 216:/usr/include/c++/7/bits/basic_string.tcc **** 
 217:/usr/include/c++/7/bits/basic_string.tcc **** 	if (__dnew > size_type(_S_local_capacity))
 1935              		.loc 12 217 0
 1936 0043 4883F80F 		cmpq	$15, %rax	#, prephitmp_5
 1937 0047 0F876B02 		ja	.L197	#,
 1937      0000
 1938              	.LVL113:
 1939              	.LBB2028:
 1940              	.LBB2029:
 1941              	.LBB2030:
 1942              	# /usr/include/c++/7/bits/basic_string.h:337: 	if (__n == 1)
 337:/usr/include/c++/7/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 1943              		.loc 8 337 0
 1944 004d 4883F801 		cmpq	$1, %rax	#, prephitmp_5
 1945 0051 0F85A102 		jne	.L143	#,
 1945      0000
 1946              	.LVL114:
 1947              	.LBB2031:
 1948              	.LBB2032:
 1949              	# /usr/include/c++/7/bits/char_traits.h:285:       { __c1 = __c2; }
 285:/usr/include/c++/7/bits/char_traits.h **** 
 1950              		.loc 9 285 0
 1951 0057 410FB614 		movzbl	(%r12), %edx	# MEM[(const char_type &)inputs#0_10(D)], MEM[(const char_type &)inputs#0_10(D
 1951      24
 1952 005c 88542420 		movb	%dl, 32(%rsp)	# MEM[(const char_type &)inputs#0_10(D)], MEM[(char_type &)&D.76151 + 16]
 1953              	.LVL115:
 1954              	.L144:
 1955              	.LBE2032:
 1956              	.LBE2031:
 1957              	.LBE2030:
 1958              	.LBE2029:
 1959              	.LBE2028:
 1960              	.LBB2038:
 1961              	.LBB2039:
 1962              	.LBB2040:
 1963              	.LBB2041:
 1964              	# /usr/include/c++/7/bits/basic_string.h:172:       { _M_string_length = __length; }
 172:/usr/include/c++/7/bits/basic_string.h **** 
 1965              		.loc 8 172 0
 1966 0060 48894424 		movq	%rax, 24(%rsp)	# prephitmp_5, MEM[(size_type *)&D.76151 + 8B]
 1966      18
 1967              	.LVL116:
 1968              	.LBE2041:
 1969              	.LBE2040:
 1970              	.LBE2039:
 1971              	.LBE2038:
 1972              	.LBE2027:
 1973              	.LBE2026:
 1974              	.LBE2025:
 1975              	.LBE2024:
 1976              	.LBE2023:
 1977              	.LBE2022:
 1978              	.LBE2016:
 1979              	.LBE2015:
 1980              	.LBE2014:
 1981              	.LBB2077:
 1982              	.LBB2078:
 1983              	.LBB2079:
 1984              	.LBB2080:
 1985              	.LBB2081:
 1986              	.LBB2082:
 1987              	.LBB2083:
 1988              	.LBB2084:
 1989              	# /usr/include/c++/7/ext/new_allocator.h:111: 	return static_cast<_Tp*>(::operator new(__n * sizeof
 111:/usr/include/c++/7/ext/new_allocator.h ****       }
 1990              		.loc 10 111 0
 1991 0065 BF200000 		movl	$32, %edi	#,
 1991      00
 1992              	.LBE2084:
 1993              	.LBE2083:
 1994              	.LBE2082:
 1995              	.LBE2081:
 1996              	.LBE2080:
 1997              	.LBE2079:
 1998              	.LBE2078:
 1999              	.LBE2077:
 2000              	.LBB2220:
 2001              	.LBB2074:
 2002              	.LBB2071:
 2003              	.LBB2068:
 2004              	.LBB2065:
 2005              	.LBB2062:
 2006              	.LBB2059:
 2007              	.LBB2056:
 2008              	.LBB2053:
 2009              	.LBB2045:
 2010              	.LBB2044:
 2011              	.LBB2042:
 2012              	.LBB2043:
 2013              	# /usr/include/c++/7/bits/char_traits.h:285:       { __c1 = __c2; }
 285:/usr/include/c++/7/bits/char_traits.h **** 
 2014              		.loc 9 285 0
 2015 006a C6040300 		movb	$0, (%rbx,%rax)	#, MEM[(char_type &)_73]
 2016              	.LVL117:
 2017              	.LEHB4:
 2018              	.LBE2043:
 2019              	.LBE2042:
 2020              	.LBE2044:
 2021              	.LBE2045:
 2022              	.LBE2053:
 2023              	.LBE2056:
 2024              	.LBE2059:
 2025              	.LBE2062:
 2026              	.LBE2065:
 2027              	.LBE2068:
 2028              	.LBE2071:
 2029              	.LBE2074:
 2030              	.LBE2220:
 2031              	.LBB2221:
 2032              	.LBB2209:
 2033              	.LBB2204:
 2034              	.LBB2093:
 2035              	.LBB2091:
 2036              	.LBB2089:
 2037              	.LBB2087:
 2038              	.LBB2085:
 2039              	# /usr/include/c++/7/ext/new_allocator.h:111: 	return static_cast<_Tp*>(::operator new(__n * sizeof
 111:/usr/include/c++/7/ext/new_allocator.h ****       }
 2040              		.loc 10 111 0
 2041 006e E8000000 		call	_Znwm@PLT	#
 2041      00
 2042              	.LVL118:
 2043              	.LEHE4:
 2044 0073 4C8B7424 		movq	16(%rsp), %r14	# MEM[(const struct basic_string *)&D.76151], pretmp_260
 2044      10
 2045              	.LBE2085:
 2046              	.LBE2087:
 2047              	.LBE2089:
 2048              	.LBE2091:
 2049              	.LBE2093:
 2050              	.LBB2094:
 2051              	.LBB2095:
 2052              	.LBB2096:
 2053              	.LBB2097:
 2054              	.LBB2098:
 2055              	.LBB2099:
 2056              	.LBB2100:
 2057              	.LBB2101:
 2058              	.LBB2102:
 2059              	.LBB2103:
 2060              	.LBB2104:
 2061              	# /usr/include/c++/7/bits/basic_string.h:182: 	return std::pointer_traits<pointer>::pointer_to(*_M_
 182:/usr/include/c++/7/bits/basic_string.h **** #else
 2062              		.loc 8 182 0
 2063 0078 4C8D6810 		leaq	16(%rax), %r13	#, tmp221
 2064              	.LBE2104:
 2065              	.LBE2103:
 2066              	.LBE2102:
 2067              	.LBE2101:
 2068              	.LBE2100:
 2069              	.LBE2099:
 2070              	.LBE2098:
 2071              	.LBE2097:
 2072              	.LBE2096:
 2073              	.LBE2095:
 2074              	.LBE2094:
 2075              	.LBB2198:
 2076              	.LBB2092:
 2077              	.LBB2090:
 2078              	.LBB2088:
 2079              	.LBB2086:
 2080              	# /usr/include/c++/7/ext/new_allocator.h:111: 	return static_cast<_Tp*>(::operator new(__n * sizeof
 111:/usr/include/c++/7/ext/new_allocator.h ****       }
 2081              		.loc 10 111 0
 2082 007c 4989C4   		movq	%rax, %r12	#, _89
 2083              	.LVL119:
 2084              	.LBE2086:
 2085              	.LBE2088:
 2086              	.LBE2090:
 2087              	.LBE2092:
 2088              	.LBE2198:
 2089              	.LBB2199:
 2090              	.LBB2193:
 2091              	.LBB2188:
 2092              	.LBB2183:
 2093              	.LBB2178:
 2094              	.LBB2174:
 2095              	.LBB2170:
 2096              	.LBB2166:
 2097              	.LBB2162:
 2098              	# /usr/include/c++/7/bits/basic_string.h:440:       { _M_construct(__str._M_data(), __str._M_data()
 440:/usr/include/c++/7/bits/basic_string.h **** 
 2099              		.loc 8 440 0
 2100 007f 488B5C24 		movq	24(%rsp), %rbx	# MEM[(const struct basic_string *)&D.76151 + 8B], _104
 2100      18
 2101              	.LBB2106:
 2102              	.LBB2105:
 2103              	# /usr/include/c++/7/bits/basic_string.h:182: 	return std::pointer_traits<pointer>::pointer_to(*_M_
 182:/usr/include/c++/7/bits/basic_string.h **** #else
 2104              		.loc 8 182 0
 2105 0084 4C89E8   		movq	%r13, %rax	# tmp221, prephitmp_27
 2106              	.LVL120:
 2107              	.LBE2105:
 2108              	.LBE2106:
 2109              	.LBB2107:
 2110              	.LBB2108:
 2111              	# /usr/include/c++/7/bits/basic_string.h:149: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 149:/usr/include/c++/7/bits/basic_string.h **** #endif
 2112              		.loc 8 149 0
 2113 0087 4D892C24 		movq	%r13, (%r12)	# tmp221, MEM[(struct _Alloc_hider *)_89]._M_p
 2114              	.LVL121:
 2115              	.LBE2108:
 2116              	.LBE2107:
 2117              	.LBB2109:
 2118              	.LBB2110:
 2119              	.LBB2111:
 2120              	.LBB2112:
 2121              	.LBB2113:
 2122              	.LBB2114:
 2123              	# /usr/include/c++/7/bits/basic_string.tcc:211: 	if (__gnu_cxx::__is_null_pointer(__beg) && __beg !
 211:/usr/include/c++/7/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 2124              		.loc 12 211 0
 2125 008b 4C89F1   		movq	%r14, %rcx	# pretmp_260, tmp223
 2126 008e 4801D9   		addq	%rbx, %rcx	# _104, tmp223
 2127 0091 7409     		je	.L145	#,
 2128 0093 4D85F6   		testq	%r14, %r14	# pretmp_260
 2129 0096 0F846F02 		je	.L198	#,
 2129      0000
 2130              	.L145:
 2131              	# /usr/include/c++/7/bits/basic_string.tcc:215: 	size_type __dnew = static_cast<size_type>(std::dis
 215:/usr/include/c++/7/bits/basic_string.tcc **** 
 2132              		.loc 12 215 0
 2133 009c 48895C24 		movq	%rbx, 8(%rsp)	# _104, __dnew
 2133      08
 2134              	# /usr/include/c++/7/bits/basic_string.tcc:217: 	if (__dnew > size_type(_S_local_capacity))
 2135              		.loc 12 217 0
 2136 00a1 4883FB0F 		cmpq	$15, %rbx	#, _104
 2137 00a5 0F877501 		ja	.L199	#,
 2137      0000
 2138              	.LVL122:
 2139              	.LBB2115:
 2140              	.LBB2116:
 2141              	.LBB2117:
 2142              	# /usr/include/c++/7/bits/basic_string.h:337: 	if (__n == 1)
 337:/usr/include/c++/7/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 2143              		.loc 8 337 0
 2144 00ab 4883FB01 		cmpq	$1, %rbx	#, _104
 2145 00af 0F85BB01 		jne	.L148	#,
 2145      0000
 2146              	# /usr/include/c++/7/bits/basic_string.h:338: 	  traits_type::assign(*__d, *__s);
 338:/usr/include/c++/7/bits/basic_string.h **** 	else
 2147              		.loc 8 338 0
 2148 00b5 410FB616 		movzbl	(%r14), %edx	# MEM[(const char_type &)pretmp_260], _113
 2149              	.LVL123:
 2150              	.LBB2118:
 2151              	.LBB2119:
 2152              	# /usr/include/c++/7/bits/char_traits.h:285:       { __c1 = __c2; }
 285:/usr/include/c++/7/bits/char_traits.h **** 
 2153              		.loc 9 285 0
 2154 00b9 41885424 		movb	%dl, 16(%r12)	# _113, MEM[(char_type &)_89 + 16]
 2154      10
 2155              	.LVL124:
 2156              	.L149:
 2157              	.LBE2119:
 2158              	.LBE2118:
 2159              	.LBE2117:
 2160              	.LBE2116:
 2161              	.LBE2115:
 2162              	.LBB2130:
 2163              	.LBB2131:
 2164              	.LBB2132:
 2165              	.LBB2133:
 2166              	# /usr/include/c++/7/bits/basic_string.h:172:       { _M_string_length = __length; }
 172:/usr/include/c++/7/bits/basic_string.h **** 
 2167              		.loc 8 172 0
 2168 00be 49895C24 		movq	%rbx, 8(%r12)	# _104, MEM[(size_type *)_89 + 8B]
 2168      08
 2169              	.LVL125:
 2170              	.LBE2133:
 2171              	.LBE2132:
 2172              	.LBB2134:
 2173              	.LBB2135:
 2174              	# /usr/include/c++/7/bits/char_traits.h:285:       { __c1 = __c2; }
 285:/usr/include/c++/7/bits/char_traits.h **** 
 2175              		.loc 9 285 0
 2176 00c3 C6041800 		movb	$0, (%rax,%rbx)	#, MEM[(char_type &)_116]
 2177              	.LVL126:
 2178 00c7 488B7C24 		movq	16(%rsp), %rdi	# MEM[(const struct basic_string *)&D.76151], pretmp_137
 2178      10
 2179              	.LVL127:
 2180              	.LBE2135:
 2181              	.LBE2134:
 2182              	.LBE2131:
 2183              	.LBE2130:
 2184              	.LBE2114:
 2185              	.LBE2113:
 2186              	.LBE2112:
 2187              	.LBE2111:
 2188              	.LBE2110:
 2189              	.LBE2109:
 2190              	.LBE2162:
 2191              	.LBE2166:
 2192              	.LBE2170:
 2193              	.LBE2174:
 2194              	.LBE2178:
 2195              	.LBE2183:
 2196              	.LBE2188:
 2197              	.LBE2193:
 2198              	.LBE2199:
 2199              	.LBE2204:
 2200              	.LBE2209:
 2201              	.LBE2221:
 2202              	.LBB2222:
 2203              	.LBB2223:
 2204              	.LBB2224:
 2205              	# /usr/include/c++/7/bits/basic_string.h:220: 	if (!_M_is_local())
 220:/usr/include/c++/7/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2206              		.loc 8 220 0
 2207 00cc 488D4510 		leaq	16(%rbp), %rax	#, tmp177
 2208 00d0 4839C7   		cmpq	%rax, %rdi	# tmp177, pretmp_137
 2209 00d3 740B     		je	.L150	#,
 2210              	.LVL128:
 2211              	.LBB2225:
 2212              	.LBB2226:
 2213              	.LBB2227:
 2214              	.LBB2228:
 2215              	# /usr/include/c++/7/ext/new_allocator.h:125: 	::operator delete(__p);
 2216              		.loc 10 125 0
 2217 00d5 E8000000 		call	_ZdlPv@PLT	#
 2217      00
 2218              	.LVL129:
 2219 00da 660F1F44 		.p2align 4,,10
 2219      0000
 2220              		.p2align 3
 2221              	.L150:
 2222              	.LBE2228:
 2223              	.LBE2227:
 2224              	.LBE2226:
 2225              	.LBE2225:
 2226              	.LBE2224:
 2227              	.LBE2223:
 2228              	.LBE2222:
 2229              	.LBB2229:
 2230              	.LBB2230:
 2231              	.LBB2231:
 2232              	.LBB2232:
 2233              	# /usr/include/c++/7/bits/basic_string.h:440:       { _M_construct(__str._M_data(), __str._M_data()
 440:/usr/include/c++/7/bits/basic_string.h **** 
 2234              		.loc 8 440 0
 2235 00e0 4D8B3424 		movq	(%r12), %r14	# MEM[(const struct basic_string *)_89], _173
 2236              	.LVL130:
 2237              	.LBB2233:
 2238              	.LBB2234:
 2239              	.LBB2235:
 2240              	# /usr/include/c++/7/bits/basic_string.h:149: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 149:/usr/include/c++/7/bits/basic_string.h **** #endif
 2241              		.loc 8 149 0
 2242 00e4 488D4510 		leaq	16(%rbp), %rax	#, tmp179
 2243              	.LBE2235:
 2244              	.LBE2234:
 2245              	.LBE2233:
 2246              	# /usr/include/c++/7/bits/basic_string.h:440:       { _M_construct(__str._M_data(), __str._M_data()
 440:/usr/include/c++/7/bits/basic_string.h **** 
 2247              		.loc 8 440 0
 2248 00e8 498B5C24 		movq	8(%r12), %rbx	# MEM[(const struct basic_string *)_89 + 8B], _172
 2248      08
 2249              	.LBB2238:
 2250              	.LBB2237:
 2251              	.LBB2236:
 2252              	# /usr/include/c++/7/bits/basic_string.h:149: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 149:/usr/include/c++/7/bits/basic_string.h **** #endif
 2253              		.loc 8 149 0
 2254 00ed 48894424 		movq	%rax, 16(%rsp)	# tmp179, MEM[(struct _Alloc_hider *)&arg]._M_p
 2254      10
 2255              	.LVL131:
 2256              	.LBE2236:
 2257              	.LBE2237:
 2258              	.LBE2238:
 2259              	.LBB2239:
 2260              	.LBB2240:
 2261              	.LBB2241:
 2262              	.LBB2242:
 2263              	.LBB2243:
 2264              	.LBB2244:
 2265              	# /usr/include/c++/7/bits/basic_string.tcc:211: 	if (__gnu_cxx::__is_null_pointer(__beg) && __beg !
 211:/usr/include/c++/7/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 2266              		.loc 12 211 0
 2267 00f2 4C89F0   		movq	%r14, %rax	# _173, tmp224
 2268 00f5 4801D8   		addq	%rbx, %rax	# _172, tmp224
 2269 00f8 7409     		je	.L153	#,
 2270 00fa 4D85F6   		testq	%r14, %r14	# _173
 2271 00fd 0F842402 		je	.L200	#,
 2271      0000
 2272              	.L153:
 2273              	# /usr/include/c++/7/bits/basic_string.tcc:215: 	size_type __dnew = static_cast<size_type>(std::dis
 215:/usr/include/c++/7/bits/basic_string.tcc **** 
 2274              		.loc 12 215 0
 2275 0103 48895C24 		movq	%rbx, 8(%rsp)	# _172, __dnew
 2275      08
 2276              	# /usr/include/c++/7/bits/basic_string.tcc:217: 	if (__dnew > size_type(_S_local_capacity))
 2277              		.loc 12 217 0
 2278 0108 4883FB0F 		cmpq	$15, %rbx	#, _172
 2279 010c 0F87CE00 		ja	.L201	#,
 2279      0000
 2280              	.LVL132:
 2281              	.LBB2245:
 2282              	.LBB2246:
 2283              	.LBB2247:
 2284              	# /usr/include/c++/7/bits/basic_string.h:337: 	if (__n == 1)
 337:/usr/include/c++/7/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 2285              		.loc 8 337 0
 2286 0112 4883FB01 		cmpq	$1, %rbx	#, _172
 2287 0116 0F854401 		jne	.L160	#,
 2287      0000
 2288              	# /usr/include/c++/7/bits/basic_string.h:338: 	  traits_type::assign(*__d, *__s);
 338:/usr/include/c++/7/bits/basic_string.h **** 	else
 2289              		.loc 8 338 0
 2290 011c 410FB606 		movzbl	(%r14), %eax	# MEM[(const char_type &)_173], _124
 2291              	.LVL133:
 2292              	.LBB2248:
 2293              	.LBB2249:
 2294              	# /usr/include/c++/7/bits/char_traits.h:285:       { __c1 = __c2; }
 285:/usr/include/c++/7/bits/char_traits.h **** 
 2295              		.loc 9 285 0
 2296 0120 88442420 		movb	%al, 32(%rsp)	# _124, MEM[(char_type &)&arg + 16]
 2297 0124 488D4510 		leaq	16(%rbp), %rax	#, prephitmp_6
 2298              	.LVL134:
 2299              	.L161:
 2300              	.LBE2249:
 2301              	.LBE2248:
 2302              	.LBE2247:
 2303              	.LBE2246:
 2304              	.LBE2245:
 2305              	.LBB2260:
 2306              	.LBB2261:
 2307              	.LBB2262:
 2308              	.LBB2263:
 2309              	# /usr/include/c++/7/bits/basic_string.h:172:       { _M_string_length = __length; }
 172:/usr/include/c++/7/bits/basic_string.h **** 
 2310              		.loc 8 172 0
 2311 0128 48895C24 		movq	%rbx, 24(%rsp)	# _172, MEM[(size_type *)&arg + 8B]
 2311      18
 2312              	.LVL135:
 2313              	.LBE2263:
 2314              	.LBE2262:
 2315              	.LBE2261:
 2316              	.LBE2260:
 2317              	.LBE2244:
 2318              	.LBE2243:
 2319              	.LBE2242:
 2320              	.LBE2241:
 2321              	.LBE2240:
 2322              	.LBE2239:
 2323              	.LBE2232:
 2324              	.LBE2231:
 2325              	.LBE2230:
 2326              	.LBB2308:
 2327              	.LBB2309:
 2328              	# /usr/include/c++/7/bits/basic_string.h:6280:       return __ostream_insert(__os, __str.data(), __
1421:/usr/include/c++/7/bits/basic_string.h ****       }
1422:/usr/include/c++/7/bits/basic_string.h **** 
1423:/usr/include/c++/7/bits/basic_string.h ****       /**
1424:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
1425:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
1426:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  The character to use.
1427:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1428:/usr/include/c++/7/bits/basic_string.h ****        *
1429:/usr/include/c++/7/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
1430:/usr/include/c++/7/bits/basic_string.h ****        *  character @a __c.
1431:/usr/include/c++/7/bits/basic_string.h ****        */
1432:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1433:/usr/include/c++/7/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
1434:/usr/include/c++/7/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
1435:/usr/include/c++/7/bits/basic_string.h **** 
1436:/usr/include/c++/7/bits/basic_string.h ****       /**
1437:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
1438:/usr/include/c++/7/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1439:/usr/include/c++/7/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1440:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1441:/usr/include/c++/7/bits/basic_string.h ****        *
1442:/usr/include/c++/7/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
1443:/usr/include/c++/7/bits/basic_string.h ****       */
1444:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
1445:/usr/include/c++/7/bits/basic_string.h ****       template<class _InputIterator,
1446:/usr/include/c++/7/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1447:/usr/include/c++/7/bits/basic_string.h **** #else
1448:/usr/include/c++/7/bits/basic_string.h ****       template<class _InputIterator>
1449:/usr/include/c++/7/bits/basic_string.h **** #endif
1450:/usr/include/c++/7/bits/basic_string.h ****         basic_string&
1451:/usr/include/c++/7/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
1452:/usr/include/c++/7/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
1453:/usr/include/c++/7/bits/basic_string.h **** 
1454:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
1455:/usr/include/c++/7/bits/basic_string.h ****       /**
1456:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
1457:/usr/include/c++/7/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
1458:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1459:/usr/include/c++/7/bits/basic_string.h ****        */
1460:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1461:/usr/include/c++/7/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
1462:/usr/include/c++/7/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
1463:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
1464:/usr/include/c++/7/bits/basic_string.h **** 
1465:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
1466:/usr/include/c++/7/bits/basic_string.h ****       /**
1467:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value from a string_view.
1468:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1469:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1470:/usr/include/c++/7/bits/basic_string.h ****        */
1471:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
1472:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1473:/usr/include/c++/7/bits/basic_string.h **** 	assign(const _Tp& __svt)
1474:/usr/include/c++/7/bits/basic_string.h **** 	{
1475:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1476:/usr/include/c++/7/bits/basic_string.h **** 	  return this->assign(__sv.data(), __sv.size());
1477:/usr/include/c++/7/bits/basic_string.h **** 	}
1478:/usr/include/c++/7/bits/basic_string.h **** 
1479:/usr/include/c++/7/bits/basic_string.h ****       /**
1480:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value from a range of characters in a string_view.
1481:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1482:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  The position in the string_view to assign from.
1483:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  The number of characters to assign.
1484:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1485:/usr/include/c++/7/bits/basic_string.h ****        */
1486:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
1487:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1488:/usr/include/c++/7/bits/basic_string.h **** 	assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
1489:/usr/include/c++/7/bits/basic_string.h **** 	{
1490:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1491:/usr/include/c++/7/bits/basic_string.h **** 	  return _M_replace(size_type(0), this->size(), __sv.data()
1492:/usr/include/c++/7/bits/basic_string.h **** 			    + __sv._M_check(__pos, "basic_string::assign"),
1493:/usr/include/c++/7/bits/basic_string.h **** 			    __sv._M_limit(__pos, __n));
1494:/usr/include/c++/7/bits/basic_string.h **** 	}
1495:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
1496:/usr/include/c++/7/bits/basic_string.h **** 
1497:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
1498:/usr/include/c++/7/bits/basic_string.h ****       /**
1499:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1500:/usr/include/c++/7/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1501:/usr/include/c++/7/bits/basic_string.h ****        *              insert at.
1502:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1503:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  The character to insert.
1504:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1505:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1506:/usr/include/c++/7/bits/basic_string.h ****        *
1507:/usr/include/c++/7/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1508:/usr/include/c++/7/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1509:/usr/include/c++/7/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1510:/usr/include/c++/7/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1511:/usr/include/c++/7/bits/basic_string.h ****        *  change if an error is thrown.
1512:/usr/include/c++/7/bits/basic_string.h ****       */
1513:/usr/include/c++/7/bits/basic_string.h ****       iterator
1514:/usr/include/c++/7/bits/basic_string.h ****       insert(const_iterator __p, size_type __n, _CharT __c)
1515:/usr/include/c++/7/bits/basic_string.h ****       {
1516:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1517:/usr/include/c++/7/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1518:/usr/include/c++/7/bits/basic_string.h **** 	this->replace(__p, __p, __n, __c);
1519:/usr/include/c++/7/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1520:/usr/include/c++/7/bits/basic_string.h ****       }
1521:/usr/include/c++/7/bits/basic_string.h **** #else
1522:/usr/include/c++/7/bits/basic_string.h ****       /**
1523:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1524:/usr/include/c++/7/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1525:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1526:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  The character to insert.
1527:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1528:/usr/include/c++/7/bits/basic_string.h ****        *
1529:/usr/include/c++/7/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1530:/usr/include/c++/7/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1531:/usr/include/c++/7/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1532:/usr/include/c++/7/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1533:/usr/include/c++/7/bits/basic_string.h ****        *  change if an error is thrown.
1534:/usr/include/c++/7/bits/basic_string.h ****       */
1535:/usr/include/c++/7/bits/basic_string.h ****       void
1536:/usr/include/c++/7/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
1537:/usr/include/c++/7/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
1538:/usr/include/c++/7/bits/basic_string.h **** #endif
1539:/usr/include/c++/7/bits/basic_string.h **** 
1540:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
1541:/usr/include/c++/7/bits/basic_string.h ****       /**
1542:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1543:/usr/include/c++/7/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1544:/usr/include/c++/7/bits/basic_string.h ****        *              insert at.
1545:/usr/include/c++/7/bits/basic_string.h ****        *  @param __beg  Start of range.
1546:/usr/include/c++/7/bits/basic_string.h ****        *  @param __end  End of range.
1547:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1548:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1549:/usr/include/c++/7/bits/basic_string.h ****        *
1550:/usr/include/c++/7/bits/basic_string.h ****        *  Inserts characters in range [beg,end).  If adding characters
1551:/usr/include/c++/7/bits/basic_string.h ****        *  causes the length to exceed max_size(), length_error is
1552:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1553:/usr/include/c++/7/bits/basic_string.h ****        *  is thrown.
1554:/usr/include/c++/7/bits/basic_string.h ****       */
1555:/usr/include/c++/7/bits/basic_string.h ****       template<class _InputIterator,
1556:/usr/include/c++/7/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1557:/usr/include/c++/7/bits/basic_string.h **** 	iterator
1558:/usr/include/c++/7/bits/basic_string.h ****         insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
1559:/usr/include/c++/7/bits/basic_string.h ****         {
1560:/usr/include/c++/7/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1561:/usr/include/c++/7/bits/basic_string.h **** 	  const size_type __pos = __p - begin();
1562:/usr/include/c++/7/bits/basic_string.h **** 	  this->replace(__p, __p, __beg, __end);
1563:/usr/include/c++/7/bits/basic_string.h **** 	  return iterator(this->_M_data() + __pos);
1564:/usr/include/c++/7/bits/basic_string.h **** 	}
1565:/usr/include/c++/7/bits/basic_string.h **** #else
1566:/usr/include/c++/7/bits/basic_string.h ****       /**
1567:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1568:/usr/include/c++/7/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1569:/usr/include/c++/7/bits/basic_string.h ****        *  @param __beg  Start of range.
1570:/usr/include/c++/7/bits/basic_string.h ****        *  @param __end  End of range.
1571:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1572:/usr/include/c++/7/bits/basic_string.h ****        *
1573:/usr/include/c++/7/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
1574:/usr/include/c++/7/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1575:/usr/include/c++/7/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1576:/usr/include/c++/7/bits/basic_string.h ****        *  change if an error is thrown.
1577:/usr/include/c++/7/bits/basic_string.h ****       */
1578:/usr/include/c++/7/bits/basic_string.h ****       template<class _InputIterator>
1579:/usr/include/c++/7/bits/basic_string.h ****         void
1580:/usr/include/c++/7/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
1581:/usr/include/c++/7/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
1582:/usr/include/c++/7/bits/basic_string.h **** #endif
1583:/usr/include/c++/7/bits/basic_string.h **** 
1584:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
1585:/usr/include/c++/7/bits/basic_string.h ****       /**
1586:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
1587:/usr/include/c++/7/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1588:/usr/include/c++/7/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
1589:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1590:/usr/include/c++/7/bits/basic_string.h ****        */
1591:/usr/include/c++/7/bits/basic_string.h ****       void
1592:/usr/include/c++/7/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
1593:/usr/include/c++/7/bits/basic_string.h ****       {
1594:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1595:/usr/include/c++/7/bits/basic_string.h **** 	this->insert(__p - begin(), __l.begin(), __l.size());
1596:/usr/include/c++/7/bits/basic_string.h ****       }
1597:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
1598:/usr/include/c++/7/bits/basic_string.h **** 
1599:/usr/include/c++/7/bits/basic_string.h ****       /**
1600:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert value of a string.
1601:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
1602:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  The string to insert.
1603:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1604:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1605:/usr/include/c++/7/bits/basic_string.h ****        *
1606:/usr/include/c++/7/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
1607:/usr/include/c++/7/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1608:/usr/include/c++/7/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1609:/usr/include/c++/7/bits/basic_string.h ****        *  change if an error is thrown.
1610:/usr/include/c++/7/bits/basic_string.h ****       */
1611:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1612:/usr/include/c++/7/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
1613:/usr/include/c++/7/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0),
1614:/usr/include/c++/7/bits/basic_string.h **** 			     __str._M_data(), __str.size()); }
1615:/usr/include/c++/7/bits/basic_string.h **** 
1616:/usr/include/c++/7/bits/basic_string.h ****       /**
1617:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert a substring.
1618:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
1619:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  The string to insert.
1620:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1621:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
1622:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1623:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1624:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
1625:/usr/include/c++/7/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
1626:/usr/include/c++/7/bits/basic_string.h ****        *
1627:/usr/include/c++/7/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
1628:/usr/include/c++/7/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
1629:/usr/include/c++/7/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
1630:/usr/include/c++/7/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
1631:/usr/include/c++/7/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
1632:/usr/include/c++/7/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1633:/usr/include/c++/7/bits/basic_string.h ****       */
1634:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1635:/usr/include/c++/7/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
1636:/usr/include/c++/7/bits/basic_string.h **** 	     size_type __pos2, size_type __n = npos)
1637:/usr/include/c++/7/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0), __str._M_data()
1638:/usr/include/c++/7/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::insert"),
1639:/usr/include/c++/7/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n)); }
1640:/usr/include/c++/7/bits/basic_string.h **** 
1641:/usr/include/c++/7/bits/basic_string.h ****       /**
1642:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert a C substring.
1643:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
1644:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  The C string to insert.
1645:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
1646:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1647:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1648:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1649:/usr/include/c++/7/bits/basic_string.h ****        *  string.
1650:/usr/include/c++/7/bits/basic_string.h ****        *
1651:/usr/include/c++/7/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
1652:/usr/include/c++/7/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
1653:/usr/include/c++/7/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
1654:/usr/include/c++/7/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
1655:/usr/include/c++/7/bits/basic_string.h ****        *  doesn't change if an error is thrown.
1656:/usr/include/c++/7/bits/basic_string.h ****       */
1657:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1658:/usr/include/c++/7/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n)
1659:/usr/include/c++/7/bits/basic_string.h ****       { return this->replace(__pos, size_type(0), __s, __n); }
1660:/usr/include/c++/7/bits/basic_string.h **** 
1661:/usr/include/c++/7/bits/basic_string.h ****       /**
1662:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert a C string.
1663:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
1664:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  The C string to insert.
1665:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1666:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1667:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1668:/usr/include/c++/7/bits/basic_string.h ****        *  string.
1669:/usr/include/c++/7/bits/basic_string.h ****        *
1670:/usr/include/c++/7/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
1671:/usr/include/c++/7/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
1672:/usr/include/c++/7/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
1673:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1674:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.
1675:/usr/include/c++/7/bits/basic_string.h ****       */
1676:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1677:/usr/include/c++/7/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
1678:/usr/include/c++/7/bits/basic_string.h ****       {
1679:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1680:/usr/include/c++/7/bits/basic_string.h **** 	return this->replace(__pos, size_type(0), __s,
1681:/usr/include/c++/7/bits/basic_string.h **** 			     traits_type::length(__s));
1682:/usr/include/c++/7/bits/basic_string.h ****       }
1683:/usr/include/c++/7/bits/basic_string.h **** 
1684:/usr/include/c++/7/bits/basic_string.h ****       /**
1685:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1686:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
1687:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1688:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  The character to insert.
1689:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1690:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1691:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1692:/usr/include/c++/7/bits/basic_string.h ****        *  string.
1693:/usr/include/c++/7/bits/basic_string.h ****        *
1694:/usr/include/c++/7/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
1695:/usr/include/c++/7/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
1696:/usr/include/c++/7/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
1697:/usr/include/c++/7/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1698:/usr/include/c++/7/bits/basic_string.h ****        *  change if an error is thrown.
1699:/usr/include/c++/7/bits/basic_string.h ****       */
1700:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1701:/usr/include/c++/7/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
1702:/usr/include/c++/7/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
1703:/usr/include/c++/7/bits/basic_string.h **** 			      size_type(0), __n, __c); }
1704:/usr/include/c++/7/bits/basic_string.h **** 
1705:/usr/include/c++/7/bits/basic_string.h ****       /**
1706:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert one character.
1707:/usr/include/c++/7/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
1708:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  The character to insert.
1709:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
1710:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1711:/usr/include/c++/7/bits/basic_string.h ****        *
1712:/usr/include/c++/7/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
1713:/usr/include/c++/7/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
1714:/usr/include/c++/7/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
1715:/usr/include/c++/7/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1716:/usr/include/c++/7/bits/basic_string.h ****        *  change if an error is thrown.
1717:/usr/include/c++/7/bits/basic_string.h ****       */
1718:/usr/include/c++/7/bits/basic_string.h ****       iterator
1719:/usr/include/c++/7/bits/basic_string.h ****       insert(__const_iterator __p, _CharT __c)
1720:/usr/include/c++/7/bits/basic_string.h ****       {
1721:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1722:/usr/include/c++/7/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1723:/usr/include/c++/7/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
1724:/usr/include/c++/7/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1725:/usr/include/c++/7/bits/basic_string.h ****       }
1726:/usr/include/c++/7/bits/basic_string.h **** 
1727:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
1728:/usr/include/c++/7/bits/basic_string.h ****       /**
1729:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert a string_view.
1730:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
1731:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
1732:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1733:/usr/include/c++/7/bits/basic_string.h ****       */
1734:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
1735:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1736:/usr/include/c++/7/bits/basic_string.h **** 	insert(size_type __pos, const _Tp& __svt)
1737:/usr/include/c++/7/bits/basic_string.h **** 	{
1738:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1739:/usr/include/c++/7/bits/basic_string.h **** 	  return this->insert(__pos, __sv.data(), __sv.size());
1740:/usr/include/c++/7/bits/basic_string.h **** 	}
1741:/usr/include/c++/7/bits/basic_string.h **** 
1742:/usr/include/c++/7/bits/basic_string.h ****       /**
1743:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert a string_view.
1744:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
1745:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert from.
1746:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string_view to insert
1747:/usr/include/c++/7/bits/basic_string.h ****        *  from.
1748:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n    The number of characters to insert.
1749:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1750:/usr/include/c++/7/bits/basic_string.h ****       */
1751:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
1752:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1753:/usr/include/c++/7/bits/basic_string.h **** 	insert(size_type __pos1, const _Tp& __svt,
1754:/usr/include/c++/7/bits/basic_string.h **** 	       size_type __pos2, size_type __n = npos)
1755:/usr/include/c++/7/bits/basic_string.h **** 	{
1756:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1757:/usr/include/c++/7/bits/basic_string.h **** 	  return this->replace(__pos1, size_type(0), __sv.data()
1758:/usr/include/c++/7/bits/basic_string.h **** 			       + __sv._M_check(__pos2, "basic_string::insert"),
1759:/usr/include/c++/7/bits/basic_string.h **** 			       __sv._M_limit(__pos2, __n));
1760:/usr/include/c++/7/bits/basic_string.h **** 	}
1761:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
1762:/usr/include/c++/7/bits/basic_string.h **** 
1763:/usr/include/c++/7/bits/basic_string.h ****       /**
1764:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Remove characters.
1765:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
1766:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
1767:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1768:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1769:/usr/include/c++/7/bits/basic_string.h ****        *  string.
1770:/usr/include/c++/7/bits/basic_string.h ****        *
1771:/usr/include/c++/7/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
1772:/usr/include/c++/7/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
1773:/usr/include/c++/7/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
1774:/usr/include/c++/7/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
1775:/usr/include/c++/7/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1776:/usr/include/c++/7/bits/basic_string.h ****        *  change if an error is thrown.
1777:/usr/include/c++/7/bits/basic_string.h ****       */
1778:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1779:/usr/include/c++/7/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
1780:/usr/include/c++/7/bits/basic_string.h ****       {
1781:/usr/include/c++/7/bits/basic_string.h **** 	_M_check(__pos, "basic_string::erase");
1782:/usr/include/c++/7/bits/basic_string.h **** 	if (__n == npos)
1783:/usr/include/c++/7/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1784:/usr/include/c++/7/bits/basic_string.h **** 	else if (__n != 0)
1785:/usr/include/c++/7/bits/basic_string.h **** 	  this->_M_erase(__pos, _M_limit(__pos, __n));
1786:/usr/include/c++/7/bits/basic_string.h **** 	return *this;
1787:/usr/include/c++/7/bits/basic_string.h ****       }
1788:/usr/include/c++/7/bits/basic_string.h **** 
1789:/usr/include/c++/7/bits/basic_string.h ****       /**
1790:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Remove one character.
1791:/usr/include/c++/7/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
1792:/usr/include/c++/7/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
1793:/usr/include/c++/7/bits/basic_string.h ****        *
1794:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
1795:/usr/include/c++/7/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
1796:/usr/include/c++/7/bits/basic_string.h ****       */
1797:/usr/include/c++/7/bits/basic_string.h ****       iterator
1798:/usr/include/c++/7/bits/basic_string.h ****       erase(__const_iterator __position)
1799:/usr/include/c++/7/bits/basic_string.h ****       {
1800:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= begin()
1801:/usr/include/c++/7/bits/basic_string.h **** 				 && __position < end());
1802:/usr/include/c++/7/bits/basic_string.h **** 	const size_type __pos = __position - begin();
1803:/usr/include/c++/7/bits/basic_string.h **** 	this->_M_erase(__pos, size_type(1));
1804:/usr/include/c++/7/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1805:/usr/include/c++/7/bits/basic_string.h ****       }
1806:/usr/include/c++/7/bits/basic_string.h **** 
1807:/usr/include/c++/7/bits/basic_string.h ****       /**
1808:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Remove a range of characters.
1809:/usr/include/c++/7/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
1810:/usr/include/c++/7/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
1811:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
1812:/usr/include/c++/7/bits/basic_string.h ****        *
1813:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
1814:/usr/include/c++/7/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
1815:/usr/include/c++/7/bits/basic_string.h ****       */
1816:/usr/include/c++/7/bits/basic_string.h ****       iterator
1817:/usr/include/c++/7/bits/basic_string.h ****       erase(__const_iterator __first, __const_iterator __last)
1818:/usr/include/c++/7/bits/basic_string.h ****       {
1819:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__first >= begin() && __first <= __last
1820:/usr/include/c++/7/bits/basic_string.h **** 				 && __last <= end());
1821:/usr/include/c++/7/bits/basic_string.h ****         const size_type __pos = __first - begin();
1822:/usr/include/c++/7/bits/basic_string.h **** 	if (__last == end())
1823:/usr/include/c++/7/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1824:/usr/include/c++/7/bits/basic_string.h **** 	else
1825:/usr/include/c++/7/bits/basic_string.h **** 	  this->_M_erase(__pos, __last - __first);
1826:/usr/include/c++/7/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1827:/usr/include/c++/7/bits/basic_string.h ****       }
1828:/usr/include/c++/7/bits/basic_string.h **** 
1829:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
1830:/usr/include/c++/7/bits/basic_string.h ****       /**
1831:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Remove the last character.
1832:/usr/include/c++/7/bits/basic_string.h ****        *
1833:/usr/include/c++/7/bits/basic_string.h ****        *  The string must be non-empty.
1834:/usr/include/c++/7/bits/basic_string.h ****        */
1835:/usr/include/c++/7/bits/basic_string.h ****       void
1836:/usr/include/c++/7/bits/basic_string.h ****       pop_back() noexcept
1837:/usr/include/c++/7/bits/basic_string.h ****       {
1838:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1839:/usr/include/c++/7/bits/basic_string.h **** 	_M_erase(size() - 1, 1);
1840:/usr/include/c++/7/bits/basic_string.h ****       }
1841:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
1842:/usr/include/c++/7/bits/basic_string.h **** 
1843:/usr/include/c++/7/bits/basic_string.h ****       /**
1844:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1845:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1846:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
1847:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String to insert.
1848:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1849:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1850:/usr/include/c++/7/bits/basic_string.h ****        *  string.
1851:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1852:/usr/include/c++/7/bits/basic_string.h ****        *
1853:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
1854:/usr/include/c++/7/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
1855:/usr/include/c++/7/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1856:/usr/include/c++/7/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
1857:/usr/include/c++/7/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
1858:/usr/include/c++/7/bits/basic_string.h ****        *  error is thrown.
1859:/usr/include/c++/7/bits/basic_string.h ****       */
1860:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1861:/usr/include/c++/7/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
1862:/usr/include/c++/7/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
1863:/usr/include/c++/7/bits/basic_string.h **** 
1864:/usr/include/c++/7/bits/basic_string.h ****       /**
1865:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1866:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
1867:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1868:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String to insert.
1869:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
1870:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
1871:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1872:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
1873:/usr/include/c++/7/bits/basic_string.h ****        *  __str.size().
1874:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1875:/usr/include/c++/7/bits/basic_string.h ****        *
1876:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
1877:/usr/include/c++/7/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
1878:/usr/include/c++/7/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
1879:/usr/include/c++/7/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
1880:/usr/include/c++/7/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
1881:/usr/include/c++/7/bits/basic_string.h ****       */
1882:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1883:/usr/include/c++/7/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
1884:/usr/include/c++/7/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos)
1885:/usr/include/c++/7/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
1886:/usr/include/c++/7/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
1887:/usr/include/c++/7/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
1888:/usr/include/c++/7/bits/basic_string.h **** 
1889:/usr/include/c++/7/bits/basic_string.h ****       /**
1890:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
1891:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1892:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1893:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to insert.
1894:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
1895:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1896:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
1897:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1898:/usr/include/c++/7/bits/basic_string.h ****        *
1899:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1900:/usr/include/c++/7/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
1901:/usr/include/c++/7/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
1902:/usr/include/c++/7/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
1903:/usr/include/c++/7/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
1904:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1905:/usr/include/c++/7/bits/basic_string.h ****        *  is thrown.
1906:/usr/include/c++/7/bits/basic_string.h ****       */
1907:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1908:/usr/include/c++/7/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
1909:/usr/include/c++/7/bits/basic_string.h **** 	      size_type __n2)
1910:/usr/include/c++/7/bits/basic_string.h ****       {
1911:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n2);
1912:/usr/include/c++/7/bits/basic_string.h **** 	return _M_replace(_M_check(__pos, "basic_string::replace"),
1913:/usr/include/c++/7/bits/basic_string.h **** 			  _M_limit(__pos, __n1), __s, __n2);
1914:/usr/include/c++/7/bits/basic_string.h ****       }
1915:/usr/include/c++/7/bits/basic_string.h **** 
1916:/usr/include/c++/7/bits/basic_string.h ****       /**
1917:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
1918:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1919:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1920:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to insert.
1921:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1922:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
1923:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1924:/usr/include/c++/7/bits/basic_string.h ****        *
1925:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1926:/usr/include/c++/7/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
1927:/usr/include/c++/7/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
1928:/usr/include/c++/7/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
1929:/usr/include/c++/7/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1930:/usr/include/c++/7/bits/basic_string.h ****        *  change if an error is thrown.
1931:/usr/include/c++/7/bits/basic_string.h ****       */
1932:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1933:/usr/include/c++/7/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
1934:/usr/include/c++/7/bits/basic_string.h ****       {
1935:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1936:/usr/include/c++/7/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
1937:/usr/include/c++/7/bits/basic_string.h ****       }
1938:/usr/include/c++/7/bits/basic_string.h **** 
1939:/usr/include/c++/7/bits/basic_string.h ****       /**
1940:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
1941:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1942:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1943:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
1944:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to insert.
1945:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1946:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
1947:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1948:/usr/include/c++/7/bits/basic_string.h ****        *
1949:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
1950:/usr/include/c++/7/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
1951:/usr/include/c++/7/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1952:/usr/include/c++/7/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
1953:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1954:/usr/include/c++/7/bits/basic_string.h ****        *  is thrown.
1955:/usr/include/c++/7/bits/basic_string.h ****       */
1956:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1957:/usr/include/c++/7/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
1958:/usr/include/c++/7/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
1959:/usr/include/c++/7/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
1960:/usr/include/c++/7/bits/basic_string.h **** 
1961:/usr/include/c++/7/bits/basic_string.h ****       /**
1962:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
1963:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1964:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1965:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String value to insert.
1966:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1967:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1968:/usr/include/c++/7/bits/basic_string.h ****        *
1969:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1970:/usr/include/c++/7/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
1971:/usr/include/c++/7/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
1972:/usr/include/c++/7/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
1973:/usr/include/c++/7/bits/basic_string.h ****       */
1974:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1975:/usr/include/c++/7/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1976:/usr/include/c++/7/bits/basic_string.h **** 	      const basic_string& __str)
1977:/usr/include/c++/7/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
1978:/usr/include/c++/7/bits/basic_string.h **** 
1979:/usr/include/c++/7/bits/basic_string.h ****       /**
1980:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
1981:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
1982:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
1983:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string value to insert.
1984:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
1985:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
1986:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1987:/usr/include/c++/7/bits/basic_string.h ****        *
1988:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
1989:/usr/include/c++/7/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
1990:/usr/include/c++/7/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
1991:/usr/include/c++/7/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
1992:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.
1993:/usr/include/c++/7/bits/basic_string.h ****       */
1994:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
1995:/usr/include/c++/7/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
1996:/usr/include/c++/7/bits/basic_string.h **** 	      const _CharT* __s, size_type __n)
1997:/usr/include/c++/7/bits/basic_string.h ****       {
1998:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
1999:/usr/include/c++/7/bits/basic_string.h **** 				 && __i2 <= end());
2000:/usr/include/c++/7/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
2001:/usr/include/c++/7/bits/basic_string.h ****       }
2002:/usr/include/c++/7/bits/basic_string.h **** 
2003:/usr/include/c++/7/bits/basic_string.h ****       /**
2004:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
2005:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2006:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2007:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string value to insert.
2008:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
2009:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2010:/usr/include/c++/7/bits/basic_string.h ****        *
2011:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2012:/usr/include/c++/7/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
2013:/usr/include/c++/7/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2014:/usr/include/c++/7/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2015:/usr/include/c++/7/bits/basic_string.h ****       */
2016:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
2017:/usr/include/c++/7/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
2018:/usr/include/c++/7/bits/basic_string.h ****       {
2019:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2020:/usr/include/c++/7/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
2021:/usr/include/c++/7/bits/basic_string.h ****       }
2022:/usr/include/c++/7/bits/basic_string.h **** 
2023:/usr/include/c++/7/bits/basic_string.h ****       /**
2024:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
2025:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2026:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2027:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
2028:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to insert.
2029:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
2030:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2031:/usr/include/c++/7/bits/basic_string.h ****        *
2032:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2033:/usr/include/c++/7/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
2034:/usr/include/c++/7/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2035:/usr/include/c++/7/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2036:/usr/include/c++/7/bits/basic_string.h ****       */
2037:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
2038:/usr/include/c++/7/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
2039:/usr/include/c++/7/bits/basic_string.h **** 	      _CharT __c)
2040:/usr/include/c++/7/bits/basic_string.h ****       {
2041:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2042:/usr/include/c++/7/bits/basic_string.h **** 				 && __i2 <= end());
2043:/usr/include/c++/7/bits/basic_string.h **** 	return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
2044:/usr/include/c++/7/bits/basic_string.h ****       }
2045:/usr/include/c++/7/bits/basic_string.h **** 
2046:/usr/include/c++/7/bits/basic_string.h ****       /**
2047:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
2048:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2049:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2050:/usr/include/c++/7/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
2051:/usr/include/c++/7/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
2052:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
2053:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2054:/usr/include/c++/7/bits/basic_string.h ****        *
2055:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2056:/usr/include/c++/7/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2057:/usr/include/c++/7/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2058:/usr/include/c++/7/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2059:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.
2060:/usr/include/c++/7/bits/basic_string.h ****       */
2061:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
2062:/usr/include/c++/7/bits/basic_string.h ****       template<class _InputIterator,
2063:/usr/include/c++/7/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
2064:/usr/include/c++/7/bits/basic_string.h ****         basic_string&
2065:/usr/include/c++/7/bits/basic_string.h ****         replace(const_iterator __i1, const_iterator __i2,
2066:/usr/include/c++/7/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2067:/usr/include/c++/7/bits/basic_string.h ****         {
2068:/usr/include/c++/7/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2069:/usr/include/c++/7/bits/basic_string.h **** 				   && __i2 <= end());
2070:/usr/include/c++/7/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2071:/usr/include/c++/7/bits/basic_string.h **** 	  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
2072:/usr/include/c++/7/bits/basic_string.h **** 					   std::__false_type());
2073:/usr/include/c++/7/bits/basic_string.h **** 	}
2074:/usr/include/c++/7/bits/basic_string.h **** #else
2075:/usr/include/c++/7/bits/basic_string.h ****       template<class _InputIterator>
2076:/usr/include/c++/7/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
2077:/usr/include/c++/7/bits/basic_string.h ****         typename __enable_if_not_native_iterator<_InputIterator>::__type
2078:/usr/include/c++/7/bits/basic_string.h **** #else
2079:/usr/include/c++/7/bits/basic_string.h ****         basic_string&
2080:/usr/include/c++/7/bits/basic_string.h **** #endif
2081:/usr/include/c++/7/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
2082:/usr/include/c++/7/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2083:/usr/include/c++/7/bits/basic_string.h ****         {
2084:/usr/include/c++/7/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2085:/usr/include/c++/7/bits/basic_string.h **** 				   && __i2 <= end());
2086:/usr/include/c++/7/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2087:/usr/include/c++/7/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
2088:/usr/include/c++/7/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
2089:/usr/include/c++/7/bits/basic_string.h **** 	}
2090:/usr/include/c++/7/bits/basic_string.h **** #endif
2091:/usr/include/c++/7/bits/basic_string.h **** 
2092:/usr/include/c++/7/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
2093:/usr/include/c++/7/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
2094:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
2095:/usr/include/c++/7/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2096:/usr/include/c++/7/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
2097:/usr/include/c++/7/bits/basic_string.h ****       {
2098:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2099:/usr/include/c++/7/bits/basic_string.h **** 				 && __i2 <= end());
2100:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2101:/usr/include/c++/7/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2102:/usr/include/c++/7/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2103:/usr/include/c++/7/bits/basic_string.h ****       }
2104:/usr/include/c++/7/bits/basic_string.h **** 
2105:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
2106:/usr/include/c++/7/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2107:/usr/include/c++/7/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
2108:/usr/include/c++/7/bits/basic_string.h ****       {
2109:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2110:/usr/include/c++/7/bits/basic_string.h **** 				 && __i2 <= end());
2111:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2112:/usr/include/c++/7/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2113:/usr/include/c++/7/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2114:/usr/include/c++/7/bits/basic_string.h ****       }
2115:/usr/include/c++/7/bits/basic_string.h **** 
2116:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
2117:/usr/include/c++/7/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2118:/usr/include/c++/7/bits/basic_string.h **** 	      iterator __k1, iterator __k2)
2119:/usr/include/c++/7/bits/basic_string.h ****       {
2120:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2121:/usr/include/c++/7/bits/basic_string.h **** 				 && __i2 <= end());
2122:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2123:/usr/include/c++/7/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2124:/usr/include/c++/7/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2125:/usr/include/c++/7/bits/basic_string.h ****       }
2126:/usr/include/c++/7/bits/basic_string.h **** 
2127:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
2128:/usr/include/c++/7/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2129:/usr/include/c++/7/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
2130:/usr/include/c++/7/bits/basic_string.h ****       {
2131:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2132:/usr/include/c++/7/bits/basic_string.h **** 				 && __i2 <= end());
2133:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2134:/usr/include/c++/7/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2135:/usr/include/c++/7/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2136:/usr/include/c++/7/bits/basic_string.h ****       }
2137:/usr/include/c++/7/bits/basic_string.h **** 
2138:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
2139:/usr/include/c++/7/bits/basic_string.h ****       /**
2140:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
2141:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2142:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2143:/usr/include/c++/7/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
2144:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
2145:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2146:/usr/include/c++/7/bits/basic_string.h ****        *
2147:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2148:/usr/include/c++/7/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2149:/usr/include/c++/7/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2150:/usr/include/c++/7/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2151:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.
2152:/usr/include/c++/7/bits/basic_string.h ****       */
2153:/usr/include/c++/7/bits/basic_string.h ****       basic_string& replace(const_iterator __i1, const_iterator __i2,
2154:/usr/include/c++/7/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
2155:/usr/include/c++/7/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
2156:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
2157:/usr/include/c++/7/bits/basic_string.h **** 
2158:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
2159:/usr/include/c++/7/bits/basic_string.h ****       /**
2160:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2161:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  The position to replace at.
2162:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n    The number of characters to replace.
2163:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
2164:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
2165:/usr/include/c++/7/bits/basic_string.h ****       */
2166:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
2167:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2168:/usr/include/c++/7/bits/basic_string.h **** 	replace(size_type __pos, size_type __n, const _Tp& __svt)
2169:/usr/include/c++/7/bits/basic_string.h **** 	{
2170:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2171:/usr/include/c++/7/bits/basic_string.h **** 	  return this->replace(__pos, __n, __sv.data(), __sv.size());
2172:/usr/include/c++/7/bits/basic_string.h **** 	}
2173:/usr/include/c++/7/bits/basic_string.h **** 
2174:/usr/include/c++/7/bits/basic_string.h ****       /**
2175:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2176:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos1  The position to replace at.
2177:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1    The number of characters to replace.
2178:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2179:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos2  The position in the string_view to insert from.
2180:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n2    The number of characters to insert.
2181:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
2182:/usr/include/c++/7/bits/basic_string.h ****       */
2183:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
2184:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2185:/usr/include/c++/7/bits/basic_string.h **** 	replace(size_type __pos1, size_type __n1, const _Tp& __svt,
2186:/usr/include/c++/7/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos)
2187:/usr/include/c++/7/bits/basic_string.h **** 	{
2188:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2189:/usr/include/c++/7/bits/basic_string.h **** 	  return this->replace(__pos1, __n1, __sv.data()
2190:/usr/include/c++/7/bits/basic_string.h **** 			       + __sv._M_check(__pos2, "basic_string::replace"),
2191:/usr/include/c++/7/bits/basic_string.h **** 			       __sv._M_limit(__pos2, __n2));
2192:/usr/include/c++/7/bits/basic_string.h **** 	}
2193:/usr/include/c++/7/bits/basic_string.h **** 
2194:/usr/include/c++/7/bits/basic_string.h ****       /**
2195:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2196:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i1    An iterator referencing the start position
2197:/usr/include/c++/7/bits/basic_string.h ****           to replace at.
2198:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i2    An iterator referencing the end position
2199:/usr/include/c++/7/bits/basic_string.h ****           for the replace.
2200:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2201:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
2202:/usr/include/c++/7/bits/basic_string.h ****       */
2203:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
2204:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2205:/usr/include/c++/7/bits/basic_string.h **** 	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
2206:/usr/include/c++/7/bits/basic_string.h **** 	{
2207:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2208:/usr/include/c++/7/bits/basic_string.h **** 	  return this->replace(__i1 - begin(), __i2 - __i1, __sv);
2209:/usr/include/c++/7/bits/basic_string.h **** 	}
2210:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
2211:/usr/include/c++/7/bits/basic_string.h **** 
2212:/usr/include/c++/7/bits/basic_string.h ****     private:
2213:/usr/include/c++/7/bits/basic_string.h ****       template<class _Integer>
2214:/usr/include/c++/7/bits/basic_string.h **** 	basic_string&
2215:/usr/include/c++/7/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2216:/usr/include/c++/7/bits/basic_string.h **** 			    _Integer __n, _Integer __val, __true_type)
2217:/usr/include/c++/7/bits/basic_string.h ****         { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }
2218:/usr/include/c++/7/bits/basic_string.h **** 
2219:/usr/include/c++/7/bits/basic_string.h ****       template<class _InputIterator>
2220:/usr/include/c++/7/bits/basic_string.h **** 	basic_string&
2221:/usr/include/c++/7/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2222:/usr/include/c++/7/bits/basic_string.h **** 			    _InputIterator __k1, _InputIterator __k2,
2223:/usr/include/c++/7/bits/basic_string.h **** 			    __false_type);
2224:/usr/include/c++/7/bits/basic_string.h **** 
2225:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
2226:/usr/include/c++/7/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
2227:/usr/include/c++/7/bits/basic_string.h **** 		     _CharT __c);
2228:/usr/include/c++/7/bits/basic_string.h **** 
2229:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
2230:/usr/include/c++/7/bits/basic_string.h ****       _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
2231:/usr/include/c++/7/bits/basic_string.h **** 		 const size_type __len2);
2232:/usr/include/c++/7/bits/basic_string.h **** 
2233:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
2234:/usr/include/c++/7/bits/basic_string.h ****       _M_append(const _CharT* __s, size_type __n);
2235:/usr/include/c++/7/bits/basic_string.h **** 
2236:/usr/include/c++/7/bits/basic_string.h ****     public:
2237:/usr/include/c++/7/bits/basic_string.h **** 
2238:/usr/include/c++/7/bits/basic_string.h ****       /**
2239:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Copy substring into C string.
2240:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to copy value into.
2241:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
2242:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
2243:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Number of characters actually copied
2244:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2245:/usr/include/c++/7/bits/basic_string.h ****        *
2246:/usr/include/c++/7/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
2247:/usr/include/c++/7/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
2248:/usr/include/c++/7/bits/basic_string.h ****        *  out_of_range is thrown.
2249:/usr/include/c++/7/bits/basic_string.h ****       */
2250:/usr/include/c++/7/bits/basic_string.h ****       size_type
2251:/usr/include/c++/7/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
2252:/usr/include/c++/7/bits/basic_string.h **** 
2253:/usr/include/c++/7/bits/basic_string.h ****       /**
2254:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Swap contents with another string.
2255:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  String to swap with.
2256:/usr/include/c++/7/bits/basic_string.h ****        *
2257:/usr/include/c++/7/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
2258:/usr/include/c++/7/bits/basic_string.h ****        *  time.
2259:/usr/include/c++/7/bits/basic_string.h ****       */
2260:/usr/include/c++/7/bits/basic_string.h ****       void
2261:/usr/include/c++/7/bits/basic_string.h ****       swap(basic_string& __s) _GLIBCXX_NOEXCEPT;
2262:/usr/include/c++/7/bits/basic_string.h **** 
2263:/usr/include/c++/7/bits/basic_string.h ****       // String operations:
2264:/usr/include/c++/7/bits/basic_string.h ****       /**
2265:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
2266:/usr/include/c++/7/bits/basic_string.h ****        *
2267:/usr/include/c++/7/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
2268:/usr/include/c++/7/bits/basic_string.h ****        *  happen.
2269:/usr/include/c++/7/bits/basic_string.h ****       */
2270:/usr/include/c++/7/bits/basic_string.h ****       const _CharT*
2271:/usr/include/c++/7/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
2272:/usr/include/c++/7/bits/basic_string.h ****       { return _M_data(); }
2273:/usr/include/c++/7/bits/basic_string.h **** 
2274:/usr/include/c++/7/bits/basic_string.h ****       /**
2275:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
2276:/usr/include/c++/7/bits/basic_string.h ****        *
2277:/usr/include/c++/7/bits/basic_string.h ****        *  This is a pointer to internal data.  It is undefined to modify
2278:/usr/include/c++/7/bits/basic_string.h ****        *  the contents through the returned pointer. To get a pointer that
2279:/usr/include/c++/7/bits/basic_string.h ****        *  allows modifying the contents use @c &str[0] instead,
2280:/usr/include/c++/7/bits/basic_string.h ****        *  (or in C++17 the non-const @c str.data() overload).
2281:/usr/include/c++/7/bits/basic_string.h ****       */
2282:/usr/include/c++/7/bits/basic_string.h ****       const _CharT*
2283:/usr/include/c++/7/bits/basic_string.h ****       data() const _GLIBCXX_NOEXCEPT
2284:/usr/include/c++/7/bits/basic_string.h ****       { return _M_data(); }
2285:/usr/include/c++/7/bits/basic_string.h **** 
2286:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
2287:/usr/include/c++/7/bits/basic_string.h ****       /**
2288:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Return non-const pointer to contents.
2289:/usr/include/c++/7/bits/basic_string.h ****        *
2290:/usr/include/c++/7/bits/basic_string.h ****        *  This is a pointer to the character sequence held by the string.
2291:/usr/include/c++/7/bits/basic_string.h ****        *  Modifying the characters in the sequence is allowed.
2292:/usr/include/c++/7/bits/basic_string.h ****       */
2293:/usr/include/c++/7/bits/basic_string.h ****       _CharT*
2294:/usr/include/c++/7/bits/basic_string.h ****       data() noexcept
2295:/usr/include/c++/7/bits/basic_string.h ****       { return _M_data(); }
2296:/usr/include/c++/7/bits/basic_string.h **** #endif
2297:/usr/include/c++/7/bits/basic_string.h **** 
2298:/usr/include/c++/7/bits/basic_string.h ****       /**
2299:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
2300:/usr/include/c++/7/bits/basic_string.h ****       */
2301:/usr/include/c++/7/bits/basic_string.h ****       allocator_type
2302:/usr/include/c++/7/bits/basic_string.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
2303:/usr/include/c++/7/bits/basic_string.h ****       { return _M_get_allocator(); }
2304:/usr/include/c++/7/bits/basic_string.h **** 
2305:/usr/include/c++/7/bits/basic_string.h ****       /**
2306:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a C substring.
2307:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to locate.
2308:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2309:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters from @a s to search for.
2310:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2311:/usr/include/c++/7/bits/basic_string.h ****        *
2312:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the first @a
2313:/usr/include/c++/7/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
2314:/usr/include/c++/7/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
2315:/usr/include/c++/7/bits/basic_string.h ****        *  npos.
2316:/usr/include/c++/7/bits/basic_string.h ****       */
2317:/usr/include/c++/7/bits/basic_string.h ****       size_type
2318:/usr/include/c++/7/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const
2319:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2320:/usr/include/c++/7/bits/basic_string.h **** 
2321:/usr/include/c++/7/bits/basic_string.h ****       /**
2322:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a string.
2323:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String to locate.
2324:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2325:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2326:/usr/include/c++/7/bits/basic_string.h ****        *
2327:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for value of @a __str within
2328:/usr/include/c++/7/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
2329:/usr/include/c++/7/bits/basic_string.h ****        *  found, returns npos.
2330:/usr/include/c++/7/bits/basic_string.h ****       */
2331:/usr/include/c++/7/bits/basic_string.h ****       size_type
2332:/usr/include/c++/7/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
2333:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2334:/usr/include/c++/7/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
2335:/usr/include/c++/7/bits/basic_string.h **** 
2336:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
2337:/usr/include/c++/7/bits/basic_string.h ****       /**
2338:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a string_view.
2339:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
2340:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2341:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2342:/usr/include/c++/7/bits/basic_string.h ****       */
2343:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
2344:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2345:/usr/include/c++/7/bits/basic_string.h **** 	find(const _Tp& __svt, size_type __pos = 0) const
2346:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2347:/usr/include/c++/7/bits/basic_string.h **** 	{
2348:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2349:/usr/include/c++/7/bits/basic_string.h **** 	  return this->find(__sv.data(), __pos, __sv.size());
2350:/usr/include/c++/7/bits/basic_string.h **** 	}
2351:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
2352:/usr/include/c++/7/bits/basic_string.h **** 
2353:/usr/include/c++/7/bits/basic_string.h ****       /**
2354:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a C string.
2355:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to locate.
2356:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2357:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
2358:/usr/include/c++/7/bits/basic_string.h ****        *
2359:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the value of @a
2360:/usr/include/c++/7/bits/basic_string.h ****        *  __s within this string.  If found, returns the index where
2361:/usr/include/c++/7/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
2362:/usr/include/c++/7/bits/basic_string.h ****       */
2363:/usr/include/c++/7/bits/basic_string.h ****       size_type
2364:/usr/include/c++/7/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
2365:/usr/include/c++/7/bits/basic_string.h ****       {
2366:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2367:/usr/include/c++/7/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
2368:/usr/include/c++/7/bits/basic_string.h ****       }
2369:/usr/include/c++/7/bits/basic_string.h **** 
2370:/usr/include/c++/7/bits/basic_string.h ****       /**
2371:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character.
2372:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to locate.
2373:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2374:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
2375:/usr/include/c++/7/bits/basic_string.h ****        *
2376:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for @a __c within
2377:/usr/include/c++/7/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2378:/usr/include/c++/7/bits/basic_string.h ****        *  found.  If not found, returns npos.
2379:/usr/include/c++/7/bits/basic_string.h ****       */
2380:/usr/include/c++/7/bits/basic_string.h ****       size_type
2381:/usr/include/c++/7/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
2382:/usr/include/c++/7/bits/basic_string.h **** 
2383:/usr/include/c++/7/bits/basic_string.h ****       /**
2384:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a string.
2385:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String to locate.
2386:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2387:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2388:/usr/include/c++/7/bits/basic_string.h ****        *
2389:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for value of @a
2390:/usr/include/c++/7/bits/basic_string.h ****        *  __str within this string.  If found, returns the index where
2391:/usr/include/c++/7/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
2392:/usr/include/c++/7/bits/basic_string.h ****       */
2393:/usr/include/c++/7/bits/basic_string.h ****       size_type
2394:/usr/include/c++/7/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
2395:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2396:/usr/include/c++/7/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
2397:/usr/include/c++/7/bits/basic_string.h **** 
2398:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
2399:/usr/include/c++/7/bits/basic_string.h ****       /**
2400:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a string_view.
2401:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
2402:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2403:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2404:/usr/include/c++/7/bits/basic_string.h ****       */
2405:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
2406:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2407:/usr/include/c++/7/bits/basic_string.h **** 	rfind(const _Tp& __svt, size_type __pos = npos) const
2408:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2409:/usr/include/c++/7/bits/basic_string.h **** 	{
2410:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2411:/usr/include/c++/7/bits/basic_string.h **** 	  return this->rfind(__sv.data(), __pos, __sv.size());
2412:/usr/include/c++/7/bits/basic_string.h **** 	}
2413:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
2414:/usr/include/c++/7/bits/basic_string.h **** 
2415:/usr/include/c++/7/bits/basic_string.h ****       /**
2416:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
2417:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to locate.
2418:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2419:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2420:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
2421:/usr/include/c++/7/bits/basic_string.h ****        *
2422:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the first @a
2423:/usr/include/c++/7/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
2424:/usr/include/c++/7/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
2425:/usr/include/c++/7/bits/basic_string.h ****        *  npos.
2426:/usr/include/c++/7/bits/basic_string.h ****       */
2427:/usr/include/c++/7/bits/basic_string.h ****       size_type
2428:/usr/include/c++/7/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const
2429:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2430:/usr/include/c++/7/bits/basic_string.h **** 
2431:/usr/include/c++/7/bits/basic_string.h ****       /**
2432:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a C string.
2433:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to locate.
2434:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to start search at (default end).
2435:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
2436:/usr/include/c++/7/bits/basic_string.h ****        *
2437:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the value of
2438:/usr/include/c++/7/bits/basic_string.h ****        *  @a __s within this string.  If found, returns the index
2439:/usr/include/c++/7/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
2440:/usr/include/c++/7/bits/basic_string.h ****       */
2441:/usr/include/c++/7/bits/basic_string.h ****       size_type
2442:/usr/include/c++/7/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const
2443:/usr/include/c++/7/bits/basic_string.h ****       {
2444:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2445:/usr/include/c++/7/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
2446:/usr/include/c++/7/bits/basic_string.h ****       }
2447:/usr/include/c++/7/bits/basic_string.h **** 
2448:/usr/include/c++/7/bits/basic_string.h ****       /**
2449:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character.
2450:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to locate.
2451:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2452:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
2453:/usr/include/c++/7/bits/basic_string.h ****        *
2454:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
2455:/usr/include/c++/7/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2456:/usr/include/c++/7/bits/basic_string.h ****        *  found.  If not found, returns npos.
2457:/usr/include/c++/7/bits/basic_string.h ****       */
2458:/usr/include/c++/7/bits/basic_string.h ****       size_type
2459:/usr/include/c++/7/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;
2460:/usr/include/c++/7/bits/basic_string.h **** 
2461:/usr/include/c++/7/bits/basic_string.h ****       /**
2462:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character of string.
2463:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
2464:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2465:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
2466:/usr/include/c++/7/bits/basic_string.h ****        *
2467:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2468:/usr/include/c++/7/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
2469:/usr/include/c++/7/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2470:/usr/include/c++/7/bits/basic_string.h ****        *  npos.
2471:/usr/include/c++/7/bits/basic_string.h ****       */
2472:/usr/include/c++/7/bits/basic_string.h ****       size_type
2473:/usr/include/c++/7/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
2474:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2475:/usr/include/c++/7/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
2476:/usr/include/c++/7/bits/basic_string.h **** 
2477:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
2478:/usr/include/c++/7/bits/basic_string.h ****       /**
2479:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character of a string_view.
2480:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
2481:/usr/include/c++/7/bits/basic_string.h ****        *                characters to locate.
2482:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2483:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
2484:/usr/include/c++/7/bits/basic_string.h ****       */
2485:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
2486:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2487:/usr/include/c++/7/bits/basic_string.h **** 	find_first_of(const _Tp& __svt, size_type __pos = 0) const
2488:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2489:/usr/include/c++/7/bits/basic_string.h **** 	{
2490:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2491:/usr/include/c++/7/bits/basic_string.h **** 	  return this->find_first_of(__sv.data(), __pos, __sv.size());
2492:/usr/include/c++/7/bits/basic_string.h **** 	}
2493:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
2494:/usr/include/c++/7/bits/basic_string.h **** 
2495:/usr/include/c++/7/bits/basic_string.h ****       /**
2496:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
2497:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
2498:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2499:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2500:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
2501:/usr/include/c++/7/bits/basic_string.h ****        *
2502:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2503:/usr/include/c++/7/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
2504:/usr/include/c++/7/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
2505:/usr/include/c++/7/bits/basic_string.h ****        *  returns npos.
2506:/usr/include/c++/7/bits/basic_string.h ****       */
2507:/usr/include/c++/7/bits/basic_string.h ****       size_type
2508:/usr/include/c++/7/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
2509:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2510:/usr/include/c++/7/bits/basic_string.h **** 
2511:/usr/include/c++/7/bits/basic_string.h ****       /**
2512:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
2513:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
2514:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2515:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
2516:/usr/include/c++/7/bits/basic_string.h ****        *
2517:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
2518:/usr/include/c++/7/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
2519:/usr/include/c++/7/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2520:/usr/include/c++/7/bits/basic_string.h ****       */
2521:/usr/include/c++/7/bits/basic_string.h ****       size_type
2522:/usr/include/c++/7/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
2523:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2524:/usr/include/c++/7/bits/basic_string.h ****       {
2525:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2526:/usr/include/c++/7/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
2527:/usr/include/c++/7/bits/basic_string.h ****       }
2528:/usr/include/c++/7/bits/basic_string.h **** 
2529:/usr/include/c++/7/bits/basic_string.h ****       /**
2530:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character.
2531:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to locate.
2532:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2533:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
2534:/usr/include/c++/7/bits/basic_string.h ****        *
2535:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the character
2536:/usr/include/c++/7/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index
2537:/usr/include/c++/7/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
2538:/usr/include/c++/7/bits/basic_string.h ****        *
2539:/usr/include/c++/7/bits/basic_string.h ****        *  Note: equivalent to find(__c, __pos).
2540:/usr/include/c++/7/bits/basic_string.h ****       */
2541:/usr/include/c++/7/bits/basic_string.h ****       size_type
2542:/usr/include/c++/7/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
2543:/usr/include/c++/7/bits/basic_string.h ****       { return this->find(__c, __pos); }
2544:/usr/include/c++/7/bits/basic_string.h **** 
2545:/usr/include/c++/7/bits/basic_string.h ****       /**
2546:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
2547:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
2548:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2549:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
2550:/usr/include/c++/7/bits/basic_string.h ****        *
2551:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2552:/usr/include/c++/7/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
2553:/usr/include/c++/7/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2554:/usr/include/c++/7/bits/basic_string.h ****        *  npos.
2555:/usr/include/c++/7/bits/basic_string.h ****       */
2556:/usr/include/c++/7/bits/basic_string.h ****       size_type
2557:/usr/include/c++/7/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
2558:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2559:/usr/include/c++/7/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
2560:/usr/include/c++/7/bits/basic_string.h **** 
2561:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
2562:/usr/include/c++/7/bits/basic_string.h ****       /**
2563:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
2564:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
2565:/usr/include/c++/7/bits/basic_string.h ****        *                characters to locate.
2566:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2567:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
2568:/usr/include/c++/7/bits/basic_string.h ****       */
2569:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
2570:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2571:/usr/include/c++/7/bits/basic_string.h **** 	find_last_of(const _Tp& __svt, size_type __pos = npos) const
2572:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2573:/usr/include/c++/7/bits/basic_string.h **** 	{
2574:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2575:/usr/include/c++/7/bits/basic_string.h **** 	  return this->find_last_of(__sv.data(), __pos, __sv.size());
2576:/usr/include/c++/7/bits/basic_string.h **** 	}
2577:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
2578:/usr/include/c++/7/bits/basic_string.h **** 
2579:/usr/include/c++/7/bits/basic_string.h ****       /**
2580:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
2581:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
2582:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2583:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
2584:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
2585:/usr/include/c++/7/bits/basic_string.h ****        *
2586:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2587:/usr/include/c++/7/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
2588:/usr/include/c++/7/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
2589:/usr/include/c++/7/bits/basic_string.h ****        *  returns npos.
2590:/usr/include/c++/7/bits/basic_string.h ****       */
2591:/usr/include/c++/7/bits/basic_string.h ****       size_type
2592:/usr/include/c++/7/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
2593:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2594:/usr/include/c++/7/bits/basic_string.h **** 
2595:/usr/include/c++/7/bits/basic_string.h ****       /**
2596:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
2597:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
2598:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2599:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
2600:/usr/include/c++/7/bits/basic_string.h ****        *
2601:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
2602:/usr/include/c++/7/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
2603:/usr/include/c++/7/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2604:/usr/include/c++/7/bits/basic_string.h ****       */
2605:/usr/include/c++/7/bits/basic_string.h ****       size_type
2606:/usr/include/c++/7/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
2607:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2608:/usr/include/c++/7/bits/basic_string.h ****       {
2609:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2610:/usr/include/c++/7/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
2611:/usr/include/c++/7/bits/basic_string.h ****       }
2612:/usr/include/c++/7/bits/basic_string.h **** 
2613:/usr/include/c++/7/bits/basic_string.h ****       /**
2614:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character.
2615:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to locate.
2616:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2617:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
2618:/usr/include/c++/7/bits/basic_string.h ****        *
2619:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
2620:/usr/include/c++/7/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2621:/usr/include/c++/7/bits/basic_string.h ****        *  found.  If not found, returns npos.
2622:/usr/include/c++/7/bits/basic_string.h ****        *
2623:/usr/include/c++/7/bits/basic_string.h ****        *  Note: equivalent to rfind(__c, __pos).
2624:/usr/include/c++/7/bits/basic_string.h ****       */
2625:/usr/include/c++/7/bits/basic_string.h ****       size_type
2626:/usr/include/c++/7/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
2627:/usr/include/c++/7/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
2628:/usr/include/c++/7/bits/basic_string.h **** 
2629:/usr/include/c++/7/bits/basic_string.h ****       /**
2630:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
2631:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
2632:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2633:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
2634:/usr/include/c++/7/bits/basic_string.h ****        *
2635:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not contained
2636:/usr/include/c++/7/bits/basic_string.h ****        *  in @a __str within this string.  If found, returns the index where it
2637:/usr/include/c++/7/bits/basic_string.h ****        *  was found.  If not found, returns npos.
2638:/usr/include/c++/7/bits/basic_string.h ****       */
2639:/usr/include/c++/7/bits/basic_string.h ****       size_type
2640:/usr/include/c++/7/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
2641:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2642:/usr/include/c++/7/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
2643:/usr/include/c++/7/bits/basic_string.h **** 
2644:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
2645:/usr/include/c++/7/bits/basic_string.h ****       /**
2646:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character not in a string_view.
2647:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  A object convertible to string_view containing
2648:/usr/include/c++/7/bits/basic_string.h ****        *                characters to avoid.
2649:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2650:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
2651:/usr/include/c++/7/bits/basic_string.h ****        */
2652:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
2653:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2654:/usr/include/c++/7/bits/basic_string.h **** 	find_first_not_of(const _Tp& __svt, size_type __pos = 0) const
2655:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2656:/usr/include/c++/7/bits/basic_string.h **** 	{
2657:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2658:/usr/include/c++/7/bits/basic_string.h **** 	  return this->find_first_not_of(__sv.data(), __pos, __sv.size());
2659:/usr/include/c++/7/bits/basic_string.h **** 	}
2660:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
2661:/usr/include/c++/7/bits/basic_string.h **** 
2662:/usr/include/c++/7/bits/basic_string.h ****       /**
2663:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
2664:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2665:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
2666:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters from __s to consider.
2667:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
2668:/usr/include/c++/7/bits/basic_string.h ****        *
2669:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
2670:/usr/include/c++/7/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within
2671:/usr/include/c++/7/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
2672:/usr/include/c++/7/bits/basic_string.h ****        *  found.  If not found, returns npos.
2673:/usr/include/c++/7/bits/basic_string.h ****       */
2674:/usr/include/c++/7/bits/basic_string.h ****       size_type
2675:/usr/include/c++/7/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
2676:/usr/include/c++/7/bits/basic_string.h **** 			size_type __n) const _GLIBCXX_NOEXCEPT;
2677:/usr/include/c++/7/bits/basic_string.h **** 
2678:/usr/include/c++/7/bits/basic_string.h ****       /**
2679:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
2680:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2681:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2682:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
2683:/usr/include/c++/7/bits/basic_string.h ****        *
2684:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
2685:/usr/include/c++/7/bits/basic_string.h ****        *  contained in @a __s within this string.  If found, returns
2686:/usr/include/c++/7/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
2687:/usr/include/c++/7/bits/basic_string.h ****       */
2688:/usr/include/c++/7/bits/basic_string.h ****       size_type
2689:/usr/include/c++/7/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
2690:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2691:/usr/include/c++/7/bits/basic_string.h ****       {
2692:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2693:/usr/include/c++/7/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
2694:/usr/include/c++/7/bits/basic_string.h ****       }
2695:/usr/include/c++/7/bits/basic_string.h **** 
2696:/usr/include/c++/7/bits/basic_string.h ****       /**
2697:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a different character.
2698:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to avoid.
2699:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
2700:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
2701:/usr/include/c++/7/bits/basic_string.h ****        *
2702:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character
2703:/usr/include/c++/7/bits/basic_string.h ****        *  other than @a __c within this string.  If found, returns the
2704:/usr/include/c++/7/bits/basic_string.h ****        *  index where it was found.  If not found, returns npos.
2705:/usr/include/c++/7/bits/basic_string.h ****       */
2706:/usr/include/c++/7/bits/basic_string.h ****       size_type
2707:/usr/include/c++/7/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const
2708:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2709:/usr/include/c++/7/bits/basic_string.h **** 
2710:/usr/include/c++/7/bits/basic_string.h ****       /**
2711:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
2712:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
2713:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2714:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
2715:/usr/include/c++/7/bits/basic_string.h ****        *
2716:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
2717:/usr/include/c++/7/bits/basic_string.h ****        *  not contained in @a __str within this string.  If found,
2718:/usr/include/c++/7/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2719:/usr/include/c++/7/bits/basic_string.h ****        *  npos.
2720:/usr/include/c++/7/bits/basic_string.h ****       */
2721:/usr/include/c++/7/bits/basic_string.h ****       size_type
2722:/usr/include/c++/7/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
2723:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2724:/usr/include/c++/7/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
2725:/usr/include/c++/7/bits/basic_string.h **** 
2726:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
2727:/usr/include/c++/7/bits/basic_string.h ****       /**
2728:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character not in a string_view.
2729:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
2730:/usr/include/c++/7/bits/basic_string.h ****        *                characters to avoid.
2731:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2732:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
2733:/usr/include/c++/7/bits/basic_string.h ****        */
2734:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
2735:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
2736:/usr/include/c++/7/bits/basic_string.h **** 	find_last_not_of(const _Tp& __svt, size_type __pos = npos) const
2737:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2738:/usr/include/c++/7/bits/basic_string.h **** 	{
2739:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2740:/usr/include/c++/7/bits/basic_string.h **** 	  return this->find_last_not_of(__sv.data(), __pos, __sv.size());
2741:/usr/include/c++/7/bits/basic_string.h **** 	}
2742:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
2743:/usr/include/c++/7/bits/basic_string.h **** 
2744:/usr/include/c++/7/bits/basic_string.h ****       /**
2745:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
2746:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2747:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
2748:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters from s to consider.
2749:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
2750:/usr/include/c++/7/bits/basic_string.h ****        *
2751:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character not
2752:/usr/include/c++/7/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within this string.
2753:/usr/include/c++/7/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
2754:/usr/include/c++/7/bits/basic_string.h ****        *  returns npos.
2755:/usr/include/c++/7/bits/basic_string.h ****       */
2756:/usr/include/c++/7/bits/basic_string.h ****       size_type
2757:/usr/include/c++/7/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
2758:/usr/include/c++/7/bits/basic_string.h **** 		       size_type __n) const _GLIBCXX_NOEXCEPT;
2759:/usr/include/c++/7/bits/basic_string.h ****       /**
2760:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
2761:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
2762:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2763:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
2764:/usr/include/c++/7/bits/basic_string.h ****        *
2765:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
2766:/usr/include/c++/7/bits/basic_string.h ****        *  not contained in @a __s within this string.  If found,
2767:/usr/include/c++/7/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
2768:/usr/include/c++/7/bits/basic_string.h ****        *  npos.
2769:/usr/include/c++/7/bits/basic_string.h ****       */
2770:/usr/include/c++/7/bits/basic_string.h ****       size_type
2771:/usr/include/c++/7/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
2772:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
2773:/usr/include/c++/7/bits/basic_string.h ****       {
2774:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2775:/usr/include/c++/7/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
2776:/usr/include/c++/7/bits/basic_string.h ****       }
2777:/usr/include/c++/7/bits/basic_string.h **** 
2778:/usr/include/c++/7/bits/basic_string.h ****       /**
2779:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a different character.
2780:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to avoid.
2781:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
2782:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
2783:/usr/include/c++/7/bits/basic_string.h ****        *
2784:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character other than
2785:/usr/include/c++/7/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index where it was
2786:/usr/include/c++/7/bits/basic_string.h ****        *  found.  If not found, returns npos.
2787:/usr/include/c++/7/bits/basic_string.h ****       */
2788:/usr/include/c++/7/bits/basic_string.h ****       size_type
2789:/usr/include/c++/7/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const
2790:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
2791:/usr/include/c++/7/bits/basic_string.h **** 
2792:/usr/include/c++/7/bits/basic_string.h ****       /**
2793:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Get a substring.
2794:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character (default 0).
2795:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters in substring (default remainder).
2796:/usr/include/c++/7/bits/basic_string.h ****        *  @return  The new string.
2797:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2798:/usr/include/c++/7/bits/basic_string.h ****        *
2799:/usr/include/c++/7/bits/basic_string.h ****        *  Construct and return a new string using the @a __n
2800:/usr/include/c++/7/bits/basic_string.h ****        *  characters starting at @a __pos.  If the string is too
2801:/usr/include/c++/7/bits/basic_string.h ****        *  short, use the remainder of the characters.  If @a __pos is
2802:/usr/include/c++/7/bits/basic_string.h ****        *  beyond the end of the string, out_of_range is thrown.
2803:/usr/include/c++/7/bits/basic_string.h ****       */
2804:/usr/include/c++/7/bits/basic_string.h ****       basic_string
2805:/usr/include/c++/7/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
2806:/usr/include/c++/7/bits/basic_string.h ****       { return basic_string(*this,
2807:/usr/include/c++/7/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
2808:/usr/include/c++/7/bits/basic_string.h **** 
2809:/usr/include/c++/7/bits/basic_string.h ****       /**
2810:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare to a string.
2811:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String to compare against.
2812:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2813:/usr/include/c++/7/bits/basic_string.h ****        *
2814:/usr/include/c++/7/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a
2815:/usr/include/c++/7/bits/basic_string.h ****        *  __str, 0 if their values are equivalent, or > 0 if this
2816:/usr/include/c++/7/bits/basic_string.h ****        *  string is ordered after @a __str.  Determines the effective
2817:/usr/include/c++/7/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of
2818:/usr/include/c++/7/bits/basic_string.h ****        *  size() and str.size().  The function then compares the two
2819:/usr/include/c++/7/bits/basic_string.h ****        *  strings by calling traits::compare(data(), str.data(),rlen).
2820:/usr/include/c++/7/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
2821:/usr/include/c++/7/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
2822:/usr/include/c++/7/bits/basic_string.h ****       */
2823:/usr/include/c++/7/bits/basic_string.h ****       int
2824:/usr/include/c++/7/bits/basic_string.h ****       compare(const basic_string& __str) const
2825:/usr/include/c++/7/bits/basic_string.h ****       {
2826:/usr/include/c++/7/bits/basic_string.h **** 	const size_type __size = this->size();
2827:/usr/include/c++/7/bits/basic_string.h **** 	const size_type __osize = __str.size();
2828:/usr/include/c++/7/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
2829:/usr/include/c++/7/bits/basic_string.h **** 
2830:/usr/include/c++/7/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
2831:/usr/include/c++/7/bits/basic_string.h **** 	if (!__r)
2832:/usr/include/c++/7/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
2833:/usr/include/c++/7/bits/basic_string.h **** 	return __r;
2834:/usr/include/c++/7/bits/basic_string.h ****       }
2835:/usr/include/c++/7/bits/basic_string.h **** 
2836:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
2837:/usr/include/c++/7/bits/basic_string.h ****       /**
2838:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare to a string_view.
2839:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt An object convertible to string_view to compare against.
2840:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2841:/usr/include/c++/7/bits/basic_string.h ****        */
2842:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
2843:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, int>
2844:/usr/include/c++/7/bits/basic_string.h **** 	compare(const _Tp& __svt) const
2845:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2846:/usr/include/c++/7/bits/basic_string.h **** 	{
2847:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2848:/usr/include/c++/7/bits/basic_string.h **** 	  const size_type __size = this->size();
2849:/usr/include/c++/7/bits/basic_string.h **** 	  const size_type __osize = __sv.size();
2850:/usr/include/c++/7/bits/basic_string.h **** 	  const size_type __len = std::min(__size, __osize);
2851:/usr/include/c++/7/bits/basic_string.h **** 
2852:/usr/include/c++/7/bits/basic_string.h **** 	  int __r = traits_type::compare(_M_data(), __sv.data(), __len);
2853:/usr/include/c++/7/bits/basic_string.h **** 	  if (!__r)
2854:/usr/include/c++/7/bits/basic_string.h **** 	    __r = _S_compare(__size, __osize);
2855:/usr/include/c++/7/bits/basic_string.h **** 	  return __r;
2856:/usr/include/c++/7/bits/basic_string.h **** 	}
2857:/usr/include/c++/7/bits/basic_string.h **** 
2858:/usr/include/c++/7/bits/basic_string.h ****       /**
2859:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare to a string_view.
2860:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  A position in the string to start comparing from.
2861:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  The number of characters to compare.
2862:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to compare
2863:/usr/include/c++/7/bits/basic_string.h ****        *                against.
2864:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2865:/usr/include/c++/7/bits/basic_string.h ****        */
2866:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
2867:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, int>
2868:/usr/include/c++/7/bits/basic_string.h **** 	compare(size_type __pos, size_type __n, const _Tp& __svt) const
2869:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2870:/usr/include/c++/7/bits/basic_string.h **** 	{
2871:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2872:/usr/include/c++/7/bits/basic_string.h **** 	  return __sv_type(*this).substr(__pos, __n).compare(__sv);
2873:/usr/include/c++/7/bits/basic_string.h **** 	}
2874:/usr/include/c++/7/bits/basic_string.h **** 
2875:/usr/include/c++/7/bits/basic_string.h ****       /**
2876:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare to a string_view.
2877:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos1  A position in the string to start comparing from.
2878:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1  The number of characters to compare.
2879:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to compare
2880:/usr/include/c++/7/bits/basic_string.h ****        *                against.
2881:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos2  A position in the string_view to start comparing from.
2882:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n2  The number of characters to compare.
2883:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2884:/usr/include/c++/7/bits/basic_string.h ****        */
2885:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
2886:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, int>
2887:/usr/include/c++/7/bits/basic_string.h **** 	compare(size_type __pos1, size_type __n1, const _Tp& __svt,
2888:/usr/include/c++/7/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos) const
2889:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
2890:/usr/include/c++/7/bits/basic_string.h **** 	{
2891:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2892:/usr/include/c++/7/bits/basic_string.h **** 	  return __sv_type(*this)
2893:/usr/include/c++/7/bits/basic_string.h **** 	    .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
2894:/usr/include/c++/7/bits/basic_string.h **** 	}
2895:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
2896:/usr/include/c++/7/bits/basic_string.h **** 
2897:/usr/include/c++/7/bits/basic_string.h ****       /**
2898:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare substring to a string.
2899:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2900:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters in substring.
2901:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String to compare against.
2902:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2903:/usr/include/c++/7/bits/basic_string.h ****        *
2904:/usr/include/c++/7/bits/basic_string.h ****        *  Form the substring of this string from the @a __n characters
2905:/usr/include/c++/7/bits/basic_string.h ****        *  starting at @a __pos.  Returns an integer < 0 if the
2906:/usr/include/c++/7/bits/basic_string.h ****        *  substring is ordered before @a __str, 0 if their values are
2907:/usr/include/c++/7/bits/basic_string.h ****        *  equivalent, or > 0 if the substring is ordered after @a
2908:/usr/include/c++/7/bits/basic_string.h ****        *  __str.  Determines the effective length rlen of the strings
2909:/usr/include/c++/7/bits/basic_string.h ****        *  to compare as the smallest of the length of the substring
2910:/usr/include/c++/7/bits/basic_string.h ****        *  and @a __str.size().  The function then compares the two
2911:/usr/include/c++/7/bits/basic_string.h ****        *  strings by calling
2912:/usr/include/c++/7/bits/basic_string.h ****        *  traits::compare(substring.data(),str.data(),rlen).  If the
2913:/usr/include/c++/7/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise
2914:/usr/include/c++/7/bits/basic_string.h ****        *  the shorter one is ordered first.
2915:/usr/include/c++/7/bits/basic_string.h ****       */
2916:/usr/include/c++/7/bits/basic_string.h ****       int
2917:/usr/include/c++/7/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
2918:/usr/include/c++/7/bits/basic_string.h **** 
2919:/usr/include/c++/7/bits/basic_string.h ****       /**
2920:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
2921:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos1  Index of first character of substring.
2922:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2923:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String to compare against.
2924:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos2  Index of first character of substring of str.
2925:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n2  Number of characters in substring of str.
2926:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2927:/usr/include/c++/7/bits/basic_string.h ****        *
2928:/usr/include/c++/7/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2929:/usr/include/c++/7/bits/basic_string.h ****        *  characters starting at @a __pos1.  Form the substring of @a
2930:/usr/include/c++/7/bits/basic_string.h ****        *  __str from the @a __n2 characters starting at @a __pos2.
2931:/usr/include/c++/7/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before
2932:/usr/include/c++/7/bits/basic_string.h ****        *  the substring of @a __str, 0 if their values are equivalent,
2933:/usr/include/c++/7/bits/basic_string.h ****        *  or > 0 if this substring is ordered after the substring of
2934:/usr/include/c++/7/bits/basic_string.h ****        *  @a __str.  Determines the effective length rlen of the
2935:/usr/include/c++/7/bits/basic_string.h ****        *  strings to compare as the smallest of the lengths of the
2936:/usr/include/c++/7/bits/basic_string.h ****        *  substrings.  The function then compares the two strings by
2937:/usr/include/c++/7/bits/basic_string.h ****        *  calling
2938:/usr/include/c++/7/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
2939:/usr/include/c++/7/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
2940:/usr/include/c++/7/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
2941:/usr/include/c++/7/bits/basic_string.h ****       */
2942:/usr/include/c++/7/bits/basic_string.h ****       int
2943:/usr/include/c++/7/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
2944:/usr/include/c++/7/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos) const;
2945:/usr/include/c++/7/bits/basic_string.h **** 
2946:/usr/include/c++/7/bits/basic_string.h ****       /**
2947:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare to a C string.
2948:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to compare against.
2949:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2950:/usr/include/c++/7/bits/basic_string.h ****        *
2951:/usr/include/c++/7/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a __s, 0 if
2952:/usr/include/c++/7/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
2953:/usr/include/c++/7/bits/basic_string.h ****        *  @a __s.  Determines the effective length rlen of the strings to
2954:/usr/include/c++/7/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
2955:/usr/include/c++/7/bits/basic_string.h ****        *  constructed from @a __s.  The function then compares the two strings
2956:/usr/include/c++/7/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
2957:/usr/include/c++/7/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
2958:/usr/include/c++/7/bits/basic_string.h ****        *  ordered first.
2959:/usr/include/c++/7/bits/basic_string.h ****       */
2960:/usr/include/c++/7/bits/basic_string.h ****       int
2961:/usr/include/c++/7/bits/basic_string.h ****       compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;
2962:/usr/include/c++/7/bits/basic_string.h **** 
2963:/usr/include/c++/7/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
2964:/usr/include/c++/7/bits/basic_string.h ****       // 5 String::compare specification questionable
2965:/usr/include/c++/7/bits/basic_string.h ****       /**
2966:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
2967:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2968:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2969:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to compare against.
2970:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2971:/usr/include/c++/7/bits/basic_string.h ****        *
2972:/usr/include/c++/7/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2973:/usr/include/c++/7/bits/basic_string.h ****        *  characters starting at @a pos.  Returns an integer < 0 if
2974:/usr/include/c++/7/bits/basic_string.h ****        *  the substring is ordered before @a __s, 0 if their values
2975:/usr/include/c++/7/bits/basic_string.h ****        *  are equivalent, or > 0 if the substring is ordered after @a
2976:/usr/include/c++/7/bits/basic_string.h ****        *  __s.  Determines the effective length rlen of the strings to
2977:/usr/include/c++/7/bits/basic_string.h ****        *  compare as the smallest of the length of the substring and
2978:/usr/include/c++/7/bits/basic_string.h ****        *  the length of a string constructed from @a __s.  The
2979:/usr/include/c++/7/bits/basic_string.h ****        *  function then compares the two string by calling
2980:/usr/include/c++/7/bits/basic_string.h ****        *  traits::compare(substring.data(),__s,rlen).  If the result of
2981:/usr/include/c++/7/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
2982:/usr/include/c++/7/bits/basic_string.h ****        *  one is ordered first.
2983:/usr/include/c++/7/bits/basic_string.h ****       */
2984:/usr/include/c++/7/bits/basic_string.h ****       int
2985:/usr/include/c++/7/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
2986:/usr/include/c++/7/bits/basic_string.h **** 
2987:/usr/include/c++/7/bits/basic_string.h ****       /**
2988:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
2989:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
2990:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
2991:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  character %array to compare against.
2992:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n2  Number of characters of s.
2993:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
2994:/usr/include/c++/7/bits/basic_string.h ****        *
2995:/usr/include/c++/7/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
2996:/usr/include/c++/7/bits/basic_string.h ****        *  characters starting at @a __pos.  Form a string from the
2997:/usr/include/c++/7/bits/basic_string.h ****        *  first @a __n2 characters of @a __s.  Returns an integer < 0
2998:/usr/include/c++/7/bits/basic_string.h ****        *  if this substring is ordered before the string from @a __s,
2999:/usr/include/c++/7/bits/basic_string.h ****        *  0 if their values are equivalent, or > 0 if this substring
3000:/usr/include/c++/7/bits/basic_string.h ****        *  is ordered after the string from @a __s.  Determines the
3001:/usr/include/c++/7/bits/basic_string.h ****        *  effective length rlen of the strings to compare as the
3002:/usr/include/c++/7/bits/basic_string.h ****        *  smallest of the length of the substring and @a __n2.  The
3003:/usr/include/c++/7/bits/basic_string.h ****        *  function then compares the two strings by calling
3004:/usr/include/c++/7/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of
3005:/usr/include/c++/7/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
3006:/usr/include/c++/7/bits/basic_string.h ****        *  one is ordered first.
3007:/usr/include/c++/7/bits/basic_string.h ****        *
3008:/usr/include/c++/7/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
3009:/usr/include/c++/7/bits/basic_string.h ****        *  no special meaning.
3010:/usr/include/c++/7/bits/basic_string.h ****       */
3011:/usr/include/c++/7/bits/basic_string.h ****       int
3012:/usr/include/c++/7/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
3013:/usr/include/c++/7/bits/basic_string.h **** 	      size_type __n2) const;
3014:/usr/include/c++/7/bits/basic_string.h **** 
3015:/usr/include/c++/7/bits/basic_string.h ****       // Allow basic_stringbuf::__xfer_bufptrs to call _M_length:
3016:/usr/include/c++/7/bits/basic_string.h ****       template<typename, typename, typename> friend class basic_stringbuf;
3017:/usr/include/c++/7/bits/basic_string.h ****     };
3018:/usr/include/c++/7/bits/basic_string.h **** _GLIBCXX_END_NAMESPACE_CXX11
3019:/usr/include/c++/7/bits/basic_string.h **** #else  // !_GLIBCXX_USE_CXX11_ABI
3020:/usr/include/c++/7/bits/basic_string.h ****   // Reference-counted COW string implentation
3021:/usr/include/c++/7/bits/basic_string.h **** 
3022:/usr/include/c++/7/bits/basic_string.h ****   /**
3023:/usr/include/c++/7/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
3024:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
3025:/usr/include/c++/7/bits/basic_string.h ****    *
3026:/usr/include/c++/7/bits/basic_string.h ****    *  @ingroup strings
3027:/usr/include/c++/7/bits/basic_string.h ****    *  @ingroup sequences
3028:/usr/include/c++/7/bits/basic_string.h ****    *
3029:/usr/include/c++/7/bits/basic_string.h ****    *  @tparam _CharT  Type of character
3030:/usr/include/c++/7/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
3031:/usr/include/c++/7/bits/basic_string.h ****    *                   char_traits<_CharT>.
3032:/usr/include/c++/7/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
3033:/usr/include/c++/7/bits/basic_string.h ****    *
3034:/usr/include/c++/7/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
3035:/usr/include/c++/7/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
3036:/usr/include/c++/7/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
3037:/usr/include/c++/7/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
3038:/usr/include/c++/7/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
3039:/usr/include/c++/7/bits/basic_string.h ****    *
3040:/usr/include/c++/7/bits/basic_string.h ****    *  @doctodo
3041:/usr/include/c++/7/bits/basic_string.h ****    *
3042:/usr/include/c++/7/bits/basic_string.h ****    *
3043:/usr/include/c++/7/bits/basic_string.h ****    *  Documentation?  What's that?
3044:/usr/include/c++/7/bits/basic_string.h ****    *  Nathan Myers <ncm@cantrip.org>.
3045:/usr/include/c++/7/bits/basic_string.h ****    *
3046:/usr/include/c++/7/bits/basic_string.h ****    *  A string looks like this:
3047:/usr/include/c++/7/bits/basic_string.h ****    *
3048:/usr/include/c++/7/bits/basic_string.h ****    *  @code
3049:/usr/include/c++/7/bits/basic_string.h ****    *                                        [_Rep]
3050:/usr/include/c++/7/bits/basic_string.h ****    *                                        _M_length
3051:/usr/include/c++/7/bits/basic_string.h ****    *   [basic_string<char_type>]            _M_capacity
3052:/usr/include/c++/7/bits/basic_string.h ****    *   _M_dataplus                          _M_refcount
3053:/usr/include/c++/7/bits/basic_string.h ****    *   _M_p ---------------->               unnamed array of char_type
3054:/usr/include/c++/7/bits/basic_string.h ****    *  @endcode
3055:/usr/include/c++/7/bits/basic_string.h ****    *
3056:/usr/include/c++/7/bits/basic_string.h ****    *  Where the _M_p points to the first character in the string, and
3057:/usr/include/c++/7/bits/basic_string.h ****    *  you cast it to a pointer-to-_Rep and subtract 1 to get a
3058:/usr/include/c++/7/bits/basic_string.h ****    *  pointer to the header.
3059:/usr/include/c++/7/bits/basic_string.h ****    *
3060:/usr/include/c++/7/bits/basic_string.h ****    *  This approach has the enormous advantage that a string object
3061:/usr/include/c++/7/bits/basic_string.h ****    *  requires only one allocation.  All the ugliness is confined
3062:/usr/include/c++/7/bits/basic_string.h ****    *  within a single %pair of inline functions, which each compile to
3063:/usr/include/c++/7/bits/basic_string.h ****    *  a single @a add instruction: _Rep::_M_data(), and
3064:/usr/include/c++/7/bits/basic_string.h ****    *  string::_M_rep(); and the allocation function which gets a
3065:/usr/include/c++/7/bits/basic_string.h ****    *  block of raw bytes and with room enough and constructs a _Rep
3066:/usr/include/c++/7/bits/basic_string.h ****    *  object at the front.
3067:/usr/include/c++/7/bits/basic_string.h ****    *
3068:/usr/include/c++/7/bits/basic_string.h ****    *  The reason you want _M_data pointing to the character %array and
3069:/usr/include/c++/7/bits/basic_string.h ****    *  not the _Rep is so that the debugger can see the string
3070:/usr/include/c++/7/bits/basic_string.h ****    *  contents. (Probably we should add a non-inline member to get
3071:/usr/include/c++/7/bits/basic_string.h ****    *  the _Rep for the debugger to use, so users can check the actual
3072:/usr/include/c++/7/bits/basic_string.h ****    *  string length.)
3073:/usr/include/c++/7/bits/basic_string.h ****    *
3074:/usr/include/c++/7/bits/basic_string.h ****    *  Note that the _Rep object is a POD so that you can have a
3075:/usr/include/c++/7/bits/basic_string.h ****    *  static <em>empty string</em> _Rep object already @a constructed before
3076:/usr/include/c++/7/bits/basic_string.h ****    *  static constructors have run.  The reference-count encoding is
3077:/usr/include/c++/7/bits/basic_string.h ****    *  chosen so that a 0 indicates one reference, so you never try to
3078:/usr/include/c++/7/bits/basic_string.h ****    *  destroy the empty-string _Rep object.
3079:/usr/include/c++/7/bits/basic_string.h ****    *
3080:/usr/include/c++/7/bits/basic_string.h ****    *  All but the last paragraph is considered pretty conventional
3081:/usr/include/c++/7/bits/basic_string.h ****    *  for a C++ string implementation.
3082:/usr/include/c++/7/bits/basic_string.h ****   */
3083:/usr/include/c++/7/bits/basic_string.h ****   // 21.3  Template class basic_string
3084:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
3085:/usr/include/c++/7/bits/basic_string.h ****     class basic_string
3086:/usr/include/c++/7/bits/basic_string.h ****     {
3087:/usr/include/c++/7/bits/basic_string.h ****       typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;
3088:/usr/include/c++/7/bits/basic_string.h **** 
3089:/usr/include/c++/7/bits/basic_string.h ****       // Types:
3090:/usr/include/c++/7/bits/basic_string.h ****     public:
3091:/usr/include/c++/7/bits/basic_string.h ****       typedef _Traits					    traits_type;
3092:/usr/include/c++/7/bits/basic_string.h ****       typedef typename _Traits::char_type		    value_type;
3093:/usr/include/c++/7/bits/basic_string.h ****       typedef _Alloc					    allocator_type;
3094:/usr/include/c++/7/bits/basic_string.h ****       typedef typename _CharT_alloc_type::size_type	    size_type;
3095:/usr/include/c++/7/bits/basic_string.h ****       typedef typename _CharT_alloc_type::difference_type   difference_type;
3096:/usr/include/c++/7/bits/basic_string.h ****       typedef typename _CharT_alloc_type::reference	    reference;
3097:/usr/include/c++/7/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_reference   const_reference;
3098:/usr/include/c++/7/bits/basic_string.h ****       typedef typename _CharT_alloc_type::pointer	    pointer;
3099:/usr/include/c++/7/bits/basic_string.h ****       typedef typename _CharT_alloc_type::const_pointer	    const_pointer;
3100:/usr/include/c++/7/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
3101:/usr/include/c++/7/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
3102:/usr/include/c++/7/bits/basic_string.h ****                                                             const_iterator;
3103:/usr/include/c++/7/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
3104:/usr/include/c++/7/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		    reverse_iterator;
3105:/usr/include/c++/7/bits/basic_string.h **** 
3106:/usr/include/c++/7/bits/basic_string.h ****     private:
3107:/usr/include/c++/7/bits/basic_string.h ****       // _Rep: string representation
3108:/usr/include/c++/7/bits/basic_string.h ****       //   Invariants:
3109:/usr/include/c++/7/bits/basic_string.h ****       //   1. String really contains _M_length + 1 characters: due to 21.3.4
3110:/usr/include/c++/7/bits/basic_string.h ****       //      must be kept null-terminated.
3111:/usr/include/c++/7/bits/basic_string.h ****       //   2. _M_capacity >= _M_length
3112:/usr/include/c++/7/bits/basic_string.h ****       //      Allocated memory is always (_M_capacity + 1) * sizeof(_CharT).
3113:/usr/include/c++/7/bits/basic_string.h ****       //   3. _M_refcount has three states:
3114:/usr/include/c++/7/bits/basic_string.h ****       //      -1: leaked, one reference, no ref-copies allowed, non-const.
3115:/usr/include/c++/7/bits/basic_string.h ****       //       0: one reference, non-const.
3116:/usr/include/c++/7/bits/basic_string.h ****       //     n>0: n + 1 references, operations require a lock, const.
3117:/usr/include/c++/7/bits/basic_string.h ****       //   4. All fields==0 is an empty string, given the extra storage
3118:/usr/include/c++/7/bits/basic_string.h ****       //      beyond-the-end for a null terminator; thus, the shared
3119:/usr/include/c++/7/bits/basic_string.h ****       //      empty string representation needs no constructor.
3120:/usr/include/c++/7/bits/basic_string.h **** 
3121:/usr/include/c++/7/bits/basic_string.h ****       struct _Rep_base
3122:/usr/include/c++/7/bits/basic_string.h ****       {
3123:/usr/include/c++/7/bits/basic_string.h **** 	size_type		_M_length;
3124:/usr/include/c++/7/bits/basic_string.h **** 	size_type		_M_capacity;
3125:/usr/include/c++/7/bits/basic_string.h **** 	_Atomic_word		_M_refcount;
3126:/usr/include/c++/7/bits/basic_string.h ****       };
3127:/usr/include/c++/7/bits/basic_string.h **** 
3128:/usr/include/c++/7/bits/basic_string.h ****       struct _Rep : _Rep_base
3129:/usr/include/c++/7/bits/basic_string.h ****       {
3130:/usr/include/c++/7/bits/basic_string.h **** 	// Types:
3131:/usr/include/c++/7/bits/basic_string.h **** 	typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
3132:/usr/include/c++/7/bits/basic_string.h **** 
3133:/usr/include/c++/7/bits/basic_string.h **** 	// (Public) Data members:
3134:/usr/include/c++/7/bits/basic_string.h **** 
3135:/usr/include/c++/7/bits/basic_string.h **** 	// The maximum number of individual char_type elements of an
3136:/usr/include/c++/7/bits/basic_string.h **** 	// individual string is determined by _S_max_size. This is the
3137:/usr/include/c++/7/bits/basic_string.h **** 	// value that will be returned by max_size().  (Whereas npos
3138:/usr/include/c++/7/bits/basic_string.h **** 	// is the maximum number of bytes the allocator can allocate.)
3139:/usr/include/c++/7/bits/basic_string.h **** 	// If one was to divvy up the theoretical largest size string,
3140:/usr/include/c++/7/bits/basic_string.h **** 	// with a terminating character and m _CharT elements, it'd
3141:/usr/include/c++/7/bits/basic_string.h **** 	// look like this:
3142:/usr/include/c++/7/bits/basic_string.h **** 	// npos = sizeof(_Rep) + (m * sizeof(_CharT)) + sizeof(_CharT)
3143:/usr/include/c++/7/bits/basic_string.h **** 	// Solving for m:
3144:/usr/include/c++/7/bits/basic_string.h **** 	// m = ((npos - sizeof(_Rep))/sizeof(CharT)) - 1
3145:/usr/include/c++/7/bits/basic_string.h **** 	// In addition, this implementation quarters this amount.
3146:/usr/include/c++/7/bits/basic_string.h **** 	static const size_type	_S_max_size;
3147:/usr/include/c++/7/bits/basic_string.h **** 	static const _CharT	_S_terminal;
3148:/usr/include/c++/7/bits/basic_string.h **** 
3149:/usr/include/c++/7/bits/basic_string.h **** 	// The following storage is init'd to 0 by the linker, resulting
3150:/usr/include/c++/7/bits/basic_string.h ****         // (carefully) in an empty string with one reference.
3151:/usr/include/c++/7/bits/basic_string.h ****         static size_type _S_empty_rep_storage[];
3152:/usr/include/c++/7/bits/basic_string.h **** 
3153:/usr/include/c++/7/bits/basic_string.h ****         static _Rep&
3154:/usr/include/c++/7/bits/basic_string.h ****         _S_empty_rep() _GLIBCXX_NOEXCEPT
3155:/usr/include/c++/7/bits/basic_string.h ****         { 
3156:/usr/include/c++/7/bits/basic_string.h **** 	  // NB: Mild hack to avoid strict-aliasing warnings.  Note that
3157:/usr/include/c++/7/bits/basic_string.h **** 	  // _S_empty_rep_storage is never modified and the punning should
3158:/usr/include/c++/7/bits/basic_string.h **** 	  // be reasonably safe in this case.
3159:/usr/include/c++/7/bits/basic_string.h **** 	  void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
3160:/usr/include/c++/7/bits/basic_string.h **** 	  return *reinterpret_cast<_Rep*>(__p);
3161:/usr/include/c++/7/bits/basic_string.h **** 	}
3162:/usr/include/c++/7/bits/basic_string.h **** 
3163:/usr/include/c++/7/bits/basic_string.h ****         bool
3164:/usr/include/c++/7/bits/basic_string.h **** 	_M_is_leaked() const _GLIBCXX_NOEXCEPT
3165:/usr/include/c++/7/bits/basic_string.h ****         {
3166:/usr/include/c++/7/bits/basic_string.h **** #if defined(__GTHREADS)
3167:/usr/include/c++/7/bits/basic_string.h ****           // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,
3168:/usr/include/c++/7/bits/basic_string.h ****           // so we need to use an atomic load. However, _M_is_leaked
3169:/usr/include/c++/7/bits/basic_string.h ****           // predicate does not change concurrently (i.e. the string is either
3170:/usr/include/c++/7/bits/basic_string.h ****           // leaked or not), so a relaxed load is enough.
3171:/usr/include/c++/7/bits/basic_string.h ****           return __atomic_load_n(&this->_M_refcount, __ATOMIC_RELAXED) < 0;
3172:/usr/include/c++/7/bits/basic_string.h **** #else
3173:/usr/include/c++/7/bits/basic_string.h ****           return this->_M_refcount < 0;
3174:/usr/include/c++/7/bits/basic_string.h **** #endif
3175:/usr/include/c++/7/bits/basic_string.h ****         }
3176:/usr/include/c++/7/bits/basic_string.h **** 
3177:/usr/include/c++/7/bits/basic_string.h ****         bool
3178:/usr/include/c++/7/bits/basic_string.h **** 	_M_is_shared() const _GLIBCXX_NOEXCEPT
3179:/usr/include/c++/7/bits/basic_string.h **** 	{
3180:/usr/include/c++/7/bits/basic_string.h **** #if defined(__GTHREADS)
3181:/usr/include/c++/7/bits/basic_string.h ****           // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,
3182:/usr/include/c++/7/bits/basic_string.h ****           // so we need to use an atomic load. Another thread can drop last
3183:/usr/include/c++/7/bits/basic_string.h ****           // but one reference concurrently with this check, so we need this
3184:/usr/include/c++/7/bits/basic_string.h ****           // load to be acquire to synchronize with release fetch_and_add in
3185:/usr/include/c++/7/bits/basic_string.h ****           // _M_dispose.
3186:/usr/include/c++/7/bits/basic_string.h ****           return __atomic_load_n(&this->_M_refcount, __ATOMIC_ACQUIRE) > 0;
3187:/usr/include/c++/7/bits/basic_string.h **** #else
3188:/usr/include/c++/7/bits/basic_string.h ****           return this->_M_refcount > 0;
3189:/usr/include/c++/7/bits/basic_string.h **** #endif
3190:/usr/include/c++/7/bits/basic_string.h ****         }
3191:/usr/include/c++/7/bits/basic_string.h **** 
3192:/usr/include/c++/7/bits/basic_string.h ****         void
3193:/usr/include/c++/7/bits/basic_string.h **** 	_M_set_leaked() _GLIBCXX_NOEXCEPT
3194:/usr/include/c++/7/bits/basic_string.h ****         { this->_M_refcount = -1; }
3195:/usr/include/c++/7/bits/basic_string.h **** 
3196:/usr/include/c++/7/bits/basic_string.h ****         void
3197:/usr/include/c++/7/bits/basic_string.h **** 	_M_set_sharable() _GLIBCXX_NOEXCEPT
3198:/usr/include/c++/7/bits/basic_string.h ****         { this->_M_refcount = 0; }
3199:/usr/include/c++/7/bits/basic_string.h **** 
3200:/usr/include/c++/7/bits/basic_string.h **** 	void
3201:/usr/include/c++/7/bits/basic_string.h **** 	_M_set_length_and_sharable(size_type __n) _GLIBCXX_NOEXCEPT
3202:/usr/include/c++/7/bits/basic_string.h **** 	{
3203:/usr/include/c++/7/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3204:/usr/include/c++/7/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
3205:/usr/include/c++/7/bits/basic_string.h **** #endif
3206:/usr/include/c++/7/bits/basic_string.h **** 	    {
3207:/usr/include/c++/7/bits/basic_string.h **** 	      this->_M_set_sharable();  // One reference.
3208:/usr/include/c++/7/bits/basic_string.h **** 	      this->_M_length = __n;
3209:/usr/include/c++/7/bits/basic_string.h **** 	      traits_type::assign(this->_M_refdata()[__n], _S_terminal);
3210:/usr/include/c++/7/bits/basic_string.h **** 	      // grrr. (per 21.3.4)
3211:/usr/include/c++/7/bits/basic_string.h **** 	      // You cannot leave those LWG people alone for a second.
3212:/usr/include/c++/7/bits/basic_string.h **** 	    }
3213:/usr/include/c++/7/bits/basic_string.h **** 	}
3214:/usr/include/c++/7/bits/basic_string.h **** 
3215:/usr/include/c++/7/bits/basic_string.h **** 	_CharT*
3216:/usr/include/c++/7/bits/basic_string.h **** 	_M_refdata() throw()
3217:/usr/include/c++/7/bits/basic_string.h **** 	{ return reinterpret_cast<_CharT*>(this + 1); }
3218:/usr/include/c++/7/bits/basic_string.h **** 
3219:/usr/include/c++/7/bits/basic_string.h **** 	_CharT*
3220:/usr/include/c++/7/bits/basic_string.h **** 	_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
3221:/usr/include/c++/7/bits/basic_string.h **** 	{
3222:/usr/include/c++/7/bits/basic_string.h **** 	  return (!_M_is_leaked() && __alloc1 == __alloc2)
3223:/usr/include/c++/7/bits/basic_string.h **** 	          ? _M_refcopy() : _M_clone(__alloc1);
3224:/usr/include/c++/7/bits/basic_string.h **** 	}
3225:/usr/include/c++/7/bits/basic_string.h **** 
3226:/usr/include/c++/7/bits/basic_string.h **** 	// Create & Destroy
3227:/usr/include/c++/7/bits/basic_string.h **** 	static _Rep*
3228:/usr/include/c++/7/bits/basic_string.h **** 	_S_create(size_type, size_type, const _Alloc&);
3229:/usr/include/c++/7/bits/basic_string.h **** 
3230:/usr/include/c++/7/bits/basic_string.h **** 	void
3231:/usr/include/c++/7/bits/basic_string.h **** 	_M_dispose(const _Alloc& __a) _GLIBCXX_NOEXCEPT
3232:/usr/include/c++/7/bits/basic_string.h **** 	{
3233:/usr/include/c++/7/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3234:/usr/include/c++/7/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
3235:/usr/include/c++/7/bits/basic_string.h **** #endif
3236:/usr/include/c++/7/bits/basic_string.h **** 	    {
3237:/usr/include/c++/7/bits/basic_string.h **** 	      // Be race-detector-friendly.  For more info see bits/c++config.
3238:/usr/include/c++/7/bits/basic_string.h **** 	      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
3239:/usr/include/c++/7/bits/basic_string.h ****               // Decrement of _M_refcount is acq_rel, because:
3240:/usr/include/c++/7/bits/basic_string.h ****               // - all but last decrements need to release to synchronize with
3241:/usr/include/c++/7/bits/basic_string.h ****               //   the last decrement that will delete the object.
3242:/usr/include/c++/7/bits/basic_string.h ****               // - the last decrement needs to acquire to synchronize with
3243:/usr/include/c++/7/bits/basic_string.h ****               //   all the previous decrements.
3244:/usr/include/c++/7/bits/basic_string.h ****               // - last but one decrement needs to release to synchronize with
3245:/usr/include/c++/7/bits/basic_string.h ****               //   the acquire load in _M_is_shared that will conclude that
3246:/usr/include/c++/7/bits/basic_string.h ****               //   the object is not shared anymore.
3247:/usr/include/c++/7/bits/basic_string.h **** 	      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
3248:/usr/include/c++/7/bits/basic_string.h **** 							 -1) <= 0)
3249:/usr/include/c++/7/bits/basic_string.h **** 		{
3250:/usr/include/c++/7/bits/basic_string.h **** 		  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
3251:/usr/include/c++/7/bits/basic_string.h **** 		  _M_destroy(__a);
3252:/usr/include/c++/7/bits/basic_string.h **** 		}
3253:/usr/include/c++/7/bits/basic_string.h **** 	    }
3254:/usr/include/c++/7/bits/basic_string.h **** 	}  // XXX MT
3255:/usr/include/c++/7/bits/basic_string.h **** 
3256:/usr/include/c++/7/bits/basic_string.h **** 	void
3257:/usr/include/c++/7/bits/basic_string.h **** 	_M_destroy(const _Alloc&) throw();
3258:/usr/include/c++/7/bits/basic_string.h **** 
3259:/usr/include/c++/7/bits/basic_string.h **** 	_CharT*
3260:/usr/include/c++/7/bits/basic_string.h **** 	_M_refcopy() throw()
3261:/usr/include/c++/7/bits/basic_string.h **** 	{
3262:/usr/include/c++/7/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3263:/usr/include/c++/7/bits/basic_string.h **** 	  if (__builtin_expect(this != &_S_empty_rep(), false))
3264:/usr/include/c++/7/bits/basic_string.h **** #endif
3265:/usr/include/c++/7/bits/basic_string.h ****             __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
3266:/usr/include/c++/7/bits/basic_string.h **** 	  return _M_refdata();
3267:/usr/include/c++/7/bits/basic_string.h **** 	}  // XXX MT
3268:/usr/include/c++/7/bits/basic_string.h **** 
3269:/usr/include/c++/7/bits/basic_string.h **** 	_CharT*
3270:/usr/include/c++/7/bits/basic_string.h **** 	_M_clone(const _Alloc&, size_type __res = 0);
3271:/usr/include/c++/7/bits/basic_string.h ****       };
3272:/usr/include/c++/7/bits/basic_string.h **** 
3273:/usr/include/c++/7/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
3274:/usr/include/c++/7/bits/basic_string.h ****       struct _Alloc_hider : _Alloc
3275:/usr/include/c++/7/bits/basic_string.h ****       {
3276:/usr/include/c++/7/bits/basic_string.h **** 	_Alloc_hider(_CharT* __dat, const _Alloc& __a) _GLIBCXX_NOEXCEPT
3277:/usr/include/c++/7/bits/basic_string.h **** 	: _Alloc(__a), _M_p(__dat) { }
3278:/usr/include/c++/7/bits/basic_string.h **** 
3279:/usr/include/c++/7/bits/basic_string.h **** 	_CharT* _M_p; // The actual data.
3280:/usr/include/c++/7/bits/basic_string.h ****       };
3281:/usr/include/c++/7/bits/basic_string.h **** 
3282:/usr/include/c++/7/bits/basic_string.h ****     public:
3283:/usr/include/c++/7/bits/basic_string.h ****       // Data Members (public):
3284:/usr/include/c++/7/bits/basic_string.h ****       // NB: This is an unsigned type, and thus represents the maximum
3285:/usr/include/c++/7/bits/basic_string.h ****       // size that the allocator can hold.
3286:/usr/include/c++/7/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
3287:/usr/include/c++/7/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
3288:/usr/include/c++/7/bits/basic_string.h **** 
3289:/usr/include/c++/7/bits/basic_string.h ****     private:
3290:/usr/include/c++/7/bits/basic_string.h ****       // Data Members (private):
3291:/usr/include/c++/7/bits/basic_string.h ****       mutable _Alloc_hider	_M_dataplus;
3292:/usr/include/c++/7/bits/basic_string.h **** 
3293:/usr/include/c++/7/bits/basic_string.h ****       _CharT*
3294:/usr/include/c++/7/bits/basic_string.h ****       _M_data() const _GLIBCXX_NOEXCEPT
3295:/usr/include/c++/7/bits/basic_string.h ****       { return  _M_dataplus._M_p; }
3296:/usr/include/c++/7/bits/basic_string.h **** 
3297:/usr/include/c++/7/bits/basic_string.h ****       _CharT*
3298:/usr/include/c++/7/bits/basic_string.h ****       _M_data(_CharT* __p) _GLIBCXX_NOEXCEPT
3299:/usr/include/c++/7/bits/basic_string.h ****       { return (_M_dataplus._M_p = __p); }
3300:/usr/include/c++/7/bits/basic_string.h **** 
3301:/usr/include/c++/7/bits/basic_string.h ****       _Rep*
3302:/usr/include/c++/7/bits/basic_string.h ****       _M_rep() const _GLIBCXX_NOEXCEPT
3303:/usr/include/c++/7/bits/basic_string.h ****       { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }
3304:/usr/include/c++/7/bits/basic_string.h **** 
3305:/usr/include/c++/7/bits/basic_string.h ****       // For the internal use we have functions similar to `begin'/`end'
3306:/usr/include/c++/7/bits/basic_string.h ****       // but they do not call _M_leak.
3307:/usr/include/c++/7/bits/basic_string.h ****       iterator
3308:/usr/include/c++/7/bits/basic_string.h ****       _M_ibegin() const _GLIBCXX_NOEXCEPT
3309:/usr/include/c++/7/bits/basic_string.h ****       { return iterator(_M_data()); }
3310:/usr/include/c++/7/bits/basic_string.h **** 
3311:/usr/include/c++/7/bits/basic_string.h ****       iterator
3312:/usr/include/c++/7/bits/basic_string.h ****       _M_iend() const _GLIBCXX_NOEXCEPT
3313:/usr/include/c++/7/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
3314:/usr/include/c++/7/bits/basic_string.h **** 
3315:/usr/include/c++/7/bits/basic_string.h ****       void
3316:/usr/include/c++/7/bits/basic_string.h ****       _M_leak()    // for use in begin() & non-const op[]
3317:/usr/include/c++/7/bits/basic_string.h ****       {
3318:/usr/include/c++/7/bits/basic_string.h **** 	if (!_M_rep()->_M_is_leaked())
3319:/usr/include/c++/7/bits/basic_string.h **** 	  _M_leak_hard();
3320:/usr/include/c++/7/bits/basic_string.h ****       }
3321:/usr/include/c++/7/bits/basic_string.h **** 
3322:/usr/include/c++/7/bits/basic_string.h ****       size_type
3323:/usr/include/c++/7/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
3324:/usr/include/c++/7/bits/basic_string.h ****       {
3325:/usr/include/c++/7/bits/basic_string.h **** 	if (__pos > this->size())
3326:/usr/include/c++/7/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
3327:/usr/include/c++/7/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
3328:/usr/include/c++/7/bits/basic_string.h **** 				   __s, __pos, this->size());
3329:/usr/include/c++/7/bits/basic_string.h **** 	return __pos;
3330:/usr/include/c++/7/bits/basic_string.h ****       }
3331:/usr/include/c++/7/bits/basic_string.h **** 
3332:/usr/include/c++/7/bits/basic_string.h ****       void
3333:/usr/include/c++/7/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
3334:/usr/include/c++/7/bits/basic_string.h ****       {
3335:/usr/include/c++/7/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
3336:/usr/include/c++/7/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
3337:/usr/include/c++/7/bits/basic_string.h ****       }
3338:/usr/include/c++/7/bits/basic_string.h **** 
3339:/usr/include/c++/7/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
3340:/usr/include/c++/7/bits/basic_string.h ****       size_type
3341:/usr/include/c++/7/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
3342:/usr/include/c++/7/bits/basic_string.h ****       {
3343:/usr/include/c++/7/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
3344:/usr/include/c++/7/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
3345:/usr/include/c++/7/bits/basic_string.h ****       }
3346:/usr/include/c++/7/bits/basic_string.h **** 
3347:/usr/include/c++/7/bits/basic_string.h ****       // True if _Rep and source do not overlap.
3348:/usr/include/c++/7/bits/basic_string.h ****       bool
3349:/usr/include/c++/7/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
3350:/usr/include/c++/7/bits/basic_string.h ****       {
3351:/usr/include/c++/7/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
3352:/usr/include/c++/7/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
3353:/usr/include/c++/7/bits/basic_string.h ****       }
3354:/usr/include/c++/7/bits/basic_string.h **** 
3355:/usr/include/c++/7/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
3356:/usr/include/c++/7/bits/basic_string.h ****       // traits_type::copy/move/assign.
3357:/usr/include/c++/7/bits/basic_string.h ****       static void
3358:/usr/include/c++/7/bits/basic_string.h ****       _M_copy(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT
3359:/usr/include/c++/7/bits/basic_string.h ****       {
3360:/usr/include/c++/7/bits/basic_string.h **** 	if (__n == 1)
3361:/usr/include/c++/7/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
3362:/usr/include/c++/7/bits/basic_string.h **** 	else
3363:/usr/include/c++/7/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
3364:/usr/include/c++/7/bits/basic_string.h ****       }
3365:/usr/include/c++/7/bits/basic_string.h **** 
3366:/usr/include/c++/7/bits/basic_string.h ****       static void
3367:/usr/include/c++/7/bits/basic_string.h ****       _M_move(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT
3368:/usr/include/c++/7/bits/basic_string.h ****       {
3369:/usr/include/c++/7/bits/basic_string.h **** 	if (__n == 1)
3370:/usr/include/c++/7/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
3371:/usr/include/c++/7/bits/basic_string.h **** 	else
3372:/usr/include/c++/7/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);	  
3373:/usr/include/c++/7/bits/basic_string.h ****       }
3374:/usr/include/c++/7/bits/basic_string.h **** 
3375:/usr/include/c++/7/bits/basic_string.h ****       static void
3376:/usr/include/c++/7/bits/basic_string.h ****       _M_assign(_CharT* __d, size_type __n, _CharT __c) _GLIBCXX_NOEXCEPT
3377:/usr/include/c++/7/bits/basic_string.h ****       {
3378:/usr/include/c++/7/bits/basic_string.h **** 	if (__n == 1)
3379:/usr/include/c++/7/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
3380:/usr/include/c++/7/bits/basic_string.h **** 	else
3381:/usr/include/c++/7/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);	  
3382:/usr/include/c++/7/bits/basic_string.h ****       }
3383:/usr/include/c++/7/bits/basic_string.h **** 
3384:/usr/include/c++/7/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
3385:/usr/include/c++/7/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
3386:/usr/include/c++/7/bits/basic_string.h ****       template<class _Iterator>
3387:/usr/include/c++/7/bits/basic_string.h ****         static void
3388:/usr/include/c++/7/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
3389:/usr/include/c++/7/bits/basic_string.h ****         {
3390:/usr/include/c++/7/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
3391:/usr/include/c++/7/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
3392:/usr/include/c++/7/bits/basic_string.h **** 	}
3393:/usr/include/c++/7/bits/basic_string.h **** 
3394:/usr/include/c++/7/bits/basic_string.h ****       static void
3395:/usr/include/c++/7/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
3396:/usr/include/c++/7/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
3397:/usr/include/c++/7/bits/basic_string.h **** 
3398:/usr/include/c++/7/bits/basic_string.h ****       static void
3399:/usr/include/c++/7/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
3400:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
3401:/usr/include/c++/7/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
3402:/usr/include/c++/7/bits/basic_string.h **** 
3403:/usr/include/c++/7/bits/basic_string.h ****       static void
3404:/usr/include/c++/7/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
3405:/usr/include/c++/7/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
3406:/usr/include/c++/7/bits/basic_string.h **** 
3407:/usr/include/c++/7/bits/basic_string.h ****       static void
3408:/usr/include/c++/7/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
3409:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
3410:/usr/include/c++/7/bits/basic_string.h ****       { _M_copy(__p, __k1, __k2 - __k1); }
3411:/usr/include/c++/7/bits/basic_string.h **** 
3412:/usr/include/c++/7/bits/basic_string.h ****       static int
3413:/usr/include/c++/7/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
3414:/usr/include/c++/7/bits/basic_string.h ****       {
3415:/usr/include/c++/7/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
3416:/usr/include/c++/7/bits/basic_string.h **** 
3417:/usr/include/c++/7/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
3418:/usr/include/c++/7/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
3419:/usr/include/c++/7/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
3420:/usr/include/c++/7/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
3421:/usr/include/c++/7/bits/basic_string.h **** 	else
3422:/usr/include/c++/7/bits/basic_string.h **** 	  return int(__d);
3423:/usr/include/c++/7/bits/basic_string.h ****       }
3424:/usr/include/c++/7/bits/basic_string.h **** 
3425:/usr/include/c++/7/bits/basic_string.h ****       void
3426:/usr/include/c++/7/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, size_type __len2);
3427:/usr/include/c++/7/bits/basic_string.h **** 
3428:/usr/include/c++/7/bits/basic_string.h ****       void
3429:/usr/include/c++/7/bits/basic_string.h ****       _M_leak_hard();
3430:/usr/include/c++/7/bits/basic_string.h **** 
3431:/usr/include/c++/7/bits/basic_string.h ****       static _Rep&
3432:/usr/include/c++/7/bits/basic_string.h ****       _S_empty_rep() _GLIBCXX_NOEXCEPT
3433:/usr/include/c++/7/bits/basic_string.h ****       { return _Rep::_S_empty_rep(); }
3434:/usr/include/c++/7/bits/basic_string.h **** 
3435:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
3436:/usr/include/c++/7/bits/basic_string.h ****       // A helper type for avoiding boiler-plate.
3437:/usr/include/c++/7/bits/basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
3438:/usr/include/c++/7/bits/basic_string.h **** 
3439:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp, typename _Res>
3440:/usr/include/c++/7/bits/basic_string.h **** 	using _If_sv = enable_if_t<
3441:/usr/include/c++/7/bits/basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
3442:/usr/include/c++/7/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
3443:/usr/include/c++/7/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
3444:/usr/include/c++/7/bits/basic_string.h **** 	  _Res>;
3445:/usr/include/c++/7/bits/basic_string.h **** 
3446:/usr/include/c++/7/bits/basic_string.h ****       // Allows an implicit conversion to __sv_type.
3447:/usr/include/c++/7/bits/basic_string.h ****       static __sv_type
3448:/usr/include/c++/7/bits/basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
3449:/usr/include/c++/7/bits/basic_string.h ****       { return __svt; }
3450:/usr/include/c++/7/bits/basic_string.h **** 
3451:/usr/include/c++/7/bits/basic_string.h ****       // Wraps a string_view by explicit conversion and thus
3452:/usr/include/c++/7/bits/basic_string.h ****       // allows to add an internal constructor that does not
3453:/usr/include/c++/7/bits/basic_string.h ****       // participate in overload resolution when a string_view
3454:/usr/include/c++/7/bits/basic_string.h ****       // is provided.
3455:/usr/include/c++/7/bits/basic_string.h ****       struct __sv_wrapper
3456:/usr/include/c++/7/bits/basic_string.h ****       {
3457:/usr/include/c++/7/bits/basic_string.h **** 	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
3458:/usr/include/c++/7/bits/basic_string.h **** 	__sv_type _M_sv;
3459:/usr/include/c++/7/bits/basic_string.h ****       };
3460:/usr/include/c++/7/bits/basic_string.h **** #endif
3461:/usr/include/c++/7/bits/basic_string.h **** 
3462:/usr/include/c++/7/bits/basic_string.h ****     public:
3463:/usr/include/c++/7/bits/basic_string.h ****       // Construct/copy/destroy:
3464:/usr/include/c++/7/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
3465:/usr/include/c++/7/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
3466:/usr/include/c++/7/bits/basic_string.h **** 
3467:/usr/include/c++/7/bits/basic_string.h ****       /**
3468:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
3469:/usr/include/c++/7/bits/basic_string.h ****        */
3470:/usr/include/c++/7/bits/basic_string.h ****       basic_string()
3471:/usr/include/c++/7/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3472:/usr/include/c++/7/bits/basic_string.h ****       : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }
3473:/usr/include/c++/7/bits/basic_string.h **** #else
3474:/usr/include/c++/7/bits/basic_string.h ****       : _M_dataplus(_S_construct(size_type(), _CharT(), _Alloc()), _Alloc()){ }
3475:/usr/include/c++/7/bits/basic_string.h **** #endif
3476:/usr/include/c++/7/bits/basic_string.h **** 
3477:/usr/include/c++/7/bits/basic_string.h ****       /**
3478:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
3479:/usr/include/c++/7/bits/basic_string.h ****        */
3480:/usr/include/c++/7/bits/basic_string.h ****       explicit
3481:/usr/include/c++/7/bits/basic_string.h ****       basic_string(const _Alloc& __a);
3482:/usr/include/c++/7/bits/basic_string.h **** 
3483:/usr/include/c++/7/bits/basic_string.h ****       // NB: per LWG issue 42, semantics different from IS:
3484:/usr/include/c++/7/bits/basic_string.h ****       /**
3485:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a str.
3486:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string.
3487:/usr/include/c++/7/bits/basic_string.h ****        */
3488:/usr/include/c++/7/bits/basic_string.h ****       basic_string(const basic_string& __str);
3489:/usr/include/c++/7/bits/basic_string.h **** 
3490:/usr/include/c++/7/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
3491:/usr/include/c++/7/bits/basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
3492:/usr/include/c++/7/bits/basic_string.h ****       /**
3493:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
3494:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string.
3495:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
3496:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use.
3497:/usr/include/c++/7/bits/basic_string.h ****        */
3498:/usr/include/c++/7/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
3499:/usr/include/c++/7/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc());
3500:/usr/include/c++/7/bits/basic_string.h **** 
3501:/usr/include/c++/7/bits/basic_string.h ****       /**
3502:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
3503:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string.
3504:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
3505:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3506:/usr/include/c++/7/bits/basic_string.h ****        */
3507:/usr/include/c++/7/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
3508:/usr/include/c++/7/bits/basic_string.h **** 		   size_type __n);
3509:/usr/include/c++/7/bits/basic_string.h ****       /**
3510:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
3511:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string.
3512:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
3513:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3514:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use.
3515:/usr/include/c++/7/bits/basic_string.h ****        */
3516:/usr/include/c++/7/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
3517:/usr/include/c++/7/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a);
3518:/usr/include/c++/7/bits/basic_string.h **** 
3519:/usr/include/c++/7/bits/basic_string.h ****       /**
3520:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
3521:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __s  Source character %array.
3522:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
3523:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3524:/usr/include/c++/7/bits/basic_string.h ****        *
3525:/usr/include/c++/7/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
3526:/usr/include/c++/7/bits/basic_string.h ****        *  has no special meaning.
3527:/usr/include/c++/7/bits/basic_string.h ****        */
3528:/usr/include/c++/7/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
3529:/usr/include/c++/7/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc());
3530:/usr/include/c++/7/bits/basic_string.h ****       /**
3531:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
3532:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __s  Source C string.
3533:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3534:/usr/include/c++/7/bits/basic_string.h ****        */
3535:/usr/include/c++/7/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());
3536:/usr/include/c++/7/bits/basic_string.h ****       /**
3537:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
3538:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __n  Number of characters.
3539:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __c  Character to use.
3540:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3541:/usr/include/c++/7/bits/basic_string.h ****        */
3542:/usr/include/c++/7/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
3543:/usr/include/c++/7/bits/basic_string.h **** 
3544:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
3545:/usr/include/c++/7/bits/basic_string.h ****       /**
3546:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Move construct string.
3547:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string.
3548:/usr/include/c++/7/bits/basic_string.h ****        *
3549:/usr/include/c++/7/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
3550:/usr/include/c++/7/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
3551:/usr/include/c++/7/bits/basic_string.h ****        **/
3552:/usr/include/c++/7/bits/basic_string.h ****       basic_string(basic_string&& __str)
3553:/usr/include/c++/7/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3554:/usr/include/c++/7/bits/basic_string.h ****       noexcept // FIXME C++11: should always be noexcept.
3555:/usr/include/c++/7/bits/basic_string.h **** #endif
3556:/usr/include/c++/7/bits/basic_string.h ****       : _M_dataplus(__str._M_dataplus)
3557:/usr/include/c++/7/bits/basic_string.h ****       {
3558:/usr/include/c++/7/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3559:/usr/include/c++/7/bits/basic_string.h **** 	__str._M_data(_S_empty_rep()._M_refdata());
3560:/usr/include/c++/7/bits/basic_string.h **** #else
3561:/usr/include/c++/7/bits/basic_string.h **** 	__str._M_data(_S_construct(size_type(), _CharT(), get_allocator()));
3562:/usr/include/c++/7/bits/basic_string.h **** #endif
3563:/usr/include/c++/7/bits/basic_string.h ****       }
3564:/usr/include/c++/7/bits/basic_string.h **** 
3565:/usr/include/c++/7/bits/basic_string.h ****       /**
3566:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
3567:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
3568:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3569:/usr/include/c++/7/bits/basic_string.h ****        */
3570:/usr/include/c++/7/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());
3571:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
3572:/usr/include/c++/7/bits/basic_string.h **** 
3573:/usr/include/c++/7/bits/basic_string.h ****       /**
3574:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
3575:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __beg  Start of range.
3576:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __end  End of range.
3577:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3578:/usr/include/c++/7/bits/basic_string.h ****        */
3579:/usr/include/c++/7/bits/basic_string.h ****       template<class _InputIterator>
3580:/usr/include/c++/7/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
3581:/usr/include/c++/7/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc());
3582:/usr/include/c++/7/bits/basic_string.h **** 
3583:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
3584:/usr/include/c++/7/bits/basic_string.h ****       /**
3585:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string from a substring of a string_view.
3586:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __t   Source object convertible to string view.
3587:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __pos The index of the first character to copy from __t.
3588:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __n   The number of characters to copy from __t.
3589:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a   Allocator to use.
3590:/usr/include/c++/7/bits/basic_string.h ****        */
3591:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
3592:/usr/include/c++/7/bits/basic_string.h **** 	basic_string(const _Tp& __t, size_type __pos, size_type __n,
3593:/usr/include/c++/7/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
3594:/usr/include/c++/7/bits/basic_string.h **** 	: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }
3595:/usr/include/c++/7/bits/basic_string.h **** 
3596:/usr/include/c++/7/bits/basic_string.h ****       /**
3597:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Construct string from a string_view.
3598:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __t  Source object convertible to string view.
3599:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
3600:/usr/include/c++/7/bits/basic_string.h ****        */
3601:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
3602:/usr/include/c++/7/bits/basic_string.h **** 	explicit
3603:/usr/include/c++/7/bits/basic_string.h **** 	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
3604:/usr/include/c++/7/bits/basic_string.h **** 	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
3605:/usr/include/c++/7/bits/basic_string.h **** 
3606:/usr/include/c++/7/bits/basic_string.h ****       /**
3607:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
3608:/usr/include/c++/7/bits/basic_string.h ****        *          wrapper.
3609:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __svw  string view wrapper.
3610:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __a  Allocator to use.
3611:/usr/include/c++/7/bits/basic_string.h ****        */
3612:/usr/include/c++/7/bits/basic_string.h ****       explicit
3613:/usr/include/c++/7/bits/basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
3614:/usr/include/c++/7/bits/basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
3615:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
3616:/usr/include/c++/7/bits/basic_string.h **** 
3617:/usr/include/c++/7/bits/basic_string.h ****       /**
3618:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Destroy the string instance.
3619:/usr/include/c++/7/bits/basic_string.h ****        */
3620:/usr/include/c++/7/bits/basic_string.h ****       ~basic_string() _GLIBCXX_NOEXCEPT
3621:/usr/include/c++/7/bits/basic_string.h ****       { _M_rep()->_M_dispose(this->get_allocator()); }
3622:/usr/include/c++/7/bits/basic_string.h **** 
3623:/usr/include/c++/7/bits/basic_string.h ****       /**
3624:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
3625:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string.
3626:/usr/include/c++/7/bits/basic_string.h ****        */
3627:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
3628:/usr/include/c++/7/bits/basic_string.h ****       operator=(const basic_string& __str) 
3629:/usr/include/c++/7/bits/basic_string.h ****       { return this->assign(__str); }
3630:/usr/include/c++/7/bits/basic_string.h **** 
3631:/usr/include/c++/7/bits/basic_string.h ****       /**
3632:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
3633:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
3634:/usr/include/c++/7/bits/basic_string.h ****        */
3635:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
3636:/usr/include/c++/7/bits/basic_string.h ****       operator=(const _CharT* __s) 
3637:/usr/include/c++/7/bits/basic_string.h ****       { return this->assign(__s); }
3638:/usr/include/c++/7/bits/basic_string.h **** 
3639:/usr/include/c++/7/bits/basic_string.h ****       /**
3640:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
3641:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __c  Source character.
3642:/usr/include/c++/7/bits/basic_string.h ****        *
3643:/usr/include/c++/7/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
3644:/usr/include/c++/7/bits/basic_string.h ****        *  (*this)[0] == @a c.
3645:/usr/include/c++/7/bits/basic_string.h ****        */
3646:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
3647:/usr/include/c++/7/bits/basic_string.h ****       operator=(_CharT __c) 
3648:/usr/include/c++/7/bits/basic_string.h ****       { 
3649:/usr/include/c++/7/bits/basic_string.h **** 	this->assign(1, __c); 
3650:/usr/include/c++/7/bits/basic_string.h **** 	return *this;
3651:/usr/include/c++/7/bits/basic_string.h ****       }
3652:/usr/include/c++/7/bits/basic_string.h **** 
3653:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
3654:/usr/include/c++/7/bits/basic_string.h ****       /**
3655:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
3656:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string.
3657:/usr/include/c++/7/bits/basic_string.h ****        *
3658:/usr/include/c++/7/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
3659:/usr/include/c++/7/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
3660:/usr/include/c++/7/bits/basic_string.h ****        **/
3661:/usr/include/c++/7/bits/basic_string.h ****       // PR 58265, this should be noexcept.
3662:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
3663:/usr/include/c++/7/bits/basic_string.h ****       operator=(basic_string&& __str)
3664:/usr/include/c++/7/bits/basic_string.h ****       {
3665:/usr/include/c++/7/bits/basic_string.h **** 	// NB: DR 1204.
3666:/usr/include/c++/7/bits/basic_string.h **** 	this->swap(__str);
3667:/usr/include/c++/7/bits/basic_string.h **** 	return *this;
3668:/usr/include/c++/7/bits/basic_string.h ****       }
3669:/usr/include/c++/7/bits/basic_string.h **** 
3670:/usr/include/c++/7/bits/basic_string.h ****       /**
3671:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
3672:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
3673:/usr/include/c++/7/bits/basic_string.h ****        */
3674:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
3675:/usr/include/c++/7/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
3676:/usr/include/c++/7/bits/basic_string.h ****       {
3677:/usr/include/c++/7/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
3678:/usr/include/c++/7/bits/basic_string.h **** 	return *this;
3679:/usr/include/c++/7/bits/basic_string.h ****       }
3680:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
3681:/usr/include/c++/7/bits/basic_string.h **** 
3682:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
3683:/usr/include/c++/7/bits/basic_string.h ****       /**
3684:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to string constructed from a string_view.
3685:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __svt An object convertible to  string_view.
3686:/usr/include/c++/7/bits/basic_string.h ****        */
3687:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
3688:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
3689:/usr/include/c++/7/bits/basic_string.h **** 	operator=(const _Tp& __svt)
3690:/usr/include/c++/7/bits/basic_string.h **** 	{ return this->assign(__svt); }
3691:/usr/include/c++/7/bits/basic_string.h **** 
3692:/usr/include/c++/7/bits/basic_string.h ****       /**
3693:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Convert to a string_view.
3694:/usr/include/c++/7/bits/basic_string.h ****        *  @return A string_view.
3695:/usr/include/c++/7/bits/basic_string.h ****        */
3696:/usr/include/c++/7/bits/basic_string.h ****       operator __sv_type() const noexcept
3697:/usr/include/c++/7/bits/basic_string.h ****       { return __sv_type(data(), size()); }
3698:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
3699:/usr/include/c++/7/bits/basic_string.h **** 
3700:/usr/include/c++/7/bits/basic_string.h ****       // Iterators:
3701:/usr/include/c++/7/bits/basic_string.h ****       /**
3702:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
3703:/usr/include/c++/7/bits/basic_string.h ****        *  the %string.  Unshares the string.
3704:/usr/include/c++/7/bits/basic_string.h ****        */
3705:/usr/include/c++/7/bits/basic_string.h ****       iterator
3706:/usr/include/c++/7/bits/basic_string.h ****       begin() // FIXME C++11: should be noexcept.
3707:/usr/include/c++/7/bits/basic_string.h ****       {
3708:/usr/include/c++/7/bits/basic_string.h **** 	_M_leak();
3709:/usr/include/c++/7/bits/basic_string.h **** 	return iterator(_M_data());
3710:/usr/include/c++/7/bits/basic_string.h ****       }
3711:/usr/include/c++/7/bits/basic_string.h **** 
3712:/usr/include/c++/7/bits/basic_string.h ****       /**
3713:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
3714:/usr/include/c++/7/bits/basic_string.h ****        *  character in the %string.
3715:/usr/include/c++/7/bits/basic_string.h ****        */
3716:/usr/include/c++/7/bits/basic_string.h ****       const_iterator
3717:/usr/include/c++/7/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
3718:/usr/include/c++/7/bits/basic_string.h ****       { return const_iterator(_M_data()); }
3719:/usr/include/c++/7/bits/basic_string.h **** 
3720:/usr/include/c++/7/bits/basic_string.h ****       /**
3721:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
3722:/usr/include/c++/7/bits/basic_string.h ****        *  character in the %string.  Unshares the string.
3723:/usr/include/c++/7/bits/basic_string.h ****        */
3724:/usr/include/c++/7/bits/basic_string.h ****       iterator
3725:/usr/include/c++/7/bits/basic_string.h ****       end() // FIXME C++11: should be noexcept.
3726:/usr/include/c++/7/bits/basic_string.h ****       {
3727:/usr/include/c++/7/bits/basic_string.h **** 	_M_leak();
3728:/usr/include/c++/7/bits/basic_string.h **** 	return iterator(_M_data() + this->size());
3729:/usr/include/c++/7/bits/basic_string.h ****       }
3730:/usr/include/c++/7/bits/basic_string.h **** 
3731:/usr/include/c++/7/bits/basic_string.h ****       /**
3732:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
3733:/usr/include/c++/7/bits/basic_string.h ****        *  last character in the %string.
3734:/usr/include/c++/7/bits/basic_string.h ****        */
3735:/usr/include/c++/7/bits/basic_string.h ****       const_iterator
3736:/usr/include/c++/7/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
3737:/usr/include/c++/7/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
3738:/usr/include/c++/7/bits/basic_string.h **** 
3739:/usr/include/c++/7/bits/basic_string.h ****       /**
3740:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
3741:/usr/include/c++/7/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
3742:/usr/include/c++/7/bits/basic_string.h ****        *  order.  Unshares the string.
3743:/usr/include/c++/7/bits/basic_string.h ****        */
3744:/usr/include/c++/7/bits/basic_string.h ****       reverse_iterator
3745:/usr/include/c++/7/bits/basic_string.h ****       rbegin() // FIXME C++11: should be noexcept.
3746:/usr/include/c++/7/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
3747:/usr/include/c++/7/bits/basic_string.h **** 
3748:/usr/include/c++/7/bits/basic_string.h ****       /**
3749:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3750:/usr/include/c++/7/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
3751:/usr/include/c++/7/bits/basic_string.h ****        *  reverse element order.
3752:/usr/include/c++/7/bits/basic_string.h ****        */
3753:/usr/include/c++/7/bits/basic_string.h ****       const_reverse_iterator
3754:/usr/include/c++/7/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
3755:/usr/include/c++/7/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
3756:/usr/include/c++/7/bits/basic_string.h **** 
3757:/usr/include/c++/7/bits/basic_string.h ****       /**
3758:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
3759:/usr/include/c++/7/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
3760:/usr/include/c++/7/bits/basic_string.h ****        *  element order.  Unshares the string.
3761:/usr/include/c++/7/bits/basic_string.h ****        */
3762:/usr/include/c++/7/bits/basic_string.h ****       reverse_iterator
3763:/usr/include/c++/7/bits/basic_string.h ****       rend() // FIXME C++11: should be noexcept.
3764:/usr/include/c++/7/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
3765:/usr/include/c++/7/bits/basic_string.h **** 
3766:/usr/include/c++/7/bits/basic_string.h ****       /**
3767:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3768:/usr/include/c++/7/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
3769:/usr/include/c++/7/bits/basic_string.h ****        *  is done in reverse element order.
3770:/usr/include/c++/7/bits/basic_string.h ****        */
3771:/usr/include/c++/7/bits/basic_string.h ****       const_reverse_iterator
3772:/usr/include/c++/7/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
3773:/usr/include/c++/7/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
3774:/usr/include/c++/7/bits/basic_string.h **** 
3775:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
3776:/usr/include/c++/7/bits/basic_string.h ****       /**
3777:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
3778:/usr/include/c++/7/bits/basic_string.h ****        *  character in the %string.
3779:/usr/include/c++/7/bits/basic_string.h ****        */
3780:/usr/include/c++/7/bits/basic_string.h ****       const_iterator
3781:/usr/include/c++/7/bits/basic_string.h ****       cbegin() const noexcept
3782:/usr/include/c++/7/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
3783:/usr/include/c++/7/bits/basic_string.h **** 
3784:/usr/include/c++/7/bits/basic_string.h ****       /**
3785:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
3786:/usr/include/c++/7/bits/basic_string.h ****        *  last character in the %string.
3787:/usr/include/c++/7/bits/basic_string.h ****        */
3788:/usr/include/c++/7/bits/basic_string.h ****       const_iterator
3789:/usr/include/c++/7/bits/basic_string.h ****       cend() const noexcept
3790:/usr/include/c++/7/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
3791:/usr/include/c++/7/bits/basic_string.h **** 
3792:/usr/include/c++/7/bits/basic_string.h ****       /**
3793:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3794:/usr/include/c++/7/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
3795:/usr/include/c++/7/bits/basic_string.h ****        *  reverse element order.
3796:/usr/include/c++/7/bits/basic_string.h ****        */
3797:/usr/include/c++/7/bits/basic_string.h ****       const_reverse_iterator
3798:/usr/include/c++/7/bits/basic_string.h ****       crbegin() const noexcept
3799:/usr/include/c++/7/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
3800:/usr/include/c++/7/bits/basic_string.h **** 
3801:/usr/include/c++/7/bits/basic_string.h ****       /**
3802:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
3803:/usr/include/c++/7/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
3804:/usr/include/c++/7/bits/basic_string.h ****        *  is done in reverse element order.
3805:/usr/include/c++/7/bits/basic_string.h ****        */
3806:/usr/include/c++/7/bits/basic_string.h ****       const_reverse_iterator
3807:/usr/include/c++/7/bits/basic_string.h ****       crend() const noexcept
3808:/usr/include/c++/7/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
3809:/usr/include/c++/7/bits/basic_string.h **** #endif
3810:/usr/include/c++/7/bits/basic_string.h **** 
3811:/usr/include/c++/7/bits/basic_string.h ****     public:
3812:/usr/include/c++/7/bits/basic_string.h ****       // Capacity:
3813:/usr/include/c++/7/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
3814:/usr/include/c++/7/bits/basic_string.h ****       ///  null-termination.
3815:/usr/include/c++/7/bits/basic_string.h ****       size_type
3816:/usr/include/c++/7/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
3817:/usr/include/c++/7/bits/basic_string.h ****       { return _M_rep()->_M_length; }
3818:/usr/include/c++/7/bits/basic_string.h **** 
3819:/usr/include/c++/7/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
3820:/usr/include/c++/7/bits/basic_string.h ****       ///  null-termination.
3821:/usr/include/c++/7/bits/basic_string.h ****       size_type
3822:/usr/include/c++/7/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
3823:/usr/include/c++/7/bits/basic_string.h ****       { return _M_rep()->_M_length; }
3824:/usr/include/c++/7/bits/basic_string.h **** 
3825:/usr/include/c++/7/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
3826:/usr/include/c++/7/bits/basic_string.h ****       size_type
3827:/usr/include/c++/7/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
3828:/usr/include/c++/7/bits/basic_string.h ****       { return _Rep::_S_max_size; }
3829:/usr/include/c++/7/bits/basic_string.h **** 
3830:/usr/include/c++/7/bits/basic_string.h ****       /**
3831:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
3832:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
3833:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
3834:/usr/include/c++/7/bits/basic_string.h ****        *
3835:/usr/include/c++/7/bits/basic_string.h ****        *  This function will %resize the %string to the specified
3836:/usr/include/c++/7/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
3837:/usr/include/c++/7/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
3838:/usr/include/c++/7/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
3839:/usr/include/c++/7/bits/basic_string.h ****        */
3840:/usr/include/c++/7/bits/basic_string.h ****       void
3841:/usr/include/c++/7/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
3842:/usr/include/c++/7/bits/basic_string.h **** 
3843:/usr/include/c++/7/bits/basic_string.h ****       /**
3844:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
3845:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
3846:/usr/include/c++/7/bits/basic_string.h ****        *
3847:/usr/include/c++/7/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
3848:/usr/include/c++/7/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
3849:/usr/include/c++/7/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
3850:/usr/include/c++/7/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
3851:/usr/include/c++/7/bits/basic_string.h ****        *  setting them to 0.
3852:/usr/include/c++/7/bits/basic_string.h ****        */
3853:/usr/include/c++/7/bits/basic_string.h ****       void
3854:/usr/include/c++/7/bits/basic_string.h ****       resize(size_type __n)
3855:/usr/include/c++/7/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
3856:/usr/include/c++/7/bits/basic_string.h **** 
3857:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
3858:/usr/include/c++/7/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
3859:/usr/include/c++/7/bits/basic_string.h ****       void
3860:/usr/include/c++/7/bits/basic_string.h ****       shrink_to_fit() _GLIBCXX_NOEXCEPT
3861:/usr/include/c++/7/bits/basic_string.h ****       {
3862:/usr/include/c++/7/bits/basic_string.h **** #if __cpp_exceptions
3863:/usr/include/c++/7/bits/basic_string.h **** 	if (capacity() > size())
3864:/usr/include/c++/7/bits/basic_string.h **** 	  {
3865:/usr/include/c++/7/bits/basic_string.h **** 	    try
3866:/usr/include/c++/7/bits/basic_string.h **** 	      { reserve(0); }
3867:/usr/include/c++/7/bits/basic_string.h **** 	    catch(...)
3868:/usr/include/c++/7/bits/basic_string.h **** 	      { }
3869:/usr/include/c++/7/bits/basic_string.h **** 	  }
3870:/usr/include/c++/7/bits/basic_string.h **** #endif
3871:/usr/include/c++/7/bits/basic_string.h ****       }
3872:/usr/include/c++/7/bits/basic_string.h **** #endif
3873:/usr/include/c++/7/bits/basic_string.h **** 
3874:/usr/include/c++/7/bits/basic_string.h ****       /**
3875:/usr/include/c++/7/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
3876:/usr/include/c++/7/bits/basic_string.h ****        *  before needing to allocate more memory.
3877:/usr/include/c++/7/bits/basic_string.h ****        */
3878:/usr/include/c++/7/bits/basic_string.h ****       size_type
3879:/usr/include/c++/7/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
3880:/usr/include/c++/7/bits/basic_string.h ****       { return _M_rep()->_M_capacity; }
3881:/usr/include/c++/7/bits/basic_string.h **** 
3882:/usr/include/c++/7/bits/basic_string.h ****       /**
3883:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
3884:/usr/include/c++/7/bits/basic_string.h ****        *          characters.
3885:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
3886:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
3887:/usr/include/c++/7/bits/basic_string.h ****        *
3888:/usr/include/c++/7/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
3889:/usr/include/c++/7/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
3890:/usr/include/c++/7/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
3891:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.
3892:/usr/include/c++/7/bits/basic_string.h ****        *
3893:/usr/include/c++/7/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
3894:/usr/include/c++/7/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
3895:/usr/include/c++/7/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
3896:/usr/include/c++/7/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
3897:/usr/include/c++/7/bits/basic_string.h ****        *  data.
3898:/usr/include/c++/7/bits/basic_string.h ****        */
3899:/usr/include/c++/7/bits/basic_string.h ****       void
3900:/usr/include/c++/7/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
3901:/usr/include/c++/7/bits/basic_string.h **** 
3902:/usr/include/c++/7/bits/basic_string.h ****       /**
3903:/usr/include/c++/7/bits/basic_string.h ****        *  Erases the string, making it empty.
3904:/usr/include/c++/7/bits/basic_string.h ****        */
3905:/usr/include/c++/7/bits/basic_string.h **** #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0
3906:/usr/include/c++/7/bits/basic_string.h ****       void
3907:/usr/include/c++/7/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
3908:/usr/include/c++/7/bits/basic_string.h ****       {
3909:/usr/include/c++/7/bits/basic_string.h **** 	if (_M_rep()->_M_is_shared())
3910:/usr/include/c++/7/bits/basic_string.h **** 	  {
3911:/usr/include/c++/7/bits/basic_string.h **** 	    _M_rep()->_M_dispose(this->get_allocator());
3912:/usr/include/c++/7/bits/basic_string.h **** 	    _M_data(_S_empty_rep()._M_refdata());
3913:/usr/include/c++/7/bits/basic_string.h **** 	  }
3914:/usr/include/c++/7/bits/basic_string.h **** 	else
3915:/usr/include/c++/7/bits/basic_string.h **** 	  _M_rep()->_M_set_length_and_sharable(0);
3916:/usr/include/c++/7/bits/basic_string.h ****       }
3917:/usr/include/c++/7/bits/basic_string.h **** #else
3918:/usr/include/c++/7/bits/basic_string.h ****       // PR 56166: this should not throw.
3919:/usr/include/c++/7/bits/basic_string.h ****       void
3920:/usr/include/c++/7/bits/basic_string.h ****       clear()
3921:/usr/include/c++/7/bits/basic_string.h ****       { _M_mutate(0, this->size(), 0); }
3922:/usr/include/c++/7/bits/basic_string.h **** #endif
3923:/usr/include/c++/7/bits/basic_string.h **** 
3924:/usr/include/c++/7/bits/basic_string.h ****       /**
3925:/usr/include/c++/7/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
3926:/usr/include/c++/7/bits/basic_string.h ****        *  <code>*this == ""</code>.
3927:/usr/include/c++/7/bits/basic_string.h ****        */
3928:/usr/include/c++/7/bits/basic_string.h ****       bool
3929:/usr/include/c++/7/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
3930:/usr/include/c++/7/bits/basic_string.h ****       { return this->size() == 0; }
3931:/usr/include/c++/7/bits/basic_string.h **** 
3932:/usr/include/c++/7/bits/basic_string.h ****       // Element access:
3933:/usr/include/c++/7/bits/basic_string.h ****       /**
3934:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
3935:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
3936:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
3937:/usr/include/c++/7/bits/basic_string.h ****        *
3938:/usr/include/c++/7/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
3939:/usr/include/c++/7/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
3940:/usr/include/c++/7/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
3941:/usr/include/c++/7/bits/basic_string.h ****        *  see at().)
3942:/usr/include/c++/7/bits/basic_string.h ****        */
3943:/usr/include/c++/7/bits/basic_string.h ****       const_reference
3944:/usr/include/c++/7/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
3945:/usr/include/c++/7/bits/basic_string.h ****       {
3946:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
3947:/usr/include/c++/7/bits/basic_string.h **** 	return _M_data()[__pos];
3948:/usr/include/c++/7/bits/basic_string.h ****       }
3949:/usr/include/c++/7/bits/basic_string.h **** 
3950:/usr/include/c++/7/bits/basic_string.h ****       /**
3951:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
3952:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
3953:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Read/write reference to the character.
3954:/usr/include/c++/7/bits/basic_string.h ****        *
3955:/usr/include/c++/7/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
3956:/usr/include/c++/7/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
3957:/usr/include/c++/7/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
3958:/usr/include/c++/7/bits/basic_string.h ****        *  see at().)  Unshares the string.
3959:/usr/include/c++/7/bits/basic_string.h ****        */
3960:/usr/include/c++/7/bits/basic_string.h ****       reference
3961:/usr/include/c++/7/bits/basic_string.h ****       operator[](size_type __pos)
3962:/usr/include/c++/7/bits/basic_string.h ****       {
3963:/usr/include/c++/7/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
3964:/usr/include/c++/7/bits/basic_string.h **** 	// and in C++11 mode.
3965:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
3966:/usr/include/c++/7/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
3967:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
3968:/usr/include/c++/7/bits/basic_string.h **** 	_M_leak();
3969:/usr/include/c++/7/bits/basic_string.h **** 	return _M_data()[__pos];
3970:/usr/include/c++/7/bits/basic_string.h ****       }
3971:/usr/include/c++/7/bits/basic_string.h **** 
3972:/usr/include/c++/7/bits/basic_string.h ****       /**
3973:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
3974:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n The index of the character to access.
3975:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
3976:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
3977:/usr/include/c++/7/bits/basic_string.h ****        *
3978:/usr/include/c++/7/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
3979:/usr/include/c++/7/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
3980:/usr/include/c++/7/bits/basic_string.h ****        *  throws out_of_range if the check fails.
3981:/usr/include/c++/7/bits/basic_string.h ****        */
3982:/usr/include/c++/7/bits/basic_string.h ****       const_reference
3983:/usr/include/c++/7/bits/basic_string.h ****       at(size_type __n) const
3984:/usr/include/c++/7/bits/basic_string.h ****       {
3985:/usr/include/c++/7/bits/basic_string.h **** 	if (__n >= this->size())
3986:/usr/include/c++/7/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
3987:/usr/include/c++/7/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
3988:/usr/include/c++/7/bits/basic_string.h **** 				       "(which is %zu)"),
3989:/usr/include/c++/7/bits/basic_string.h **** 				   __n, this->size());
3990:/usr/include/c++/7/bits/basic_string.h **** 	return _M_data()[__n];
3991:/usr/include/c++/7/bits/basic_string.h ****       }
3992:/usr/include/c++/7/bits/basic_string.h **** 
3993:/usr/include/c++/7/bits/basic_string.h ****       /**
3994:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
3995:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n The index of the character to access.
3996:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Read/write reference to the character.
3997:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
3998:/usr/include/c++/7/bits/basic_string.h ****        *
3999:/usr/include/c++/7/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
4000:/usr/include/c++/7/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
4001:/usr/include/c++/7/bits/basic_string.h ****        *  throws out_of_range if the check fails.  Success results in
4002:/usr/include/c++/7/bits/basic_string.h ****        *  unsharing the string.
4003:/usr/include/c++/7/bits/basic_string.h ****        */
4004:/usr/include/c++/7/bits/basic_string.h ****       reference
4005:/usr/include/c++/7/bits/basic_string.h ****       at(size_type __n)
4006:/usr/include/c++/7/bits/basic_string.h ****       {
4007:/usr/include/c++/7/bits/basic_string.h **** 	if (__n >= size())
4008:/usr/include/c++/7/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
4009:/usr/include/c++/7/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
4010:/usr/include/c++/7/bits/basic_string.h **** 				       "(which is %zu)"),
4011:/usr/include/c++/7/bits/basic_string.h **** 				   __n, this->size());
4012:/usr/include/c++/7/bits/basic_string.h **** 	_M_leak();
4013:/usr/include/c++/7/bits/basic_string.h **** 	return _M_data()[__n];
4014:/usr/include/c++/7/bits/basic_string.h ****       }
4015:/usr/include/c++/7/bits/basic_string.h **** 
4016:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
4017:/usr/include/c++/7/bits/basic_string.h ****       /**
4018:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
4019:/usr/include/c++/7/bits/basic_string.h ****        *  element of the %string.
4020:/usr/include/c++/7/bits/basic_string.h ****        */
4021:/usr/include/c++/7/bits/basic_string.h ****       reference
4022:/usr/include/c++/7/bits/basic_string.h ****       front()
4023:/usr/include/c++/7/bits/basic_string.h ****       {
4024:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4025:/usr/include/c++/7/bits/basic_string.h **** 	return operator[](0);
4026:/usr/include/c++/7/bits/basic_string.h ****       }
4027:/usr/include/c++/7/bits/basic_string.h **** 
4028:/usr/include/c++/7/bits/basic_string.h ****       /**
4029:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
4030:/usr/include/c++/7/bits/basic_string.h ****        *  element of the %string.
4031:/usr/include/c++/7/bits/basic_string.h ****        */
4032:/usr/include/c++/7/bits/basic_string.h ****       const_reference
4033:/usr/include/c++/7/bits/basic_string.h ****       front() const noexcept
4034:/usr/include/c++/7/bits/basic_string.h ****       {
4035:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4036:/usr/include/c++/7/bits/basic_string.h **** 	return operator[](0);
4037:/usr/include/c++/7/bits/basic_string.h ****       }
4038:/usr/include/c++/7/bits/basic_string.h **** 
4039:/usr/include/c++/7/bits/basic_string.h ****       /**
4040:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
4041:/usr/include/c++/7/bits/basic_string.h ****        *  element of the %string.
4042:/usr/include/c++/7/bits/basic_string.h ****        */
4043:/usr/include/c++/7/bits/basic_string.h ****       reference
4044:/usr/include/c++/7/bits/basic_string.h ****       back()
4045:/usr/include/c++/7/bits/basic_string.h ****       {
4046:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4047:/usr/include/c++/7/bits/basic_string.h **** 	return operator[](this->size() - 1);
4048:/usr/include/c++/7/bits/basic_string.h ****       }
4049:/usr/include/c++/7/bits/basic_string.h **** 
4050:/usr/include/c++/7/bits/basic_string.h ****       /**
4051:/usr/include/c++/7/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
4052:/usr/include/c++/7/bits/basic_string.h ****        *  last element of the %string.
4053:/usr/include/c++/7/bits/basic_string.h ****        */
4054:/usr/include/c++/7/bits/basic_string.h ****       const_reference
4055:/usr/include/c++/7/bits/basic_string.h ****       back() const noexcept
4056:/usr/include/c++/7/bits/basic_string.h ****       {
4057:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4058:/usr/include/c++/7/bits/basic_string.h **** 	return operator[](this->size() - 1);
4059:/usr/include/c++/7/bits/basic_string.h ****       }
4060:/usr/include/c++/7/bits/basic_string.h **** #endif
4061:/usr/include/c++/7/bits/basic_string.h **** 
4062:/usr/include/c++/7/bits/basic_string.h ****       // Modifiers:
4063:/usr/include/c++/7/bits/basic_string.h ****       /**
4064:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a string to this string.
4065:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  The string to append.
4066:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4067:/usr/include/c++/7/bits/basic_string.h ****        */
4068:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4069:/usr/include/c++/7/bits/basic_string.h ****       operator+=(const basic_string& __str)
4070:/usr/include/c++/7/bits/basic_string.h ****       { return this->append(__str); }
4071:/usr/include/c++/7/bits/basic_string.h **** 
4072:/usr/include/c++/7/bits/basic_string.h ****       /**
4073:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a C string.
4074:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  The C string to append.
4075:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4076:/usr/include/c++/7/bits/basic_string.h ****        */
4077:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4078:/usr/include/c++/7/bits/basic_string.h ****       operator+=(const _CharT* __s)
4079:/usr/include/c++/7/bits/basic_string.h ****       { return this->append(__s); }
4080:/usr/include/c++/7/bits/basic_string.h **** 
4081:/usr/include/c++/7/bits/basic_string.h ****       /**
4082:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a character.
4083:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  The character to append.
4084:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4085:/usr/include/c++/7/bits/basic_string.h ****        */
4086:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4087:/usr/include/c++/7/bits/basic_string.h ****       operator+=(_CharT __c)
4088:/usr/include/c++/7/bits/basic_string.h ****       { 
4089:/usr/include/c++/7/bits/basic_string.h **** 	this->push_back(__c);
4090:/usr/include/c++/7/bits/basic_string.h **** 	return *this;
4091:/usr/include/c++/7/bits/basic_string.h ****       }
4092:/usr/include/c++/7/bits/basic_string.h **** 
4093:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
4094:/usr/include/c++/7/bits/basic_string.h ****       /**
4095:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
4096:/usr/include/c++/7/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
4097:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4098:/usr/include/c++/7/bits/basic_string.h ****        */
4099:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4100:/usr/include/c++/7/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
4101:/usr/include/c++/7/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
4102:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
4103:/usr/include/c++/7/bits/basic_string.h **** 
4104:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
4105:/usr/include/c++/7/bits/basic_string.h ****       /**
4106:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a string_view.
4107:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt The object convertible to string_view to be appended.
4108:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4109:/usr/include/c++/7/bits/basic_string.h ****        */
4110:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
4111:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4112:/usr/include/c++/7/bits/basic_string.h **** 	operator+=(const _Tp& __svt)
4113:/usr/include/c++/7/bits/basic_string.h **** 	{ return this->append(__svt); }
4114:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
4115:/usr/include/c++/7/bits/basic_string.h **** 
4116:/usr/include/c++/7/bits/basic_string.h ****       /**
4117:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a string to this string.
4118:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  The string to append.
4119:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4120:/usr/include/c++/7/bits/basic_string.h ****        */
4121:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4122:/usr/include/c++/7/bits/basic_string.h ****       append(const basic_string& __str);
4123:/usr/include/c++/7/bits/basic_string.h **** 
4124:/usr/include/c++/7/bits/basic_string.h ****       /**
4125:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a substring.
4126:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  The string to append.
4127:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
4128:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  The number of characters to append.
4129:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4130:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
4131:/usr/include/c++/7/bits/basic_string.h ****        *
4132:/usr/include/c++/7/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
4133:/usr/include/c++/7/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
4134:/usr/include/c++/7/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
4135:/usr/include/c++/7/bits/basic_string.h ****        *  remainder of @a __str is appended.
4136:/usr/include/c++/7/bits/basic_string.h ****        */
4137:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4138:/usr/include/c++/7/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n = npos);
4139:/usr/include/c++/7/bits/basic_string.h **** 
4140:/usr/include/c++/7/bits/basic_string.h ****       /**
4141:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a C substring.
4142:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  The C string to append.
4143:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  The number of characters to append.
4144:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4145:/usr/include/c++/7/bits/basic_string.h ****        */
4146:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4147:/usr/include/c++/7/bits/basic_string.h ****       append(const _CharT* __s, size_type __n);
4148:/usr/include/c++/7/bits/basic_string.h **** 
4149:/usr/include/c++/7/bits/basic_string.h ****       /**
4150:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a C string.
4151:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  The C string to append.
4152:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4153:/usr/include/c++/7/bits/basic_string.h ****        */
4154:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4155:/usr/include/c++/7/bits/basic_string.h ****       append(const _CharT* __s)
4156:/usr/include/c++/7/bits/basic_string.h ****       {
4157:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4158:/usr/include/c++/7/bits/basic_string.h **** 	return this->append(__s, traits_type::length(__s));
4159:/usr/include/c++/7/bits/basic_string.h ****       }
4160:/usr/include/c++/7/bits/basic_string.h **** 
4161:/usr/include/c++/7/bits/basic_string.h ****       /**
4162:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append multiple characters.
4163:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  The number of characters to append.
4164:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  The character to use.
4165:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4166:/usr/include/c++/7/bits/basic_string.h ****        *
4167:/usr/include/c++/7/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
4168:/usr/include/c++/7/bits/basic_string.h ****        */
4169:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4170:/usr/include/c++/7/bits/basic_string.h ****       append(size_type __n, _CharT __c);
4171:/usr/include/c++/7/bits/basic_string.h **** 
4172:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
4173:/usr/include/c++/7/bits/basic_string.h ****       /**
4174:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
4175:/usr/include/c++/7/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
4176:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4177:/usr/include/c++/7/bits/basic_string.h ****        */
4178:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4179:/usr/include/c++/7/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
4180:/usr/include/c++/7/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
4181:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
4182:/usr/include/c++/7/bits/basic_string.h **** 
4183:/usr/include/c++/7/bits/basic_string.h ****       /**
4184:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a range of characters.
4185:/usr/include/c++/7/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
4186:/usr/include/c++/7/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
4187:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4188:/usr/include/c++/7/bits/basic_string.h ****        *
4189:/usr/include/c++/7/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
4190:/usr/include/c++/7/bits/basic_string.h ****        */
4191:/usr/include/c++/7/bits/basic_string.h ****       template<class _InputIterator>
4192:/usr/include/c++/7/bits/basic_string.h ****         basic_string&
4193:/usr/include/c++/7/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
4194:/usr/include/c++/7/bits/basic_string.h ****         { return this->replace(_M_iend(), _M_iend(), __first, __last); }
4195:/usr/include/c++/7/bits/basic_string.h **** 
4196:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
4197:/usr/include/c++/7/bits/basic_string.h ****       /**
4198:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a string_view.
4199:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt The object convertible to string_view to be appended.
4200:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4201:/usr/include/c++/7/bits/basic_string.h ****        */
4202:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
4203:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4204:/usr/include/c++/7/bits/basic_string.h **** 	append(const _Tp& __svt)
4205:/usr/include/c++/7/bits/basic_string.h **** 	{
4206:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4207:/usr/include/c++/7/bits/basic_string.h **** 	  return this->append(__sv.data(), __sv.size());
4208:/usr/include/c++/7/bits/basic_string.h **** 	}
4209:/usr/include/c++/7/bits/basic_string.h **** 
4210:/usr/include/c++/7/bits/basic_string.h ****       /**
4211:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a range of characters from a string_view.
4212:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt The object convertible to string_view to be appended
4213:/usr/include/c++/7/bits/basic_string.h ****        *               from.
4214:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos The position in the string_view to append from.
4215:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n   The number of characters to append from the string_view.
4216:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4217:/usr/include/c++/7/bits/basic_string.h ****        */
4218:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
4219:/usr/include/c++/7/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4220:/usr/include/c++/7/bits/basic_string.h **** 	append(const _Tp& __svt, size_type __pos, size_type __n = npos)
4221:/usr/include/c++/7/bits/basic_string.h **** 	{
4222:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4223:/usr/include/c++/7/bits/basic_string.h **** 	  return append(__sv.data()
4224:/usr/include/c++/7/bits/basic_string.h **** 			+ __sv._M_check(__pos, "basic_string::append"),
4225:/usr/include/c++/7/bits/basic_string.h **** 			__sv._M_limit(__pos, __n));
4226:/usr/include/c++/7/bits/basic_string.h **** 	}
4227:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
4228:/usr/include/c++/7/bits/basic_string.h **** 
4229:/usr/include/c++/7/bits/basic_string.h ****       /**
4230:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Append a single character.
4231:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to append.
4232:/usr/include/c++/7/bits/basic_string.h ****        */
4233:/usr/include/c++/7/bits/basic_string.h ****       void
4234:/usr/include/c++/7/bits/basic_string.h ****       push_back(_CharT __c)
4235:/usr/include/c++/7/bits/basic_string.h ****       { 
4236:/usr/include/c++/7/bits/basic_string.h **** 	const size_type __len = 1 + this->size();
4237:/usr/include/c++/7/bits/basic_string.h **** 	if (__len > this->capacity() || _M_rep()->_M_is_shared())
4238:/usr/include/c++/7/bits/basic_string.h **** 	  this->reserve(__len);
4239:/usr/include/c++/7/bits/basic_string.h **** 	traits_type::assign(_M_data()[this->size()], __c);
4240:/usr/include/c++/7/bits/basic_string.h **** 	_M_rep()->_M_set_length_and_sharable(__len);
4241:/usr/include/c++/7/bits/basic_string.h ****       }
4242:/usr/include/c++/7/bits/basic_string.h **** 
4243:/usr/include/c++/7/bits/basic_string.h ****       /**
4244:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
4245:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string to use.
4246:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4247:/usr/include/c++/7/bits/basic_string.h ****        */
4248:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4249:/usr/include/c++/7/bits/basic_string.h ****       assign(const basic_string& __str);
4250:/usr/include/c++/7/bits/basic_string.h **** 
4251:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
4252:/usr/include/c++/7/bits/basic_string.h ****       /**
4253:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
4254:/usr/include/c++/7/bits/basic_string.h ****        *  @param  __str  Source string to use.
4255:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4256:/usr/include/c++/7/bits/basic_string.h ****        *
4257:/usr/include/c++/7/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
4258:/usr/include/c++/7/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
4259:/usr/include/c++/7/bits/basic_string.h ****        */
4260:/usr/include/c++/7/bits/basic_string.h ****       // PR 58265, this should be noexcept.
4261:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4262:/usr/include/c++/7/bits/basic_string.h ****       assign(basic_string&& __str)
4263:/usr/include/c++/7/bits/basic_string.h ****       {
4264:/usr/include/c++/7/bits/basic_string.h **** 	this->swap(__str);
4265:/usr/include/c++/7/bits/basic_string.h **** 	return *this;
4266:/usr/include/c++/7/bits/basic_string.h ****       }
4267:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
4268:/usr/include/c++/7/bits/basic_string.h **** 
4269:/usr/include/c++/7/bits/basic_string.h ****       /**
4270:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
4271:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  The string to use.
4272:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
4273:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to use.
4274:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4275:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
4276:/usr/include/c++/7/bits/basic_string.h ****        *
4277:/usr/include/c++/7/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
4278:/usr/include/c++/7/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
4279:/usr/include/c++/7/bits/basic_string.h ****        *  is larger than the number of available characters in @a
4280:/usr/include/c++/7/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
4281:/usr/include/c++/7/bits/basic_string.h ****        */
4282:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4283:/usr/include/c++/7/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n = npos)
4284:/usr/include/c++/7/bits/basic_string.h ****       { return this->assign(__str._M_data()
4285:/usr/include/c++/7/bits/basic_string.h **** 			    + __str._M_check(__pos, "basic_string::assign"),
4286:/usr/include/c++/7/bits/basic_string.h **** 			    __str._M_limit(__pos, __n)); }
4287:/usr/include/c++/7/bits/basic_string.h **** 
4288:/usr/include/c++/7/bits/basic_string.h ****       /**
4289:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to a C substring.
4290:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  The C string to use.
4291:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to use.
4292:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4293:/usr/include/c++/7/bits/basic_string.h ****        *
4294:/usr/include/c++/7/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
4295:/usr/include/c++/7/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
4296:/usr/include/c++/7/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
4297:/usr/include/c++/7/bits/basic_string.h ****        */
4298:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4299:/usr/include/c++/7/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n);
4300:/usr/include/c++/7/bits/basic_string.h **** 
4301:/usr/include/c++/7/bits/basic_string.h ****       /**
4302:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
4303:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  The C string to use.
4304:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4305:/usr/include/c++/7/bits/basic_string.h ****        *
4306:/usr/include/c++/7/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
4307:/usr/include/c++/7/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
4308:/usr/include/c++/7/bits/basic_string.h ****        *  function returns.
4309:/usr/include/c++/7/bits/basic_string.h ****        */
4310:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4311:/usr/include/c++/7/bits/basic_string.h ****       assign(const _CharT* __s)
4312:/usr/include/c++/7/bits/basic_string.h ****       {
4313:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4314:/usr/include/c++/7/bits/basic_string.h **** 	return this->assign(__s, traits_type::length(__s));
4315:/usr/include/c++/7/bits/basic_string.h ****       }
4316:/usr/include/c++/7/bits/basic_string.h **** 
4317:/usr/include/c++/7/bits/basic_string.h ****       /**
4318:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
4319:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
4320:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  The character to use.
4321:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4322:/usr/include/c++/7/bits/basic_string.h ****        *
4323:/usr/include/c++/7/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
4324:/usr/include/c++/7/bits/basic_string.h ****        *  character @a __c.
4325:/usr/include/c++/7/bits/basic_string.h ****        */
4326:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4327:/usr/include/c++/7/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
4328:/usr/include/c++/7/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
4329:/usr/include/c++/7/bits/basic_string.h **** 
4330:/usr/include/c++/7/bits/basic_string.h ****       /**
4331:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
4332:/usr/include/c++/7/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
4333:/usr/include/c++/7/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
4334:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4335:/usr/include/c++/7/bits/basic_string.h ****        *
4336:/usr/include/c++/7/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
4337:/usr/include/c++/7/bits/basic_string.h ****       */
4338:/usr/include/c++/7/bits/basic_string.h ****       template<class _InputIterator>
4339:/usr/include/c++/7/bits/basic_string.h ****         basic_string&
4340:/usr/include/c++/7/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
4341:/usr/include/c++/7/bits/basic_string.h ****         { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
4342:/usr/include/c++/7/bits/basic_string.h **** 
4343:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
4344:/usr/include/c++/7/bits/basic_string.h ****       /**
4345:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
4346:/usr/include/c++/7/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
4347:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4348:/usr/include/c++/7/bits/basic_string.h ****        */
4349:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4350:/usr/include/c++/7/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
4351:/usr/include/c++/7/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
4352:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
4353:/usr/include/c++/7/bits/basic_string.h **** 
4354:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
4355:/usr/include/c++/7/bits/basic_string.h ****       /**
4356:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value from a string_view.
4357:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt The source object convertible to string_view.
4358:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4359:/usr/include/c++/7/bits/basic_string.h ****        */
4360:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
4361:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4362:/usr/include/c++/7/bits/basic_string.h **** 	assign(const _Tp& __svt)
4363:/usr/include/c++/7/bits/basic_string.h **** 	{
4364:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4365:/usr/include/c++/7/bits/basic_string.h **** 	  return this->assign(__sv.data(), __sv.size());
4366:/usr/include/c++/7/bits/basic_string.h **** 	}
4367:/usr/include/c++/7/bits/basic_string.h **** 
4368:/usr/include/c++/7/bits/basic_string.h ****       /**
4369:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Set value from a range of characters in a string_view.
4370:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
4371:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  The position in the string_view to assign from.
4372:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  The number of characters to assign.
4373:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4374:/usr/include/c++/7/bits/basic_string.h ****        */
4375:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
4376:/usr/include/c++/7/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4377:/usr/include/c++/7/bits/basic_string.h ****         assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
4378:/usr/include/c++/7/bits/basic_string.h **** 	{
4379:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4380:/usr/include/c++/7/bits/basic_string.h **** 	  return assign(__sv.data()
4381:/usr/include/c++/7/bits/basic_string.h **** 			+ __sv._M_check(__pos, "basic_string::assign"),
4382:/usr/include/c++/7/bits/basic_string.h **** 			__sv._M_limit(__pos, __n));
4383:/usr/include/c++/7/bits/basic_string.h **** 	}
4384:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
4385:/usr/include/c++/7/bits/basic_string.h **** 
4386:/usr/include/c++/7/bits/basic_string.h ****       /**
4387:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert multiple characters.
4388:/usr/include/c++/7/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
4389:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to insert
4390:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  The character to insert.
4391:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4392:/usr/include/c++/7/bits/basic_string.h ****        *
4393:/usr/include/c++/7/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
4394:/usr/include/c++/7/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
4395:/usr/include/c++/7/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
4396:/usr/include/c++/7/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4397:/usr/include/c++/7/bits/basic_string.h ****        *  change if an error is thrown.
4398:/usr/include/c++/7/bits/basic_string.h ****       */
4399:/usr/include/c++/7/bits/basic_string.h ****       void
4400:/usr/include/c++/7/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
4401:/usr/include/c++/7/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
4402:/usr/include/c++/7/bits/basic_string.h **** 
4403:/usr/include/c++/7/bits/basic_string.h ****       /**
4404:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert a range of characters.
4405:/usr/include/c++/7/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
4406:/usr/include/c++/7/bits/basic_string.h ****        *  @param __beg  Start of range.
4407:/usr/include/c++/7/bits/basic_string.h ****        *  @param __end  End of range.
4408:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4409:/usr/include/c++/7/bits/basic_string.h ****        *
4410:/usr/include/c++/7/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
4411:/usr/include/c++/7/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
4412:/usr/include/c++/7/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4413:/usr/include/c++/7/bits/basic_string.h ****        *  change if an error is thrown.
4414:/usr/include/c++/7/bits/basic_string.h ****       */
4415:/usr/include/c++/7/bits/basic_string.h ****       template<class _InputIterator>
4416:/usr/include/c++/7/bits/basic_string.h ****         void
4417:/usr/include/c++/7/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
4418:/usr/include/c++/7/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
4419:/usr/include/c++/7/bits/basic_string.h **** 
4420:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
4421:/usr/include/c++/7/bits/basic_string.h ****       /**
4422:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
4423:/usr/include/c++/7/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
4424:/usr/include/c++/7/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
4425:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4426:/usr/include/c++/7/bits/basic_string.h ****        */
4427:/usr/include/c++/7/bits/basic_string.h ****       void
4428:/usr/include/c++/7/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
4429:/usr/include/c++/7/bits/basic_string.h ****       {
4430:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
4431:/usr/include/c++/7/bits/basic_string.h **** 	this->insert(__p - _M_ibegin(), __l.begin(), __l.size());
4432:/usr/include/c++/7/bits/basic_string.h ****       }
4433:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
4434:/usr/include/c++/7/bits/basic_string.h **** 
4435:/usr/include/c++/7/bits/basic_string.h ****       /**
4436:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert value of a string.
4437:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
4438:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  The string to insert.
4439:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4440:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4441:/usr/include/c++/7/bits/basic_string.h ****        *
4442:/usr/include/c++/7/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
4443:/usr/include/c++/7/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
4444:/usr/include/c++/7/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4445:/usr/include/c++/7/bits/basic_string.h ****        *  change if an error is thrown.
4446:/usr/include/c++/7/bits/basic_string.h ****       */
4447:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4448:/usr/include/c++/7/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
4449:/usr/include/c++/7/bits/basic_string.h ****       { return this->insert(__pos1, __str, size_type(0), __str.size()); }
4450:/usr/include/c++/7/bits/basic_string.h **** 
4451:/usr/include/c++/7/bits/basic_string.h ****       /**
4452:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert a substring.
4453:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos1  Iterator referencing location in string to insert at.
4454:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  The string to insert.
4455:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
4456:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
4457:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4458:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4459:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
4460:/usr/include/c++/7/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
4461:/usr/include/c++/7/bits/basic_string.h ****        *
4462:/usr/include/c++/7/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
4463:/usr/include/c++/7/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
4464:/usr/include/c++/7/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
4465:/usr/include/c++/7/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
4466:/usr/include/c++/7/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
4467:/usr/include/c++/7/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4468:/usr/include/c++/7/bits/basic_string.h ****       */
4469:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4470:/usr/include/c++/7/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
4471:/usr/include/c++/7/bits/basic_string.h **** 	     size_type __pos2, size_type __n = npos)
4472:/usr/include/c++/7/bits/basic_string.h ****       { return this->insert(__pos1, __str._M_data()
4473:/usr/include/c++/7/bits/basic_string.h **** 			    + __str._M_check(__pos2, "basic_string::insert"),
4474:/usr/include/c++/7/bits/basic_string.h **** 			    __str._M_limit(__pos2, __n)); }
4475:/usr/include/c++/7/bits/basic_string.h **** 
4476:/usr/include/c++/7/bits/basic_string.h ****       /**
4477:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert a C substring.
4478:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
4479:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  The C string to insert.
4480:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
4481:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4482:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4483:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
4484:/usr/include/c++/7/bits/basic_string.h ****        *  string.
4485:/usr/include/c++/7/bits/basic_string.h ****        *
4486:/usr/include/c++/7/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
4487:/usr/include/c++/7/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
4488:/usr/include/c++/7/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
4489:/usr/include/c++/7/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
4490:/usr/include/c++/7/bits/basic_string.h ****        *  doesn't change if an error is thrown.
4491:/usr/include/c++/7/bits/basic_string.h ****       */
4492:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4493:/usr/include/c++/7/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n);
4494:/usr/include/c++/7/bits/basic_string.h **** 
4495:/usr/include/c++/7/bits/basic_string.h ****       /**
4496:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert a C string.
4497:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Iterator referencing location in string to insert at.
4498:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  The C string to insert.
4499:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4500:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4501:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
4502:/usr/include/c++/7/bits/basic_string.h ****        *  string.
4503:/usr/include/c++/7/bits/basic_string.h ****        *
4504:/usr/include/c++/7/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
4505:/usr/include/c++/7/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
4506:/usr/include/c++/7/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
4507:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
4508:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.
4509:/usr/include/c++/7/bits/basic_string.h ****       */
4510:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4511:/usr/include/c++/7/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
4512:/usr/include/c++/7/bits/basic_string.h ****       {
4513:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4514:/usr/include/c++/7/bits/basic_string.h **** 	return this->insert(__pos, __s, traits_type::length(__s));
4515:/usr/include/c++/7/bits/basic_string.h ****       }
4516:/usr/include/c++/7/bits/basic_string.h **** 
4517:/usr/include/c++/7/bits/basic_string.h ****       /**
4518:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert multiple characters.
4519:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
4520:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to insert
4521:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  The character to insert.
4522:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4523:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4524:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
4525:/usr/include/c++/7/bits/basic_string.h ****        *  string.
4526:/usr/include/c++/7/bits/basic_string.h ****        *
4527:/usr/include/c++/7/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
4528:/usr/include/c++/7/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
4529:/usr/include/c++/7/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
4530:/usr/include/c++/7/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
4531:/usr/include/c++/7/bits/basic_string.h ****        *  change if an error is thrown.
4532:/usr/include/c++/7/bits/basic_string.h ****       */
4533:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4534:/usr/include/c++/7/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
4535:/usr/include/c++/7/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
4536:/usr/include/c++/7/bits/basic_string.h **** 			      size_type(0), __n, __c); }
4537:/usr/include/c++/7/bits/basic_string.h **** 
4538:/usr/include/c++/7/bits/basic_string.h ****       /**
4539:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert one character.
4540:/usr/include/c++/7/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
4541:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  The character to insert.
4542:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
4543:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4544:/usr/include/c++/7/bits/basic_string.h ****        *
4545:/usr/include/c++/7/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
4546:/usr/include/c++/7/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
4547:/usr/include/c++/7/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
4548:/usr/include/c++/7/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
4549:/usr/include/c++/7/bits/basic_string.h ****        *  change if an error is thrown.
4550:/usr/include/c++/7/bits/basic_string.h ****       */
4551:/usr/include/c++/7/bits/basic_string.h ****       iterator
4552:/usr/include/c++/7/bits/basic_string.h ****       insert(iterator __p, _CharT __c)
4553:/usr/include/c++/7/bits/basic_string.h ****       {
4554:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= _M_ibegin() && __p <= _M_iend());
4555:/usr/include/c++/7/bits/basic_string.h **** 	const size_type __pos = __p - _M_ibegin();
4556:/usr/include/c++/7/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
4557:/usr/include/c++/7/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
4558:/usr/include/c++/7/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
4559:/usr/include/c++/7/bits/basic_string.h ****       }
4560:/usr/include/c++/7/bits/basic_string.h **** 
4561:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
4562:/usr/include/c++/7/bits/basic_string.h ****       /**
4563:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert a string_view.
4564:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
4565:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
4566:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4567:/usr/include/c++/7/bits/basic_string.h ****       */
4568:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
4569:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4570:/usr/include/c++/7/bits/basic_string.h **** 	insert(size_type __pos, const _Tp& __svt)
4571:/usr/include/c++/7/bits/basic_string.h **** 	{
4572:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4573:/usr/include/c++/7/bits/basic_string.h **** 	  return this->insert(__pos, __sv.data(), __sv.size());
4574:/usr/include/c++/7/bits/basic_string.h **** 	}
4575:/usr/include/c++/7/bits/basic_string.h **** 
4576:/usr/include/c++/7/bits/basic_string.h ****       /**
4577:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Insert a string_view.
4578:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string to insert at.
4579:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert from.
4580:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Iterator referencing position in string_view to insert
4581:/usr/include/c++/7/bits/basic_string.h ****        *  from.
4582:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n    The number of characters to insert.
4583:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4584:/usr/include/c++/7/bits/basic_string.h ****       */
4585:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
4586:/usr/include/c++/7/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4587:/usr/include/c++/7/bits/basic_string.h ****         insert(size_type __pos1, const _Tp& __svt,
4588:/usr/include/c++/7/bits/basic_string.h **** 	       size_type __pos2, size_type __n = npos)
4589:/usr/include/c++/7/bits/basic_string.h **** 	{
4590:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4591:/usr/include/c++/7/bits/basic_string.h **** 	  return this->replace(__pos1, size_type(0), __sv.data()
4592:/usr/include/c++/7/bits/basic_string.h **** 			       + __sv._M_check(__pos2, "basic_string::insert"),
4593:/usr/include/c++/7/bits/basic_string.h **** 			       __sv._M_limit(__pos2, __n));
4594:/usr/include/c++/7/bits/basic_string.h **** 	}
4595:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
4596:/usr/include/c++/7/bits/basic_string.h **** 
4597:/usr/include/c++/7/bits/basic_string.h ****       /**
4598:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Remove characters.
4599:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
4600:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
4601:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4602:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
4603:/usr/include/c++/7/bits/basic_string.h ****        *  string.
4604:/usr/include/c++/7/bits/basic_string.h ****        *
4605:/usr/include/c++/7/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
4606:/usr/include/c++/7/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
4607:/usr/include/c++/7/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
4608:/usr/include/c++/7/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
4609:/usr/include/c++/7/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
4610:/usr/include/c++/7/bits/basic_string.h ****        *  change if an error is thrown.
4611:/usr/include/c++/7/bits/basic_string.h ****       */
4612:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4613:/usr/include/c++/7/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
4614:/usr/include/c++/7/bits/basic_string.h ****       { 
4615:/usr/include/c++/7/bits/basic_string.h **** 	_M_mutate(_M_check(__pos, "basic_string::erase"),
4616:/usr/include/c++/7/bits/basic_string.h **** 		  _M_limit(__pos, __n), size_type(0));
4617:/usr/include/c++/7/bits/basic_string.h **** 	return *this;
4618:/usr/include/c++/7/bits/basic_string.h ****       }
4619:/usr/include/c++/7/bits/basic_string.h **** 
4620:/usr/include/c++/7/bits/basic_string.h ****       /**
4621:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Remove one character.
4622:/usr/include/c++/7/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
4623:/usr/include/c++/7/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
4624:/usr/include/c++/7/bits/basic_string.h ****        *
4625:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
4626:/usr/include/c++/7/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
4627:/usr/include/c++/7/bits/basic_string.h ****       */
4628:/usr/include/c++/7/bits/basic_string.h ****       iterator
4629:/usr/include/c++/7/bits/basic_string.h ****       erase(iterator __position)
4630:/usr/include/c++/7/bits/basic_string.h ****       {
4631:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= _M_ibegin()
4632:/usr/include/c++/7/bits/basic_string.h **** 				 && __position < _M_iend());
4633:/usr/include/c++/7/bits/basic_string.h **** 	const size_type __pos = __position - _M_ibegin();
4634:/usr/include/c++/7/bits/basic_string.h **** 	_M_mutate(__pos, size_type(1), size_type(0));
4635:/usr/include/c++/7/bits/basic_string.h **** 	_M_rep()->_M_set_leaked();
4636:/usr/include/c++/7/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
4637:/usr/include/c++/7/bits/basic_string.h ****       }
4638:/usr/include/c++/7/bits/basic_string.h **** 
4639:/usr/include/c++/7/bits/basic_string.h ****       /**
4640:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Remove a range of characters.
4641:/usr/include/c++/7/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
4642:/usr/include/c++/7/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
4643:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
4644:/usr/include/c++/7/bits/basic_string.h ****        *
4645:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
4646:/usr/include/c++/7/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
4647:/usr/include/c++/7/bits/basic_string.h ****       */
4648:/usr/include/c++/7/bits/basic_string.h ****       iterator
4649:/usr/include/c++/7/bits/basic_string.h ****       erase(iterator __first, iterator __last);
4650:/usr/include/c++/7/bits/basic_string.h ****  
4651:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
4652:/usr/include/c++/7/bits/basic_string.h ****       /**
4653:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Remove the last character.
4654:/usr/include/c++/7/bits/basic_string.h ****        *
4655:/usr/include/c++/7/bits/basic_string.h ****        *  The string must be non-empty.
4656:/usr/include/c++/7/bits/basic_string.h ****        */
4657:/usr/include/c++/7/bits/basic_string.h ****       void
4658:/usr/include/c++/7/bits/basic_string.h ****       pop_back() // FIXME C++11: should be noexcept.
4659:/usr/include/c++/7/bits/basic_string.h ****       {
4660:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_assert(!empty());
4661:/usr/include/c++/7/bits/basic_string.h **** 	erase(size() - 1, 1);
4662:/usr/include/c++/7/bits/basic_string.h ****       }
4663:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
4664:/usr/include/c++/7/bits/basic_string.h **** 
4665:/usr/include/c++/7/bits/basic_string.h ****       /**
4666:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
4667:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4668:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
4669:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String to insert.
4670:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4671:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
4672:/usr/include/c++/7/bits/basic_string.h ****        *  string.
4673:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4674:/usr/include/c++/7/bits/basic_string.h ****        *
4675:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
4676:/usr/include/c++/7/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
4677:/usr/include/c++/7/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
4678:/usr/include/c++/7/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
4679:/usr/include/c++/7/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
4680:/usr/include/c++/7/bits/basic_string.h ****        *  error is thrown.
4681:/usr/include/c++/7/bits/basic_string.h ****       */
4682:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4683:/usr/include/c++/7/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
4684:/usr/include/c++/7/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
4685:/usr/include/c++/7/bits/basic_string.h **** 
4686:/usr/include/c++/7/bits/basic_string.h ****       /**
4687:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
4688:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
4689:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4690:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String to insert.
4691:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
4692:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
4693:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4694:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
4695:/usr/include/c++/7/bits/basic_string.h ****        *  __str.size().
4696:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4697:/usr/include/c++/7/bits/basic_string.h ****        *
4698:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
4699:/usr/include/c++/7/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
4700:/usr/include/c++/7/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
4701:/usr/include/c++/7/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
4702:/usr/include/c++/7/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
4703:/usr/include/c++/7/bits/basic_string.h ****       */
4704:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4705:/usr/include/c++/7/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
4706:/usr/include/c++/7/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos)
4707:/usr/include/c++/7/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
4708:/usr/include/c++/7/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
4709:/usr/include/c++/7/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
4710:/usr/include/c++/7/bits/basic_string.h **** 
4711:/usr/include/c++/7/bits/basic_string.h ****       /**
4712:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
4713:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4714:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4715:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to insert.
4716:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
4717:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4718:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
4719:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4720:/usr/include/c++/7/bits/basic_string.h ****        *
4721:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
4722:/usr/include/c++/7/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
4723:/usr/include/c++/7/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
4724:/usr/include/c++/7/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
4725:/usr/include/c++/7/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
4726:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
4727:/usr/include/c++/7/bits/basic_string.h ****        *  is thrown.
4728:/usr/include/c++/7/bits/basic_string.h ****       */
4729:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4730:/usr/include/c++/7/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
4731:/usr/include/c++/7/bits/basic_string.h **** 	      size_type __n2);
4732:/usr/include/c++/7/bits/basic_string.h **** 
4733:/usr/include/c++/7/bits/basic_string.h ****       /**
4734:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
4735:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4736:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4737:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to insert.
4738:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4739:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
4740:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4741:/usr/include/c++/7/bits/basic_string.h ****        *
4742:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
4743:/usr/include/c++/7/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
4744:/usr/include/c++/7/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
4745:/usr/include/c++/7/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
4746:/usr/include/c++/7/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
4747:/usr/include/c++/7/bits/basic_string.h ****        *  change if an error is thrown.
4748:/usr/include/c++/7/bits/basic_string.h ****       */
4749:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4750:/usr/include/c++/7/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
4751:/usr/include/c++/7/bits/basic_string.h ****       {
4752:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4753:/usr/include/c++/7/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
4754:/usr/include/c++/7/bits/basic_string.h ****       }
4755:/usr/include/c++/7/bits/basic_string.h **** 
4756:/usr/include/c++/7/bits/basic_string.h ****       /**
4757:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
4758:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
4759:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
4760:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
4761:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to insert.
4762:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4763:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
4764:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4765:/usr/include/c++/7/bits/basic_string.h ****        *
4766:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
4767:/usr/include/c++/7/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
4768:/usr/include/c++/7/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
4769:/usr/include/c++/7/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
4770:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
4771:/usr/include/c++/7/bits/basic_string.h ****        *  is thrown.
4772:/usr/include/c++/7/bits/basic_string.h ****       */
4773:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4774:/usr/include/c++/7/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
4775:/usr/include/c++/7/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
4776:/usr/include/c++/7/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
4777:/usr/include/c++/7/bits/basic_string.h **** 
4778:/usr/include/c++/7/bits/basic_string.h ****       /**
4779:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
4780:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4781:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4782:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String value to insert.
4783:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4784:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4785:/usr/include/c++/7/bits/basic_string.h ****        *
4786:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4787:/usr/include/c++/7/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
4788:/usr/include/c++/7/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
4789:/usr/include/c++/7/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
4790:/usr/include/c++/7/bits/basic_string.h ****       */
4791:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4792:/usr/include/c++/7/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const basic_string& __str)
4793:/usr/include/c++/7/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
4794:/usr/include/c++/7/bits/basic_string.h **** 
4795:/usr/include/c++/7/bits/basic_string.h ****       /**
4796:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
4797:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4798:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4799:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string value to insert.
4800:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
4801:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4802:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4803:/usr/include/c++/7/bits/basic_string.h ****        *
4804:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4805:/usr/include/c++/7/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
4806:/usr/include/c++/7/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4807:/usr/include/c++/7/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4808:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.
4809:/usr/include/c++/7/bits/basic_string.h ****       */
4810:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4811:/usr/include/c++/7/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
4812:/usr/include/c++/7/bits/basic_string.h ****       {
4813:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4814:/usr/include/c++/7/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4815:/usr/include/c++/7/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
4816:/usr/include/c++/7/bits/basic_string.h ****       }
4817:/usr/include/c++/7/bits/basic_string.h **** 
4818:/usr/include/c++/7/bits/basic_string.h ****       /**
4819:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
4820:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4821:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4822:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string value to insert.
4823:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4824:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4825:/usr/include/c++/7/bits/basic_string.h ****        *
4826:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4827:/usr/include/c++/7/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
4828:/usr/include/c++/7/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
4829:/usr/include/c++/7/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4830:/usr/include/c++/7/bits/basic_string.h ****       */
4831:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4832:/usr/include/c++/7/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, const _CharT* __s)
4833:/usr/include/c++/7/bits/basic_string.h ****       {
4834:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
4835:/usr/include/c++/7/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
4836:/usr/include/c++/7/bits/basic_string.h ****       }
4837:/usr/include/c++/7/bits/basic_string.h **** 
4838:/usr/include/c++/7/bits/basic_string.h ****       /**
4839:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
4840:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4841:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4842:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
4843:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to insert.
4844:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4845:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4846:/usr/include/c++/7/bits/basic_string.h ****        *
4847:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4848:/usr/include/c++/7/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
4849:/usr/include/c++/7/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
4850:/usr/include/c++/7/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
4851:/usr/include/c++/7/bits/basic_string.h ****       */
4852:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4853:/usr/include/c++/7/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
4854:/usr/include/c++/7/bits/basic_string.h ****       {
4855:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4856:/usr/include/c++/7/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4857:/usr/include/c++/7/bits/basic_string.h **** 	return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
4858:/usr/include/c++/7/bits/basic_string.h ****       }
4859:/usr/include/c++/7/bits/basic_string.h **** 
4860:/usr/include/c++/7/bits/basic_string.h ****       /**
4861:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
4862:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4863:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4864:/usr/include/c++/7/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
4865:/usr/include/c++/7/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
4866:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4867:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4868:/usr/include/c++/7/bits/basic_string.h ****        *
4869:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4870:/usr/include/c++/7/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
4871:/usr/include/c++/7/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4872:/usr/include/c++/7/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4873:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.
4874:/usr/include/c++/7/bits/basic_string.h ****       */
4875:/usr/include/c++/7/bits/basic_string.h ****       template<class _InputIterator>
4876:/usr/include/c++/7/bits/basic_string.h ****         basic_string&
4877:/usr/include/c++/7/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
4878:/usr/include/c++/7/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
4879:/usr/include/c++/7/bits/basic_string.h ****         {
4880:/usr/include/c++/7/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4881:/usr/include/c++/7/bits/basic_string.h **** 				   && __i2 <= _M_iend());
4882:/usr/include/c++/7/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
4883:/usr/include/c++/7/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
4884:/usr/include/c++/7/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
4885:/usr/include/c++/7/bits/basic_string.h **** 	}
4886:/usr/include/c++/7/bits/basic_string.h **** 
4887:/usr/include/c++/7/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
4888:/usr/include/c++/7/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
4889:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4890:/usr/include/c++/7/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
4891:/usr/include/c++/7/bits/basic_string.h ****       {
4892:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4893:/usr/include/c++/7/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4894:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4895:/usr/include/c++/7/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4896:/usr/include/c++/7/bits/basic_string.h **** 			     __k1, __k2 - __k1);
4897:/usr/include/c++/7/bits/basic_string.h ****       }
4898:/usr/include/c++/7/bits/basic_string.h **** 
4899:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4900:/usr/include/c++/7/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
4901:/usr/include/c++/7/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
4902:/usr/include/c++/7/bits/basic_string.h ****       {
4903:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4904:/usr/include/c++/7/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4905:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4906:/usr/include/c++/7/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4907:/usr/include/c++/7/bits/basic_string.h **** 			     __k1, __k2 - __k1);
4908:/usr/include/c++/7/bits/basic_string.h ****       }
4909:/usr/include/c++/7/bits/basic_string.h **** 
4910:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4911:/usr/include/c++/7/bits/basic_string.h ****       replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
4912:/usr/include/c++/7/bits/basic_string.h ****       {
4913:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4914:/usr/include/c++/7/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4915:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4916:/usr/include/c++/7/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4917:/usr/include/c++/7/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
4918:/usr/include/c++/7/bits/basic_string.h ****       }
4919:/usr/include/c++/7/bits/basic_string.h **** 
4920:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
4921:/usr/include/c++/7/bits/basic_string.h ****       replace(iterator __i1, iterator __i2,
4922:/usr/include/c++/7/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
4923:/usr/include/c++/7/bits/basic_string.h ****       {
4924:/usr/include/c++/7/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2
4925:/usr/include/c++/7/bits/basic_string.h **** 				 && __i2 <= _M_iend());
4926:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
4927:/usr/include/c++/7/bits/basic_string.h **** 	return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
4928:/usr/include/c++/7/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
4929:/usr/include/c++/7/bits/basic_string.h ****       }
4930:/usr/include/c++/7/bits/basic_string.h **** 
4931:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
4932:/usr/include/c++/7/bits/basic_string.h ****       /**
4933:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
4934:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
4935:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
4936:/usr/include/c++/7/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
4937:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4938:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
4939:/usr/include/c++/7/bits/basic_string.h ****        *
4940:/usr/include/c++/7/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
4941:/usr/include/c++/7/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
4942:/usr/include/c++/7/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
4943:/usr/include/c++/7/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
4944:/usr/include/c++/7/bits/basic_string.h ****        *  thrown.
4945:/usr/include/c++/7/bits/basic_string.h ****       */
4946:/usr/include/c++/7/bits/basic_string.h ****       basic_string& replace(iterator __i1, iterator __i2,
4947:/usr/include/c++/7/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
4948:/usr/include/c++/7/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.end()); }
4949:/usr/include/c++/7/bits/basic_string.h **** #endif // C++11
4950:/usr/include/c++/7/bits/basic_string.h **** 
4951:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
4952:/usr/include/c++/7/bits/basic_string.h ****       /**
4953:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
4954:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  The position to replace at.
4955:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n    The number of characters to replace.
4956:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
4957:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4958:/usr/include/c++/7/bits/basic_string.h ****       */
4959:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
4960:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4961:/usr/include/c++/7/bits/basic_string.h **** 	replace(size_type __pos, size_type __n, const _Tp& __svt)
4962:/usr/include/c++/7/bits/basic_string.h **** 	{
4963:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4964:/usr/include/c++/7/bits/basic_string.h **** 	  return this->replace(__pos, __n, __sv.data(), __sv.size());
4965:/usr/include/c++/7/bits/basic_string.h **** 	}
4966:/usr/include/c++/7/bits/basic_string.h **** 
4967:/usr/include/c++/7/bits/basic_string.h ****       /**
4968:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
4969:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos1  The position to replace at.
4970:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1    The number of characters to replace.
4971:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
4972:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos2  The position in the string_view to insert from.
4973:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n2    The number of characters to insert.
4974:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4975:/usr/include/c++/7/bits/basic_string.h ****       */
4976:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
4977:/usr/include/c++/7/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
4978:/usr/include/c++/7/bits/basic_string.h ****         replace(size_type __pos1, size_type __n1, const _Tp& __svt,
4979:/usr/include/c++/7/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos)
4980:/usr/include/c++/7/bits/basic_string.h **** 	{
4981:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
4982:/usr/include/c++/7/bits/basic_string.h **** 	  return this->replace(__pos1, __n1,
4983:/usr/include/c++/7/bits/basic_string.h **** 	      __sv.data() + __sv._M_check(__pos2, "basic_string::replace"),
4984:/usr/include/c++/7/bits/basic_string.h **** 	      __sv._M_limit(__pos2, __n2));
4985:/usr/include/c++/7/bits/basic_string.h **** 	}
4986:/usr/include/c++/7/bits/basic_string.h **** 
4987:/usr/include/c++/7/bits/basic_string.h ****       /**
4988:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
4989:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i1    An iterator referencing the start position
4990:/usr/include/c++/7/bits/basic_string.h ****           to replace at.
4991:/usr/include/c++/7/bits/basic_string.h ****        *  @param __i2    An iterator referencing the end position
4992:/usr/include/c++/7/bits/basic_string.h ****           for the replace.
4993:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
4994:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Reference to this string.
4995:/usr/include/c++/7/bits/basic_string.h ****       */
4996:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
4997:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
4998:/usr/include/c++/7/bits/basic_string.h **** 	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
4999:/usr/include/c++/7/bits/basic_string.h **** 	{
5000:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5001:/usr/include/c++/7/bits/basic_string.h **** 	  return this->replace(__i1 - begin(), __i2 - __i1, __sv);
5002:/usr/include/c++/7/bits/basic_string.h **** 	}
5003:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
5004:/usr/include/c++/7/bits/basic_string.h **** 
5005:/usr/include/c++/7/bits/basic_string.h ****     private:
5006:/usr/include/c++/7/bits/basic_string.h ****       template<class _Integer>
5007:/usr/include/c++/7/bits/basic_string.h **** 	basic_string&
5008:/usr/include/c++/7/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
5009:/usr/include/c++/7/bits/basic_string.h **** 			    _Integer __val, __true_type)
5010:/usr/include/c++/7/bits/basic_string.h ****         { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }
5011:/usr/include/c++/7/bits/basic_string.h **** 
5012:/usr/include/c++/7/bits/basic_string.h ****       template<class _InputIterator>
5013:/usr/include/c++/7/bits/basic_string.h **** 	basic_string&
5014:/usr/include/c++/7/bits/basic_string.h **** 	_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
5015:/usr/include/c++/7/bits/basic_string.h **** 			    _InputIterator __k2, __false_type);
5016:/usr/include/c++/7/bits/basic_string.h **** 
5017:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
5018:/usr/include/c++/7/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
5019:/usr/include/c++/7/bits/basic_string.h **** 		     _CharT __c);
5020:/usr/include/c++/7/bits/basic_string.h **** 
5021:/usr/include/c++/7/bits/basic_string.h ****       basic_string&
5022:/usr/include/c++/7/bits/basic_string.h ****       _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
5023:/usr/include/c++/7/bits/basic_string.h **** 		      size_type __n2);
5024:/usr/include/c++/7/bits/basic_string.h **** 
5025:/usr/include/c++/7/bits/basic_string.h ****       // _S_construct_aux is used to implement the 21.3.1 para 15 which
5026:/usr/include/c++/7/bits/basic_string.h ****       // requires special behaviour if _InIter is an integral type
5027:/usr/include/c++/7/bits/basic_string.h ****       template<class _InIterator>
5028:/usr/include/c++/7/bits/basic_string.h ****         static _CharT*
5029:/usr/include/c++/7/bits/basic_string.h ****         _S_construct_aux(_InIterator __beg, _InIterator __end,
5030:/usr/include/c++/7/bits/basic_string.h **** 			 const _Alloc& __a, __false_type)
5031:/usr/include/c++/7/bits/basic_string.h **** 	{
5032:/usr/include/c++/7/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
5033:/usr/include/c++/7/bits/basic_string.h ****           return _S_construct(__beg, __end, __a, _Tag());
5034:/usr/include/c++/7/bits/basic_string.h **** 	}
5035:/usr/include/c++/7/bits/basic_string.h **** 
5036:/usr/include/c++/7/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
5037:/usr/include/c++/7/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
5038:/usr/include/c++/7/bits/basic_string.h ****       template<class _Integer>
5039:/usr/include/c++/7/bits/basic_string.h ****         static _CharT*
5040:/usr/include/c++/7/bits/basic_string.h ****         _S_construct_aux(_Integer __beg, _Integer __end,
5041:/usr/include/c++/7/bits/basic_string.h **** 			 const _Alloc& __a, __true_type)
5042:/usr/include/c++/7/bits/basic_string.h ****         { return _S_construct_aux_2(static_cast<size_type>(__beg),
5043:/usr/include/c++/7/bits/basic_string.h **** 				    __end, __a); }
5044:/usr/include/c++/7/bits/basic_string.h **** 
5045:/usr/include/c++/7/bits/basic_string.h ****       static _CharT*
5046:/usr/include/c++/7/bits/basic_string.h ****       _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
5047:/usr/include/c++/7/bits/basic_string.h ****       { return _S_construct(__req, __c, __a); }
5048:/usr/include/c++/7/bits/basic_string.h **** 
5049:/usr/include/c++/7/bits/basic_string.h ****       template<class _InIterator>
5050:/usr/include/c++/7/bits/basic_string.h ****         static _CharT*
5051:/usr/include/c++/7/bits/basic_string.h ****         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
5052:/usr/include/c++/7/bits/basic_string.h **** 	{
5053:/usr/include/c++/7/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
5054:/usr/include/c++/7/bits/basic_string.h **** 	  return _S_construct_aux(__beg, __end, __a, _Integral());
5055:/usr/include/c++/7/bits/basic_string.h ****         }
5056:/usr/include/c++/7/bits/basic_string.h **** 
5057:/usr/include/c++/7/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
5058:/usr/include/c++/7/bits/basic_string.h ****       template<class _InIterator>
5059:/usr/include/c++/7/bits/basic_string.h ****         static _CharT*
5060:/usr/include/c++/7/bits/basic_string.h ****          _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
5061:/usr/include/c++/7/bits/basic_string.h **** 		      input_iterator_tag);
5062:/usr/include/c++/7/bits/basic_string.h **** 
5063:/usr/include/c++/7/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
5064:/usr/include/c++/7/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
5065:/usr/include/c++/7/bits/basic_string.h ****       template<class _FwdIterator>
5066:/usr/include/c++/7/bits/basic_string.h ****         static _CharT*
5067:/usr/include/c++/7/bits/basic_string.h ****         _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
5068:/usr/include/c++/7/bits/basic_string.h **** 		     forward_iterator_tag);
5069:/usr/include/c++/7/bits/basic_string.h **** 
5070:/usr/include/c++/7/bits/basic_string.h ****       static _CharT*
5071:/usr/include/c++/7/bits/basic_string.h ****       _S_construct(size_type __req, _CharT __c, const _Alloc& __a);
5072:/usr/include/c++/7/bits/basic_string.h **** 
5073:/usr/include/c++/7/bits/basic_string.h ****     public:
5074:/usr/include/c++/7/bits/basic_string.h **** 
5075:/usr/include/c++/7/bits/basic_string.h ****       /**
5076:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Copy substring into C string.
5077:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to copy value into.
5078:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
5079:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
5080:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Number of characters actually copied
5081:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
5082:/usr/include/c++/7/bits/basic_string.h ****        *
5083:/usr/include/c++/7/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
5084:/usr/include/c++/7/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
5085:/usr/include/c++/7/bits/basic_string.h ****        *  out_of_range is thrown.
5086:/usr/include/c++/7/bits/basic_string.h ****       */
5087:/usr/include/c++/7/bits/basic_string.h ****       size_type
5088:/usr/include/c++/7/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
5089:/usr/include/c++/7/bits/basic_string.h **** 
5090:/usr/include/c++/7/bits/basic_string.h ****       /**
5091:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Swap contents with another string.
5092:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  String to swap with.
5093:/usr/include/c++/7/bits/basic_string.h ****        *
5094:/usr/include/c++/7/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
5095:/usr/include/c++/7/bits/basic_string.h ****        *  time.
5096:/usr/include/c++/7/bits/basic_string.h ****       */
5097:/usr/include/c++/7/bits/basic_string.h ****       // PR 58265, this should be noexcept.
5098:/usr/include/c++/7/bits/basic_string.h ****       void
5099:/usr/include/c++/7/bits/basic_string.h ****       swap(basic_string& __s);
5100:/usr/include/c++/7/bits/basic_string.h **** 
5101:/usr/include/c++/7/bits/basic_string.h ****       // String operations:
5102:/usr/include/c++/7/bits/basic_string.h ****       /**
5103:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
5104:/usr/include/c++/7/bits/basic_string.h ****        *
5105:/usr/include/c++/7/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
5106:/usr/include/c++/7/bits/basic_string.h ****        *  happen.
5107:/usr/include/c++/7/bits/basic_string.h ****       */
5108:/usr/include/c++/7/bits/basic_string.h ****       const _CharT*
5109:/usr/include/c++/7/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
5110:/usr/include/c++/7/bits/basic_string.h ****       { return _M_data(); }
5111:/usr/include/c++/7/bits/basic_string.h **** 
5112:/usr/include/c++/7/bits/basic_string.h ****       /**
5113:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Return const pointer to contents.
5114:/usr/include/c++/7/bits/basic_string.h ****        *
5115:/usr/include/c++/7/bits/basic_string.h ****        *  This is a pointer to internal data.  It is undefined to modify
5116:/usr/include/c++/7/bits/basic_string.h ****        *  the contents through the returned pointer. To get a pointer that
5117:/usr/include/c++/7/bits/basic_string.h ****        *  allows modifying the contents use @c &str[0] instead,
5118:/usr/include/c++/7/bits/basic_string.h ****        *  (or in C++17 the non-const @c str.data() overload).
5119:/usr/include/c++/7/bits/basic_string.h ****       */
5120:/usr/include/c++/7/bits/basic_string.h ****       const _CharT*
5121:/usr/include/c++/7/bits/basic_string.h ****       data() const _GLIBCXX_NOEXCEPT
5122:/usr/include/c++/7/bits/basic_string.h ****       { return _M_data(); }
5123:/usr/include/c++/7/bits/basic_string.h **** 
5124:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
5125:/usr/include/c++/7/bits/basic_string.h ****       /**
5126:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Return non-const pointer to contents.
5127:/usr/include/c++/7/bits/basic_string.h ****        *
5128:/usr/include/c++/7/bits/basic_string.h ****        *  This is a pointer to the character sequence held by the string.
5129:/usr/include/c++/7/bits/basic_string.h ****        *  Modifying the characters in the sequence is allowed.
5130:/usr/include/c++/7/bits/basic_string.h ****       */
5131:/usr/include/c++/7/bits/basic_string.h ****       _CharT*
5132:/usr/include/c++/7/bits/basic_string.h ****       data() noexcept
5133:/usr/include/c++/7/bits/basic_string.h ****       {
5134:/usr/include/c++/7/bits/basic_string.h **** 	_M_leak();
5135:/usr/include/c++/7/bits/basic_string.h **** 	return _M_data();
5136:/usr/include/c++/7/bits/basic_string.h ****       }
5137:/usr/include/c++/7/bits/basic_string.h **** #endif
5138:/usr/include/c++/7/bits/basic_string.h **** 
5139:/usr/include/c++/7/bits/basic_string.h ****       /**
5140:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Return copy of allocator used to construct this string.
5141:/usr/include/c++/7/bits/basic_string.h ****       */
5142:/usr/include/c++/7/bits/basic_string.h ****       allocator_type
5143:/usr/include/c++/7/bits/basic_string.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
5144:/usr/include/c++/7/bits/basic_string.h ****       { return _M_dataplus; }
5145:/usr/include/c++/7/bits/basic_string.h **** 
5146:/usr/include/c++/7/bits/basic_string.h ****       /**
5147:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a C substring.
5148:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to locate.
5149:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
5150:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters from @a s to search for.
5151:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5152:/usr/include/c++/7/bits/basic_string.h ****        *
5153:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the first @a
5154:/usr/include/c++/7/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
5155:/usr/include/c++/7/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
5156:/usr/include/c++/7/bits/basic_string.h ****        *  npos.
5157:/usr/include/c++/7/bits/basic_string.h ****       */
5158:/usr/include/c++/7/bits/basic_string.h ****       size_type
5159:/usr/include/c++/7/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos, size_type __n) const
5160:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5161:/usr/include/c++/7/bits/basic_string.h **** 
5162:/usr/include/c++/7/bits/basic_string.h ****       /**
5163:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a string.
5164:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String to locate.
5165:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5166:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5167:/usr/include/c++/7/bits/basic_string.h ****        *
5168:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for value of @a __str within
5169:/usr/include/c++/7/bits/basic_string.h ****        *  this string.  If found, returns the index where it begins.  If not
5170:/usr/include/c++/7/bits/basic_string.h ****        *  found, returns npos.
5171:/usr/include/c++/7/bits/basic_string.h ****       */
5172:/usr/include/c++/7/bits/basic_string.h ****       size_type
5173:/usr/include/c++/7/bits/basic_string.h ****       find(const basic_string& __str, size_type __pos = 0) const
5174:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5175:/usr/include/c++/7/bits/basic_string.h ****       { return this->find(__str.data(), __pos, __str.size()); }
5176:/usr/include/c++/7/bits/basic_string.h **** 
5177:/usr/include/c++/7/bits/basic_string.h ****       /**
5178:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a C string.
5179:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to locate.
5180:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5181:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5182:/usr/include/c++/7/bits/basic_string.h ****        *
5183:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the value of @a
5184:/usr/include/c++/7/bits/basic_string.h ****        *  __s within this string.  If found, returns the index where
5185:/usr/include/c++/7/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
5186:/usr/include/c++/7/bits/basic_string.h ****       */
5187:/usr/include/c++/7/bits/basic_string.h ****       size_type
5188:/usr/include/c++/7/bits/basic_string.h ****       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
5189:/usr/include/c++/7/bits/basic_string.h ****       {
5190:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5191:/usr/include/c++/7/bits/basic_string.h **** 	return this->find(__s, __pos, traits_type::length(__s));
5192:/usr/include/c++/7/bits/basic_string.h ****       }
5193:/usr/include/c++/7/bits/basic_string.h **** 
5194:/usr/include/c++/7/bits/basic_string.h ****       /**
5195:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character.
5196:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to locate.
5197:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5198:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
5199:/usr/include/c++/7/bits/basic_string.h ****        *
5200:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for @a __c within
5201:/usr/include/c++/7/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5202:/usr/include/c++/7/bits/basic_string.h ****        *  found.  If not found, returns npos.
5203:/usr/include/c++/7/bits/basic_string.h ****       */
5204:/usr/include/c++/7/bits/basic_string.h ****       size_type
5205:/usr/include/c++/7/bits/basic_string.h ****       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;
5206:/usr/include/c++/7/bits/basic_string.h **** 
5207:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
5208:/usr/include/c++/7/bits/basic_string.h ****       /**
5209:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a string_view.
5210:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
5211:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5212:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of start of first occurrence.
5213:/usr/include/c++/7/bits/basic_string.h ****       */
5214:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
5215:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5216:/usr/include/c++/7/bits/basic_string.h **** 	find(const _Tp& __svt, size_type __pos = 0) const
5217:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5218:/usr/include/c++/7/bits/basic_string.h **** 	{
5219:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5220:/usr/include/c++/7/bits/basic_string.h **** 	  return this->find(__sv.data(), __pos, __sv.size());
5221:/usr/include/c++/7/bits/basic_string.h **** 	}
5222:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
5223:/usr/include/c++/7/bits/basic_string.h **** 
5224:/usr/include/c++/7/bits/basic_string.h ****       /**
5225:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a string.
5226:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String to locate.
5227:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5228:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
5229:/usr/include/c++/7/bits/basic_string.h ****        *
5230:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for value of @a
5231:/usr/include/c++/7/bits/basic_string.h ****        *  __str within this string.  If found, returns the index where
5232:/usr/include/c++/7/bits/basic_string.h ****        *  it begins.  If not found, returns npos.
5233:/usr/include/c++/7/bits/basic_string.h ****       */
5234:/usr/include/c++/7/bits/basic_string.h ****       size_type
5235:/usr/include/c++/7/bits/basic_string.h ****       rfind(const basic_string& __str, size_type __pos = npos) const
5236:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5237:/usr/include/c++/7/bits/basic_string.h ****       { return this->rfind(__str.data(), __pos, __str.size()); }
5238:/usr/include/c++/7/bits/basic_string.h **** 
5239:/usr/include/c++/7/bits/basic_string.h ****       /**
5240:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a C substring.
5241:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to locate.
5242:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
5243:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
5244:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
5245:/usr/include/c++/7/bits/basic_string.h ****        *
5246:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the first @a
5247:/usr/include/c++/7/bits/basic_string.h ****        *  __n characters in @a __s within this string.  If found,
5248:/usr/include/c++/7/bits/basic_string.h ****        *  returns the index where it begins.  If not found, returns
5249:/usr/include/c++/7/bits/basic_string.h ****        *  npos.
5250:/usr/include/c++/7/bits/basic_string.h ****       */
5251:/usr/include/c++/7/bits/basic_string.h ****       size_type
5252:/usr/include/c++/7/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos, size_type __n) const
5253:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5254:/usr/include/c++/7/bits/basic_string.h **** 
5255:/usr/include/c++/7/bits/basic_string.h ****       /**
5256:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a C string.
5257:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to locate.
5258:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to start search at (default end).
5259:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of start of  last occurrence.
5260:/usr/include/c++/7/bits/basic_string.h ****        *
5261:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for the value of
5262:/usr/include/c++/7/bits/basic_string.h ****        *  @a __s within this string.  If found, returns the index
5263:/usr/include/c++/7/bits/basic_string.h ****        *  where it begins.  If not found, returns npos.
5264:/usr/include/c++/7/bits/basic_string.h ****       */
5265:/usr/include/c++/7/bits/basic_string.h ****       size_type
5266:/usr/include/c++/7/bits/basic_string.h ****       rfind(const _CharT* __s, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
5267:/usr/include/c++/7/bits/basic_string.h ****       {
5268:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5269:/usr/include/c++/7/bits/basic_string.h **** 	return this->rfind(__s, __pos, traits_type::length(__s));
5270:/usr/include/c++/7/bits/basic_string.h ****       }
5271:/usr/include/c++/7/bits/basic_string.h **** 
5272:/usr/include/c++/7/bits/basic_string.h ****       /**
5273:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character.
5274:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to locate.
5275:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5276:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
5277:/usr/include/c++/7/bits/basic_string.h ****        *
5278:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
5279:/usr/include/c++/7/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5280:/usr/include/c++/7/bits/basic_string.h ****        *  found.  If not found, returns npos.
5281:/usr/include/c++/7/bits/basic_string.h ****       */
5282:/usr/include/c++/7/bits/basic_string.h ****       size_type
5283:/usr/include/c++/7/bits/basic_string.h ****       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;
5284:/usr/include/c++/7/bits/basic_string.h **** 
5285:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
5286:/usr/include/c++/7/bits/basic_string.h ****       /**
5287:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a string_view.
5288:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to locate.
5289:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5290:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of start of last occurrence.
5291:/usr/include/c++/7/bits/basic_string.h ****       */
5292:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
5293:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5294:/usr/include/c++/7/bits/basic_string.h **** 	rfind(const _Tp& __svt, size_type __pos = npos) const
5295:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5296:/usr/include/c++/7/bits/basic_string.h **** 	{
5297:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5298:/usr/include/c++/7/bits/basic_string.h **** 	  return this->rfind(__sv.data(), __pos, __sv.size());
5299:/usr/include/c++/7/bits/basic_string.h **** 	}
5300:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
5301:/usr/include/c++/7/bits/basic_string.h **** 
5302:/usr/include/c++/7/bits/basic_string.h ****       /**
5303:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character of string.
5304:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
5305:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5306:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
5307:/usr/include/c++/7/bits/basic_string.h ****        *
5308:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
5309:/usr/include/c++/7/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
5310:/usr/include/c++/7/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5311:/usr/include/c++/7/bits/basic_string.h ****        *  npos.
5312:/usr/include/c++/7/bits/basic_string.h ****       */
5313:/usr/include/c++/7/bits/basic_string.h ****       size_type
5314:/usr/include/c++/7/bits/basic_string.h ****       find_first_of(const basic_string& __str, size_type __pos = 0) const
5315:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5316:/usr/include/c++/7/bits/basic_string.h ****       { return this->find_first_of(__str.data(), __pos, __str.size()); }
5317:/usr/include/c++/7/bits/basic_string.h **** 
5318:/usr/include/c++/7/bits/basic_string.h ****       /**
5319:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character of C substring.
5320:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
5321:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
5322:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
5323:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
5324:/usr/include/c++/7/bits/basic_string.h ****        *
5325:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
5326:/usr/include/c++/7/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
5327:/usr/include/c++/7/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
5328:/usr/include/c++/7/bits/basic_string.h ****        *  returns npos.
5329:/usr/include/c++/7/bits/basic_string.h ****       */
5330:/usr/include/c++/7/bits/basic_string.h ****       size_type
5331:/usr/include/c++/7/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
5332:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5333:/usr/include/c++/7/bits/basic_string.h **** 
5334:/usr/include/c++/7/bits/basic_string.h ****       /**
5335:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character of C string.
5336:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  String containing characters to locate.
5337:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5338:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
5339:/usr/include/c++/7/bits/basic_string.h ****        *
5340:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for one of the
5341:/usr/include/c++/7/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
5342:/usr/include/c++/7/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
5343:/usr/include/c++/7/bits/basic_string.h ****       */
5344:/usr/include/c++/7/bits/basic_string.h ****       size_type
5345:/usr/include/c++/7/bits/basic_string.h ****       find_first_of(const _CharT* __s, size_type __pos = 0) const
5346:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5347:/usr/include/c++/7/bits/basic_string.h ****       {
5348:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5349:/usr/include/c++/7/bits/basic_string.h **** 	return this->find_first_of(__s, __pos, traits_type::length(__s));
5350:/usr/include/c++/7/bits/basic_string.h ****       }
5351:/usr/include/c++/7/bits/basic_string.h **** 
5352:/usr/include/c++/7/bits/basic_string.h ****       /**
5353:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character.
5354:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to locate.
5355:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5356:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
5357:/usr/include/c++/7/bits/basic_string.h ****        *
5358:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for the character
5359:/usr/include/c++/7/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index
5360:/usr/include/c++/7/bits/basic_string.h ****        *  where it was found.  If not found, returns npos.
5361:/usr/include/c++/7/bits/basic_string.h ****        *
5362:/usr/include/c++/7/bits/basic_string.h ****        *  Note: equivalent to find(__c, __pos).
5363:/usr/include/c++/7/bits/basic_string.h ****       */
5364:/usr/include/c++/7/bits/basic_string.h ****       size_type
5365:/usr/include/c++/7/bits/basic_string.h ****       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT
5366:/usr/include/c++/7/bits/basic_string.h ****       { return this->find(__c, __pos); }
5367:/usr/include/c++/7/bits/basic_string.h **** 
5368:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
5369:/usr/include/c++/7/bits/basic_string.h ****       /**
5370:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character of a string_view.
5371:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5372:/usr/include/c++/7/bits/basic_string.h ****        *                characters to locate.
5373:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5374:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
5375:/usr/include/c++/7/bits/basic_string.h ****       */
5376:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
5377:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5378:/usr/include/c++/7/bits/basic_string.h **** 	find_first_of(const _Tp& __svt, size_type __pos = 0) const
5379:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5380:/usr/include/c++/7/bits/basic_string.h **** 	{
5381:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5382:/usr/include/c++/7/bits/basic_string.h **** 	  return this->find_first_of(__sv.data(), __pos, __sv.size());
5383:/usr/include/c++/7/bits/basic_string.h **** 	}
5384:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
5385:/usr/include/c++/7/bits/basic_string.h **** 
5386:/usr/include/c++/7/bits/basic_string.h ****       /**
5387:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
5388:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String containing characters to locate.
5389:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5390:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
5391:/usr/include/c++/7/bits/basic_string.h ****        *
5392:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
5393:/usr/include/c++/7/bits/basic_string.h ****        *  characters of @a __str within this string.  If found,
5394:/usr/include/c++/7/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5395:/usr/include/c++/7/bits/basic_string.h ****        *  npos.
5396:/usr/include/c++/7/bits/basic_string.h ****       */
5397:/usr/include/c++/7/bits/basic_string.h ****       size_type
5398:/usr/include/c++/7/bits/basic_string.h ****       find_last_of(const basic_string& __str, size_type __pos = npos) const
5399:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5400:/usr/include/c++/7/bits/basic_string.h ****       { return this->find_last_of(__str.data(), __pos, __str.size()); }
5401:/usr/include/c++/7/bits/basic_string.h **** 
5402:/usr/include/c++/7/bits/basic_string.h ****       /**
5403:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character of C substring.
5404:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
5405:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
5406:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters from s to search for.
5407:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
5408:/usr/include/c++/7/bits/basic_string.h ****        *
5409:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
5410:/usr/include/c++/7/bits/basic_string.h ****        *  first @a __n characters of @a __s within this string.  If
5411:/usr/include/c++/7/bits/basic_string.h ****        *  found, returns the index where it was found.  If not found,
5412:/usr/include/c++/7/bits/basic_string.h ****        *  returns npos.
5413:/usr/include/c++/7/bits/basic_string.h ****       */
5414:/usr/include/c++/7/bits/basic_string.h ****       size_type
5415:/usr/include/c++/7/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
5416:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5417:/usr/include/c++/7/bits/basic_string.h **** 
5418:/usr/include/c++/7/bits/basic_string.h ****       /**
5419:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character of C string.
5420:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string containing characters to locate.
5421:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5422:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
5423:/usr/include/c++/7/bits/basic_string.h ****        *
5424:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for one of the
5425:/usr/include/c++/7/bits/basic_string.h ****        *  characters of @a __s within this string.  If found, returns
5426:/usr/include/c++/7/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
5427:/usr/include/c++/7/bits/basic_string.h ****       */
5428:/usr/include/c++/7/bits/basic_string.h ****       size_type
5429:/usr/include/c++/7/bits/basic_string.h ****       find_last_of(const _CharT* __s, size_type __pos = npos) const
5430:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5431:/usr/include/c++/7/bits/basic_string.h ****       {
5432:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5433:/usr/include/c++/7/bits/basic_string.h **** 	return this->find_last_of(__s, __pos, traits_type::length(__s));
5434:/usr/include/c++/7/bits/basic_string.h ****       }
5435:/usr/include/c++/7/bits/basic_string.h **** 
5436:/usr/include/c++/7/bits/basic_string.h ****       /**
5437:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character.
5438:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to locate.
5439:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5440:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
5441:/usr/include/c++/7/bits/basic_string.h ****        *
5442:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for @a __c within
5443:/usr/include/c++/7/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5444:/usr/include/c++/7/bits/basic_string.h ****        *  found.  If not found, returns npos.
5445:/usr/include/c++/7/bits/basic_string.h ****        *
5446:/usr/include/c++/7/bits/basic_string.h ****        *  Note: equivalent to rfind(__c, __pos).
5447:/usr/include/c++/7/bits/basic_string.h ****       */
5448:/usr/include/c++/7/bits/basic_string.h ****       size_type
5449:/usr/include/c++/7/bits/basic_string.h ****       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT
5450:/usr/include/c++/7/bits/basic_string.h ****       { return this->rfind(__c, __pos); }
5451:/usr/include/c++/7/bits/basic_string.h **** 
5452:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
5453:/usr/include/c++/7/bits/basic_string.h ****       /**
5454:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character of string.
5455:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5456:/usr/include/c++/7/bits/basic_string.h ****        *                characters to locate.
5457:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5458:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
5459:/usr/include/c++/7/bits/basic_string.h ****       */
5460:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
5461:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5462:/usr/include/c++/7/bits/basic_string.h **** 	find_last_of(const _Tp& __svt, size_type __pos = npos) const
5463:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5464:/usr/include/c++/7/bits/basic_string.h **** 	{
5465:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5466:/usr/include/c++/7/bits/basic_string.h **** 	  return this->find_last_of(__sv.data(), __pos, __sv.size());
5467:/usr/include/c++/7/bits/basic_string.h **** 	}
5468:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
5469:/usr/include/c++/7/bits/basic_string.h **** 
5470:/usr/include/c++/7/bits/basic_string.h ****       /**
5471:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character not in string.
5472:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
5473:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5474:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
5475:/usr/include/c++/7/bits/basic_string.h ****        *
5476:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not contained
5477:/usr/include/c++/7/bits/basic_string.h ****        *  in @a __str within this string.  If found, returns the index where it
5478:/usr/include/c++/7/bits/basic_string.h ****        *  was found.  If not found, returns npos.
5479:/usr/include/c++/7/bits/basic_string.h ****       */
5480:/usr/include/c++/7/bits/basic_string.h ****       size_type
5481:/usr/include/c++/7/bits/basic_string.h ****       find_first_not_of(const basic_string& __str, size_type __pos = 0) const
5482:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5483:/usr/include/c++/7/bits/basic_string.h ****       { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
5484:/usr/include/c++/7/bits/basic_string.h **** 
5485:/usr/include/c++/7/bits/basic_string.h ****       /**
5486:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character not in C substring.
5487:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5488:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from.
5489:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters from __s to consider.
5490:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
5491:/usr/include/c++/7/bits/basic_string.h ****        *
5492:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
5493:/usr/include/c++/7/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within
5494:/usr/include/c++/7/bits/basic_string.h ****        *  this string.  If found, returns the index where it was
5495:/usr/include/c++/7/bits/basic_string.h ****        *  found.  If not found, returns npos.
5496:/usr/include/c++/7/bits/basic_string.h ****       */
5497:/usr/include/c++/7/bits/basic_string.h ****       size_type
5498:/usr/include/c++/7/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos,
5499:/usr/include/c++/7/bits/basic_string.h **** 			size_type __n) const _GLIBCXX_NOEXCEPT;
5500:/usr/include/c++/7/bits/basic_string.h **** 
5501:/usr/include/c++/7/bits/basic_string.h ****       /**
5502:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character not in C string.
5503:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5504:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5505:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
5506:/usr/include/c++/7/bits/basic_string.h ****        *
5507:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character not
5508:/usr/include/c++/7/bits/basic_string.h ****        *  contained in @a __s within this string.  If found, returns
5509:/usr/include/c++/7/bits/basic_string.h ****        *  the index where it was found.  If not found, returns npos.
5510:/usr/include/c++/7/bits/basic_string.h ****       */
5511:/usr/include/c++/7/bits/basic_string.h ****       size_type
5512:/usr/include/c++/7/bits/basic_string.h ****       find_first_not_of(const _CharT* __s, size_type __pos = 0) const
5513:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5514:/usr/include/c++/7/bits/basic_string.h ****       {
5515:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5516:/usr/include/c++/7/bits/basic_string.h **** 	return this->find_first_not_of(__s, __pos, traits_type::length(__s));
5517:/usr/include/c++/7/bits/basic_string.h ****       }
5518:/usr/include/c++/7/bits/basic_string.h **** 
5519:/usr/include/c++/7/bits/basic_string.h ****       /**
5520:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a different character.
5521:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to avoid.
5522:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5523:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
5524:/usr/include/c++/7/bits/basic_string.h ****        *
5525:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches forward for a character
5526:/usr/include/c++/7/bits/basic_string.h ****        *  other than @a __c within this string.  If found, returns the
5527:/usr/include/c++/7/bits/basic_string.h ****        *  index where it was found.  If not found, returns npos.
5528:/usr/include/c++/7/bits/basic_string.h ****       */
5529:/usr/include/c++/7/bits/basic_string.h ****       size_type
5530:/usr/include/c++/7/bits/basic_string.h ****       find_first_not_of(_CharT __c, size_type __pos = 0) const
5531:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5532:/usr/include/c++/7/bits/basic_string.h **** 
5533:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
5534:/usr/include/c++/7/bits/basic_string.h ****       /**
5535:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find position of a character not in a string_view.
5536:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5537:/usr/include/c++/7/bits/basic_string.h ****        *                characters to avoid.
5538:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search from (default 0).
5539:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of first occurrence.
5540:/usr/include/c++/7/bits/basic_string.h ****        */
5541:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
5542:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5543:/usr/include/c++/7/bits/basic_string.h **** 	find_first_not_of(const _Tp& __svt, size_type __pos = 0) const
5544:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5545:/usr/include/c++/7/bits/basic_string.h **** 	{
5546:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5547:/usr/include/c++/7/bits/basic_string.h **** 	  return this->find_first_not_of(__sv.data(), __pos, __sv.size());
5548:/usr/include/c++/7/bits/basic_string.h **** 	}
5549:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
5550:/usr/include/c++/7/bits/basic_string.h **** 
5551:/usr/include/c++/7/bits/basic_string.h ****       /**
5552:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character not in string.
5553:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String containing characters to avoid.
5554:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5555:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
5556:/usr/include/c++/7/bits/basic_string.h ****        *
5557:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
5558:/usr/include/c++/7/bits/basic_string.h ****        *  not contained in @a __str within this string.  If found,
5559:/usr/include/c++/7/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5560:/usr/include/c++/7/bits/basic_string.h ****        *  npos.
5561:/usr/include/c++/7/bits/basic_string.h ****       */
5562:/usr/include/c++/7/bits/basic_string.h ****       size_type
5563:/usr/include/c++/7/bits/basic_string.h ****       find_last_not_of(const basic_string& __str, size_type __pos = npos) const
5564:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5565:/usr/include/c++/7/bits/basic_string.h ****       { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
5566:/usr/include/c++/7/bits/basic_string.h **** 
5567:/usr/include/c++/7/bits/basic_string.h ****       /**
5568:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character not in C substring.
5569:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5570:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from.
5571:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters from s to consider.
5572:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
5573:/usr/include/c++/7/bits/basic_string.h ****        *
5574:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character not
5575:/usr/include/c++/7/bits/basic_string.h ****        *  contained in the first @a __n characters of @a __s within this string.
5576:/usr/include/c++/7/bits/basic_string.h ****        *  If found, returns the index where it was found.  If not found,
5577:/usr/include/c++/7/bits/basic_string.h ****        *  returns npos.
5578:/usr/include/c++/7/bits/basic_string.h ****       */
5579:/usr/include/c++/7/bits/basic_string.h ****       size_type
5580:/usr/include/c++/7/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos,
5581:/usr/include/c++/7/bits/basic_string.h **** 		       size_type __n) const _GLIBCXX_NOEXCEPT;
5582:/usr/include/c++/7/bits/basic_string.h ****       /**
5583:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character not in C string.
5584:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string containing characters to avoid.
5585:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5586:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
5587:/usr/include/c++/7/bits/basic_string.h ****        *
5588:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character
5589:/usr/include/c++/7/bits/basic_string.h ****        *  not contained in @a __s within this string.  If found,
5590:/usr/include/c++/7/bits/basic_string.h ****        *  returns the index where it was found.  If not found, returns
5591:/usr/include/c++/7/bits/basic_string.h ****        *  npos.
5592:/usr/include/c++/7/bits/basic_string.h ****       */
5593:/usr/include/c++/7/bits/basic_string.h ****       size_type
5594:/usr/include/c++/7/bits/basic_string.h ****       find_last_not_of(const _CharT* __s, size_type __pos = npos) const
5595:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
5596:/usr/include/c++/7/bits/basic_string.h ****       {
5597:/usr/include/c++/7/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
5598:/usr/include/c++/7/bits/basic_string.h **** 	return this->find_last_not_of(__s, __pos, traits_type::length(__s));
5599:/usr/include/c++/7/bits/basic_string.h ****       }
5600:/usr/include/c++/7/bits/basic_string.h **** 
5601:/usr/include/c++/7/bits/basic_string.h ****       /**
5602:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a different character.
5603:/usr/include/c++/7/bits/basic_string.h ****        *  @param __c  Character to avoid.
5604:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5605:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
5606:/usr/include/c++/7/bits/basic_string.h ****        *
5607:/usr/include/c++/7/bits/basic_string.h ****        *  Starting from @a __pos, searches backward for a character other than
5608:/usr/include/c++/7/bits/basic_string.h ****        *  @a __c within this string.  If found, returns the index where it was
5609:/usr/include/c++/7/bits/basic_string.h ****        *  found.  If not found, returns npos.
5610:/usr/include/c++/7/bits/basic_string.h ****       */
5611:/usr/include/c++/7/bits/basic_string.h ****       size_type
5612:/usr/include/c++/7/bits/basic_string.h ****       find_last_not_of(_CharT __c, size_type __pos = npos) const
5613:/usr/include/c++/7/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT;
5614:/usr/include/c++/7/bits/basic_string.h **** 
5615:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
5616:/usr/include/c++/7/bits/basic_string.h ****       /**
5617:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Find last position of a character not in a string_view.
5618:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view containing
5619:/usr/include/c++/7/bits/basic_string.h ****        *                characters to avoid.
5620:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of character to search back from (default end).
5621:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Index of last occurrence.
5622:/usr/include/c++/7/bits/basic_string.h ****        */
5623:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
5624:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, size_type>
5625:/usr/include/c++/7/bits/basic_string.h **** 	find_last_not_of(const _Tp& __svt, size_type __pos = npos) const
5626:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5627:/usr/include/c++/7/bits/basic_string.h **** 	{
5628:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5629:/usr/include/c++/7/bits/basic_string.h **** 	  return this->find_last_not_of(__sv.data(), __pos, __sv.size());
5630:/usr/include/c++/7/bits/basic_string.h **** 	}
5631:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
5632:/usr/include/c++/7/bits/basic_string.h **** 
5633:/usr/include/c++/7/bits/basic_string.h ****       /**
5634:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Get a substring.
5635:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character (default 0).
5636:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters in substring (default remainder).
5637:/usr/include/c++/7/bits/basic_string.h ****        *  @return  The new string.
5638:/usr/include/c++/7/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
5639:/usr/include/c++/7/bits/basic_string.h ****        *
5640:/usr/include/c++/7/bits/basic_string.h ****        *  Construct and return a new string using the @a __n
5641:/usr/include/c++/7/bits/basic_string.h ****        *  characters starting at @a __pos.  If the string is too
5642:/usr/include/c++/7/bits/basic_string.h ****        *  short, use the remainder of the characters.  If @a __pos is
5643:/usr/include/c++/7/bits/basic_string.h ****        *  beyond the end of the string, out_of_range is thrown.
5644:/usr/include/c++/7/bits/basic_string.h ****       */
5645:/usr/include/c++/7/bits/basic_string.h ****       basic_string
5646:/usr/include/c++/7/bits/basic_string.h ****       substr(size_type __pos = 0, size_type __n = npos) const
5647:/usr/include/c++/7/bits/basic_string.h ****       { return basic_string(*this,
5648:/usr/include/c++/7/bits/basic_string.h **** 			    _M_check(__pos, "basic_string::substr"), __n); }
5649:/usr/include/c++/7/bits/basic_string.h **** 
5650:/usr/include/c++/7/bits/basic_string.h ****       /**
5651:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare to a string.
5652:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String to compare against.
5653:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5654:/usr/include/c++/7/bits/basic_string.h ****        *
5655:/usr/include/c++/7/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a
5656:/usr/include/c++/7/bits/basic_string.h ****        *  __str, 0 if their values are equivalent, or > 0 if this
5657:/usr/include/c++/7/bits/basic_string.h ****        *  string is ordered after @a __str.  Determines the effective
5658:/usr/include/c++/7/bits/basic_string.h ****        *  length rlen of the strings to compare as the smallest of
5659:/usr/include/c++/7/bits/basic_string.h ****        *  size() and str.size().  The function then compares the two
5660:/usr/include/c++/7/bits/basic_string.h ****        *  strings by calling traits::compare(data(), str.data(),rlen).
5661:/usr/include/c++/7/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
5662:/usr/include/c++/7/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
5663:/usr/include/c++/7/bits/basic_string.h ****       */
5664:/usr/include/c++/7/bits/basic_string.h ****       int
5665:/usr/include/c++/7/bits/basic_string.h ****       compare(const basic_string& __str) const
5666:/usr/include/c++/7/bits/basic_string.h ****       {
5667:/usr/include/c++/7/bits/basic_string.h **** 	const size_type __size = this->size();
5668:/usr/include/c++/7/bits/basic_string.h **** 	const size_type __osize = __str.size();
5669:/usr/include/c++/7/bits/basic_string.h **** 	const size_type __len = std::min(__size, __osize);
5670:/usr/include/c++/7/bits/basic_string.h **** 
5671:/usr/include/c++/7/bits/basic_string.h **** 	int __r = traits_type::compare(_M_data(), __str.data(), __len);
5672:/usr/include/c++/7/bits/basic_string.h **** 	if (!__r)
5673:/usr/include/c++/7/bits/basic_string.h **** 	  __r = _S_compare(__size, __osize);
5674:/usr/include/c++/7/bits/basic_string.h **** 	return __r;
5675:/usr/include/c++/7/bits/basic_string.h ****       }
5676:/usr/include/c++/7/bits/basic_string.h **** 
5677:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus > 201402L
5678:/usr/include/c++/7/bits/basic_string.h ****       /**
5679:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare to a string_view.
5680:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt An object convertible to string_view to compare against.
5681:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5682:/usr/include/c++/7/bits/basic_string.h ****        */
5683:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
5684:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, int>
5685:/usr/include/c++/7/bits/basic_string.h **** 	compare(const _Tp& __svt) const
5686:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5687:/usr/include/c++/7/bits/basic_string.h **** 	{
5688:/usr/include/c++/7/bits/basic_string.h **** 	   __sv_type __sv = __svt;
5689:/usr/include/c++/7/bits/basic_string.h **** 	  const size_type __size = this->size();
5690:/usr/include/c++/7/bits/basic_string.h **** 	  const size_type __osize = __sv.size();
5691:/usr/include/c++/7/bits/basic_string.h **** 	  const size_type __len = std::min(__size, __osize);
5692:/usr/include/c++/7/bits/basic_string.h **** 
5693:/usr/include/c++/7/bits/basic_string.h **** 	  int __r = traits_type::compare(_M_data(), __sv.data(), __len);
5694:/usr/include/c++/7/bits/basic_string.h **** 	  if (!__r)
5695:/usr/include/c++/7/bits/basic_string.h **** 	    __r = _S_compare(__size, __osize);
5696:/usr/include/c++/7/bits/basic_string.h **** 	  return __r;
5697:/usr/include/c++/7/bits/basic_string.h **** 	}
5698:/usr/include/c++/7/bits/basic_string.h **** 
5699:/usr/include/c++/7/bits/basic_string.h ****       /**
5700:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare to a string_view.
5701:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  A position in the string to start comparing from.
5702:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  The number of characters to compare.
5703:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to compare
5704:/usr/include/c++/7/bits/basic_string.h ****        *                against.
5705:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5706:/usr/include/c++/7/bits/basic_string.h ****        */
5707:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
5708:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, int>
5709:/usr/include/c++/7/bits/basic_string.h **** 	compare(size_type __pos, size_type __n, const _Tp& __svt) const
5710:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5711:/usr/include/c++/7/bits/basic_string.h **** 	{
5712:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5713:/usr/include/c++/7/bits/basic_string.h **** 	  return __sv_type(*this).substr(__pos, __n).compare(__sv);
5714:/usr/include/c++/7/bits/basic_string.h **** 	}
5715:/usr/include/c++/7/bits/basic_string.h **** 
5716:/usr/include/c++/7/bits/basic_string.h ****       /**
5717:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare to a string_view.
5718:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos1  A position in the string to start comparing from.
5719:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1  The number of characters to compare.
5720:/usr/include/c++/7/bits/basic_string.h ****        *  @param __svt   An object convertible to string_view to compare
5721:/usr/include/c++/7/bits/basic_string.h ****        *                 against.
5722:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos2  A position in the string_view to start comparing from.
5723:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n2  The number of characters to compare.
5724:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5725:/usr/include/c++/7/bits/basic_string.h ****        */
5726:/usr/include/c++/7/bits/basic_string.h ****       template<typename _Tp>
5727:/usr/include/c++/7/bits/basic_string.h **** 	_If_sv<_Tp, int>
5728:/usr/include/c++/7/bits/basic_string.h **** 	compare(size_type __pos1, size_type __n1, const _Tp& __svt,
5729:/usr/include/c++/7/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos) const
5730:/usr/include/c++/7/bits/basic_string.h **** 	noexcept(is_same<_Tp, __sv_type>::value)
5731:/usr/include/c++/7/bits/basic_string.h **** 	{
5732:/usr/include/c++/7/bits/basic_string.h **** 	  __sv_type __sv = __svt;
5733:/usr/include/c++/7/bits/basic_string.h **** 	  return __sv_type(*this)
5734:/usr/include/c++/7/bits/basic_string.h **** 	    .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
5735:/usr/include/c++/7/bits/basic_string.h **** 	}
5736:/usr/include/c++/7/bits/basic_string.h **** #endif // C++17
5737:/usr/include/c++/7/bits/basic_string.h **** 
5738:/usr/include/c++/7/bits/basic_string.h ****       /**
5739:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare substring to a string.
5740:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
5741:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n  Number of characters in substring.
5742:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String to compare against.
5743:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5744:/usr/include/c++/7/bits/basic_string.h ****        *
5745:/usr/include/c++/7/bits/basic_string.h ****        *  Form the substring of this string from the @a __n characters
5746:/usr/include/c++/7/bits/basic_string.h ****        *  starting at @a __pos.  Returns an integer < 0 if the
5747:/usr/include/c++/7/bits/basic_string.h ****        *  substring is ordered before @a __str, 0 if their values are
5748:/usr/include/c++/7/bits/basic_string.h ****        *  equivalent, or > 0 if the substring is ordered after @a
5749:/usr/include/c++/7/bits/basic_string.h ****        *  __str.  Determines the effective length rlen of the strings
5750:/usr/include/c++/7/bits/basic_string.h ****        *  to compare as the smallest of the length of the substring
5751:/usr/include/c++/7/bits/basic_string.h ****        *  and @a __str.size().  The function then compares the two
5752:/usr/include/c++/7/bits/basic_string.h ****        *  strings by calling
5753:/usr/include/c++/7/bits/basic_string.h ****        *  traits::compare(substring.data(),str.data(),rlen).  If the
5754:/usr/include/c++/7/bits/basic_string.h ****        *  result of the comparison is nonzero returns it, otherwise
5755:/usr/include/c++/7/bits/basic_string.h ****        *  the shorter one is ordered first.
5756:/usr/include/c++/7/bits/basic_string.h ****       */
5757:/usr/include/c++/7/bits/basic_string.h ****       int
5758:/usr/include/c++/7/bits/basic_string.h ****       compare(size_type __pos, size_type __n, const basic_string& __str) const;
5759:/usr/include/c++/7/bits/basic_string.h **** 
5760:/usr/include/c++/7/bits/basic_string.h ****       /**
5761:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare substring to a substring.
5762:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos1  Index of first character of substring.
5763:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
5764:/usr/include/c++/7/bits/basic_string.h ****        *  @param __str  String to compare against.
5765:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos2  Index of first character of substring of str.
5766:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n2  Number of characters in substring of str.
5767:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5768:/usr/include/c++/7/bits/basic_string.h ****        *
5769:/usr/include/c++/7/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
5770:/usr/include/c++/7/bits/basic_string.h ****        *  characters starting at @a __pos1.  Form the substring of @a
5771:/usr/include/c++/7/bits/basic_string.h ****        *  __str from the @a __n2 characters starting at @a __pos2.
5772:/usr/include/c++/7/bits/basic_string.h ****        *  Returns an integer < 0 if this substring is ordered before
5773:/usr/include/c++/7/bits/basic_string.h ****        *  the substring of @a __str, 0 if their values are equivalent,
5774:/usr/include/c++/7/bits/basic_string.h ****        *  or > 0 if this substring is ordered after the substring of
5775:/usr/include/c++/7/bits/basic_string.h ****        *  @a __str.  Determines the effective length rlen of the
5776:/usr/include/c++/7/bits/basic_string.h ****        *  strings to compare as the smallest of the lengths of the
5777:/usr/include/c++/7/bits/basic_string.h ****        *  substrings.  The function then compares the two strings by
5778:/usr/include/c++/7/bits/basic_string.h ****        *  calling
5779:/usr/include/c++/7/bits/basic_string.h ****        *  traits::compare(substring.data(),str.substr(pos2,n2).data(),rlen).
5780:/usr/include/c++/7/bits/basic_string.h ****        *  If the result of the comparison is nonzero returns it,
5781:/usr/include/c++/7/bits/basic_string.h ****        *  otherwise the shorter one is ordered first.
5782:/usr/include/c++/7/bits/basic_string.h ****       */
5783:/usr/include/c++/7/bits/basic_string.h ****       int
5784:/usr/include/c++/7/bits/basic_string.h ****       compare(size_type __pos1, size_type __n1, const basic_string& __str,
5785:/usr/include/c++/7/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos) const;
5786:/usr/include/c++/7/bits/basic_string.h **** 
5787:/usr/include/c++/7/bits/basic_string.h ****       /**
5788:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare to a C string.
5789:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to compare against.
5790:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5791:/usr/include/c++/7/bits/basic_string.h ****        *
5792:/usr/include/c++/7/bits/basic_string.h ****        *  Returns an integer < 0 if this string is ordered before @a __s, 0 if
5793:/usr/include/c++/7/bits/basic_string.h ****        *  their values are equivalent, or > 0 if this string is ordered after
5794:/usr/include/c++/7/bits/basic_string.h ****        *  @a __s.  Determines the effective length rlen of the strings to
5795:/usr/include/c++/7/bits/basic_string.h ****        *  compare as the smallest of size() and the length of a string
5796:/usr/include/c++/7/bits/basic_string.h ****        *  constructed from @a __s.  The function then compares the two strings
5797:/usr/include/c++/7/bits/basic_string.h ****        *  by calling traits::compare(data(),s,rlen).  If the result of the
5798:/usr/include/c++/7/bits/basic_string.h ****        *  comparison is nonzero returns it, otherwise the shorter one is
5799:/usr/include/c++/7/bits/basic_string.h ****        *  ordered first.
5800:/usr/include/c++/7/bits/basic_string.h ****       */
5801:/usr/include/c++/7/bits/basic_string.h ****       int
5802:/usr/include/c++/7/bits/basic_string.h ****       compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;
5803:/usr/include/c++/7/bits/basic_string.h **** 
5804:/usr/include/c++/7/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
5805:/usr/include/c++/7/bits/basic_string.h ****       // 5 String::compare specification questionable
5806:/usr/include/c++/7/bits/basic_string.h ****       /**
5807:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare substring to a C string.
5808:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
5809:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
5810:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  C string to compare against.
5811:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5812:/usr/include/c++/7/bits/basic_string.h ****        *
5813:/usr/include/c++/7/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
5814:/usr/include/c++/7/bits/basic_string.h ****        *  characters starting at @a pos.  Returns an integer < 0 if
5815:/usr/include/c++/7/bits/basic_string.h ****        *  the substring is ordered before @a __s, 0 if their values
5816:/usr/include/c++/7/bits/basic_string.h ****        *  are equivalent, or > 0 if the substring is ordered after @a
5817:/usr/include/c++/7/bits/basic_string.h ****        *  __s.  Determines the effective length rlen of the strings to
5818:/usr/include/c++/7/bits/basic_string.h ****        *  compare as the smallest of the length of the substring and
5819:/usr/include/c++/7/bits/basic_string.h ****        *  the length of a string constructed from @a __s.  The
5820:/usr/include/c++/7/bits/basic_string.h ****        *  function then compares the two string by calling
5821:/usr/include/c++/7/bits/basic_string.h ****        *  traits::compare(substring.data(),__s,rlen).  If the result of
5822:/usr/include/c++/7/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
5823:/usr/include/c++/7/bits/basic_string.h ****        *  one is ordered first.
5824:/usr/include/c++/7/bits/basic_string.h ****       */
5825:/usr/include/c++/7/bits/basic_string.h ****       int
5826:/usr/include/c++/7/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s) const;
5827:/usr/include/c++/7/bits/basic_string.h **** 
5828:/usr/include/c++/7/bits/basic_string.h ****       /**
5829:/usr/include/c++/7/bits/basic_string.h ****        *  @brief  Compare substring against a character %array.
5830:/usr/include/c++/7/bits/basic_string.h ****        *  @param __pos  Index of first character of substring.
5831:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n1  Number of characters in substring.
5832:/usr/include/c++/7/bits/basic_string.h ****        *  @param __s  character %array to compare against.
5833:/usr/include/c++/7/bits/basic_string.h ****        *  @param __n2  Number of characters of s.
5834:/usr/include/c++/7/bits/basic_string.h ****        *  @return  Integer < 0, 0, or > 0.
5835:/usr/include/c++/7/bits/basic_string.h ****        *
5836:/usr/include/c++/7/bits/basic_string.h ****        *  Form the substring of this string from the @a __n1
5837:/usr/include/c++/7/bits/basic_string.h ****        *  characters starting at @a __pos.  Form a string from the
5838:/usr/include/c++/7/bits/basic_string.h ****        *  first @a __n2 characters of @a __s.  Returns an integer < 0
5839:/usr/include/c++/7/bits/basic_string.h ****        *  if this substring is ordered before the string from @a __s,
5840:/usr/include/c++/7/bits/basic_string.h ****        *  0 if their values are equivalent, or > 0 if this substring
5841:/usr/include/c++/7/bits/basic_string.h ****        *  is ordered after the string from @a __s.  Determines the
5842:/usr/include/c++/7/bits/basic_string.h ****        *  effective length rlen of the strings to compare as the
5843:/usr/include/c++/7/bits/basic_string.h ****        *  smallest of the length of the substring and @a __n2.  The
5844:/usr/include/c++/7/bits/basic_string.h ****        *  function then compares the two strings by calling
5845:/usr/include/c++/7/bits/basic_string.h ****        *  traits::compare(substring.data(),s,rlen).  If the result of
5846:/usr/include/c++/7/bits/basic_string.h ****        *  the comparison is nonzero returns it, otherwise the shorter
5847:/usr/include/c++/7/bits/basic_string.h ****        *  one is ordered first.
5848:/usr/include/c++/7/bits/basic_string.h ****        *
5849:/usr/include/c++/7/bits/basic_string.h ****        *  NB: s must have at least n2 characters, &apos;\\0&apos; has
5850:/usr/include/c++/7/bits/basic_string.h ****        *  no special meaning.
5851:/usr/include/c++/7/bits/basic_string.h ****       */
5852:/usr/include/c++/7/bits/basic_string.h ****       int
5853:/usr/include/c++/7/bits/basic_string.h ****       compare(size_type __pos, size_type __n1, const _CharT* __s,
5854:/usr/include/c++/7/bits/basic_string.h **** 	      size_type __n2) const;
5855:/usr/include/c++/7/bits/basic_string.h **** 
5856:/usr/include/c++/7/bits/basic_string.h **** # ifdef _GLIBCXX_TM_TS_INTERNAL
5857:/usr/include/c++/7/bits/basic_string.h ****       friend void
5858:/usr/include/c++/7/bits/basic_string.h ****       ::_txnal_cow_string_C1_for_exceptions(void* that, const char* s,
5859:/usr/include/c++/7/bits/basic_string.h **** 					    void* exc);
5860:/usr/include/c++/7/bits/basic_string.h ****       friend const char*
5861:/usr/include/c++/7/bits/basic_string.h ****       ::_txnal_cow_string_c_str(const void *that);
5862:/usr/include/c++/7/bits/basic_string.h ****       friend void
5863:/usr/include/c++/7/bits/basic_string.h ****       ::_txnal_cow_string_D1(void *that);
5864:/usr/include/c++/7/bits/basic_string.h ****       friend void
5865:/usr/include/c++/7/bits/basic_string.h ****       ::_txnal_cow_string_D1_commit(void *that);
5866:/usr/include/c++/7/bits/basic_string.h **** # endif
5867:/usr/include/c++/7/bits/basic_string.h ****   };
5868:/usr/include/c++/7/bits/basic_string.h **** #endif  // !_GLIBCXX_USE_CXX11_ABI
5869:/usr/include/c++/7/bits/basic_string.h **** 
5870:/usr/include/c++/7/bits/basic_string.h ****   // operator+
5871:/usr/include/c++/7/bits/basic_string.h ****   /**
5872:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Concatenate two strings.
5873:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  First string.
5874:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  Last string.
5875:/usr/include/c++/7/bits/basic_string.h ****    *  @return  New string with value of @a __lhs followed by @a __rhs.
5876:/usr/include/c++/7/bits/basic_string.h ****    */
5877:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5878:/usr/include/c++/7/bits/basic_string.h ****     basic_string<_CharT, _Traits, _Alloc>
5879:/usr/include/c++/7/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5880:/usr/include/c++/7/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5881:/usr/include/c++/7/bits/basic_string.h ****     {
5882:/usr/include/c++/7/bits/basic_string.h ****       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
5883:/usr/include/c++/7/bits/basic_string.h ****       __str.append(__rhs);
5884:/usr/include/c++/7/bits/basic_string.h ****       return __str;
5885:/usr/include/c++/7/bits/basic_string.h ****     }
5886:/usr/include/c++/7/bits/basic_string.h **** 
5887:/usr/include/c++/7/bits/basic_string.h ****   /**
5888:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Concatenate C string and string.
5889:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  First string.
5890:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  Last string.
5891:/usr/include/c++/7/bits/basic_string.h ****    *  @return  New string with value of @a __lhs followed by @a __rhs.
5892:/usr/include/c++/7/bits/basic_string.h ****    */
5893:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5894:/usr/include/c++/7/bits/basic_string.h ****     basic_string<_CharT,_Traits,_Alloc>
5895:/usr/include/c++/7/bits/basic_string.h ****     operator+(const _CharT* __lhs,
5896:/usr/include/c++/7/bits/basic_string.h **** 	      const basic_string<_CharT,_Traits,_Alloc>& __rhs);
5897:/usr/include/c++/7/bits/basic_string.h **** 
5898:/usr/include/c++/7/bits/basic_string.h ****   /**
5899:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Concatenate character and string.
5900:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  First string.
5901:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  Last string.
5902:/usr/include/c++/7/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
5903:/usr/include/c++/7/bits/basic_string.h ****    */
5904:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5905:/usr/include/c++/7/bits/basic_string.h ****     basic_string<_CharT,_Traits,_Alloc>
5906:/usr/include/c++/7/bits/basic_string.h ****     operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);
5907:/usr/include/c++/7/bits/basic_string.h **** 
5908:/usr/include/c++/7/bits/basic_string.h ****   /**
5909:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Concatenate string and C string.
5910:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  First string.
5911:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  Last string.
5912:/usr/include/c++/7/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
5913:/usr/include/c++/7/bits/basic_string.h ****    */
5914:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5915:/usr/include/c++/7/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5916:/usr/include/c++/7/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5917:/usr/include/c++/7/bits/basic_string.h **** 	      const _CharT* __rhs)
5918:/usr/include/c++/7/bits/basic_string.h ****     {
5919:/usr/include/c++/7/bits/basic_string.h ****       basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
5920:/usr/include/c++/7/bits/basic_string.h ****       __str.append(__rhs);
5921:/usr/include/c++/7/bits/basic_string.h ****       return __str;
5922:/usr/include/c++/7/bits/basic_string.h ****     }
5923:/usr/include/c++/7/bits/basic_string.h **** 
5924:/usr/include/c++/7/bits/basic_string.h ****   /**
5925:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Concatenate string and character.
5926:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  First string.
5927:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  Last string.
5928:/usr/include/c++/7/bits/basic_string.h ****    *  @return  New string with @a __lhs followed by @a __rhs.
5929:/usr/include/c++/7/bits/basic_string.h ****    */
5930:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5931:/usr/include/c++/7/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5932:/usr/include/c++/7/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
5933:/usr/include/c++/7/bits/basic_string.h ****     {
5934:/usr/include/c++/7/bits/basic_string.h ****       typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
5935:/usr/include/c++/7/bits/basic_string.h ****       typedef typename __string_type::size_type		__size_type;
5936:/usr/include/c++/7/bits/basic_string.h ****       __string_type __str(__lhs);
5937:/usr/include/c++/7/bits/basic_string.h ****       __str.append(__size_type(1), __rhs);
5938:/usr/include/c++/7/bits/basic_string.h ****       return __str;
5939:/usr/include/c++/7/bits/basic_string.h ****     }
5940:/usr/include/c++/7/bits/basic_string.h **** 
5941:/usr/include/c++/7/bits/basic_string.h **** #if __cplusplus >= 201103L
5942:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5943:/usr/include/c++/7/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5944:/usr/include/c++/7/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
5945:/usr/include/c++/7/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
5946:/usr/include/c++/7/bits/basic_string.h ****     { return std::move(__lhs.append(__rhs)); }
5947:/usr/include/c++/7/bits/basic_string.h **** 
5948:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5949:/usr/include/c++/7/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5950:/usr/include/c++/7/bits/basic_string.h ****     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
5951:/usr/include/c++/7/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
5952:/usr/include/c++/7/bits/basic_string.h ****     { return std::move(__rhs.insert(0, __lhs)); }
5953:/usr/include/c++/7/bits/basic_string.h **** 
5954:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5955:/usr/include/c++/7/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5956:/usr/include/c++/7/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
5957:/usr/include/c++/7/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
5958:/usr/include/c++/7/bits/basic_string.h ****     {
5959:/usr/include/c++/7/bits/basic_string.h ****       const auto __size = __lhs.size() + __rhs.size();
5960:/usr/include/c++/7/bits/basic_string.h ****       const bool __cond = (__size > __lhs.capacity()
5961:/usr/include/c++/7/bits/basic_string.h **** 			   && __size <= __rhs.capacity());
5962:/usr/include/c++/7/bits/basic_string.h ****       return __cond ? std::move(__rhs.insert(0, __lhs))
5963:/usr/include/c++/7/bits/basic_string.h **** 	            : std::move(__lhs.append(__rhs));
5964:/usr/include/c++/7/bits/basic_string.h ****     }
5965:/usr/include/c++/7/bits/basic_string.h **** 
5966:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5967:/usr/include/c++/7/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5968:/usr/include/c++/7/bits/basic_string.h ****     operator+(const _CharT* __lhs,
5969:/usr/include/c++/7/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
5970:/usr/include/c++/7/bits/basic_string.h ****     { return std::move(__rhs.insert(0, __lhs)); }
5971:/usr/include/c++/7/bits/basic_string.h **** 
5972:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5973:/usr/include/c++/7/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5974:/usr/include/c++/7/bits/basic_string.h ****     operator+(_CharT __lhs,
5975:/usr/include/c++/7/bits/basic_string.h **** 	      basic_string<_CharT, _Traits, _Alloc>&& __rhs)
5976:/usr/include/c++/7/bits/basic_string.h ****     { return std::move(__rhs.insert(0, 1, __lhs)); }
5977:/usr/include/c++/7/bits/basic_string.h **** 
5978:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5979:/usr/include/c++/7/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5980:/usr/include/c++/7/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
5981:/usr/include/c++/7/bits/basic_string.h **** 	      const _CharT* __rhs)
5982:/usr/include/c++/7/bits/basic_string.h ****     { return std::move(__lhs.append(__rhs)); }
5983:/usr/include/c++/7/bits/basic_string.h **** 
5984:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5985:/usr/include/c++/7/bits/basic_string.h ****     inline basic_string<_CharT, _Traits, _Alloc>
5986:/usr/include/c++/7/bits/basic_string.h ****     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
5987:/usr/include/c++/7/bits/basic_string.h **** 	      _CharT __rhs)
5988:/usr/include/c++/7/bits/basic_string.h ****     { return std::move(__lhs.append(1, __rhs)); }
5989:/usr/include/c++/7/bits/basic_string.h **** #endif
5990:/usr/include/c++/7/bits/basic_string.h **** 
5991:/usr/include/c++/7/bits/basic_string.h ****   // operator ==
5992:/usr/include/c++/7/bits/basic_string.h ****   /**
5993:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test equivalence of two strings.
5994:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  First string.
5995:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  Second string.
5996:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
5997:/usr/include/c++/7/bits/basic_string.h ****    */
5998:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
5999:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6000:/usr/include/c++/7/bits/basic_string.h ****     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6001:/usr/include/c++/7/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6002:/usr/include/c++/7/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6003:/usr/include/c++/7/bits/basic_string.h ****     { return __lhs.compare(__rhs) == 0; }
6004:/usr/include/c++/7/bits/basic_string.h **** 
6005:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT>
6006:/usr/include/c++/7/bits/basic_string.h ****     inline
6007:/usr/include/c++/7/bits/basic_string.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
6008:/usr/include/c++/7/bits/basic_string.h ****     operator==(const basic_string<_CharT>& __lhs,
6009:/usr/include/c++/7/bits/basic_string.h **** 	       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT
6010:/usr/include/c++/7/bits/basic_string.h ****     { return (__lhs.size() == __rhs.size()
6011:/usr/include/c++/7/bits/basic_string.h **** 	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
6012:/usr/include/c++/7/bits/basic_string.h **** 						    __lhs.size())); }
6013:/usr/include/c++/7/bits/basic_string.h **** 
6014:/usr/include/c++/7/bits/basic_string.h ****   /**
6015:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test equivalence of C string and string.
6016:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  C string.
6017:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  String.
6018:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __rhs.compare(@a __lhs) == 0.  False otherwise.
6019:/usr/include/c++/7/bits/basic_string.h ****    */
6020:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6021:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6022:/usr/include/c++/7/bits/basic_string.h ****     operator==(const _CharT* __lhs,
6023:/usr/include/c++/7/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6024:/usr/include/c++/7/bits/basic_string.h ****     { return __rhs.compare(__lhs) == 0; }
6025:/usr/include/c++/7/bits/basic_string.h **** 
6026:/usr/include/c++/7/bits/basic_string.h ****   /**
6027:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test equivalence of string and C string.
6028:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  String.
6029:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  C string.
6030:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
6031:/usr/include/c++/7/bits/basic_string.h ****    */
6032:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6033:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6034:/usr/include/c++/7/bits/basic_string.h ****     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6035:/usr/include/c++/7/bits/basic_string.h **** 	       const _CharT* __rhs)
6036:/usr/include/c++/7/bits/basic_string.h ****     { return __lhs.compare(__rhs) == 0; }
6037:/usr/include/c++/7/bits/basic_string.h **** 
6038:/usr/include/c++/7/bits/basic_string.h ****   // operator !=
6039:/usr/include/c++/7/bits/basic_string.h ****   /**
6040:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test difference of two strings.
6041:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  First string.
6042:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  Second string.
6043:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.
6044:/usr/include/c++/7/bits/basic_string.h ****    */
6045:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6046:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6047:/usr/include/c++/7/bits/basic_string.h ****     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6048:/usr/include/c++/7/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6049:/usr/include/c++/7/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6050:/usr/include/c++/7/bits/basic_string.h ****     { return !(__lhs == __rhs); }
6051:/usr/include/c++/7/bits/basic_string.h **** 
6052:/usr/include/c++/7/bits/basic_string.h ****   /**
6053:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test difference of C string and string.
6054:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  C string.
6055:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  String.
6056:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __rhs.compare(@a __lhs) != 0.  False otherwise.
6057:/usr/include/c++/7/bits/basic_string.h ****    */
6058:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6059:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6060:/usr/include/c++/7/bits/basic_string.h ****     operator!=(const _CharT* __lhs,
6061:/usr/include/c++/7/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6062:/usr/include/c++/7/bits/basic_string.h ****     { return !(__lhs == __rhs); }
6063:/usr/include/c++/7/bits/basic_string.h **** 
6064:/usr/include/c++/7/bits/basic_string.h ****   /**
6065:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test difference of string and C string.
6066:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  String.
6067:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  C string.
6068:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.
6069:/usr/include/c++/7/bits/basic_string.h ****    */
6070:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6071:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6072:/usr/include/c++/7/bits/basic_string.h ****     operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6073:/usr/include/c++/7/bits/basic_string.h **** 	       const _CharT* __rhs)
6074:/usr/include/c++/7/bits/basic_string.h ****     { return !(__lhs == __rhs); }
6075:/usr/include/c++/7/bits/basic_string.h **** 
6076:/usr/include/c++/7/bits/basic_string.h ****   // operator <
6077:/usr/include/c++/7/bits/basic_string.h ****   /**
6078:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test if string precedes string.
6079:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  First string.
6080:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  Second string.
6081:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
6082:/usr/include/c++/7/bits/basic_string.h ****    */
6083:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6084:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6085:/usr/include/c++/7/bits/basic_string.h ****     operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6086:/usr/include/c++/7/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6087:/usr/include/c++/7/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6088:/usr/include/c++/7/bits/basic_string.h ****     { return __lhs.compare(__rhs) < 0; }
6089:/usr/include/c++/7/bits/basic_string.h **** 
6090:/usr/include/c++/7/bits/basic_string.h ****   /**
6091:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test if string precedes C string.
6092:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  String.
6093:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  C string.
6094:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
6095:/usr/include/c++/7/bits/basic_string.h ****    */
6096:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6097:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6098:/usr/include/c++/7/bits/basic_string.h ****     operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6099:/usr/include/c++/7/bits/basic_string.h **** 	      const _CharT* __rhs)
6100:/usr/include/c++/7/bits/basic_string.h ****     { return __lhs.compare(__rhs) < 0; }
6101:/usr/include/c++/7/bits/basic_string.h **** 
6102:/usr/include/c++/7/bits/basic_string.h ****   /**
6103:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test if C string precedes string.
6104:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  C string.
6105:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  String.
6106:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
6107:/usr/include/c++/7/bits/basic_string.h ****    */
6108:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6109:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6110:/usr/include/c++/7/bits/basic_string.h ****     operator<(const _CharT* __lhs,
6111:/usr/include/c++/7/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6112:/usr/include/c++/7/bits/basic_string.h ****     { return __rhs.compare(__lhs) > 0; }
6113:/usr/include/c++/7/bits/basic_string.h **** 
6114:/usr/include/c++/7/bits/basic_string.h ****   // operator >
6115:/usr/include/c++/7/bits/basic_string.h ****   /**
6116:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test if string follows string.
6117:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  First string.
6118:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  Second string.
6119:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __lhs follows @a __rhs.  False otherwise.
6120:/usr/include/c++/7/bits/basic_string.h ****    */
6121:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6122:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6123:/usr/include/c++/7/bits/basic_string.h ****     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6124:/usr/include/c++/7/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6125:/usr/include/c++/7/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6126:/usr/include/c++/7/bits/basic_string.h ****     { return __lhs.compare(__rhs) > 0; }
6127:/usr/include/c++/7/bits/basic_string.h **** 
6128:/usr/include/c++/7/bits/basic_string.h ****   /**
6129:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test if string follows C string.
6130:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  String.
6131:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  C string.
6132:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __lhs follows @a __rhs.  False otherwise.
6133:/usr/include/c++/7/bits/basic_string.h ****    */
6134:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6135:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6136:/usr/include/c++/7/bits/basic_string.h ****     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6137:/usr/include/c++/7/bits/basic_string.h **** 	      const _CharT* __rhs)
6138:/usr/include/c++/7/bits/basic_string.h ****     { return __lhs.compare(__rhs) > 0; }
6139:/usr/include/c++/7/bits/basic_string.h **** 
6140:/usr/include/c++/7/bits/basic_string.h ****   /**
6141:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test if C string follows string.
6142:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  C string.
6143:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  String.
6144:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __lhs follows @a __rhs.  False otherwise.
6145:/usr/include/c++/7/bits/basic_string.h ****    */
6146:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6147:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6148:/usr/include/c++/7/bits/basic_string.h ****     operator>(const _CharT* __lhs,
6149:/usr/include/c++/7/bits/basic_string.h **** 	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6150:/usr/include/c++/7/bits/basic_string.h ****     { return __rhs.compare(__lhs) < 0; }
6151:/usr/include/c++/7/bits/basic_string.h **** 
6152:/usr/include/c++/7/bits/basic_string.h ****   // operator <=
6153:/usr/include/c++/7/bits/basic_string.h ****   /**
6154:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test if string doesn't follow string.
6155:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  First string.
6156:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  Second string.
6157:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.
6158:/usr/include/c++/7/bits/basic_string.h ****    */
6159:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6160:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6161:/usr/include/c++/7/bits/basic_string.h ****     operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6162:/usr/include/c++/7/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6163:/usr/include/c++/7/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6164:/usr/include/c++/7/bits/basic_string.h ****     { return __lhs.compare(__rhs) <= 0; }
6165:/usr/include/c++/7/bits/basic_string.h **** 
6166:/usr/include/c++/7/bits/basic_string.h ****   /**
6167:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test if string doesn't follow C string.
6168:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  String.
6169:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  C string.
6170:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.
6171:/usr/include/c++/7/bits/basic_string.h ****    */
6172:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6173:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6174:/usr/include/c++/7/bits/basic_string.h ****     operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6175:/usr/include/c++/7/bits/basic_string.h **** 	       const _CharT* __rhs)
6176:/usr/include/c++/7/bits/basic_string.h ****     { return __lhs.compare(__rhs) <= 0; }
6177:/usr/include/c++/7/bits/basic_string.h **** 
6178:/usr/include/c++/7/bits/basic_string.h ****   /**
6179:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test if C string doesn't follow string.
6180:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  C string.
6181:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  String.
6182:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't follow @a __rhs.  False otherwise.
6183:/usr/include/c++/7/bits/basic_string.h ****    */
6184:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6185:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6186:/usr/include/c++/7/bits/basic_string.h ****     operator<=(const _CharT* __lhs,
6187:/usr/include/c++/7/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6188:/usr/include/c++/7/bits/basic_string.h ****     { return __rhs.compare(__lhs) >= 0; }
6189:/usr/include/c++/7/bits/basic_string.h **** 
6190:/usr/include/c++/7/bits/basic_string.h ****   // operator >=
6191:/usr/include/c++/7/bits/basic_string.h ****   /**
6192:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test if string doesn't precede string.
6193:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  First string.
6194:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  Second string.
6195:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.
6196:/usr/include/c++/7/bits/basic_string.h ****    */
6197:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6198:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6199:/usr/include/c++/7/bits/basic_string.h ****     operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6200:/usr/include/c++/7/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6201:/usr/include/c++/7/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT
6202:/usr/include/c++/7/bits/basic_string.h ****     { return __lhs.compare(__rhs) >= 0; }
6203:/usr/include/c++/7/bits/basic_string.h **** 
6204:/usr/include/c++/7/bits/basic_string.h ****   /**
6205:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test if string doesn't precede C string.
6206:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  String.
6207:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  C string.
6208:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.
6209:/usr/include/c++/7/bits/basic_string.h ****    */
6210:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6211:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6212:/usr/include/c++/7/bits/basic_string.h ****     operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
6213:/usr/include/c++/7/bits/basic_string.h **** 	       const _CharT* __rhs)
6214:/usr/include/c++/7/bits/basic_string.h ****     { return __lhs.compare(__rhs) >= 0; }
6215:/usr/include/c++/7/bits/basic_string.h **** 
6216:/usr/include/c++/7/bits/basic_string.h ****   /**
6217:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Test if C string doesn't precede string.
6218:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  C string.
6219:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  String.
6220:/usr/include/c++/7/bits/basic_string.h ****    *  @return  True if @a __lhs doesn't precede @a __rhs.  False otherwise.
6221:/usr/include/c++/7/bits/basic_string.h ****    */
6222:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6223:/usr/include/c++/7/bits/basic_string.h ****     inline bool
6224:/usr/include/c++/7/bits/basic_string.h ****     operator>=(const _CharT* __lhs,
6225:/usr/include/c++/7/bits/basic_string.h **** 	     const basic_string<_CharT, _Traits, _Alloc>& __rhs)
6226:/usr/include/c++/7/bits/basic_string.h ****     { return __rhs.compare(__lhs) <= 0; }
6227:/usr/include/c++/7/bits/basic_string.h **** 
6228:/usr/include/c++/7/bits/basic_string.h ****   /**
6229:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Swap contents of two strings.
6230:/usr/include/c++/7/bits/basic_string.h ****    *  @param __lhs  First string.
6231:/usr/include/c++/7/bits/basic_string.h ****    *  @param __rhs  Second string.
6232:/usr/include/c++/7/bits/basic_string.h ****    *
6233:/usr/include/c++/7/bits/basic_string.h ****    *  Exchanges the contents of @a __lhs and @a __rhs in constant time.
6234:/usr/include/c++/7/bits/basic_string.h ****    */
6235:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6236:/usr/include/c++/7/bits/basic_string.h ****     inline void
6237:/usr/include/c++/7/bits/basic_string.h ****     swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
6238:/usr/include/c++/7/bits/basic_string.h **** 	 basic_string<_CharT, _Traits, _Alloc>& __rhs)
6239:/usr/include/c++/7/bits/basic_string.h ****     _GLIBCXX_NOEXCEPT_IF(noexcept(__lhs.swap(__rhs)))
6240:/usr/include/c++/7/bits/basic_string.h ****     { __lhs.swap(__rhs); }
6241:/usr/include/c++/7/bits/basic_string.h **** 
6242:/usr/include/c++/7/bits/basic_string.h **** 
6243:/usr/include/c++/7/bits/basic_string.h ****   /**
6244:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Read stream into a string.
6245:/usr/include/c++/7/bits/basic_string.h ****    *  @param __is  Input stream.
6246:/usr/include/c++/7/bits/basic_string.h ****    *  @param __str  Buffer to store into.
6247:/usr/include/c++/7/bits/basic_string.h ****    *  @return  Reference to the input stream.
6248:/usr/include/c++/7/bits/basic_string.h ****    *
6249:/usr/include/c++/7/bits/basic_string.h ****    *  Stores characters from @a __is into @a __str until whitespace is
6250:/usr/include/c++/7/bits/basic_string.h ****    *  found, the end of the stream is encountered, or str.max_size()
6251:/usr/include/c++/7/bits/basic_string.h ****    *  is reached.  If is.width() is non-zero, that is the limit on the
6252:/usr/include/c++/7/bits/basic_string.h ****    *  number of characters stored into @a __str.  Any previous
6253:/usr/include/c++/7/bits/basic_string.h ****    *  contents of @a __str are erased.
6254:/usr/include/c++/7/bits/basic_string.h ****    */
6255:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6256:/usr/include/c++/7/bits/basic_string.h ****     basic_istream<_CharT, _Traits>&
6257:/usr/include/c++/7/bits/basic_string.h ****     operator>>(basic_istream<_CharT, _Traits>& __is,
6258:/usr/include/c++/7/bits/basic_string.h **** 	       basic_string<_CharT, _Traits, _Alloc>& __str);
6259:/usr/include/c++/7/bits/basic_string.h **** 
6260:/usr/include/c++/7/bits/basic_string.h ****   template<>
6261:/usr/include/c++/7/bits/basic_string.h ****     basic_istream<char>&
6262:/usr/include/c++/7/bits/basic_string.h ****     operator>>(basic_istream<char>& __is, basic_string<char>& __str);
6263:/usr/include/c++/7/bits/basic_string.h **** 
6264:/usr/include/c++/7/bits/basic_string.h ****   /**
6265:/usr/include/c++/7/bits/basic_string.h ****    *  @brief  Write string to a stream.
6266:/usr/include/c++/7/bits/basic_string.h ****    *  @param __os  Output stream.
6267:/usr/include/c++/7/bits/basic_string.h ****    *  @param __str  String to write out.
6268:/usr/include/c++/7/bits/basic_string.h ****    *  @return  Reference to the output stream.
6269:/usr/include/c++/7/bits/basic_string.h ****    *
6270:/usr/include/c++/7/bits/basic_string.h ****    *  Output characters of @a __str into os following the same rules as for
6271:/usr/include/c++/7/bits/basic_string.h ****    *  writing a C string.
6272:/usr/include/c++/7/bits/basic_string.h ****    */
6273:/usr/include/c++/7/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
6274:/usr/include/c++/7/bits/basic_string.h ****     inline basic_ostream<_CharT, _Traits>&
6275:/usr/include/c++/7/bits/basic_string.h ****     operator<<(basic_ostream<_CharT, _Traits>& __os,
6276:/usr/include/c++/7/bits/basic_string.h **** 	       const basic_string<_CharT, _Traits, _Alloc>& __str)
6277:/usr/include/c++/7/bits/basic_string.h ****     {
6278:/usr/include/c++/7/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
6279:/usr/include/c++/7/bits/basic_string.h ****       // 586. string inserter not a formatted function
6280:/usr/include/c++/7/bits/basic_string.h ****       return __ostream_insert(__os, __str.data(), __str.size());
 2329              		.loc 8 6280 0
 2330 012d 488D3D00 		leaq	_ZSt4cerr(%rip), %rdi	#,
 2330      000000
 2331              	.LBE2309:
 2332              	.LBE2308:
 2333              	.LBB2311:
 2334              	.LBB2304:
 2335              	.LBB2300:
 2336              	.LBB2296:
 2337              	.LBB2292:
 2338              	.LBB2288:
 2339              	.LBB2284:
 2340              	.LBB2280:
 2341              	.LBB2276:
 2342              	.LBB2267:
 2343              	.LBB2266:
 2344              	.LBB2264:
 2345              	.LBB2265:
 2346              	# /usr/include/c++/7/bits/char_traits.h:285:       { __c1 = __c2; }
 285:/usr/include/c++/7/bits/char_traits.h **** 
 2347              		.loc 9 285 0
 2348 0134 C6041800 		movb	$0, (%rax,%rbx)	#, MEM[(char_type &)_127]
 2349              	.LVL136:
 2350              	.LBE2265:
 2351              	.LBE2264:
 2352              	.LBE2266:
 2353              	.LBE2267:
 2354              	.LBE2276:
 2355              	.LBE2280:
 2356              	.LBE2284:
 2357              	.LBE2288:
 2358              	.LBE2292:
 2359              	.LBE2296:
 2360              	.LBE2300:
 2361              	.LBE2304:
 2362              	.LBE2311:
 2363              	.LBB2312:
 2364              	.LBB2310:
 2365              	# /usr/include/c++/7/bits/basic_string.h:6280:       return __ostream_insert(__os, __str.data(), __
 2366              		.loc 8 6280 0
 2367 0138 488B5424 		movq	24(%rsp), %rdx	# MEM[(const struct basic_string *)&arg + 8B],
 2367      18
 2368 013d 488B7424 		movq	16(%rsp), %rsi	# MEM[(const struct basic_string *)&arg],
 2368      10
 2369              	.LEHB5:
 2370 0142 E8000000 		call	_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@PLT	#
 2370      00
 2371              	.LVL137:
 2372              	.LEHE5:
 2373              	.LBE2310:
 2374              	.LBE2312:
 2375              	.LBB2313:
 2376              	.LBB2314:
 2377              	.LBB2315:
 2378              	.LBB2316:
 2379              	.LBB2317:
 2380              	# /usr/include/c++/7/bits/basic_string.h:211:       { return _M_data() == _M_local_data(); }
 211:/usr/include/c++/7/bits/basic_string.h **** 
 2381              		.loc 8 211 0
 2382 0147 488B7C24 		movq	16(%rsp), %rdi	# MEM[(const struct basic_string *)&arg], _38
 2382      10
 2383              	.LVL138:
 2384              	.LBE2317:
 2385              	.LBE2316:
 2386              	# /usr/include/c++/7/bits/basic_string.h:220: 	if (!_M_is_local())
 220:/usr/include/c++/7/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2387              		.loc 8 220 0
 2388 014c 4883C510 		addq	$16, %rbp	#, tmp205
 2389              	.LVL139:
 2390 0150 4839EF   		cmpq	%rbp, %rdi	# tmp205, _38
 2391 0153 7405     		je	.L162	#,
 2392              	.LVL140:
 2393              	.LBB2318:
 2394              	.LBB2319:
 2395              	.LBB2320:
 2396              	.LBB2321:
 2397              	# /usr/include/c++/7/ext/new_allocator.h:125: 	::operator delete(__p);
 2398              		.loc 10 125 0
 2399 0155 E8000000 		call	_ZdlPv@PLT	#
 2399      00
 2400              	.LVL141:
 2401              	.L162:
 2402              	.LBE2321:
 2403              	.LBE2320:
 2404              	.LBE2319:
 2405              	.LBE2318:
 2406              	.LBE2315:
 2407              	.LBE2314:
 2408              	.LBE2313:
 2409              	.LBE2229:
 2410              	.LBB2334:
 2411              	.LBB2335:
 2412              	.LBB2336:
 2413              	# /usr/include/c++/7/ostream:591:     { return flush(__os.put(__os.widen('\n'))); }
 2414              		.file 13 "/usr/include/c++/7/ostream"
   1:/usr/include/c++/7/ostream **** // Output streams -*- C++ -*-
   2:/usr/include/c++/7/ostream **** 
   3:/usr/include/c++/7/ostream **** // Copyright (C) 1997-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/ostream **** //
   5:/usr/include/c++/7/ostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/ostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/ostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/ostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/ostream **** // any later version.
  10:/usr/include/c++/7/ostream **** 
  11:/usr/include/c++/7/ostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/ostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/ostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/ostream **** // GNU General Public License for more details.
  15:/usr/include/c++/7/ostream **** 
  16:/usr/include/c++/7/ostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/ostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/ostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/ostream **** 
  20:/usr/include/c++/7/ostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/ostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/ostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/ostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/ostream **** 
  25:/usr/include/c++/7/ostream **** /** @file include/ostream
  26:/usr/include/c++/7/ostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/7/ostream ****  */
  28:/usr/include/c++/7/ostream **** 
  29:/usr/include/c++/7/ostream **** //
  30:/usr/include/c++/7/ostream **** // ISO C++ 14882: 27.6.2  Output streams
  31:/usr/include/c++/7/ostream **** //
  32:/usr/include/c++/7/ostream **** 
  33:/usr/include/c++/7/ostream **** #ifndef _GLIBCXX_OSTREAM
  34:/usr/include/c++/7/ostream **** #define _GLIBCXX_OSTREAM 1
  35:/usr/include/c++/7/ostream **** 
  36:/usr/include/c++/7/ostream **** #pragma GCC system_header
  37:/usr/include/c++/7/ostream **** 
  38:/usr/include/c++/7/ostream **** #include <ios>
  39:/usr/include/c++/7/ostream **** #include <bits/ostream_insert.h>
  40:/usr/include/c++/7/ostream **** 
  41:/usr/include/c++/7/ostream **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/7/ostream **** {
  43:/usr/include/c++/7/ostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/7/ostream **** 
  45:/usr/include/c++/7/ostream ****   /**
  46:/usr/include/c++/7/ostream ****    *  @brief  Template class basic_ostream.
  47:/usr/include/c++/7/ostream ****    *  @ingroup io
  48:/usr/include/c++/7/ostream ****    *
  49:/usr/include/c++/7/ostream ****    *  @tparam _CharT  Type of character stream.
  50:/usr/include/c++/7/ostream ****    *  @tparam _Traits  Traits for character type, defaults to
  51:/usr/include/c++/7/ostream ****    *                   char_traits<_CharT>.
  52:/usr/include/c++/7/ostream ****    *
  53:/usr/include/c++/7/ostream ****    *  This is the base class for all output streams.  It provides text
  54:/usr/include/c++/7/ostream ****    *  formatting of all builtin types, and communicates with any class
  55:/usr/include/c++/7/ostream ****    *  derived from basic_streambuf to do the actual output.
  56:/usr/include/c++/7/ostream ****   */
  57:/usr/include/c++/7/ostream ****   template<typename _CharT, typename _Traits>
  58:/usr/include/c++/7/ostream ****     class basic_ostream : virtual public basic_ios<_CharT, _Traits>
  59:/usr/include/c++/7/ostream ****     {
  60:/usr/include/c++/7/ostream ****     public:
  61:/usr/include/c++/7/ostream ****       // Types (inherited from basic_ios):
  62:/usr/include/c++/7/ostream ****       typedef _CharT			 		char_type;
  63:/usr/include/c++/7/ostream ****       typedef typename _Traits::int_type 		int_type;
  64:/usr/include/c++/7/ostream ****       typedef typename _Traits::pos_type 		pos_type;
  65:/usr/include/c++/7/ostream ****       typedef typename _Traits::off_type 		off_type;
  66:/usr/include/c++/7/ostream ****       typedef _Traits			 		traits_type;
  67:/usr/include/c++/7/ostream **** 
  68:/usr/include/c++/7/ostream ****       // Non-standard Types:
  69:/usr/include/c++/7/ostream ****       typedef basic_streambuf<_CharT, _Traits> 		__streambuf_type;
  70:/usr/include/c++/7/ostream ****       typedef basic_ios<_CharT, _Traits>		__ios_type;
  71:/usr/include/c++/7/ostream ****       typedef basic_ostream<_CharT, _Traits>		__ostream_type;
  72:/usr/include/c++/7/ostream ****       typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
  73:/usr/include/c++/7/ostream ****       							__num_put_type;
  74:/usr/include/c++/7/ostream ****       typedef ctype<_CharT>	      			__ctype_type;
  75:/usr/include/c++/7/ostream **** 
  76:/usr/include/c++/7/ostream ****       /**
  77:/usr/include/c++/7/ostream ****        *  @brief  Base constructor.
  78:/usr/include/c++/7/ostream ****        *
  79:/usr/include/c++/7/ostream ****        *  This ctor is almost never called by the user directly, rather from
  80:/usr/include/c++/7/ostream ****        *  derived classes' initialization lists, which pass a pointer to
  81:/usr/include/c++/7/ostream ****        *  their own stream buffer.
  82:/usr/include/c++/7/ostream ****       */
  83:/usr/include/c++/7/ostream ****       explicit
  84:/usr/include/c++/7/ostream ****       basic_ostream(__streambuf_type* __sb)
  85:/usr/include/c++/7/ostream ****       { this->init(__sb); }
  86:/usr/include/c++/7/ostream **** 
  87:/usr/include/c++/7/ostream ****       /**
  88:/usr/include/c++/7/ostream ****        *  @brief  Base destructor.
  89:/usr/include/c++/7/ostream ****        *
  90:/usr/include/c++/7/ostream ****        *  This does very little apart from providing a virtual base dtor.
  91:/usr/include/c++/7/ostream ****       */
  92:/usr/include/c++/7/ostream ****       virtual
  93:/usr/include/c++/7/ostream ****       ~basic_ostream() { }
  94:/usr/include/c++/7/ostream **** 
  95:/usr/include/c++/7/ostream ****       /// Safe prefix/suffix operations.
  96:/usr/include/c++/7/ostream ****       class sentry;
  97:/usr/include/c++/7/ostream ****       friend class sentry;
  98:/usr/include/c++/7/ostream **** 
  99:/usr/include/c++/7/ostream ****       //@{
 100:/usr/include/c++/7/ostream ****       /**
 101:/usr/include/c++/7/ostream ****        *  @brief  Interface for manipulators.
 102:/usr/include/c++/7/ostream ****        *
 103:/usr/include/c++/7/ostream ****        *  Manipulators such as @c std::endl and @c std::hex use these
 104:/usr/include/c++/7/ostream ****        *  functions in constructs like "std::cout << std::endl".  For more
 105:/usr/include/c++/7/ostream ****        *  information, see the iomanip header.
 106:/usr/include/c++/7/ostream ****       */
 107:/usr/include/c++/7/ostream ****       __ostream_type&
 108:/usr/include/c++/7/ostream ****       operator<<(__ostream_type& (*__pf)(__ostream_type&))
 109:/usr/include/c++/7/ostream ****       {
 110:/usr/include/c++/7/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 111:/usr/include/c++/7/ostream **** 	// DR 60. What is a formatted input function?
 112:/usr/include/c++/7/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 113:/usr/include/c++/7/ostream **** 	return __pf(*this);
 114:/usr/include/c++/7/ostream ****       }
 115:/usr/include/c++/7/ostream **** 
 116:/usr/include/c++/7/ostream ****       __ostream_type&
 117:/usr/include/c++/7/ostream ****       operator<<(__ios_type& (*__pf)(__ios_type&))
 118:/usr/include/c++/7/ostream ****       {
 119:/usr/include/c++/7/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 120:/usr/include/c++/7/ostream **** 	// DR 60. What is a formatted input function?
 121:/usr/include/c++/7/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 122:/usr/include/c++/7/ostream **** 	__pf(*this);
 123:/usr/include/c++/7/ostream **** 	return *this;
 124:/usr/include/c++/7/ostream ****       }
 125:/usr/include/c++/7/ostream **** 
 126:/usr/include/c++/7/ostream ****       __ostream_type&
 127:/usr/include/c++/7/ostream ****       operator<<(ios_base& (*__pf) (ios_base&))
 128:/usr/include/c++/7/ostream ****       {
 129:/usr/include/c++/7/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 130:/usr/include/c++/7/ostream **** 	// DR 60. What is a formatted input function?
 131:/usr/include/c++/7/ostream **** 	// The inserters for manipulators are *not* formatted output functions.
 132:/usr/include/c++/7/ostream **** 	__pf(*this);
 133:/usr/include/c++/7/ostream **** 	return *this;
 134:/usr/include/c++/7/ostream ****       }
 135:/usr/include/c++/7/ostream ****       //@}
 136:/usr/include/c++/7/ostream **** 
 137:/usr/include/c++/7/ostream ****       //@{
 138:/usr/include/c++/7/ostream ****       /**
 139:/usr/include/c++/7/ostream ****        *  @name Inserters
 140:/usr/include/c++/7/ostream ****        *
 141:/usr/include/c++/7/ostream ****        *  All the @c operator<< functions (aka <em>formatted output
 142:/usr/include/c++/7/ostream ****        *  functions</em>) have some common behavior.  Each starts by
 143:/usr/include/c++/7/ostream ****        *  constructing a temporary object of type std::basic_ostream::sentry.
 144:/usr/include/c++/7/ostream ****        *  This can have several effects, concluding with the setting of a
 145:/usr/include/c++/7/ostream ****        *  status flag; see the sentry documentation for more.
 146:/usr/include/c++/7/ostream ****        *
 147:/usr/include/c++/7/ostream ****        *  If the sentry status is good, the function tries to generate
 148:/usr/include/c++/7/ostream ****        *  whatever data is appropriate for the type of the argument.
 149:/usr/include/c++/7/ostream ****        *
 150:/usr/include/c++/7/ostream ****        *  If an exception is thrown during insertion, ios_base::badbit
 151:/usr/include/c++/7/ostream ****        *  will be turned on in the stream's error state without causing an
 152:/usr/include/c++/7/ostream ****        *  ios_base::failure to be thrown.  The original exception will then
 153:/usr/include/c++/7/ostream ****        *  be rethrown.
 154:/usr/include/c++/7/ostream ****       */
 155:/usr/include/c++/7/ostream **** 
 156:/usr/include/c++/7/ostream ****       //@{
 157:/usr/include/c++/7/ostream ****       /**
 158:/usr/include/c++/7/ostream ****        *  @brief Integer arithmetic inserters
 159:/usr/include/c++/7/ostream ****        *  @param  __n A variable of builtin integral type.
 160:/usr/include/c++/7/ostream ****        *  @return  @c *this if successful
 161:/usr/include/c++/7/ostream ****        *
 162:/usr/include/c++/7/ostream ****        *  These functions use the stream's current locale (specifically, the
 163:/usr/include/c++/7/ostream ****        *  @c num_get facet) to perform numeric formatting.
 164:/usr/include/c++/7/ostream ****       */
 165:/usr/include/c++/7/ostream ****       __ostream_type&
 166:/usr/include/c++/7/ostream ****       operator<<(long __n)
 167:/usr/include/c++/7/ostream ****       { return _M_insert(__n); }
 168:/usr/include/c++/7/ostream **** 
 169:/usr/include/c++/7/ostream ****       __ostream_type&
 170:/usr/include/c++/7/ostream ****       operator<<(unsigned long __n)
 171:/usr/include/c++/7/ostream ****       { return _M_insert(__n); }
 172:/usr/include/c++/7/ostream **** 
 173:/usr/include/c++/7/ostream ****       __ostream_type&
 174:/usr/include/c++/7/ostream ****       operator<<(bool __n)
 175:/usr/include/c++/7/ostream ****       { return _M_insert(__n); }
 176:/usr/include/c++/7/ostream **** 
 177:/usr/include/c++/7/ostream ****       __ostream_type&
 178:/usr/include/c++/7/ostream ****       operator<<(short __n);
 179:/usr/include/c++/7/ostream **** 
 180:/usr/include/c++/7/ostream ****       __ostream_type&
 181:/usr/include/c++/7/ostream ****       operator<<(unsigned short __n)
 182:/usr/include/c++/7/ostream ****       {
 183:/usr/include/c++/7/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 184:/usr/include/c++/7/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 185:/usr/include/c++/7/ostream **** 	return _M_insert(static_cast<unsigned long>(__n));
 186:/usr/include/c++/7/ostream ****       }
 187:/usr/include/c++/7/ostream **** 
 188:/usr/include/c++/7/ostream ****       __ostream_type&
 189:/usr/include/c++/7/ostream ****       operator<<(int __n);
 190:/usr/include/c++/7/ostream **** 
 191:/usr/include/c++/7/ostream ****       __ostream_type&
 192:/usr/include/c++/7/ostream ****       operator<<(unsigned int __n)
 193:/usr/include/c++/7/ostream ****       {
 194:/usr/include/c++/7/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 195:/usr/include/c++/7/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 196:/usr/include/c++/7/ostream **** 	return _M_insert(static_cast<unsigned long>(__n));
 197:/usr/include/c++/7/ostream ****       }
 198:/usr/include/c++/7/ostream **** 
 199:/usr/include/c++/7/ostream **** #ifdef _GLIBCXX_USE_LONG_LONG
 200:/usr/include/c++/7/ostream ****       __ostream_type&
 201:/usr/include/c++/7/ostream ****       operator<<(long long __n)
 202:/usr/include/c++/7/ostream ****       { return _M_insert(__n); }
 203:/usr/include/c++/7/ostream **** 
 204:/usr/include/c++/7/ostream ****       __ostream_type&
 205:/usr/include/c++/7/ostream ****       operator<<(unsigned long long __n)
 206:/usr/include/c++/7/ostream ****       { return _M_insert(__n); }
 207:/usr/include/c++/7/ostream **** #endif
 208:/usr/include/c++/7/ostream ****       //@}
 209:/usr/include/c++/7/ostream **** 
 210:/usr/include/c++/7/ostream ****       //@{
 211:/usr/include/c++/7/ostream ****       /**
 212:/usr/include/c++/7/ostream ****        *  @brief  Floating point arithmetic inserters
 213:/usr/include/c++/7/ostream ****        *  @param  __f A variable of builtin floating point type.
 214:/usr/include/c++/7/ostream ****        *  @return  @c *this if successful
 215:/usr/include/c++/7/ostream ****        *
 216:/usr/include/c++/7/ostream ****        *  These functions use the stream's current locale (specifically, the
 217:/usr/include/c++/7/ostream ****        *  @c num_get facet) to perform numeric formatting.
 218:/usr/include/c++/7/ostream ****       */
 219:/usr/include/c++/7/ostream ****       __ostream_type&
 220:/usr/include/c++/7/ostream ****       operator<<(double __f)
 221:/usr/include/c++/7/ostream ****       { return _M_insert(__f); }
 222:/usr/include/c++/7/ostream **** 
 223:/usr/include/c++/7/ostream ****       __ostream_type&
 224:/usr/include/c++/7/ostream ****       operator<<(float __f)
 225:/usr/include/c++/7/ostream ****       {
 226:/usr/include/c++/7/ostream **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 227:/usr/include/c++/7/ostream **** 	// 117. basic_ostream uses nonexistent num_put member functions.
 228:/usr/include/c++/7/ostream **** 	return _M_insert(static_cast<double>(__f));
 229:/usr/include/c++/7/ostream ****       }
 230:/usr/include/c++/7/ostream **** 
 231:/usr/include/c++/7/ostream ****       __ostream_type&
 232:/usr/include/c++/7/ostream ****       operator<<(long double __f)
 233:/usr/include/c++/7/ostream ****       { return _M_insert(__f); }
 234:/usr/include/c++/7/ostream ****       //@}
 235:/usr/include/c++/7/ostream **** 
 236:/usr/include/c++/7/ostream ****       /**
 237:/usr/include/c++/7/ostream ****        *  @brief  Pointer arithmetic inserters
 238:/usr/include/c++/7/ostream ****        *  @param  __p A variable of pointer type.
 239:/usr/include/c++/7/ostream ****        *  @return  @c *this if successful
 240:/usr/include/c++/7/ostream ****        *
 241:/usr/include/c++/7/ostream ****        *  These functions use the stream's current locale (specifically, the
 242:/usr/include/c++/7/ostream ****        *  @c num_get facet) to perform numeric formatting.
 243:/usr/include/c++/7/ostream ****       */
 244:/usr/include/c++/7/ostream ****       __ostream_type&
 245:/usr/include/c++/7/ostream ****       operator<<(const void* __p)
 246:/usr/include/c++/7/ostream ****       { return _M_insert(__p); }
 247:/usr/include/c++/7/ostream **** 
 248:/usr/include/c++/7/ostream ****       /**
 249:/usr/include/c++/7/ostream ****        *  @brief  Extracting from another streambuf.
 250:/usr/include/c++/7/ostream ****        *  @param  __sb  A pointer to a streambuf
 251:/usr/include/c++/7/ostream ****        *
 252:/usr/include/c++/7/ostream ****        *  This function behaves like one of the basic arithmetic extractors,
 253:/usr/include/c++/7/ostream ****        *  in that it also constructs a sentry object and has the same error
 254:/usr/include/c++/7/ostream ****        *  handling behavior.
 255:/usr/include/c++/7/ostream ****        *
 256:/usr/include/c++/7/ostream ****        *  If @p __sb is NULL, the stream will set failbit in its error state.
 257:/usr/include/c++/7/ostream ****        *
 258:/usr/include/c++/7/ostream ****        *  Characters are extracted from @p __sb and inserted into @c *this
 259:/usr/include/c++/7/ostream ****        *  until one of the following occurs:
 260:/usr/include/c++/7/ostream ****        *
 261:/usr/include/c++/7/ostream ****        *  - the input stream reaches end-of-file,
 262:/usr/include/c++/7/ostream ****        *  - insertion into the output sequence fails (in this case, the
 263:/usr/include/c++/7/ostream ****        *    character that would have been inserted is not extracted), or
 264:/usr/include/c++/7/ostream ****        *  - an exception occurs while getting a character from @p __sb, which
 265:/usr/include/c++/7/ostream ****        *    sets failbit in the error state
 266:/usr/include/c++/7/ostream ****        *
 267:/usr/include/c++/7/ostream ****        *  If the function inserts no characters, failbit is set.
 268:/usr/include/c++/7/ostream ****       */
 269:/usr/include/c++/7/ostream ****       __ostream_type&
 270:/usr/include/c++/7/ostream ****       operator<<(__streambuf_type* __sb);
 271:/usr/include/c++/7/ostream ****       //@}
 272:/usr/include/c++/7/ostream **** 
 273:/usr/include/c++/7/ostream ****       //@{
 274:/usr/include/c++/7/ostream ****       /**
 275:/usr/include/c++/7/ostream ****        *  @name Unformatted Output Functions
 276:/usr/include/c++/7/ostream ****        *
 277:/usr/include/c++/7/ostream ****        *  All the unformatted output functions have some common behavior.
 278:/usr/include/c++/7/ostream ****        *  Each starts by constructing a temporary object of type
 279:/usr/include/c++/7/ostream ****        *  std::basic_ostream::sentry.  This has several effects, concluding
 280:/usr/include/c++/7/ostream ****        *  with the setting of a status flag; see the sentry documentation
 281:/usr/include/c++/7/ostream ****        *  for more.
 282:/usr/include/c++/7/ostream ****        *
 283:/usr/include/c++/7/ostream ****        *  If the sentry status is good, the function tries to generate
 284:/usr/include/c++/7/ostream ****        *  whatever data is appropriate for the type of the argument.
 285:/usr/include/c++/7/ostream ****        *
 286:/usr/include/c++/7/ostream ****        *  If an exception is thrown during insertion, ios_base::badbit
 287:/usr/include/c++/7/ostream ****        *  will be turned on in the stream's error state.  If badbit is on in
 288:/usr/include/c++/7/ostream ****        *  the stream's exceptions mask, the exception will be rethrown
 289:/usr/include/c++/7/ostream ****        *  without completing its actions.
 290:/usr/include/c++/7/ostream ****       */
 291:/usr/include/c++/7/ostream **** 
 292:/usr/include/c++/7/ostream ****       /**
 293:/usr/include/c++/7/ostream ****        *  @brief  Simple insertion.
 294:/usr/include/c++/7/ostream ****        *  @param  __c  The character to insert.
 295:/usr/include/c++/7/ostream ****        *  @return  *this
 296:/usr/include/c++/7/ostream ****        *
 297:/usr/include/c++/7/ostream ****        *  Tries to insert @p __c.
 298:/usr/include/c++/7/ostream ****        *
 299:/usr/include/c++/7/ostream ****        *  @note  This function is not overloaded on signed char and
 300:/usr/include/c++/7/ostream ****        *         unsigned char.
 301:/usr/include/c++/7/ostream ****       */
 302:/usr/include/c++/7/ostream ****       __ostream_type&
 303:/usr/include/c++/7/ostream ****       put(char_type __c);
 304:/usr/include/c++/7/ostream **** 
 305:/usr/include/c++/7/ostream ****       /**
 306:/usr/include/c++/7/ostream ****        *  @brief  Core write functionality, without sentry.
 307:/usr/include/c++/7/ostream ****        *  @param  __s  The array to insert.
 308:/usr/include/c++/7/ostream ****        *  @param  __n  Maximum number of characters to insert.
 309:/usr/include/c++/7/ostream ****       */
 310:/usr/include/c++/7/ostream ****       void
 311:/usr/include/c++/7/ostream ****       _M_write(const char_type* __s, streamsize __n)
 312:/usr/include/c++/7/ostream ****       {
 313:/usr/include/c++/7/ostream **** 	const streamsize __put = this->rdbuf()->sputn(__s, __n);
 314:/usr/include/c++/7/ostream **** 	if (__put != __n)
 315:/usr/include/c++/7/ostream **** 	  this->setstate(ios_base::badbit);
 316:/usr/include/c++/7/ostream ****       }
 317:/usr/include/c++/7/ostream **** 
 318:/usr/include/c++/7/ostream ****       /**
 319:/usr/include/c++/7/ostream ****        *  @brief  Character string insertion.
 320:/usr/include/c++/7/ostream ****        *  @param  __s  The array to insert.
 321:/usr/include/c++/7/ostream ****        *  @param  __n  Maximum number of characters to insert.
 322:/usr/include/c++/7/ostream ****        *  @return  *this
 323:/usr/include/c++/7/ostream ****        *
 324:/usr/include/c++/7/ostream ****        *  Characters are copied from @p __s and inserted into the stream until
 325:/usr/include/c++/7/ostream ****        *  one of the following happens:
 326:/usr/include/c++/7/ostream ****        *
 327:/usr/include/c++/7/ostream ****        *  - @p __n characters are inserted
 328:/usr/include/c++/7/ostream ****        *  - inserting into the output sequence fails (in this case, badbit
 329:/usr/include/c++/7/ostream ****        *    will be set in the stream's error state)
 330:/usr/include/c++/7/ostream ****        *
 331:/usr/include/c++/7/ostream ****        *  @note  This function is not overloaded on signed char and
 332:/usr/include/c++/7/ostream ****        *         unsigned char.
 333:/usr/include/c++/7/ostream ****       */
 334:/usr/include/c++/7/ostream ****       __ostream_type&
 335:/usr/include/c++/7/ostream ****       write(const char_type* __s, streamsize __n);
 336:/usr/include/c++/7/ostream ****       //@}
 337:/usr/include/c++/7/ostream **** 
 338:/usr/include/c++/7/ostream ****       /**
 339:/usr/include/c++/7/ostream ****        *  @brief  Synchronizing the stream buffer.
 340:/usr/include/c++/7/ostream ****        *  @return  *this
 341:/usr/include/c++/7/ostream ****        *
 342:/usr/include/c++/7/ostream ****        *  If @c rdbuf() is a null pointer, changes nothing.
 343:/usr/include/c++/7/ostream ****        *
 344:/usr/include/c++/7/ostream ****        *  Otherwise, calls @c rdbuf()->pubsync(), and if that returns -1,
 345:/usr/include/c++/7/ostream ****        *  sets badbit.
 346:/usr/include/c++/7/ostream ****       */
 347:/usr/include/c++/7/ostream ****       __ostream_type&
 348:/usr/include/c++/7/ostream ****       flush();
 349:/usr/include/c++/7/ostream **** 
 350:/usr/include/c++/7/ostream ****       /**
 351:/usr/include/c++/7/ostream ****        *  @brief  Getting the current write position.
 352:/usr/include/c++/7/ostream ****        *  @return  A file position object.
 353:/usr/include/c++/7/ostream ****        *
 354:/usr/include/c++/7/ostream ****        *  If @c fail() is not false, returns @c pos_type(-1) to indicate
 355:/usr/include/c++/7/ostream ****        *  failure.  Otherwise returns @c rdbuf()->pubseekoff(0,cur,out).
 356:/usr/include/c++/7/ostream ****       */
 357:/usr/include/c++/7/ostream ****       pos_type
 358:/usr/include/c++/7/ostream ****       tellp();
 359:/usr/include/c++/7/ostream **** 
 360:/usr/include/c++/7/ostream ****       /**
 361:/usr/include/c++/7/ostream ****        *  @brief  Changing the current write position.
 362:/usr/include/c++/7/ostream ****        *  @param  __pos  A file position object.
 363:/usr/include/c++/7/ostream ****        *  @return  *this
 364:/usr/include/c++/7/ostream ****        *
 365:/usr/include/c++/7/ostream ****        *  If @c fail() is not true, calls @c rdbuf()->pubseekpos(pos).  If
 366:/usr/include/c++/7/ostream ****        *  that function fails, sets failbit.
 367:/usr/include/c++/7/ostream ****       */
 368:/usr/include/c++/7/ostream ****       __ostream_type&
 369:/usr/include/c++/7/ostream ****       seekp(pos_type);
 370:/usr/include/c++/7/ostream **** 
 371:/usr/include/c++/7/ostream ****       /**
 372:/usr/include/c++/7/ostream ****        *  @brief  Changing the current write position.
 373:/usr/include/c++/7/ostream ****        *  @param  __off  A file offset object.
 374:/usr/include/c++/7/ostream ****        *  @param  __dir  The direction in which to seek.
 375:/usr/include/c++/7/ostream ****        *  @return  *this
 376:/usr/include/c++/7/ostream ****        *
 377:/usr/include/c++/7/ostream ****        *  If @c fail() is not true, calls @c rdbuf()->pubseekoff(off,dir).
 378:/usr/include/c++/7/ostream ****        *  If that function fails, sets failbit.
 379:/usr/include/c++/7/ostream ****       */
 380:/usr/include/c++/7/ostream ****        __ostream_type&
 381:/usr/include/c++/7/ostream ****       seekp(off_type, ios_base::seekdir);
 382:/usr/include/c++/7/ostream **** 
 383:/usr/include/c++/7/ostream ****     protected:
 384:/usr/include/c++/7/ostream ****       basic_ostream()
 385:/usr/include/c++/7/ostream ****       { this->init(0); }
 386:/usr/include/c++/7/ostream **** 
 387:/usr/include/c++/7/ostream **** #if __cplusplus >= 201103L
 388:/usr/include/c++/7/ostream ****       // Non-standard constructor that does not call init()
 389:/usr/include/c++/7/ostream ****       basic_ostream(basic_iostream<_CharT, _Traits>&) { }
 390:/usr/include/c++/7/ostream **** 
 391:/usr/include/c++/7/ostream ****       basic_ostream(const basic_ostream&) = delete;
 392:/usr/include/c++/7/ostream **** 
 393:/usr/include/c++/7/ostream ****       basic_ostream(basic_ostream&& __rhs)
 394:/usr/include/c++/7/ostream ****       : __ios_type()
 395:/usr/include/c++/7/ostream ****       { __ios_type::move(__rhs); }
 396:/usr/include/c++/7/ostream **** 
 397:/usr/include/c++/7/ostream ****       // 27.7.3.3 Assign/swap
 398:/usr/include/c++/7/ostream **** 
 399:/usr/include/c++/7/ostream ****       basic_ostream& operator=(const basic_ostream&) = delete;
 400:/usr/include/c++/7/ostream **** 
 401:/usr/include/c++/7/ostream ****       basic_ostream&
 402:/usr/include/c++/7/ostream ****       operator=(basic_ostream&& __rhs)
 403:/usr/include/c++/7/ostream ****       {
 404:/usr/include/c++/7/ostream **** 	swap(__rhs);
 405:/usr/include/c++/7/ostream **** 	return *this;
 406:/usr/include/c++/7/ostream ****       }
 407:/usr/include/c++/7/ostream **** 
 408:/usr/include/c++/7/ostream ****       void
 409:/usr/include/c++/7/ostream ****       swap(basic_ostream& __rhs)
 410:/usr/include/c++/7/ostream ****       { __ios_type::swap(__rhs); }
 411:/usr/include/c++/7/ostream **** #endif
 412:/usr/include/c++/7/ostream **** 
 413:/usr/include/c++/7/ostream ****       template<typename _ValueT>
 414:/usr/include/c++/7/ostream **** 	__ostream_type&
 415:/usr/include/c++/7/ostream **** 	_M_insert(_ValueT __v);
 416:/usr/include/c++/7/ostream ****     };
 417:/usr/include/c++/7/ostream **** 
 418:/usr/include/c++/7/ostream ****   /**
 419:/usr/include/c++/7/ostream ****    *  @brief  Performs setup work for output streams.
 420:/usr/include/c++/7/ostream ****    *
 421:/usr/include/c++/7/ostream ****    *  Objects of this class are created before all of the standard
 422:/usr/include/c++/7/ostream ****    *  inserters are run.  It is responsible for <em>exception-safe prefix and
 423:/usr/include/c++/7/ostream ****    *  suffix operations</em>.
 424:/usr/include/c++/7/ostream ****   */
 425:/usr/include/c++/7/ostream ****   template <typename _CharT, typename _Traits>
 426:/usr/include/c++/7/ostream ****     class basic_ostream<_CharT, _Traits>::sentry
 427:/usr/include/c++/7/ostream ****     {
 428:/usr/include/c++/7/ostream ****       // Data Members.
 429:/usr/include/c++/7/ostream ****       bool 				_M_ok;
 430:/usr/include/c++/7/ostream ****       basic_ostream<_CharT, _Traits>& 	_M_os;
 431:/usr/include/c++/7/ostream **** 
 432:/usr/include/c++/7/ostream ****     public:
 433:/usr/include/c++/7/ostream ****       /**
 434:/usr/include/c++/7/ostream ****        *  @brief  The constructor performs preparatory work.
 435:/usr/include/c++/7/ostream ****        *  @param  __os  The output stream to guard.
 436:/usr/include/c++/7/ostream ****        *
 437:/usr/include/c++/7/ostream ****        *  If the stream state is good (@a __os.good() is true), then if the
 438:/usr/include/c++/7/ostream ****        *  stream is tied to another output stream, @c is.tie()->flush()
 439:/usr/include/c++/7/ostream ****        *  is called to synchronize the output sequences.
 440:/usr/include/c++/7/ostream ****        *
 441:/usr/include/c++/7/ostream ****        *  If the stream state is still good, then the sentry state becomes
 442:/usr/include/c++/7/ostream ****        *  true (@a okay).
 443:/usr/include/c++/7/ostream ****       */
 444:/usr/include/c++/7/ostream ****       explicit
 445:/usr/include/c++/7/ostream ****       sentry(basic_ostream<_CharT, _Traits>& __os);
 446:/usr/include/c++/7/ostream **** 
 447:/usr/include/c++/7/ostream ****       /**
 448:/usr/include/c++/7/ostream ****        *  @brief  Possibly flushes the stream.
 449:/usr/include/c++/7/ostream ****        *
 450:/usr/include/c++/7/ostream ****        *  If @c ios_base::unitbuf is set in @c os.flags(), and
 451:/usr/include/c++/7/ostream ****        *  @c std::uncaught_exception() is true, the sentry destructor calls
 452:/usr/include/c++/7/ostream ****        *  @c flush() on the output stream.
 453:/usr/include/c++/7/ostream ****       */
 454:/usr/include/c++/7/ostream ****       ~sentry()
 455:/usr/include/c++/7/ostream ****       {
 456:/usr/include/c++/7/ostream **** 	// XXX MT
 457:/usr/include/c++/7/ostream **** 	if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
 458:/usr/include/c++/7/ostream **** 	  {
 459:/usr/include/c++/7/ostream **** 	    // Can't call flush directly or else will get into recursive lock.
 460:/usr/include/c++/7/ostream **** 	    if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
 461:/usr/include/c++/7/ostream **** 	      _M_os.setstate(ios_base::badbit);
 462:/usr/include/c++/7/ostream **** 	  }
 463:/usr/include/c++/7/ostream ****       }
 464:/usr/include/c++/7/ostream **** 
 465:/usr/include/c++/7/ostream ****       /**
 466:/usr/include/c++/7/ostream ****        *  @brief  Quick status checking.
 467:/usr/include/c++/7/ostream ****        *  @return  The sentry state.
 468:/usr/include/c++/7/ostream ****        *
 469:/usr/include/c++/7/ostream ****        *  For ease of use, sentries may be converted to booleans.  The
 470:/usr/include/c++/7/ostream ****        *  return value is that of the sentry state (true == okay).
 471:/usr/include/c++/7/ostream ****       */
 472:/usr/include/c++/7/ostream **** #if __cplusplus >= 201103L
 473:/usr/include/c++/7/ostream ****       explicit
 474:/usr/include/c++/7/ostream **** #endif
 475:/usr/include/c++/7/ostream ****       operator bool() const
 476:/usr/include/c++/7/ostream ****       { return _M_ok; }
 477:/usr/include/c++/7/ostream ****     };
 478:/usr/include/c++/7/ostream **** 
 479:/usr/include/c++/7/ostream ****   //@{
 480:/usr/include/c++/7/ostream ****   /**
 481:/usr/include/c++/7/ostream ****    *  @brief  Character inserters
 482:/usr/include/c++/7/ostream ****    *  @param  __out  An output stream.
 483:/usr/include/c++/7/ostream ****    *  @param  __c  A character.
 484:/usr/include/c++/7/ostream ****    *  @return  out
 485:/usr/include/c++/7/ostream ****    *
 486:/usr/include/c++/7/ostream ****    *  Behaves like one of the formatted arithmetic inserters described in
 487:/usr/include/c++/7/ostream ****    *  std::basic_ostream.  After constructing a sentry object with good
 488:/usr/include/c++/7/ostream ****    *  status, this function inserts a single character and any required
 489:/usr/include/c++/7/ostream ****    *  padding (as determined by [22.2.2.2.2]).  @c __out.width(0) is then
 490:/usr/include/c++/7/ostream ****    *  called.
 491:/usr/include/c++/7/ostream ****    *
 492:/usr/include/c++/7/ostream ****    *  If @p __c is of type @c char and the character type of the stream is not
 493:/usr/include/c++/7/ostream ****    *  @c char, the character is widened before insertion.
 494:/usr/include/c++/7/ostream ****   */
 495:/usr/include/c++/7/ostream ****   template<typename _CharT, typename _Traits>
 496:/usr/include/c++/7/ostream ****     inline basic_ostream<_CharT, _Traits>&
 497:/usr/include/c++/7/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
 498:/usr/include/c++/7/ostream ****     { return __ostream_insert(__out, &__c, 1); }
 499:/usr/include/c++/7/ostream **** 
 500:/usr/include/c++/7/ostream ****   template<typename _CharT, typename _Traits>
 501:/usr/include/c++/7/ostream ****     inline basic_ostream<_CharT, _Traits>&
 502:/usr/include/c++/7/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
 503:/usr/include/c++/7/ostream ****     { return (__out << __out.widen(__c)); }
 504:/usr/include/c++/7/ostream **** 
 505:/usr/include/c++/7/ostream ****   // Specialization
 506:/usr/include/c++/7/ostream ****   template <class _Traits>
 507:/usr/include/c++/7/ostream ****     inline basic_ostream<char, _Traits>&
 508:/usr/include/c++/7/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, char __c)
 509:/usr/include/c++/7/ostream ****     { return __ostream_insert(__out, &__c, 1); }
 510:/usr/include/c++/7/ostream **** 
 511:/usr/include/c++/7/ostream ****   // Signed and unsigned
 512:/usr/include/c++/7/ostream ****   template<class _Traits>
 513:/usr/include/c++/7/ostream ****     inline basic_ostream<char, _Traits>&
 514:/usr/include/c++/7/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
 515:/usr/include/c++/7/ostream ****     { return (__out << static_cast<char>(__c)); }
 516:/usr/include/c++/7/ostream **** 
 517:/usr/include/c++/7/ostream ****   template<class _Traits>
 518:/usr/include/c++/7/ostream ****     inline basic_ostream<char, _Traits>&
 519:/usr/include/c++/7/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
 520:/usr/include/c++/7/ostream ****     { return (__out << static_cast<char>(__c)); }
 521:/usr/include/c++/7/ostream ****   //@}
 522:/usr/include/c++/7/ostream **** 
 523:/usr/include/c++/7/ostream ****   //@{
 524:/usr/include/c++/7/ostream ****   /**
 525:/usr/include/c++/7/ostream ****    *  @brief  String inserters
 526:/usr/include/c++/7/ostream ****    *  @param  __out  An output stream.
 527:/usr/include/c++/7/ostream ****    *  @param  __s  A character string.
 528:/usr/include/c++/7/ostream ****    *  @return  out
 529:/usr/include/c++/7/ostream ****    *  @pre  @p __s must be a non-NULL pointer
 530:/usr/include/c++/7/ostream ****    *
 531:/usr/include/c++/7/ostream ****    *  Behaves like one of the formatted arithmetic inserters described in
 532:/usr/include/c++/7/ostream ****    *  std::basic_ostream.  After constructing a sentry object with good
 533:/usr/include/c++/7/ostream ****    *  status, this function inserts @c traits::length(__s) characters starting
 534:/usr/include/c++/7/ostream ****    *  at @p __s, widened if necessary, followed by any required padding (as
 535:/usr/include/c++/7/ostream ****    *  determined by [22.2.2.2.2]).  @c __out.width(0) is then called.
 536:/usr/include/c++/7/ostream ****   */
 537:/usr/include/c++/7/ostream ****   template<typename _CharT, typename _Traits>
 538:/usr/include/c++/7/ostream ****     inline basic_ostream<_CharT, _Traits>&
 539:/usr/include/c++/7/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
 540:/usr/include/c++/7/ostream ****     {
 541:/usr/include/c++/7/ostream ****       if (!__s)
 542:/usr/include/c++/7/ostream **** 	__out.setstate(ios_base::badbit);
 543:/usr/include/c++/7/ostream ****       else
 544:/usr/include/c++/7/ostream **** 	__ostream_insert(__out, __s,
 545:/usr/include/c++/7/ostream **** 			 static_cast<streamsize>(_Traits::length(__s)));
 546:/usr/include/c++/7/ostream ****       return __out;
 547:/usr/include/c++/7/ostream ****     }
 548:/usr/include/c++/7/ostream **** 
 549:/usr/include/c++/7/ostream ****   template<typename _CharT, typename _Traits>
 550:/usr/include/c++/7/ostream ****     basic_ostream<_CharT, _Traits> &
 551:/usr/include/c++/7/ostream ****     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);
 552:/usr/include/c++/7/ostream **** 
 553:/usr/include/c++/7/ostream ****   // Partial specializations
 554:/usr/include/c++/7/ostream ****   template<class _Traits>
 555:/usr/include/c++/7/ostream ****     inline basic_ostream<char, _Traits>&
 556:/usr/include/c++/7/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
 557:/usr/include/c++/7/ostream ****     {
 558:/usr/include/c++/7/ostream ****       if (!__s)
 559:/usr/include/c++/7/ostream **** 	__out.setstate(ios_base::badbit);
 560:/usr/include/c++/7/ostream ****       else
 561:/usr/include/c++/7/ostream **** 	__ostream_insert(__out, __s,
 562:/usr/include/c++/7/ostream **** 			 static_cast<streamsize>(_Traits::length(__s)));
 563:/usr/include/c++/7/ostream ****       return __out;
 564:/usr/include/c++/7/ostream ****     }
 565:/usr/include/c++/7/ostream **** 
 566:/usr/include/c++/7/ostream ****   // Signed and unsigned
 567:/usr/include/c++/7/ostream ****   template<class _Traits>
 568:/usr/include/c++/7/ostream ****     inline basic_ostream<char, _Traits>&
 569:/usr/include/c++/7/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
 570:/usr/include/c++/7/ostream ****     { return (__out << reinterpret_cast<const char*>(__s)); }
 571:/usr/include/c++/7/ostream **** 
 572:/usr/include/c++/7/ostream ****   template<class _Traits>
 573:/usr/include/c++/7/ostream ****     inline basic_ostream<char, _Traits> &
 574:/usr/include/c++/7/ostream ****     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
 575:/usr/include/c++/7/ostream ****     { return (__out << reinterpret_cast<const char*>(__s)); }
 576:/usr/include/c++/7/ostream ****   //@}
 577:/usr/include/c++/7/ostream **** 
 578:/usr/include/c++/7/ostream ****   // Standard basic_ostream manipulators
 579:/usr/include/c++/7/ostream **** 
 580:/usr/include/c++/7/ostream ****   /**
 581:/usr/include/c++/7/ostream ****    *  @brief  Write a newline and flush the stream.
 582:/usr/include/c++/7/ostream ****    *
 583:/usr/include/c++/7/ostream ****    *  This manipulator is often mistakenly used when a simple newline is
 584:/usr/include/c++/7/ostream ****    *  desired, leading to poor buffering performance.  See
 585:/usr/include/c++/7/ostream ****    *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html#io.streambuf.buffering
 586:/usr/include/c++/7/ostream ****    *  for more on this subject.
 587:/usr/include/c++/7/ostream ****   */
 588:/usr/include/c++/7/ostream ****   template<typename _CharT, typename _Traits>
 589:/usr/include/c++/7/ostream ****     inline basic_ostream<_CharT, _Traits>&
 590:/usr/include/c++/7/ostream ****     endl(basic_ostream<_CharT, _Traits>& __os)
 591:/usr/include/c++/7/ostream ****     { return flush(__os.put(__os.widen('\n'))); }
 2415              		.loc 13 591 0
 2416 015a 488B0500 		movq	_ZSt4cerr(%rip), %rax	# cerr._vptr.basic_ostream, cerr._vptr.basic_ostream
 2416      000000
 2417              	.LBB2337:
 2418              	.LBB2338:
 2419              	# /usr/include/c++/7/bits/basic_ios.h:450:       { return __check_facet(_M_ctype).widen(__c); }
 2420              		.file 14 "/usr/include/c++/7/bits/basic_ios.h"
   1:/usr/include/c++/7/bits/basic_ios.h **** // Iostreams base classes -*- C++ -*-
   2:/usr/include/c++/7/bits/basic_ios.h **** 
   3:/usr/include/c++/7/bits/basic_ios.h **** // Copyright (C) 1997-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/basic_ios.h **** //
   5:/usr/include/c++/7/bits/basic_ios.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/basic_ios.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/basic_ios.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/basic_ios.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/basic_ios.h **** // any later version.
  10:/usr/include/c++/7/bits/basic_ios.h **** 
  11:/usr/include/c++/7/bits/basic_ios.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/basic_ios.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/basic_ios.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/basic_ios.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/basic_ios.h **** 
  16:/usr/include/c++/7/bits/basic_ios.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/basic_ios.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/basic_ios.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/basic_ios.h **** 
  20:/usr/include/c++/7/bits/basic_ios.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/basic_ios.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/basic_ios.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/basic_ios.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/basic_ios.h **** 
  25:/usr/include/c++/7/bits/basic_ios.h **** /** @file bits/basic_ios.h
  26:/usr/include/c++/7/bits/basic_ios.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/7/bits/basic_ios.h ****  *  Do not attempt to use it directly. @headername{ios}
  28:/usr/include/c++/7/bits/basic_ios.h ****  */
  29:/usr/include/c++/7/bits/basic_ios.h **** 
  30:/usr/include/c++/7/bits/basic_ios.h **** #ifndef _BASIC_IOS_H
  31:/usr/include/c++/7/bits/basic_ios.h **** #define _BASIC_IOS_H 1
  32:/usr/include/c++/7/bits/basic_ios.h **** 
  33:/usr/include/c++/7/bits/basic_ios.h **** #pragma GCC system_header
  34:/usr/include/c++/7/bits/basic_ios.h **** 
  35:/usr/include/c++/7/bits/basic_ios.h **** #include <bits/localefwd.h>
  36:/usr/include/c++/7/bits/basic_ios.h **** #include <bits/locale_classes.h>
  37:/usr/include/c++/7/bits/basic_ios.h **** #include <bits/locale_facets.h>
  38:/usr/include/c++/7/bits/basic_ios.h **** #include <bits/streambuf_iterator.h>
  39:/usr/include/c++/7/bits/basic_ios.h **** #include <bits/move.h>
  40:/usr/include/c++/7/bits/basic_ios.h **** 
  41:/usr/include/c++/7/bits/basic_ios.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/7/bits/basic_ios.h **** {
  43:/usr/include/c++/7/bits/basic_ios.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/7/bits/basic_ios.h **** 
  45:/usr/include/c++/7/bits/basic_ios.h ****   template<typename _Facet>
  46:/usr/include/c++/7/bits/basic_ios.h ****     inline const _Facet&
  47:/usr/include/c++/7/bits/basic_ios.h ****     __check_facet(const _Facet* __f)
  48:/usr/include/c++/7/bits/basic_ios.h ****     {
  49:/usr/include/c++/7/bits/basic_ios.h ****       if (!__f)
  50:/usr/include/c++/7/bits/basic_ios.h **** 	__throw_bad_cast();
  51:/usr/include/c++/7/bits/basic_ios.h ****       return *__f;
  52:/usr/include/c++/7/bits/basic_ios.h ****     }
  53:/usr/include/c++/7/bits/basic_ios.h **** 
  54:/usr/include/c++/7/bits/basic_ios.h ****   /**
  55:/usr/include/c++/7/bits/basic_ios.h ****    *  @brief Template class basic_ios, virtual base class for all
  56:/usr/include/c++/7/bits/basic_ios.h ****    *  stream classes. 
  57:/usr/include/c++/7/bits/basic_ios.h ****    *  @ingroup io
  58:/usr/include/c++/7/bits/basic_ios.h ****    *
  59:/usr/include/c++/7/bits/basic_ios.h ****    *  @tparam _CharT  Type of character stream.
  60:/usr/include/c++/7/bits/basic_ios.h ****    *  @tparam _Traits  Traits for character type, defaults to
  61:/usr/include/c++/7/bits/basic_ios.h ****    *                   char_traits<_CharT>.
  62:/usr/include/c++/7/bits/basic_ios.h ****    *
  63:/usr/include/c++/7/bits/basic_ios.h ****    *  Most of the member functions called dispatched on stream objects
  64:/usr/include/c++/7/bits/basic_ios.h ****    *  (e.g., @c std::cout.foo(bar);) are consolidated in this class.
  65:/usr/include/c++/7/bits/basic_ios.h ****   */
  66:/usr/include/c++/7/bits/basic_ios.h ****   template<typename _CharT, typename _Traits>
  67:/usr/include/c++/7/bits/basic_ios.h ****     class basic_ios : public ios_base
  68:/usr/include/c++/7/bits/basic_ios.h ****     {
  69:/usr/include/c++/7/bits/basic_ios.h ****     public:
  70:/usr/include/c++/7/bits/basic_ios.h ****       //@{
  71:/usr/include/c++/7/bits/basic_ios.h ****       /**
  72:/usr/include/c++/7/bits/basic_ios.h ****        *  These are standard types.  They permit a standardized way of
  73:/usr/include/c++/7/bits/basic_ios.h ****        *  referring to names of (or names dependent on) the template
  74:/usr/include/c++/7/bits/basic_ios.h ****        *  parameters, which are specific to the implementation.
  75:/usr/include/c++/7/bits/basic_ios.h ****       */
  76:/usr/include/c++/7/bits/basic_ios.h ****       typedef _CharT                                 char_type;
  77:/usr/include/c++/7/bits/basic_ios.h ****       typedef typename _Traits::int_type             int_type;
  78:/usr/include/c++/7/bits/basic_ios.h ****       typedef typename _Traits::pos_type             pos_type;
  79:/usr/include/c++/7/bits/basic_ios.h ****       typedef typename _Traits::off_type             off_type;
  80:/usr/include/c++/7/bits/basic_ios.h ****       typedef _Traits                                traits_type;
  81:/usr/include/c++/7/bits/basic_ios.h ****       //@}
  82:/usr/include/c++/7/bits/basic_ios.h **** 
  83:/usr/include/c++/7/bits/basic_ios.h ****       //@{
  84:/usr/include/c++/7/bits/basic_ios.h ****       /**
  85:/usr/include/c++/7/bits/basic_ios.h ****        *  These are non-standard types.
  86:/usr/include/c++/7/bits/basic_ios.h ****       */
  87:/usr/include/c++/7/bits/basic_ios.h ****       typedef ctype<_CharT>                          __ctype_type;
  88:/usr/include/c++/7/bits/basic_ios.h ****       typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
  89:/usr/include/c++/7/bits/basic_ios.h **** 						     __num_put_type;
  90:/usr/include/c++/7/bits/basic_ios.h ****       typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
  91:/usr/include/c++/7/bits/basic_ios.h **** 						     __num_get_type;
  92:/usr/include/c++/7/bits/basic_ios.h ****       //@}
  93:/usr/include/c++/7/bits/basic_ios.h **** 
  94:/usr/include/c++/7/bits/basic_ios.h ****       // Data members:
  95:/usr/include/c++/7/bits/basic_ios.h ****     protected:
  96:/usr/include/c++/7/bits/basic_ios.h ****       basic_ostream<_CharT, _Traits>*                _M_tie;
  97:/usr/include/c++/7/bits/basic_ios.h ****       mutable char_type                              _M_fill;
  98:/usr/include/c++/7/bits/basic_ios.h ****       mutable bool                                   _M_fill_init;
  99:/usr/include/c++/7/bits/basic_ios.h ****       basic_streambuf<_CharT, _Traits>*              _M_streambuf;
 100:/usr/include/c++/7/bits/basic_ios.h **** 
 101:/usr/include/c++/7/bits/basic_ios.h ****       // Cached use_facet<ctype>, which is based on the current locale info.
 102:/usr/include/c++/7/bits/basic_ios.h ****       const __ctype_type*                            _M_ctype;
 103:/usr/include/c++/7/bits/basic_ios.h ****       // For ostream.
 104:/usr/include/c++/7/bits/basic_ios.h ****       const __num_put_type*                          _M_num_put;
 105:/usr/include/c++/7/bits/basic_ios.h ****       // For istream.
 106:/usr/include/c++/7/bits/basic_ios.h ****       const __num_get_type*                          _M_num_get;
 107:/usr/include/c++/7/bits/basic_ios.h **** 
 108:/usr/include/c++/7/bits/basic_ios.h ****     public:
 109:/usr/include/c++/7/bits/basic_ios.h ****       //@{
 110:/usr/include/c++/7/bits/basic_ios.h ****       /**
 111:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  The quick-and-easy status check.
 112:/usr/include/c++/7/bits/basic_ios.h ****        *
 113:/usr/include/c++/7/bits/basic_ios.h ****        *  This allows you to write constructs such as
 114:/usr/include/c++/7/bits/basic_ios.h ****        *  <code>if (!a_stream) ...</code> and <code>while (a_stream) ...</code>
 115:/usr/include/c++/7/bits/basic_ios.h ****       */
 116:/usr/include/c++/7/bits/basic_ios.h **** #if __cplusplus >= 201103L
 117:/usr/include/c++/7/bits/basic_ios.h ****       explicit operator bool() const
 118:/usr/include/c++/7/bits/basic_ios.h ****       { return !this->fail(); }
 119:/usr/include/c++/7/bits/basic_ios.h **** #else
 120:/usr/include/c++/7/bits/basic_ios.h ****       operator void*() const
 121:/usr/include/c++/7/bits/basic_ios.h ****       { return this->fail() ? 0 : const_cast<basic_ios*>(this); }
 122:/usr/include/c++/7/bits/basic_ios.h **** #endif
 123:/usr/include/c++/7/bits/basic_ios.h **** 
 124:/usr/include/c++/7/bits/basic_ios.h ****       bool
 125:/usr/include/c++/7/bits/basic_ios.h ****       operator!() const
 126:/usr/include/c++/7/bits/basic_ios.h ****       { return this->fail(); }
 127:/usr/include/c++/7/bits/basic_ios.h ****       //@}
 128:/usr/include/c++/7/bits/basic_ios.h **** 
 129:/usr/include/c++/7/bits/basic_ios.h ****       /**
 130:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Returns the error state of the stream buffer.
 131:/usr/include/c++/7/bits/basic_ios.h ****        *  @return  A bit pattern (well, isn't everything?)
 132:/usr/include/c++/7/bits/basic_ios.h ****        *
 133:/usr/include/c++/7/bits/basic_ios.h ****        *  See std::ios_base::iostate for the possible bit values.  Most
 134:/usr/include/c++/7/bits/basic_ios.h ****        *  users will call one of the interpreting wrappers, e.g., good().
 135:/usr/include/c++/7/bits/basic_ios.h ****       */
 136:/usr/include/c++/7/bits/basic_ios.h ****       iostate
 137:/usr/include/c++/7/bits/basic_ios.h ****       rdstate() const
 138:/usr/include/c++/7/bits/basic_ios.h ****       { return _M_streambuf_state; }
 139:/usr/include/c++/7/bits/basic_ios.h **** 
 140:/usr/include/c++/7/bits/basic_ios.h ****       /**
 141:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  [Re]sets the error state.
 142:/usr/include/c++/7/bits/basic_ios.h ****        *  @param  __state  The new state flag(s) to set.
 143:/usr/include/c++/7/bits/basic_ios.h ****        *
 144:/usr/include/c++/7/bits/basic_ios.h ****        *  See std::ios_base::iostate for the possible bit values.  Most
 145:/usr/include/c++/7/bits/basic_ios.h ****        *  users will not need to pass an argument.
 146:/usr/include/c++/7/bits/basic_ios.h ****       */
 147:/usr/include/c++/7/bits/basic_ios.h ****       void
 148:/usr/include/c++/7/bits/basic_ios.h ****       clear(iostate __state = goodbit);
 149:/usr/include/c++/7/bits/basic_ios.h **** 
 150:/usr/include/c++/7/bits/basic_ios.h ****       /**
 151:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Sets additional flags in the error state.
 152:/usr/include/c++/7/bits/basic_ios.h ****        *  @param  __state  The additional state flag(s) to set.
 153:/usr/include/c++/7/bits/basic_ios.h ****        *
 154:/usr/include/c++/7/bits/basic_ios.h ****        *  See std::ios_base::iostate for the possible bit values.
 155:/usr/include/c++/7/bits/basic_ios.h ****       */
 156:/usr/include/c++/7/bits/basic_ios.h ****       void
 157:/usr/include/c++/7/bits/basic_ios.h ****       setstate(iostate __state)
 158:/usr/include/c++/7/bits/basic_ios.h ****       { this->clear(this->rdstate() | __state); }
 159:/usr/include/c++/7/bits/basic_ios.h **** 
 160:/usr/include/c++/7/bits/basic_ios.h ****       // Flip the internal state on for the proper state bits, then
 161:/usr/include/c++/7/bits/basic_ios.h ****       // rethrows the propagated exception if bit also set in
 162:/usr/include/c++/7/bits/basic_ios.h ****       // exceptions().
 163:/usr/include/c++/7/bits/basic_ios.h ****       void
 164:/usr/include/c++/7/bits/basic_ios.h ****       _M_setstate(iostate __state)
 165:/usr/include/c++/7/bits/basic_ios.h ****       {
 166:/usr/include/c++/7/bits/basic_ios.h **** 	// 27.6.1.2.1 Common requirements.
 167:/usr/include/c++/7/bits/basic_ios.h **** 	// Turn this on without causing an ios::failure to be thrown.
 168:/usr/include/c++/7/bits/basic_ios.h **** 	_M_streambuf_state |= __state;
 169:/usr/include/c++/7/bits/basic_ios.h **** 	if (this->exceptions() & __state)
 170:/usr/include/c++/7/bits/basic_ios.h **** 	  __throw_exception_again;
 171:/usr/include/c++/7/bits/basic_ios.h ****       }
 172:/usr/include/c++/7/bits/basic_ios.h **** 
 173:/usr/include/c++/7/bits/basic_ios.h ****       /**
 174:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Fast error checking.
 175:/usr/include/c++/7/bits/basic_ios.h ****        *  @return  True if no error flags are set.
 176:/usr/include/c++/7/bits/basic_ios.h ****        *
 177:/usr/include/c++/7/bits/basic_ios.h ****        *  A wrapper around rdstate.
 178:/usr/include/c++/7/bits/basic_ios.h ****       */
 179:/usr/include/c++/7/bits/basic_ios.h ****       bool
 180:/usr/include/c++/7/bits/basic_ios.h ****       good() const
 181:/usr/include/c++/7/bits/basic_ios.h ****       { return this->rdstate() == 0; }
 182:/usr/include/c++/7/bits/basic_ios.h **** 
 183:/usr/include/c++/7/bits/basic_ios.h ****       /**
 184:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Fast error checking.
 185:/usr/include/c++/7/bits/basic_ios.h ****        *  @return  True if the eofbit is set.
 186:/usr/include/c++/7/bits/basic_ios.h ****        *
 187:/usr/include/c++/7/bits/basic_ios.h ****        *  Note that other iostate flags may also be set.
 188:/usr/include/c++/7/bits/basic_ios.h ****       */
 189:/usr/include/c++/7/bits/basic_ios.h ****       bool
 190:/usr/include/c++/7/bits/basic_ios.h ****       eof() const
 191:/usr/include/c++/7/bits/basic_ios.h ****       { return (this->rdstate() & eofbit) != 0; }
 192:/usr/include/c++/7/bits/basic_ios.h **** 
 193:/usr/include/c++/7/bits/basic_ios.h ****       /**
 194:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Fast error checking.
 195:/usr/include/c++/7/bits/basic_ios.h ****        *  @return  True if either the badbit or the failbit is set.
 196:/usr/include/c++/7/bits/basic_ios.h ****        *
 197:/usr/include/c++/7/bits/basic_ios.h ****        *  Checking the badbit in fail() is historical practice.
 198:/usr/include/c++/7/bits/basic_ios.h ****        *  Note that other iostate flags may also be set.
 199:/usr/include/c++/7/bits/basic_ios.h ****       */
 200:/usr/include/c++/7/bits/basic_ios.h ****       bool
 201:/usr/include/c++/7/bits/basic_ios.h ****       fail() const
 202:/usr/include/c++/7/bits/basic_ios.h ****       { return (this->rdstate() & (badbit | failbit)) != 0; }
 203:/usr/include/c++/7/bits/basic_ios.h **** 
 204:/usr/include/c++/7/bits/basic_ios.h ****       /**
 205:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Fast error checking.
 206:/usr/include/c++/7/bits/basic_ios.h ****        *  @return  True if the badbit is set.
 207:/usr/include/c++/7/bits/basic_ios.h ****        *
 208:/usr/include/c++/7/bits/basic_ios.h ****        *  Note that other iostate flags may also be set.
 209:/usr/include/c++/7/bits/basic_ios.h ****       */
 210:/usr/include/c++/7/bits/basic_ios.h ****       bool
 211:/usr/include/c++/7/bits/basic_ios.h ****       bad() const
 212:/usr/include/c++/7/bits/basic_ios.h ****       { return (this->rdstate() & badbit) != 0; }
 213:/usr/include/c++/7/bits/basic_ios.h **** 
 214:/usr/include/c++/7/bits/basic_ios.h ****       /**
 215:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Throwing exceptions on errors.
 216:/usr/include/c++/7/bits/basic_ios.h ****        *  @return  The current exceptions mask.
 217:/usr/include/c++/7/bits/basic_ios.h ****        *
 218:/usr/include/c++/7/bits/basic_ios.h ****        *  This changes nothing in the stream.  See the one-argument version
 219:/usr/include/c++/7/bits/basic_ios.h ****        *  of exceptions(iostate) for the meaning of the return value.
 220:/usr/include/c++/7/bits/basic_ios.h ****       */
 221:/usr/include/c++/7/bits/basic_ios.h ****       iostate
 222:/usr/include/c++/7/bits/basic_ios.h ****       exceptions() const
 223:/usr/include/c++/7/bits/basic_ios.h ****       { return _M_exception; }
 224:/usr/include/c++/7/bits/basic_ios.h **** 
 225:/usr/include/c++/7/bits/basic_ios.h ****       /**
 226:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Throwing exceptions on errors.
 227:/usr/include/c++/7/bits/basic_ios.h ****        *  @param  __except  The new exceptions mask.
 228:/usr/include/c++/7/bits/basic_ios.h ****        *
 229:/usr/include/c++/7/bits/basic_ios.h ****        *  By default, error flags are set silently.  You can set an
 230:/usr/include/c++/7/bits/basic_ios.h ****        *  exceptions mask for each stream; if a bit in the mask becomes set
 231:/usr/include/c++/7/bits/basic_ios.h ****        *  in the error flags, then an exception of type
 232:/usr/include/c++/7/bits/basic_ios.h ****        *  std::ios_base::failure is thrown.
 233:/usr/include/c++/7/bits/basic_ios.h ****        *
 234:/usr/include/c++/7/bits/basic_ios.h ****        *  If the error flag is already set when the exceptions mask is
 235:/usr/include/c++/7/bits/basic_ios.h ****        *  added, the exception is immediately thrown.  Try running the
 236:/usr/include/c++/7/bits/basic_ios.h ****        *  following under GCC 3.1 or later:
 237:/usr/include/c++/7/bits/basic_ios.h ****        *  @code
 238:/usr/include/c++/7/bits/basic_ios.h ****        *  #include <iostream>
 239:/usr/include/c++/7/bits/basic_ios.h ****        *  #include <fstream>
 240:/usr/include/c++/7/bits/basic_ios.h ****        *  #include <exception>
 241:/usr/include/c++/7/bits/basic_ios.h ****        *
 242:/usr/include/c++/7/bits/basic_ios.h ****        *  int main()
 243:/usr/include/c++/7/bits/basic_ios.h ****        *  {
 244:/usr/include/c++/7/bits/basic_ios.h ****        *      std::set_terminate (__gnu_cxx::__verbose_terminate_handler);
 245:/usr/include/c++/7/bits/basic_ios.h ****        *
 246:/usr/include/c++/7/bits/basic_ios.h ****        *      std::ifstream f ("/etc/motd");
 247:/usr/include/c++/7/bits/basic_ios.h ****        *
 248:/usr/include/c++/7/bits/basic_ios.h ****        *      std::cerr << "Setting badbit\n";
 249:/usr/include/c++/7/bits/basic_ios.h ****        *      f.setstate (std::ios_base::badbit);
 250:/usr/include/c++/7/bits/basic_ios.h ****        *
 251:/usr/include/c++/7/bits/basic_ios.h ****        *      std::cerr << "Setting exception mask\n";
 252:/usr/include/c++/7/bits/basic_ios.h ****        *      f.exceptions (std::ios_base::badbit);
 253:/usr/include/c++/7/bits/basic_ios.h ****        *  }
 254:/usr/include/c++/7/bits/basic_ios.h ****        *  @endcode
 255:/usr/include/c++/7/bits/basic_ios.h ****       */
 256:/usr/include/c++/7/bits/basic_ios.h ****       void
 257:/usr/include/c++/7/bits/basic_ios.h ****       exceptions(iostate __except)
 258:/usr/include/c++/7/bits/basic_ios.h ****       {
 259:/usr/include/c++/7/bits/basic_ios.h ****         _M_exception = __except;
 260:/usr/include/c++/7/bits/basic_ios.h ****         this->clear(_M_streambuf_state);
 261:/usr/include/c++/7/bits/basic_ios.h ****       }
 262:/usr/include/c++/7/bits/basic_ios.h **** 
 263:/usr/include/c++/7/bits/basic_ios.h ****       // Constructor/destructor:
 264:/usr/include/c++/7/bits/basic_ios.h ****       /**
 265:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Constructor performs initialization.
 266:/usr/include/c++/7/bits/basic_ios.h ****        *
 267:/usr/include/c++/7/bits/basic_ios.h ****        *  The parameter is passed by derived streams.
 268:/usr/include/c++/7/bits/basic_ios.h ****       */
 269:/usr/include/c++/7/bits/basic_ios.h ****       explicit
 270:/usr/include/c++/7/bits/basic_ios.h ****       basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
 271:/usr/include/c++/7/bits/basic_ios.h ****       : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 272:/usr/include/c++/7/bits/basic_ios.h **** 	_M_ctype(0), _M_num_put(0), _M_num_get(0)
 273:/usr/include/c++/7/bits/basic_ios.h ****       { this->init(__sb); }
 274:/usr/include/c++/7/bits/basic_ios.h **** 
 275:/usr/include/c++/7/bits/basic_ios.h ****       /**
 276:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Empty.
 277:/usr/include/c++/7/bits/basic_ios.h ****        *
 278:/usr/include/c++/7/bits/basic_ios.h ****        *  The destructor does nothing.  More specifically, it does not
 279:/usr/include/c++/7/bits/basic_ios.h ****        *  destroy the streambuf held by rdbuf().
 280:/usr/include/c++/7/bits/basic_ios.h ****       */
 281:/usr/include/c++/7/bits/basic_ios.h ****       virtual
 282:/usr/include/c++/7/bits/basic_ios.h ****       ~basic_ios() { }
 283:/usr/include/c++/7/bits/basic_ios.h **** 
 284:/usr/include/c++/7/bits/basic_ios.h ****       // Members:
 285:/usr/include/c++/7/bits/basic_ios.h ****       /**
 286:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Fetches the current @e tied stream.
 287:/usr/include/c++/7/bits/basic_ios.h ****        *  @return  A pointer to the tied stream, or NULL if the stream is
 288:/usr/include/c++/7/bits/basic_ios.h ****        *           not tied.
 289:/usr/include/c++/7/bits/basic_ios.h ****        *
 290:/usr/include/c++/7/bits/basic_ios.h ****        *  A stream may be @e tied (or synchronized) to a second output
 291:/usr/include/c++/7/bits/basic_ios.h ****        *  stream.  When this stream performs any I/O, the tied stream is
 292:/usr/include/c++/7/bits/basic_ios.h ****        *  first flushed.  For example, @c std::cin is tied to @c std::cout.
 293:/usr/include/c++/7/bits/basic_ios.h ****       */
 294:/usr/include/c++/7/bits/basic_ios.h ****       basic_ostream<_CharT, _Traits>*
 295:/usr/include/c++/7/bits/basic_ios.h ****       tie() const
 296:/usr/include/c++/7/bits/basic_ios.h ****       { return _M_tie; }
 297:/usr/include/c++/7/bits/basic_ios.h **** 
 298:/usr/include/c++/7/bits/basic_ios.h ****       /**
 299:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Ties this stream to an output stream.
 300:/usr/include/c++/7/bits/basic_ios.h ****        *  @param  __tiestr  The output stream.
 301:/usr/include/c++/7/bits/basic_ios.h ****        *  @return  The previously tied output stream, or NULL if the stream
 302:/usr/include/c++/7/bits/basic_ios.h ****        *           was not tied.
 303:/usr/include/c++/7/bits/basic_ios.h ****        *
 304:/usr/include/c++/7/bits/basic_ios.h ****        *  This sets up a new tie; see tie() for more.
 305:/usr/include/c++/7/bits/basic_ios.h ****       */
 306:/usr/include/c++/7/bits/basic_ios.h ****       basic_ostream<_CharT, _Traits>*
 307:/usr/include/c++/7/bits/basic_ios.h ****       tie(basic_ostream<_CharT, _Traits>* __tiestr)
 308:/usr/include/c++/7/bits/basic_ios.h ****       {
 309:/usr/include/c++/7/bits/basic_ios.h ****         basic_ostream<_CharT, _Traits>* __old = _M_tie;
 310:/usr/include/c++/7/bits/basic_ios.h ****         _M_tie = __tiestr;
 311:/usr/include/c++/7/bits/basic_ios.h ****         return __old;
 312:/usr/include/c++/7/bits/basic_ios.h ****       }
 313:/usr/include/c++/7/bits/basic_ios.h **** 
 314:/usr/include/c++/7/bits/basic_ios.h ****       /**
 315:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Accessing the underlying buffer.
 316:/usr/include/c++/7/bits/basic_ios.h ****        *  @return  The current stream buffer.
 317:/usr/include/c++/7/bits/basic_ios.h ****        *
 318:/usr/include/c++/7/bits/basic_ios.h ****        *  This does not change the state of the stream.
 319:/usr/include/c++/7/bits/basic_ios.h ****       */
 320:/usr/include/c++/7/bits/basic_ios.h ****       basic_streambuf<_CharT, _Traits>*
 321:/usr/include/c++/7/bits/basic_ios.h ****       rdbuf() const
 322:/usr/include/c++/7/bits/basic_ios.h ****       { return _M_streambuf; }
 323:/usr/include/c++/7/bits/basic_ios.h **** 
 324:/usr/include/c++/7/bits/basic_ios.h ****       /**
 325:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Changing the underlying buffer.
 326:/usr/include/c++/7/bits/basic_ios.h ****        *  @param  __sb  The new stream buffer.
 327:/usr/include/c++/7/bits/basic_ios.h ****        *  @return  The previous stream buffer.
 328:/usr/include/c++/7/bits/basic_ios.h ****        *
 329:/usr/include/c++/7/bits/basic_ios.h ****        *  Associates a new buffer with the current stream, and clears the
 330:/usr/include/c++/7/bits/basic_ios.h ****        *  error state.
 331:/usr/include/c++/7/bits/basic_ios.h ****        *
 332:/usr/include/c++/7/bits/basic_ios.h ****        *  Due to historical accidents which the LWG refuses to correct, the
 333:/usr/include/c++/7/bits/basic_ios.h ****        *  I/O library suffers from a design error:  this function is hidden
 334:/usr/include/c++/7/bits/basic_ios.h ****        *  in derived classes by overrides of the zero-argument @c rdbuf(),
 335:/usr/include/c++/7/bits/basic_ios.h ****        *  which is non-virtual for hysterical raisins.  As a result, you
 336:/usr/include/c++/7/bits/basic_ios.h ****        *  must use explicit qualifications to access this function via any
 337:/usr/include/c++/7/bits/basic_ios.h ****        *  derived class.  For example:
 338:/usr/include/c++/7/bits/basic_ios.h ****        *
 339:/usr/include/c++/7/bits/basic_ios.h ****        *  @code
 340:/usr/include/c++/7/bits/basic_ios.h ****        *  std::fstream     foo;         // or some other derived type
 341:/usr/include/c++/7/bits/basic_ios.h ****        *  std::streambuf*  p = .....;
 342:/usr/include/c++/7/bits/basic_ios.h ****        *
 343:/usr/include/c++/7/bits/basic_ios.h ****        *  foo.ios::rdbuf(p);            // ios == basic_ios<char>
 344:/usr/include/c++/7/bits/basic_ios.h ****        *  @endcode
 345:/usr/include/c++/7/bits/basic_ios.h ****       */
 346:/usr/include/c++/7/bits/basic_ios.h ****       basic_streambuf<_CharT, _Traits>*
 347:/usr/include/c++/7/bits/basic_ios.h ****       rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
 348:/usr/include/c++/7/bits/basic_ios.h **** 
 349:/usr/include/c++/7/bits/basic_ios.h ****       /**
 350:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Copies fields of __rhs into this.
 351:/usr/include/c++/7/bits/basic_ios.h ****        *  @param  __rhs  The source values for the copies.
 352:/usr/include/c++/7/bits/basic_ios.h ****        *  @return  Reference to this object.
 353:/usr/include/c++/7/bits/basic_ios.h ****        *
 354:/usr/include/c++/7/bits/basic_ios.h ****        *  All fields of __rhs are copied into this object except that rdbuf()
 355:/usr/include/c++/7/bits/basic_ios.h ****        *  and rdstate() remain unchanged.  All values in the pword and iword
 356:/usr/include/c++/7/bits/basic_ios.h ****        *  arrays are copied.  Before copying, each callback is invoked with
 357:/usr/include/c++/7/bits/basic_ios.h ****        *  erase_event.  After copying, each (new) callback is invoked with
 358:/usr/include/c++/7/bits/basic_ios.h ****        *  copyfmt_event.  The final step is to copy exceptions().
 359:/usr/include/c++/7/bits/basic_ios.h ****       */
 360:/usr/include/c++/7/bits/basic_ios.h ****       basic_ios&
 361:/usr/include/c++/7/bits/basic_ios.h ****       copyfmt(const basic_ios& __rhs);
 362:/usr/include/c++/7/bits/basic_ios.h **** 
 363:/usr/include/c++/7/bits/basic_ios.h ****       /**
 364:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Retrieves the @a empty character.
 365:/usr/include/c++/7/bits/basic_ios.h ****        *  @return  The current fill character.
 366:/usr/include/c++/7/bits/basic_ios.h ****        *
 367:/usr/include/c++/7/bits/basic_ios.h ****        *  It defaults to a space (' ') in the current locale.
 368:/usr/include/c++/7/bits/basic_ios.h ****       */
 369:/usr/include/c++/7/bits/basic_ios.h ****       char_type
 370:/usr/include/c++/7/bits/basic_ios.h ****       fill() const
 371:/usr/include/c++/7/bits/basic_ios.h ****       {
 372:/usr/include/c++/7/bits/basic_ios.h **** 	if (!_M_fill_init)
 373:/usr/include/c++/7/bits/basic_ios.h **** 	  {
 374:/usr/include/c++/7/bits/basic_ios.h **** 	    _M_fill = this->widen(' ');
 375:/usr/include/c++/7/bits/basic_ios.h **** 	    _M_fill_init = true;
 376:/usr/include/c++/7/bits/basic_ios.h **** 	  }
 377:/usr/include/c++/7/bits/basic_ios.h **** 	return _M_fill;
 378:/usr/include/c++/7/bits/basic_ios.h ****       }
 379:/usr/include/c++/7/bits/basic_ios.h **** 
 380:/usr/include/c++/7/bits/basic_ios.h ****       /**
 381:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Sets a new @a empty character.
 382:/usr/include/c++/7/bits/basic_ios.h ****        *  @param  __ch  The new character.
 383:/usr/include/c++/7/bits/basic_ios.h ****        *  @return  The previous fill character.
 384:/usr/include/c++/7/bits/basic_ios.h ****        *
 385:/usr/include/c++/7/bits/basic_ios.h ****        *  The fill character is used to fill out space when P+ characters
 386:/usr/include/c++/7/bits/basic_ios.h ****        *  have been requested (e.g., via setw), Q characters are actually
 387:/usr/include/c++/7/bits/basic_ios.h ****        *  used, and Q<P.  It defaults to a space (' ') in the current locale.
 388:/usr/include/c++/7/bits/basic_ios.h ****       */
 389:/usr/include/c++/7/bits/basic_ios.h ****       char_type
 390:/usr/include/c++/7/bits/basic_ios.h ****       fill(char_type __ch)
 391:/usr/include/c++/7/bits/basic_ios.h ****       {
 392:/usr/include/c++/7/bits/basic_ios.h **** 	char_type __old = this->fill();
 393:/usr/include/c++/7/bits/basic_ios.h **** 	_M_fill = __ch;
 394:/usr/include/c++/7/bits/basic_ios.h **** 	return __old;
 395:/usr/include/c++/7/bits/basic_ios.h ****       }
 396:/usr/include/c++/7/bits/basic_ios.h **** 
 397:/usr/include/c++/7/bits/basic_ios.h ****       // Locales:
 398:/usr/include/c++/7/bits/basic_ios.h ****       /**
 399:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Moves to a new locale.
 400:/usr/include/c++/7/bits/basic_ios.h ****        *  @param  __loc  The new locale.
 401:/usr/include/c++/7/bits/basic_ios.h ****        *  @return  The previous locale.
 402:/usr/include/c++/7/bits/basic_ios.h ****        *
 403:/usr/include/c++/7/bits/basic_ios.h ****        *  Calls @c ios_base::imbue(loc), and if a stream buffer is associated
 404:/usr/include/c++/7/bits/basic_ios.h ****        *  with this stream, calls that buffer's @c pubimbue(loc).
 405:/usr/include/c++/7/bits/basic_ios.h ****        *
 406:/usr/include/c++/7/bits/basic_ios.h ****        *  Additional l10n notes are at
 407:/usr/include/c++/7/bits/basic_ios.h ****        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/localization.html
 408:/usr/include/c++/7/bits/basic_ios.h ****       */
 409:/usr/include/c++/7/bits/basic_ios.h ****       locale
 410:/usr/include/c++/7/bits/basic_ios.h ****       imbue(const locale& __loc);
 411:/usr/include/c++/7/bits/basic_ios.h **** 
 412:/usr/include/c++/7/bits/basic_ios.h ****       /**
 413:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Squeezes characters.
 414:/usr/include/c++/7/bits/basic_ios.h ****        *  @param  __c  The character to narrow.
 415:/usr/include/c++/7/bits/basic_ios.h ****        *  @param  __dfault  The character to narrow.
 416:/usr/include/c++/7/bits/basic_ios.h ****        *  @return  The narrowed character.
 417:/usr/include/c++/7/bits/basic_ios.h ****        *
 418:/usr/include/c++/7/bits/basic_ios.h ****        *  Maps a character of @c char_type to a character of @c char,
 419:/usr/include/c++/7/bits/basic_ios.h ****        *  if possible.
 420:/usr/include/c++/7/bits/basic_ios.h ****        *
 421:/usr/include/c++/7/bits/basic_ios.h ****        *  Returns the result of
 422:/usr/include/c++/7/bits/basic_ios.h ****        *  @code
 423:/usr/include/c++/7/bits/basic_ios.h ****        *    std::use_facet<ctype<char_type> >(getloc()).narrow(c,dfault)
 424:/usr/include/c++/7/bits/basic_ios.h ****        *  @endcode
 425:/usr/include/c++/7/bits/basic_ios.h ****        *
 426:/usr/include/c++/7/bits/basic_ios.h ****        *  Additional l10n notes are at
 427:/usr/include/c++/7/bits/basic_ios.h ****        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/localization.html
 428:/usr/include/c++/7/bits/basic_ios.h ****       */
 429:/usr/include/c++/7/bits/basic_ios.h ****       char
 430:/usr/include/c++/7/bits/basic_ios.h ****       narrow(char_type __c, char __dfault) const
 431:/usr/include/c++/7/bits/basic_ios.h ****       { return __check_facet(_M_ctype).narrow(__c, __dfault); }
 432:/usr/include/c++/7/bits/basic_ios.h **** 
 433:/usr/include/c++/7/bits/basic_ios.h ****       /**
 434:/usr/include/c++/7/bits/basic_ios.h ****        *  @brief  Widens characters.
 435:/usr/include/c++/7/bits/basic_ios.h ****        *  @param  __c  The character to widen.
 436:/usr/include/c++/7/bits/basic_ios.h ****        *  @return  The widened character.
 437:/usr/include/c++/7/bits/basic_ios.h ****        *
 438:/usr/include/c++/7/bits/basic_ios.h ****        *  Maps a character of @c char to a character of @c char_type.
 439:/usr/include/c++/7/bits/basic_ios.h ****        *
 440:/usr/include/c++/7/bits/basic_ios.h ****        *  Returns the result of
 441:/usr/include/c++/7/bits/basic_ios.h ****        *  @code
 442:/usr/include/c++/7/bits/basic_ios.h ****        *    std::use_facet<ctype<char_type> >(getloc()).widen(c)
 443:/usr/include/c++/7/bits/basic_ios.h ****        *  @endcode
 444:/usr/include/c++/7/bits/basic_ios.h ****        *
 445:/usr/include/c++/7/bits/basic_ios.h ****        *  Additional l10n notes are at
 446:/usr/include/c++/7/bits/basic_ios.h ****        *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/localization.html
 447:/usr/include/c++/7/bits/basic_ios.h ****       */
 448:/usr/include/c++/7/bits/basic_ios.h ****       char_type
 449:/usr/include/c++/7/bits/basic_ios.h ****       widen(char __c) const
 450:/usr/include/c++/7/bits/basic_ios.h ****       { return __check_facet(_M_ctype).widen(__c); }
 2421              		.loc 14 450 0
 2422 0161 488D1500 		leaq	_ZSt4cerr(%rip), %rdx	#, tmp206
 2422      000000
 2423              	.LVL142:
 2424 0168 488B40E8 		movq	-24(%rax), %rax	# MEM[(long int *)_128 + -24B], MEM[(long int *)_128 + -24B]
 2425              	.LVL143:
 2426 016c 488B9C02 		movq	240(%rdx,%rax), %rbx	# MEM[(const struct basic_ios *)_131]._M_ctype, _136
 2426      F0000000 
 2427              	.LVL144:
 2428              	.LBB2339:
 2429              	.LBB2340:
 2430              	# /usr/include/c++/7/bits/basic_ios.h:49:       if (!__f)
  49:/usr/include/c++/7/bits/basic_ios.h **** 	__throw_bad_cast();
 2431              		.loc 14 49 0
 2432 0174 4885DB   		testq	%rbx, %rbx	# _136
 2433 0177 0F84DA01 		je	.L202	#,
 2433      0000
 2434              	.LVL145:
 2435              	.LBE2340:
 2436              	.LBE2339:
 2437              	.LBB2342:
 2438              	.LBB2343:
 2439              	# /usr/include/c++/7/bits/locale_facets.h:874: 	if (_M_widen_ok)
 874:/usr/include/c++/7/bits/locale_facets.h **** 	  return _M_widen[static_cast<unsigned char>(__c)];
 2440              		.loc 1 874 0
 2441 017d 807B3800 		cmpb	$0, 56(%rbx)	#, MEM[(const struct ctype *)_136]._M_widen_ok
 2442 0181 0F84F900 		je	.L164	#,
 2442      0000
 2443 0187 0FBE7343 		movsbl	67(%rbx), %esi	# MEM[(const struct ctype *)_136]._M_widen, prephitmp_11
 2444              	.LVL146:
 2445              	.L165:
 2446              	.LBE2343:
 2447              	.LBE2342:
 2448              	.LBE2338:
 2449              	.LBE2337:
 2450              	# /usr/include/c++/7/ostream:591:     { return flush(__os.put(__os.widen('\n'))); }
 2451              		.loc 13 591 0
 2452 018b 488D3D00 		leaq	_ZSt4cerr(%rip), %rdi	#,
 2452      000000
 2453              	.LEHB6:
 2454 0192 E8000000 		call	_ZNSo3putEc@PLT	#
 2454      00
 2455              	.LVL147:
 2456              	.LBB2351:
 2457              	.LBB2352:
 2458              	# /usr/include/c++/7/ostream:613:     { return __os.flush(); }
 592:/usr/include/c++/7/ostream **** 
 593:/usr/include/c++/7/ostream ****   /**
 594:/usr/include/c++/7/ostream ****    *  @brief  Write a null character into the output sequence.
 595:/usr/include/c++/7/ostream ****    *
 596:/usr/include/c++/7/ostream ****    *  <em>Null character</em> is @c CharT() by definition.  For CharT
 597:/usr/include/c++/7/ostream ****    *  of @c char, this correctly writes the ASCII @c NUL character
 598:/usr/include/c++/7/ostream ****    *  string terminator.
 599:/usr/include/c++/7/ostream ****   */
 600:/usr/include/c++/7/ostream ****   template<typename _CharT, typename _Traits>
 601:/usr/include/c++/7/ostream ****     inline basic_ostream<_CharT, _Traits>&
 602:/usr/include/c++/7/ostream ****     ends(basic_ostream<_CharT, _Traits>& __os)
 603:/usr/include/c++/7/ostream ****     { return __os.put(_CharT()); }
 604:/usr/include/c++/7/ostream **** 
 605:/usr/include/c++/7/ostream ****   /**
 606:/usr/include/c++/7/ostream ****    *  @brief  Flushes the output stream.
 607:/usr/include/c++/7/ostream ****    *
 608:/usr/include/c++/7/ostream ****    *  This manipulator simply calls the stream's @c flush() member function.
 609:/usr/include/c++/7/ostream ****   */
 610:/usr/include/c++/7/ostream ****   template<typename _CharT, typename _Traits>
 611:/usr/include/c++/7/ostream ****     inline basic_ostream<_CharT, _Traits>&
 612:/usr/include/c++/7/ostream ****     flush(basic_ostream<_CharT, _Traits>& __os)
 613:/usr/include/c++/7/ostream ****     { return __os.flush(); }
 2459              		.loc 13 613 0
 2460 0197 4889C7   		movq	%rax, %rdi	# _134,
 2461 019a E8000000 		call	_ZNSo5flushEv@PLT	#
 2461      00
 2462              	.LVL148:
 2463              	.LBE2352:
 2464              	.LBE2351:
 2465              	.LBE2336:
 2466              	.LBE2335:
 2467              	.LBE2334:
 2468              	.LBB2359:
 2469              	.LBB2360:
 2470              	.LBB2361:
 2471              	.LBB2362:
 2472              	.LBB2363:
 2473              	.LBB2364:
 2474              	.LBB2365:
 2475              	.LBB2366:
 2476              	.LBB2367:
 2477              	.LBB2368:
 2478              	.LBB2369:
 2479              	# /usr/include/c++/7/bits/basic_string.h:211:       { return _M_data() == _M_local_data(); }
 211:/usr/include/c++/7/bits/basic_string.h **** 
 2480              		.loc 8 211 0
 2481 019f 498B3C24 		movq	(%r12), %rdi	# MEM[(const struct basic_string *)_89], _158
 2482              	.LBE2369:
 2483              	.LBE2368:
 2484              	# /usr/include/c++/7/bits/basic_string.h:220: 	if (!_M_is_local())
 220:/usr/include/c++/7/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2485              		.loc 8 220 0
 2486 01a3 4C39EF   		cmpq	%r13, %rdi	# tmp221, _158
 2487 01a6 7405     		je	.L166	#,
 2488              	.LVL149:
 2489              	.LBB2370:
 2490              	.LBB2371:
 2491              	.LBB2372:
 2492              	.LBB2373:
 2493              	# /usr/include/c++/7/ext/new_allocator.h:125: 	::operator delete(__p);
 2494              		.loc 10 125 0
 2495 01a8 E8000000 		call	_ZdlPv@PLT	#
 2495      00
 2496              	.LVL150:
 2497              	.L166:
 2498              	.LBE2373:
 2499              	.LBE2372:
 2500              	.LBE2371:
 2501              	.LBE2370:
 2502              	.LBE2367:
 2503              	.LBE2366:
 2504              	.LBE2365:
 2505              	.LBE2364:
 2506              	.LBE2363:
 2507              	.LBE2362:
 2508              	.LBE2361:
 2509              	.LBE2360:
 2510              	.LBB2374:
 2511              	.LBB2375:
 2512              	.LBB2376:
 2513              	.LBB2377:
 2514              	.LBB2378:
 2515              	.LBB2379:
 2516 01ad 4C89E7   		movq	%r12, %rdi	# _89,
 2517 01b0 E8000000 		call	_ZdlPv@PLT	#
 2517      00
 2518              	.LVL151:
 2519              	.LBE2379:
 2520              	.LBE2378:
 2521              	.LBE2377:
 2522              	.LBE2376:
 2523              	.LBE2375:
 2524              	.LBE2374:
 2525              	.LBE2359:
 2526              	# DebugHelper.h:23: }
  16:DebugHelper.h **** {
  17:DebugHelper.h ****     std::vector<std::string> args = {inputs...};
  18:DebugHelper.h ****     for (auto arg : args)
  19:DebugHelper.h ****     {
  20:DebugHelper.h ****         std::cerr << arg;
  21:DebugHelper.h ****     }
  22:DebugHelper.h ****     std::cerr << std::endl;
  23:DebugHelper.h **** }
 2527              		.loc 11 23 0
 2528 01b5 488B4424 		movq	56(%rsp), %rax	# D.83946, tmp225
 2528      38
 2529 01ba 64483304 		xorq	%fs:40, %rax	#, tmp225
 2529      25280000 
 2529      00
 2530 01c3 0F853D01 		jne	.L203	#,
 2530      0000
 2531 01c9 4883C440 		addq	$64, %rsp	#,
 2532              		.cfi_remember_state
 2533              		.cfi_def_cfa_offset 48
 2534 01cd 5B       		popq	%rbx	#
 2535              		.cfi_def_cfa_offset 40
 2536 01ce 5D       		popq	%rbp	#
 2537              		.cfi_def_cfa_offset 32
 2538              	.LVL152:
 2539 01cf 415C     		popq	%r12	#
 2540              		.cfi_def_cfa_offset 24
 2541              	.LVL153:
 2542 01d1 415D     		popq	%r13	#
 2543              		.cfi_def_cfa_offset 16
 2544              	.LVL154:
 2545 01d3 415E     		popq	%r14	#
 2546              		.cfi_def_cfa_offset 8
 2547 01d5 C3       		ret
 2548              	.LVL155:
 2549 01d6 662E0F1F 		.p2align 4,,10
 2549      84000000 
 2549      0000
 2550              		.p2align 3
 2551              	.L201:
 2552              		.cfi_restore_state
 2553              	.LBB2380:
 2554              	.LBB2322:
 2555              	.LBB2305:
 2556              	.LBB2301:
 2557              	.LBB2297:
 2558              	.LBB2293:
 2559              	.LBB2289:
 2560              	.LBB2285:
 2561              	.LBB2281:
 2562              	.LBB2277:
 2563              	# /usr/include/c++/7/bits/basic_string.tcc:219: 	    _M_data(_M_create(__dnew, size_type(0)));
 218:/usr/include/c++/7/bits/basic_string.tcc **** 	  {
 219:/usr/include/c++/7/bits/basic_string.tcc **** 	    _M_data(_M_create(__dnew, size_type(0)));
 2564              		.loc 12 219 0
 2565 01e0 488D7424 		leaq	8(%rsp), %rsi	#, tmp194
 2565      08
 2566 01e5 31D2     		xorl	%edx, %edx	#
 2567 01e7 4889EF   		movq	%rbp, %rdi	# tmp220,
 2568 01ea E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT	#
 2568      00
 2569              	.LVL156:
 2570              	.LEHE6:
 2571              	.LBB2268:
 2572              	.LBB2269:
 2573              	# /usr/include/c++/7/bits/basic_string.h:200:       { _M_allocated_capacity = __capacity; }
 200:/usr/include/c++/7/bits/basic_string.h **** 
 2574              		.loc 8 200 0
 2575 01ef 488B5424 		movq	8(%rsp), %rdx	# __dnew, __dnew
 2575      08
 2576              	.LBE2269:
 2577              	.LBE2268:
 2578              	.LBB2271:
 2579              	.LBB2272:
 2580              	# /usr/include/c++/7/bits/basic_string.h:168:       { _M_dataplus._M_p = __p; }
 168:/usr/include/c++/7/bits/basic_string.h **** 
 2581              		.loc 8 168 0
 2582 01f4 48894424 		movq	%rax, 16(%rsp)	# _121, MEM[(char * *)&arg]
 2582      10
 2583              	.LVL157:
 2584              	.LBE2272:
 2585              	.LBE2271:
 2586              	.LBB2273:
 2587              	.LBB2270:
 2588              	# /usr/include/c++/7/bits/basic_string.h:200:       { _M_allocated_capacity = __capacity; }
 200:/usr/include/c++/7/bits/basic_string.h **** 
 2589              		.loc 8 200 0
 2590 01f9 48895424 		movq	%rdx, 32(%rsp)	# __dnew, MEM[(size_type *)&arg + 16B]
 2590      20
 2591              	.LVL158:
 2592              	.L159:
 2593              	.LBE2270:
 2594              	.LBE2273:
 2595              	.LBB2274:
 2596              	.LBB2258:
 2597              	.LBB2256:
 2598              	.LBB2250:
 2599              	.LBB2251:
 2600              	.LBB2252:
 2601              	# /usr/include/c++/7/bits/char_traits.h:350: 	return static_cast<char_type*>(__builtin_memcpy(__s1,
 321:/usr/include/c++/7/bits/char_traits.h ****       }
 322:/usr/include/c++/7/bits/char_traits.h **** 
 323:/usr/include/c++/7/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR const char_type*
 324:/usr/include/c++/7/bits/char_traits.h ****       find(const char_type* __s, size_t __n, const char_type& __a)
 325:/usr/include/c++/7/bits/char_traits.h ****       {
 326:/usr/include/c++/7/bits/char_traits.h **** #if __cplusplus > 201402
 327:/usr/include/c++/7/bits/char_traits.h **** 	if (__builtin_constant_p(__n)
 328:/usr/include/c++/7/bits/char_traits.h **** 	    && __builtin_constant_p(__a)
 329:/usr/include/c++/7/bits/char_traits.h **** 	    && __constant_char_array_p(__s, __n))
 330:/usr/include/c++/7/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
 331:/usr/include/c++/7/bits/char_traits.h **** #endif
 332:/usr/include/c++/7/bits/char_traits.h **** 	if (__n == 0)
 333:/usr/include/c++/7/bits/char_traits.h **** 	  return 0;
 334:/usr/include/c++/7/bits/char_traits.h **** 	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
 335:/usr/include/c++/7/bits/char_traits.h ****       }
 336:/usr/include/c++/7/bits/char_traits.h **** 
 337:/usr/include/c++/7/bits/char_traits.h ****       static char_type*
 338:/usr/include/c++/7/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, size_t __n)
 339:/usr/include/c++/7/bits/char_traits.h ****       {
 340:/usr/include/c++/7/bits/char_traits.h **** 	if (__n == 0)
 341:/usr/include/c++/7/bits/char_traits.h **** 	  return __s1;
 342:/usr/include/c++/7/bits/char_traits.h **** 	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
 343:/usr/include/c++/7/bits/char_traits.h ****       }
 344:/usr/include/c++/7/bits/char_traits.h **** 
 345:/usr/include/c++/7/bits/char_traits.h ****       static char_type*
 346:/usr/include/c++/7/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, size_t __n)
 347:/usr/include/c++/7/bits/char_traits.h ****       {
 348:/usr/include/c++/7/bits/char_traits.h **** 	if (__n == 0)
 349:/usr/include/c++/7/bits/char_traits.h **** 	  return __s1;
 350:/usr/include/c++/7/bits/char_traits.h **** 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 2602              		.loc 9 350 0
 2603 01fe 4889DA   		movq	%rbx, %rdx	# _172,
 2604 0201 4C89F6   		movq	%r14, %rsi	# _173,
 2605 0204 4889C7   		movq	%rax, %rdi	# _121,
 2606 0207 E8000000 		call	memcpy@PLT	#
 2606      00
 2607              	.LVL159:
 2608 020c 488B5C24 		movq	8(%rsp), %rbx	# __dnew, _172
 2608      08
 2609              	.LVL160:
 2610 0211 488B4424 		movq	16(%rsp), %rax	# MEM[(const struct basic_string *)&arg], prephitmp_6
 2610      10
 2611 0216 E90DFFFF 		jmp	.L161	#
 2611      FF
 2612              	.LVL161:
 2613 021b 0F1F4400 		.p2align 4,,10
 2613      00
 2614              		.p2align 3
 2615              	.L199:
 2616              	.LBE2252:
 2617              	.LBE2251:
 2618              	.LBE2250:
 2619              	.LBE2256:
 2620              	.LBE2258:
 2621              	.LBE2274:
 2622              	.LBE2277:
 2623              	.LBE2281:
 2624              	.LBE2285:
 2625              	.LBE2289:
 2626              	.LBE2293:
 2627              	.LBE2297:
 2628              	.LBE2301:
 2629              	.LBE2305:
 2630              	.LBE2322:
 2631              	.LBE2380:
 2632              	.LBB2381:
 2633              	.LBB2210:
 2634              	.LBB2205:
 2635              	.LBB2200:
 2636              	.LBB2194:
 2637              	.LBB2189:
 2638              	.LBB2184:
 2639              	.LBB2179:
 2640              	.LBB2175:
 2641              	.LBB2171:
 2642              	.LBB2167:
 2643              	.LBB2163:
 2644              	.LBB2159:
 2645              	.LBB2156:
 2646              	.LBB2153:
 2647              	.LBB2150:
 2648              	.LBB2147:
 2649              	.LBB2144:
 2650              	# /usr/include/c++/7/bits/basic_string.tcc:219: 	    _M_data(_M_create(__dnew, size_type(0)));
 2651              		.loc 12 219 0
 2652 0220 488D7424 		leaq	8(%rsp), %rsi	#, tmp169
 2652      08
 2653 0225 31D2     		xorl	%edx, %edx	#
 2654 0227 4C89E7   		movq	%r12, %rdi	# _89,
 2655              	.LEHB7:
 2656 022a E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT	#
 2656      00
 2657              	.LVL162:
 2658              	.LEHE7:
 2659              	.LBB2136:
 2660              	.LBB2137:
 2661              	# /usr/include/c++/7/bits/basic_string.h:200:       { _M_allocated_capacity = __capacity; }
 200:/usr/include/c++/7/bits/basic_string.h **** 
 2662              		.loc 8 200 0
 2663 022f 488B5424 		movq	8(%rsp), %rdx	# __dnew, __dnew
 2663      08
 2664              	.LBE2137:
 2665              	.LBE2136:
 2666              	.LBB2139:
 2667              	.LBB2140:
 2668              	# /usr/include/c++/7/bits/basic_string.h:168:       { _M_dataplus._M_p = __p; }
 168:/usr/include/c++/7/bits/basic_string.h **** 
 2669              		.loc 8 168 0
 2670 0234 49890424 		movq	%rax, (%r12)	# prephitmp_27, MEM[(char * *)_89]
 2671              	.LVL163:
 2672              	.LBE2140:
 2673              	.LBE2139:
 2674              	.LBB2141:
 2675              	.LBB2138:
 2676              	# /usr/include/c++/7/bits/basic_string.h:200:       { _M_allocated_capacity = __capacity; }
 200:/usr/include/c++/7/bits/basic_string.h **** 
 2677              		.loc 8 200 0
 2678 0238 49895424 		movq	%rdx, 16(%r12)	# __dnew, MEM[(size_type *)_89 + 16B]
 2678      10
 2679              	.LVL164:
 2680              	.L147:
 2681              	.LBE2138:
 2682              	.LBE2141:
 2683              	.LBB2142:
 2684              	.LBB2128:
 2685              	.LBB2126:
 2686              	.LBB2120:
 2687              	.LBB2121:
 2688              	.LBB2122:
 2689              	# /usr/include/c++/7/bits/char_traits.h:350: 	return static_cast<char_type*>(__builtin_memcpy(__s1,
 2690              		.loc 9 350 0
 2691 023d 4889DA   		movq	%rbx, %rdx	# _104,
 2692 0240 4C89F6   		movq	%r14, %rsi	# pretmp_260,
 2693 0243 4889C7   		movq	%rax, %rdi	# prephitmp_27,
 2694 0246 E8000000 		call	memcpy@PLT	#
 2694      00
 2695              	.LVL165:
 2696 024b 488B5C24 		movq	8(%rsp), %rbx	# __dnew, _104
 2696      08
 2697              	.LVL166:
 2698 0250 498B0424 		movq	(%r12), %rax	# MEM[(const struct basic_string *)_89], prephitmp_27
 2699 0254 E965FEFF 		jmp	.L149	#
 2699      FF
 2700              	.LVL167:
 2701 0259 0F1F8000 		.p2align 4,,10
 2701      000000
 2702              		.p2align 3
 2703              	.L160:
 2704              	.LBE2122:
 2705              	.LBE2121:
 2706              	.LBE2120:
 2707              	.LBE2126:
 2708              	.LBE2128:
 2709              	.LBE2142:
 2710              	.LBE2144:
 2711              	.LBE2147:
 2712              	.LBE2150:
 2713              	.LBE2153:
 2714              	.LBE2156:
 2715              	.LBE2159:
 2716              	.LBE2163:
 2717              	.LBE2167:
 2718              	.LBE2171:
 2719              	.LBE2175:
 2720              	.LBE2179:
 2721              	.LBE2184:
 2722              	.LBE2189:
 2723              	.LBE2194:
 2724              	.LBE2200:
 2725              	.LBE2205:
 2726              	.LBE2210:
 2727              	.LBE2381:
 2728              	.LBB2382:
 2729              	.LBB2323:
 2730              	.LBB2306:
 2731              	.LBB2302:
 2732              	.LBB2298:
 2733              	.LBB2294:
 2734              	.LBB2290:
 2735              	.LBB2286:
 2736              	.LBB2282:
 2737              	.LBB2278:
 2738              	# /usr/include/c++/7/bits/basic_string.tcc:225: 	  { this->_S_copy_chars(_M_data(), __beg, __end); 
 220:/usr/include/c++/7/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 221:/usr/include/c++/7/bits/basic_string.tcc **** 	  }
 222:/usr/include/c++/7/bits/basic_string.tcc **** 
 223:/usr/include/c++/7/bits/basic_string.tcc **** 	// Check for out_of_range and length_error exceptions.
 224:/usr/include/c++/7/bits/basic_string.tcc **** 	__try
 225:/usr/include/c++/7/bits/basic_string.tcc **** 	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 2739              		.loc 12 225 0
 2740 0260 488D4510 		leaq	16(%rbp), %rax	#, prephitmp_6
 2741              	.LBB2275:
 2742              	.LBB2259:
 2743              	.LBB2257:
 2744              	.LBB2255:
 2745              	.LBB2254:
 2746              	.LBB2253:
 2747              	# /usr/include/c++/7/bits/char_traits.h:348: 	if (__n == 0)
 348:/usr/include/c++/7/bits/char_traits.h **** 	  return __s1;
 2748              		.loc 9 348 0
 2749 0264 4885DB   		testq	%rbx, %rbx	# _172
 2750 0267 0F84BBFE 		je	.L161	#,
 2750      FFFF
 2751 026d EB8F     		jmp	.L159	#
 2752              	.LVL168:
 2753 026f 90       		.p2align 4,,10
 2754              		.p2align 3
 2755              	.L148:
 2756              	.LBE2253:
 2757              	.LBE2254:
 2758              	.LBE2255:
 2759              	.LBE2257:
 2760              	.LBE2259:
 2761              	.LBE2275:
 2762              	.LBE2278:
 2763              	.LBE2282:
 2764              	.LBE2286:
 2765              	.LBE2290:
 2766              	.LBE2294:
 2767              	.LBE2298:
 2768              	.LBE2302:
 2769              	.LBE2306:
 2770              	.LBE2323:
 2771              	.LBE2382:
 2772              	.LBB2383:
 2773              	.LBB2211:
 2774              	.LBB2206:
 2775              	.LBB2201:
 2776              	.LBB2195:
 2777              	.LBB2190:
 2778              	.LBB2185:
 2779              	.LBB2180:
 2780              	.LBB2176:
 2781              	.LBB2172:
 2782              	.LBB2168:
 2783              	.LBB2164:
 2784              	.LBB2160:
 2785              	.LBB2157:
 2786              	.LBB2154:
 2787              	.LBB2151:
 2788              	.LBB2148:
 2789              	.LBB2145:
 2790              	.LBB2143:
 2791              	.LBB2129:
 2792              	.LBB2127:
 2793              	.LBB2125:
 2794              	.LBB2124:
 2795              	.LBB2123:
 2796 0270 4885DB   		testq	%rbx, %rbx	# _104
 2797 0273 0F8445FE 		je	.L149	#,
 2797      FFFF
 2798 0279 EBC2     		jmp	.L147	#
 2799              	.LVL169:
 2800 027b 0F1F4400 		.p2align 4,,10
 2800      00
 2801              		.p2align 3
 2802              	.L164:
 2803              	.LBE2123:
 2804              	.LBE2124:
 2805              	.LBE2125:
 2806              	.LBE2127:
 2807              	.LBE2129:
 2808              	.LBE2143:
 2809              	.LBE2145:
 2810              	.LBE2148:
 2811              	.LBE2151:
 2812              	.LBE2154:
 2813              	.LBE2157:
 2814              	.LBE2160:
 2815              	.LBE2164:
 2816              	.LBE2168:
 2817              	.LBE2172:
 2818              	.LBE2176:
 2819              	.LBE2180:
 2820              	.LBE2185:
 2821              	.LBE2190:
 2822              	.LBE2195:
 2823              	.LBE2201:
 2824              	.LBE2206:
 2825              	.LBE2211:
 2826              	.LBE2383:
 2827              	.LBB2384:
 2828              	.LBB2357:
 2829              	.LBB2355:
 2830              	.LBB2353:
 2831              	.LBB2349:
 2832              	.LBB2347:
 2833              	.LBB2346:
 2834              	.LBB2344:
 2835              	.LBB2345:
 2836              	# /usr/include/c++/7/bits/locale_facets.h:876: 	this->_M_widen_init();
 876:/usr/include/c++/7/bits/locale_facets.h **** 	return this->do_widen(__c);
 2837              		.loc 1 876 0
 2838 0280 4889DF   		movq	%rbx, %rdi	# _136,
 2839              	.LEHB8:
 2840 0283 E8000000 		call	_ZNKSt5ctypeIcE13_M_widen_initEv@PLT	#
 2840      00
 2841              	.LVL170:
 2842              	# /usr/include/c++/7/bits/locale_facets.h:877: 	return this->do_widen(__c);
 877:/usr/include/c++/7/bits/locale_facets.h ****       }
 2843              		.loc 1 877 0
 2844 0288 488B03   		movq	(%rbx), %rax	# MEM[(const struct ctype *)_136].D.30160._vptr.facet, MEM[(const struct ctype *
 2845 028b 488D1500 		leaq	_ZNKSt5ctypeIcE8do_widenEc(%rip), %rdx	#, tmp211
 2845      000000
 2846 0292 BE0A0000 		movl	$10, %esi	#, prephitmp_11
 2846      00
 2847 0297 488B4030 		movq	48(%rax), %rax	# MEM[(int (*__vtbl_ptr_type) () *)_145 + 48B], _146
 2848 029b 4839D0   		cmpq	%rdx, %rax	# tmp211, _146
 2849 029e 0F84E7FE 		je	.L165	#,
 2849      FFFF
 2850 02a4 4889DF   		movq	%rbx, %rdi	# _136,
 2851 02a7 FFD0     		call	*%rax	# _146
 2852              	.LVL171:
 2853              	.LEHE8:
 2854 02a9 0FBEF0   		movsbl	%al, %esi	# _152, prephitmp_11
 2855 02ac E9DAFEFF 		jmp	.L165	#
 2855      FF
 2856              	.LVL172:
 2857              		.p2align 4,,10
 2858 02b1 0F1F8000 		.p2align 3
 2858      000000
 2859              	.L197:
 2860              	.LBE2345:
 2861              	.LBE2344:
 2862              	.LBE2346:
 2863              	.LBE2347:
 2864              	.LBE2349:
 2865              	.LBE2353:
 2866              	.LBE2355:
 2867              	.LBE2357:
 2868              	.LBE2384:
 2869              	.LBB2385:
 2870              	.LBB2075:
 2871              	.LBB2072:
 2872              	.LBB2069:
 2873              	.LBB2066:
 2874              	.LBB2063:
 2875              	.LBB2060:
 2876              	.LBB2057:
 2877              	.LBB2054:
 2878              	# /usr/include/c++/7/bits/basic_string.tcc:219: 	    _M_data(_M_create(__dnew, size_type(0)));
 219:/usr/include/c++/7/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 2879              		.loc 12 219 0
 2880 02b8 488D7424 		leaq	8(%rsp), %rsi	#, tmp154
 2880      08
 2881 02bd 31D2     		xorl	%edx, %edx	#
 2882 02bf 4889EF   		movq	%rbp, %rdi	# tmp220,
 2883              	.LEHB9:
 2884 02c2 E8000000 		call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT	#
 2884      00
 2885              	.LVL173:
 2886              	.LEHE9:
 2887              	.LBB2046:
 2888              	.LBB2047:
 2889              	# /usr/include/c++/7/bits/basic_string.h:200:       { _M_allocated_capacity = __capacity; }
 200:/usr/include/c++/7/bits/basic_string.h **** 
 2890              		.loc 8 200 0
 2891 02c7 488B5424 		movq	8(%rsp), %rdx	# __dnew, __dnew
 2891      08
 2892              	.LBE2047:
 2893              	.LBE2046:
 2894              	.LBB2049:
 2895              	.LBB2050:
 2896              	# /usr/include/c++/7/bits/basic_string.h:168:       { _M_dataplus._M_p = __p; }
 168:/usr/include/c++/7/bits/basic_string.h **** 
 2897              		.loc 8 168 0
 2898 02cc 48894424 		movq	%rax, 16(%rsp)	# _67, MEM[(char * *)&D.76151]
 2898      10
 2899              	.LVL174:
 2900              	.LBE2050:
 2901              	.LBE2049:
 2902              	.LBB2051:
 2903              	.LBB2048:
 2904              	# /usr/include/c++/7/bits/basic_string.h:200:       { _M_allocated_capacity = __capacity; }
 200:/usr/include/c++/7/bits/basic_string.h **** 
 2905              		.loc 8 200 0
 2906 02d1 48895424 		movq	%rdx, 32(%rsp)	# __dnew, MEM[(size_type *)&D.76151 + 16B]
 2906      20
 2907              	.LVL175:
 2908              	.L142:
 2909              	.LBE2048:
 2910              	.LBE2051:
 2911              	.LBB2052:
 2912              	.LBB2037:
 2913              	.LBB2036:
 2914              	.LBB2033:
 2915              	.LBB2034:
 2916              	.LBB2035:
 2917              	# /usr/include/c++/7/bits/char_traits.h:350: 	return static_cast<char_type*>(__builtin_memcpy(__s1,
 2918              		.loc 9 350 0
 2919 02d6 4C89EA   		movq	%r13, %rdx	# tmp152,
 2920 02d9 4C89E6   		movq	%r12, %rsi	# inputs#0,
 2921 02dc 4889C7   		movq	%rax, %rdi	# _67,
 2922 02df E8000000 		call	memcpy@PLT	#
 2922      00
 2923              	.LVL176:
 2924 02e4 488B4424 		movq	8(%rsp), %rax	# __dnew, prephitmp_5
 2924      08
 2925 02e9 488B5C24 		movq	16(%rsp), %rbx	# MEM[(const struct basic_string *)&D.76151], pretmp_162
 2925      10
 2926 02ee E96DFDFF 		jmp	.L144	#
 2926      FF
 2927              	.LVL177:
 2928              		.p2align 4,,10
 2929 02f3 0F1F4400 		.p2align 3
 2929      00
 2930              	.L143:
 2931              	# /usr/include/c++/7/bits/char_traits.h:348: 	if (__n == 0)
 348:/usr/include/c++/7/bits/char_traits.h **** 	  return __s1;
 2932              		.loc 9 348 0
 2933 02f8 4885C0   		testq	%rax, %rax	# tmp152
 2934 02fb 0F845FFD 		je	.L144	#,
 2934      FFFF
 2935              	.LBE2035:
 2936              	.LBE2034:
 2937              	.LBE2033:
 2938              	.LBE2036:
 2939              	.LBE2037:
 2940              	.LBE2052:
 2941              	# /usr/include/c++/7/bits/basic_string.tcc:225: 	  { this->_S_copy_chars(_M_data(), __beg, __end); 
 2942              		.loc 12 225 0
 2943 0301 4889D8   		movq	%rbx, %rax	# tmp150, _67
 2944              	.LVL178:
 2945 0304 EBD0     		jmp	.L142	#
 2946              	.LVL179:
 2947              	.L203:
 2948              	.LBE2054:
 2949              	.LBE2057:
 2950              	.LBE2060:
 2951              	.LBE2063:
 2952              	.LBE2066:
 2953              	.LBE2069:
 2954              	.LBE2072:
 2955              	.LBE2075:
 2956              	.LBE2385:
 2957              	# DebugHelper.h:23: }
 2958              		.loc 11 23 0
 2959 0306 E8000000 		call	__stack_chk_fail@PLT	#
 2959      00
 2960              	.LVL180:
 2961              	.L198:
 2962              	.LBB2386:
 2963              	.LBB2212:
 2964              	.LBB2207:
 2965              	.LBB2202:
 2966              	.LBB2196:
 2967              	.LBB2191:
 2968              	.LBB2186:
 2969              	.LBB2181:
 2970              	.LBB2177:
 2971              	.LBB2173:
 2972              	.LBB2169:
 2973              	.LBB2165:
 2974              	.LBB2161:
 2975              	.LBB2158:
 2976              	.LBB2155:
 2977              	.LBB2152:
 2978              	.LBB2149:
 2979              	.LBB2146:
 2980              	# /usr/include/c++/7/bits/basic_string.tcc:212: 	  std::__throw_logic_error(__N("basic_string::"
 212:/usr/include/c++/7/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 2981              		.loc 12 212 0
 2982 030b 488D3D00 		leaq	.LC6(%rip), %rdi	#,
 2982      000000
 2983              	.LEHB10:
 2984 0312 E8000000 		call	_ZSt19__throw_logic_errorPKc@PLT	#
 2984      00
 2985              	.LVL181:
 2986              	.LEHE10:
 2987              	.L178:
 2988              	.LBE2146:
 2989              	.LBE2149:
 2990              	.LBE2152:
 2991              	.LBE2155:
 2992              	.LBE2158:
 2993              	.LBE2161:
 2994              	.LBE2165:
 2995              	.LBE2169:
 2996              	.LBE2173:
 2997              	.LBE2177:
 2998              	# /usr/include/c++/7/bits/stl_uninitialized.h:86: 	  __catch(...)
 2999              		.file 15 "/usr/include/c++/7/bits/stl_uninitialized.h"
   1:/usr/include/c++/7/bits/stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:/usr/include/c++/7/bits/stl_uninitialized.h **** 
   3:/usr/include/c++/7/bits/stl_uninitialized.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/stl_uninitialized.h **** //
   5:/usr/include/c++/7/bits/stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/stl_uninitialized.h **** // any later version.
  10:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  11:/usr/include/c++/7/bits/stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/stl_uninitialized.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  16:/usr/include/c++/7/bits/stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  20:/usr/include/c++/7/bits/stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  25:/usr/include/c++/7/bits/stl_uninitialized.h **** /*
  26:/usr/include/c++/7/bits/stl_uninitialized.h ****  *
  27:/usr/include/c++/7/bits/stl_uninitialized.h ****  * Copyright (c) 1994
  28:/usr/include/c++/7/bits/stl_uninitialized.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/7/bits/stl_uninitialized.h ****  *
  30:/usr/include/c++/7/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/7/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/7/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/7/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/7/bits/stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/7/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/7/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/7/bits/stl_uninitialized.h ****  *
  38:/usr/include/c++/7/bits/stl_uninitialized.h ****  *
  39:/usr/include/c++/7/bits/stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/7/bits/stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/7/bits/stl_uninitialized.h ****  *
  42:/usr/include/c++/7/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/7/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/7/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/7/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/7/bits/stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/7/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/7/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/7/bits/stl_uninitialized.h ****  */
  50:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  51:/usr/include/c++/7/bits/stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:/usr/include/c++/7/bits/stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/7/bits/stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/7/bits/stl_uninitialized.h ****  */
  55:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  56:/usr/include/c++/7/bits/stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:/usr/include/c++/7/bits/stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  59:/usr/include/c++/7/bits/stl_uninitialized.h **** #if __cplusplus > 201402L
  60:/usr/include/c++/7/bits/stl_uninitialized.h **** #include <utility>
  61:/usr/include/c++/7/bits/stl_uninitialized.h **** #endif
  62:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  63:/usr/include/c++/7/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
  64:/usr/include/c++/7/bits/stl_uninitialized.h **** #include <type_traits>
  65:/usr/include/c++/7/bits/stl_uninitialized.h **** #endif
  66:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  67:/usr/include/c++/7/bits/stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  68:/usr/include/c++/7/bits/stl_uninitialized.h **** {
  69:/usr/include/c++/7/bits/stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  70:/usr/include/c++/7/bits/stl_uninitialized.h **** 
  71:/usr/include/c++/7/bits/stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  72:/usr/include/c++/7/bits/stl_uninitialized.h ****     struct __uninitialized_copy
  73:/usr/include/c++/7/bits/stl_uninitialized.h ****     {
  74:/usr/include/c++/7/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  75:/usr/include/c++/7/bits/stl_uninitialized.h ****         static _ForwardIterator
  76:/usr/include/c++/7/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  77:/usr/include/c++/7/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  78:/usr/include/c++/7/bits/stl_uninitialized.h ****         {
  79:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  80:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  __try
  81:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    {
  82:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      for (; __first != __last; ++__first, (void)++__cur)
  83:/usr/include/c++/7/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  84:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      return __cur;
  85:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    }
  86:/usr/include/c++/7/bits/stl_uninitialized.h **** 	  __catch(...)
 3000              		.loc 15 86 0
 3001 0317 4889C7   		movq	%rax, %rdi	# tmp185,
 3002 031a C5F877   		vzeroupper
 3003 031d E8000000 		call	__cxa_begin_catch@PLT	#
 3003      00
 3004              	.LVL182:
 3005              	.LEHB11:
 3006              	# /usr/include/c++/7/bits/stl_uninitialized.h:89: 	      __throw_exception_again;
  87:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    {
  88:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  89:/usr/include/c++/7/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 3007              		.loc 15 89 0
 3008 0322 E8000000 		call	__cxa_rethrow@PLT	#
 3008      00
 3009              	.LVL183:
 3010              	.LEHE11:
 3011              	.L200:
 3012              	.LBE2181:
 3013              	.LBE2186:
 3014              	.LBE2191:
 3015              	.LBE2196:
 3016              	.LBE2202:
 3017              	.LBE2207:
 3018              	.LBE2212:
 3019              	.LBE2386:
 3020              	.LBB2387:
 3021              	.LBB2324:
 3022              	.LBB2307:
 3023              	.LBB2303:
 3024              	.LBB2299:
 3025              	.LBB2295:
 3026              	.LBB2291:
 3027              	.LBB2287:
 3028              	.LBB2283:
 3029              	.LBB2279:
 3030              	# /usr/include/c++/7/bits/basic_string.tcc:212: 	  std::__throw_logic_error(__N("basic_string::"
 212:/usr/include/c++/7/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 3031              		.loc 12 212 0
 3032 0327 488D3D00 		leaq	.LC6(%rip), %rdi	#,
 3032      000000
 3033              	.LEHB12:
 3034 032e E8000000 		call	_ZSt19__throw_logic_errorPKc@PLT	#
 3034      00
 3035              	.LVL184:
 3036              	.LEHE12:
 3037              	.L176:
 3038 0333 4889C3   		movq	%rax, %rbx	#, tmp215
 3039 0336 C5F877   		vzeroupper
 3040              	.L169:
 3041              	.LVL185:
 3042              	.LBE2279:
 3043              	.LBE2283:
 3044              	.LBE2287:
 3045              	.LBE2291:
 3046              	.LBE2295:
 3047              	.LBE2299:
 3048              	.LBE2303:
 3049              	.LBE2307:
 3050              	.LBE2324:
 3051              	.LBE2387:
 3052              	.LBB2388:
 3053              	.LBB2389:
 3054              	.LBB2390:
 3055              	.LBB2391:
 3056              	.LBB2392:
 3057              	.LBB2393:
 3058              	.LBB2394:
 3059              	.LBB2395:
 3060              	.LBB2396:
 3061              	.LBB2397:
 3062              	.LBB2398:
 3063              	# /usr/include/c++/7/bits/basic_string.h:211:       { return _M_data() == _M_local_data(); }
 211:/usr/include/c++/7/bits/basic_string.h **** 
 3064              		.loc 8 211 0
 3065 0339 498B3C24 		movq	(%r12), %rdi	# MEM[(const struct basic_string *)_89], _37
 3066              	.LBE2398:
 3067              	.LBE2397:
 3068              	# /usr/include/c++/7/bits/basic_string.h:220: 	if (!_M_is_local())
 220:/usr/include/c++/7/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 3069              		.loc 8 220 0
 3070 033d 4C39EF   		cmpq	%r13, %rdi	# tmp221, _37
 3071 0340 7405     		je	.L170	#,
 3072              	.LVL186:
 3073              	.LBB2399:
 3074              	.LBB2400:
 3075              	.LBB2401:
 3076              	.LBB2402:
 3077              	# /usr/include/c++/7/ext/new_allocator.h:125: 	::operator delete(__p);
 3078              		.loc 10 125 0
 3079 0342 E8000000 		call	_ZdlPv@PLT	#
 3079      00
 3080              	.LVL187:
 3081              	.L170:
 3082              	.LBE2402:
 3083              	.LBE2401:
 3084              	.LBE2400:
 3085              	.LBE2399:
 3086              	.LBE2396:
 3087              	.LBE2395:
 3088              	.LBE2394:
 3089              	.LBE2393:
 3090              	.LBE2392:
 3091              	.LBE2391:
 3092              	.LBE2390:
 3093              	.LBE2389:
 3094              	.LBB2403:
 3095              	.LBB2404:
 3096              	.LBB2405:
 3097              	.LBB2406:
 3098              	.LBB2407:
 3099              	.LBB2408:
 3100 0347 4C89E7   		movq	%r12, %rdi	# _89,
 3101 034a E8000000 		call	_ZdlPv@PLT	#
 3101      00
 3102              	.LVL188:
 3103 034f 4889DF   		movq	%rbx, %rdi	# tmp215,
 3104              	.LEHB13:
 3105 0352 E8000000 		call	_Unwind_Resume@PLT	#
 3105      00
 3106              	.LVL189:
 3107              	.LEHE13:
 3108              	.L202:
 3109              	.LEHB14:
 3110              	.LBE2408:
 3111              	.LBE2407:
 3112              	.LBE2406:
 3113              	.LBE2405:
 3114              	.LBE2404:
 3115              	.LBE2403:
 3116              	.LBE2388:
 3117              	.LBB2409:
 3118              	.LBB2358:
 3119              	.LBB2356:
 3120              	.LBB2354:
 3121              	.LBB2350:
 3122              	.LBB2348:
 3123              	.LBB2341:
 3124              	# /usr/include/c++/7/bits/basic_ios.h:50: 	__throw_bad_cast();
  50:/usr/include/c++/7/bits/basic_ios.h ****       return *__f;
 3125              		.loc 14 50 0
 3126 0357 E8000000 		call	_ZSt16__throw_bad_castv@PLT	#
 3126      00
 3127              	.LVL190:
 3128              	.LEHE14:
 3129              	.L177:
 3130 035c 4889C3   		movq	%rax, %rbx	#, tmp187
 3131              	.LVL191:
 3132              	.LBE2341:
 3133              	.LBE2348:
 3134              	.LBE2350:
 3135              	.LBE2354:
 3136              	.LBE2356:
 3137              	.LBE2358:
 3138              	.LBE2409:
 3139              	.LBB2410:
 3140              	.LBB2213:
 3141              	.LBB2208:
 3142              	.LBB2203:
 3143              	.LBB2197:
 3144              	.LBB2192:
 3145              	.LBB2187:
 3146              	.LBB2182:
 3147              	# /usr/include/c++/7/bits/stl_uninitialized.h:86: 	  __catch(...)
  86:/usr/include/c++/7/bits/stl_uninitialized.h **** 	    {
 3148              		.loc 15 86 0
 3149 035f C5F877   		vzeroupper
 3150 0362 E8000000 		call	__cxa_end_catch@PLT	#
 3150      00
 3151              	.LVL192:
 3152              	.LBE2182:
 3153              	.LBE2187:
 3154              	.LBE2192:
 3155              	.LBE2197:
 3156              	.LBE2203:
 3157              	.LBE2208:
 3158              	.LBE2213:
 3159              	.LBB2214:
 3160              	.LBB2215:
 3161              	.LBB2216:
 3162              	.LBB2217:
 3163              	.LBB2218:
 3164              	.LBB2219:
 3165              	# /usr/include/c++/7/ext/new_allocator.h:125: 	::operator delete(__p);
 3166              		.loc 10 125 0
 3167 0367 4C89E7   		movq	%r12, %rdi	# _89,
 3168 036a E8000000 		call	_ZdlPv@PLT	#
 3168      00
 3169              	.LVL193:
 3170              	.L156:
 3171              	.LBE2219:
 3172              	.LBE2218:
 3173              	.LBE2217:
 3174              	.LBE2216:
 3175              	.LBE2215:
 3176              	.LBE2214:
 3177              	.LBE2410:
 3178              	.LBB2411:
 3179              	.LBB2412:
 3180              	.LBB2413:
 3181              	.LBB2414:
 3182              	.LBB2415:
 3183              	# /usr/include/c++/7/bits/basic_string.h:211:       { return _M_data() == _M_local_data(); }
 211:/usr/include/c++/7/bits/basic_string.h **** 
 3184              		.loc 8 211 0
 3185 036f 488B7C24 		movq	16(%rsp), %rdi	# MEM[(const struct basic_string *)&D.76151], _97
 3185      10
 3186              	.LVL194:
 3187              	.LBE2415:
 3188              	.LBE2414:
 3189              	# /usr/include/c++/7/bits/basic_string.h:220: 	if (!_M_is_local())
 220:/usr/include/c++/7/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 3190              		.loc 8 220 0
 3191 0374 4883C510 		addq	$16, %rbp	#, tmp193
 3192              	.LVL195:
 3193 0378 4839EF   		cmpq	%rbp, %rdi	# tmp193, _97
 3194 037b 7405     		je	.L157	#,
 3195              	.LVL196:
 3196              	.LBB2416:
 3197              	.LBB2417:
 3198              	.LBB2418:
 3199              	.LBB2419:
 3200              	# /usr/include/c++/7/ext/new_allocator.h:125: 	::operator delete(__p);
 3201              		.loc 10 125 0
 3202 037d E8000000 		call	_ZdlPv@PLT	#
 3202      00
 3203              	.LVL197:
 3204              	.L157:
 3205 0382 4889DF   		movq	%rbx, %rdi	# tmp186,
 3206              	.LEHB15:
 3207 0385 E8000000 		call	_Unwind_Resume@PLT	#
 3207      00
 3208              	.LVL198:
 3209              	.L139:
 3210              	.LBE2419:
 3211              	.LBE2418:
 3212              	.LBE2417:
 3213              	.LBE2416:
 3214              	.LBE2413:
 3215              	.LBE2412:
 3216              	.LBE2411:
 3217              	.LBB2420:
 3218              	.LBB2076:
 3219              	.LBB2073:
 3220              	.LBB2070:
 3221              	.LBB2067:
 3222              	.LBB2064:
 3223              	.LBB2061:
 3224              	.LBB2058:
 3225              	.LBB2055:
 3226              	# /usr/include/c++/7/bits/basic_string.tcc:212: 	  std::__throw_logic_error(__N("basic_string::"
 212:/usr/include/c++/7/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 3227              		.loc 12 212 0
 3228 038a 488D3D00 		leaq	.LC6(%rip), %rdi	#,
 3228      000000
 3229              	.LVL199:
 3230 0391 E8000000 		call	_ZSt19__throw_logic_errorPKc@PLT	#
 3230      00
 3231              	.LVL200:
 3232              	.LEHE15:
 3233              	.L179:
 3234 0396 4889C3   		movq	%rax, %rbx	#, tmp186
 3235 0399 C5F877   		vzeroupper
 3236 039c EBD1     		jmp	.L156	#
 3237              	.LVL201:
 3238              	.L175:
 3239              	.LBE2055:
 3240              	.LBE2058:
 3241              	.LBE2061:
 3242              	.LBE2064:
 3243              	.LBE2067:
 3244              	.LBE2070:
 3245              	.LBE2073:
 3246              	.LBE2076:
 3247              	.LBE2420:
 3248              	.LBB2421:
 3249              	.LBB2325:
 3250              	.LBB2326:
 3251              	.LBB2327:
 3252              	.LBB2328:
 3253              	.LBB2329:
 3254              	# /usr/include/c++/7/bits/basic_string.h:211:       { return _M_data() == _M_local_data(); }
 211:/usr/include/c++/7/bits/basic_string.h **** 
 3255              		.loc 8 211 0
 3256 039e 488B7C24 		movq	16(%rsp), %rdi	# MEM[(const struct basic_string *)&arg], _41
 3256      10
 3257              	.LBE2329:
 3258              	.LBE2328:
 3259              	# /usr/include/c++/7/bits/basic_string.h:220: 	if (!_M_is_local())
 220:/usr/include/c++/7/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 3260              		.loc 8 220 0
 3261 03a3 4883C510 		addq	$16, %rbp	#, tmp214
 3262              	.LVL202:
 3263 03a7 4889C3   		movq	%rax, %rbx	#, tmp216
 3264              	.LVL203:
 3265 03aa 4839EF   		cmpq	%rbp, %rdi	# tmp214, _41
 3266 03ad 740A     		je	.L194	#,
 3267              	.LVL204:
 3268              	.LBB2330:
 3269              	.LBB2331:
 3270              	.LBB2332:
 3271              	.LBB2333:
 3272              	# /usr/include/c++/7/ext/new_allocator.h:125: 	::operator delete(__p);
 3273              		.loc 10 125 0
 3274 03af C5F877   		vzeroupper
 3275 03b2 E8000000 		call	_ZdlPv@PLT	#
 3275      00
 3276              	.LVL205:
 3277 03b7 EB80     		jmp	.L169	#
 3278              	.LVL206:
 3279              	.L194:
 3280 03b9 C5F877   		vzeroupper
 3281 03bc E978FFFF 		jmp	.L169	#
 3281      FF
 3282              	.LBE2333:
 3283              	.LBE2332:
 3284              	.LBE2331:
 3285              	.LBE2330:
 3286              	.LBE2327:
 3287              	.LBE2326:
 3288              	.LBE2325:
 3289              	.LBE2421:
 3290              		.cfi_endproc
 3291              	.LFE3697:
 3292              		.section	.gcc_except_table
 3293 001b 00       		.align 4
 3294              	.LLSDA3697:
 3295 001c FF       		.byte	0xff
 3296 001d 9B       		.byte	0x9b
 3297 001e 4D       		.uleb128 .LLSDATT3697-.LLSDATTD3697
 3298              	.LLSDATTD3697:
 3299 001f 01       		.byte	0x1
 3300 0020 44       		.uleb128 .LLSDACSE3697-.LLSDACSB3697
 3301              	.LLSDACSB3697:
 3302 0021 6E       		.uleb128 .LEHB4-.LFB3697
 3303 0022 05       		.uleb128 .LEHE4-.LEHB4
 3304 0023 9607     		.uleb128 .L179-.LFB3697
 3305 0025 00       		.uleb128 0
 3306 0026 C202     		.uleb128 .LEHB5-.LFB3697
 3307 0028 05       		.uleb128 .LEHE5-.LEHB5
 3308 0029 9E07     		.uleb128 .L175-.LFB3697
 3309 002b 00       		.uleb128 0
 3310 002c 9203     		.uleb128 .LEHB6-.LFB3697
 3311 002e 5D       		.uleb128 .LEHE6-.LEHB6
 3312 002f B306     		.uleb128 .L176-.LFB3697
 3313 0031 00       		.uleb128 0
 3314 0032 AA04     		.uleb128 .LEHB7-.LFB3697
 3315 0034 05       		.uleb128 .LEHE7-.LEHB7
 3316 0035 9706     		.uleb128 .L178-.LFB3697
 3317 0037 01       		.uleb128 0x1
 3318 0038 8305     		.uleb128 .LEHB8-.LFB3697
 3319 003a 26       		.uleb128 .LEHE8-.LEHB8
 3320 003b B306     		.uleb128 .L176-.LFB3697
 3321 003d 00       		.uleb128 0
 3322 003e C205     		.uleb128 .LEHB9-.LFB3697
 3323 0040 05       		.uleb128 .LEHE9-.LEHB9
 3324 0041 00       		.uleb128 0
 3325 0042 00       		.uleb128 0
 3326 0043 9206     		.uleb128 .LEHB10-.LFB3697
 3327 0045 05       		.uleb128 .LEHE10-.LEHB10
 3328 0046 9706     		.uleb128 .L178-.LFB3697
 3329 0048 01       		.uleb128 0x1
 3330 0049 A206     		.uleb128 .LEHB11-.LFB3697
 3331 004b 05       		.uleb128 .LEHE11-.LEHB11
 3332 004c DC06     		.uleb128 .L177-.LFB3697
 3333 004e 00       		.uleb128 0
 3334 004f AE06     		.uleb128 .LEHB12-.LFB3697
 3335 0051 05       		.uleb128 .LEHE12-.LEHB12
 3336 0052 B306     		.uleb128 .L176-.LFB3697
 3337 0054 00       		.uleb128 0
 3338 0055 D206     		.uleb128 .LEHB13-.LFB3697
 3339 0057 05       		.uleb128 .LEHE13-.LEHB13
 3340 0058 00       		.uleb128 0
 3341 0059 00       		.uleb128 0
 3342 005a D706     		.uleb128 .LEHB14-.LFB3697
 3343 005c 05       		.uleb128 .LEHE14-.LEHB14
 3344 005d B306     		.uleb128 .L176-.LFB3697
 3345 005f 00       		.uleb128 0
 3346 0060 8507     		.uleb128 .LEHB15-.LFB3697
 3347 0062 11       		.uleb128 .LEHE15-.LEHB15
 3348 0063 00       		.uleb128 0
 3349 0064 00       		.uleb128 0
 3350              	.LLSDACSE3697:
 3351 0065 01       		.byte	0x1
 3352 0066 00       		.byte	0
 3353 0067 00       		.align 4
 3354 0068 00000000 		.long	0
 3355              	
 3356              	.LLSDATT3697:
 3357              		.section	.text._ZN5debug9WriteLineIJPKcEEEvDpT_,"axG",@progbits,_ZN5debug9WriteLineIJPKcEEEvDpT_,c
 3359              		.section	.text._ZN13quicksortcopy11adjust_heapI11SortableReflPFbPS1_S2_EEEvPT_T0_S7_S5_T1_,"axG",@
 3360              		.p2align 4,,15
 3361              		.weak	_ZN13quicksortcopy11adjust_heapI11SortableReflPFbPS1_S2_EEEvPT_T0_S7_S5_T1_
 3363              	_ZN13quicksortcopy11adjust_heapI11SortableReflPFbPS1_S2_EEEvPT_T0_S7_S5_T1_:
 3364              	.LFB4058:
 3365              		.file 16 "Quicksort_Copy.h"
   1:Quicksort_Copy.h **** 
   2:Quicksort_Copy.h **** #ifndef QUICKSORT_COPY_H
   3:Quicksort_Copy.h **** #define QUICKSORT_COPY_H
   4:Quicksort_Copy.h **** 
   5:Quicksort_Copy.h **** #include <utility>
   6:Quicksort_Copy.h **** #include <algorithm>
   7:Quicksort_Copy.h **** #include <inttypes.h>
   8:Quicksort_Copy.h **** 
   9:Quicksort_Copy.h **** #include "CustomMath.h"
  10:Quicksort_Copy.h **** #include "BoseNelsonParameter.generated.h"
  11:Quicksort_Copy.h **** #include "InsertionSort.h"
  12:Quicksort_Copy.h **** 
  13:Quicksort_Copy.h **** namespace quicksortcopy
  14:Quicksort_Copy.h **** {
  15:Quicksort_Copy.h **** 
  16:Quicksort_Copy.h **** #define S_threshold 16
  17:Quicksort_Copy.h **** 
  18:Quicksort_Copy.h **** template <typename TValueType, typename TDistance, typename TCompare>
  19:Quicksort_Copy.h **** void push_heap(TValueType* first, TDistance holeIndex, TDistance topIndex, TValueType value, TCompa
  20:Quicksort_Copy.h **** {
  21:Quicksort_Copy.h ****     TDistance parent = (holeIndex - 1) / 2;
  22:Quicksort_Copy.h ****     while (holeIndex > topIndex && compare(first + parent, &value))
  23:Quicksort_Copy.h ****     {
  24:Quicksort_Copy.h ****         *(first + holeIndex) = std::move(*(first + parent));
  25:Quicksort_Copy.h ****         holeIndex = parent;
  26:Quicksort_Copy.h ****         parent = (holeIndex - 1) / 2;
  27:Quicksort_Copy.h ****     }
  28:Quicksort_Copy.h ****     *(first + holeIndex) = std::move(value);
  29:Quicksort_Copy.h **** }
  30:Quicksort_Copy.h **** 
  31:Quicksort_Copy.h **** template <typename TValueType, typename TDistance, typename TCompare>
  32:Quicksort_Copy.h **** void adjust_heap(TValueType* first, TDistance holeIndex, TDistance len, TValueType value, TCompare 
 3366              		.loc 16 32 0
 3367              		.cfi_startproc
 3368              	.LVL207:
 3369 0000 4157     		pushq	%r15	#
 3370              		.cfi_def_cfa_offset 16
 3371              		.cfi_offset 15, -16
 3372 0002 4989FF   		movq	%rdi, %r15	# first, first
 3373 0005 4156     		pushq	%r14	#
 3374              		.cfi_def_cfa_offset 24
 3375              		.cfi_offset 14, -24
 3376 0007 4155     		pushq	%r13	#
 3377              		.cfi_def_cfa_offset 32
 3378              		.cfi_offset 13, -32
 3379 0009 4989D5   		movq	%rdx, %r13	# len, len
 3380 000c 4154     		pushq	%r12	#
 3381              		.cfi_def_cfa_offset 40
 3382              		.cfi_offset 12, -40
 3383 000e 55       		pushq	%rbp	#
 3384              		.cfi_def_cfa_offset 48
 3385              		.cfi_offset 6, -48
 3386 000f 53       		pushq	%rbx	#
 3387              		.cfi_def_cfa_offset 56
 3388              		.cfi_offset 3, -56
 3389 0010 4C89CB   		movq	%r9, %rbx	# compare, compare
 3390 0013 4883EC58 		subq	$88, %rsp	#,
 3391              		.cfi_def_cfa_offset 144
 3392              	# Quicksort_Copy.h:32: void adjust_heap(TValueType* first, TDistance holeIndex, TDistance len, TVal
 3393              		.loc 16 32 0
 3394 0017 64488B04 		movq	%fs:40, %rax	#, tmp188
 3394      25280000 
 3394      00
 3395 0020 48894424 		movq	%rax, 72(%rsp)	# tmp188, D.83965
 3395      48
 3396 0025 31C0     		xorl	%eax, %eax	# tmp188
 3397              	.LVL208:
 3398              	# Quicksort_Copy.h:36:     while (secondChild < (len - 1) / 2)
  33:Quicksort_Copy.h **** {
  34:Quicksort_Copy.h ****     const TDistance topIndex = holeIndex;
  35:Quicksort_Copy.h ****     TDistance secondChild = holeIndex;
  36:Quicksort_Copy.h ****     while (secondChild < (len - 1) / 2)
 3399              		.loc 16 36 0
 3400 0027 488D42FF 		leaq	-1(%rdx), %rax	#, tmp142
 3401              	# Quicksort_Copy.h:32: void adjust_heap(TValueType* first, TDistance holeIndex, TDistance len, TVal
  32:Quicksort_Copy.h **** {
 3402              		.loc 16 32 0
 3403 002b 48897424 		movq	%rsi, 16(%rsp)	# holeIndex, %sfp
 3403      10
 3404              	# Quicksort_Copy.h:36:     while (secondChild < (len - 1) / 2)
 3405              		.loc 16 36 0
 3406 0030 4889C5   		movq	%rax, %rbp	# tmp142, tmp143
 3407              	# Quicksort_Copy.h:32: void adjust_heap(TValueType* first, TDistance holeIndex, TDistance len, TVal
  32:Quicksort_Copy.h **** {
 3408              		.loc 16 32 0
 3409 0033 48894C24 		movq	%rcx, 24(%rsp)	# value, %sfp
 3409      18
 3410              	# Quicksort_Copy.h:36:     while (secondChild < (len - 1) / 2)
 3411              		.loc 16 36 0
 3412 0038 48C1ED3F 		shrq	$63, %rbp	#, tmp143
 3413              	# Quicksort_Copy.h:32: void adjust_heap(TValueType* first, TDistance holeIndex, TDistance len, TVal
  32:Quicksort_Copy.h **** {
 3414              		.loc 16 32 0
 3415 003c 4C894424 		movq	%r8, 32(%rsp)	# value, %sfp
 3415      20
 3416              	# Quicksort_Copy.h:36:     while (secondChild < (len - 1) / 2)
 3417              		.loc 16 36 0
 3418 0041 4801C5   		addq	%rax, %rbp	# tmp142, tmp144
 3419 0044 4889D0   		movq	%rdx, %rax	# len, _98
 3420 0047 83E001   		andl	$1, %eax	#, _98
 3421 004a 48D1FD   		sarq	%rbp	# tmp145
 3422 004d 48894424 		movq	%rax, 40(%rsp)	# _98, %sfp
 3422      28
 3423 0052 4839EE   		cmpq	%rbp, %rsi	# tmp145, holeIndex
 3424 0055 0F8D7501 		jge	.L205	#,
 3424      0000
 3425 005b 4989F6   		movq	%rsi, %r14	# holeIndex, holeIndex
 3426 005e EB03     		jmp	.L206	#
 3427              	.LVL209:
 3428              		.p2align 4,,10
 3429              		.p2align 3
 3430              	.L209:
 3431              	# Quicksort_Copy.h:32: void adjust_heap(TValueType* first, TDistance holeIndex, TDistance len, TVal
  32:Quicksort_Copy.h **** {
 3432              		.loc 16 32 0
 3433 0060 4D89E6   		movq	%r12, %r14	# holeIndex, holeIndex
 3434              	.LVL210:
 3435              	.L206:
 3436              	# Quicksort_Copy.h:38:         secondChild = 2 * (secondChild + 1);
  37:Quicksort_Copy.h ****     {
  38:Quicksort_Copy.h ****         secondChild = 2 * (secondChild + 1);
 3437              		.loc 16 38 0
 3438 0063 498D4601 		leaq	1(%r14), %rax	#, tmp146
 3439 0067 4C8D2400 		leaq	(%rax,%rax), %r12	#, holeIndex
 3440              	.LVL211:
 3441              	# Quicksort_Copy.h:39:         if (compare(first + secondChild, first + (secondChild - 1)))
  39:Quicksort_Copy.h ****         if (compare(first + secondChild, first + (secondChild - 1)))
 3442              		.loc 16 39 0
 3443 006b 48C1E005 		salq	$5, %rax	#, _6
 3444 006f 498D0C07 		leaq	(%r15,%rax), %rcx	#, _9
 3445              	.LVL212:
 3446 0073 48894C24 		movq	%rcx, 8(%rsp)	# _9, %sfp
 3446      08
 3447 0078 498D7407 		leaq	-16(%r15,%rax), %rsi	#, tmp148
 3447      F0
 3448 007d 4889CF   		movq	%rcx, %rdi	# _9,
 3449 0080 FFD3     		call	*%rbx	# compare
 3450              	.LVL213:
 3451 0082 488B4C24 		movq	8(%rsp), %rcx	# %sfp, _9
 3451      08
 3452 0087 84C0     		testb	%al, %al	# _39
 3453 0089 740F     		je	.L207	#,
 3454              	# Quicksort_Copy.h:41:             secondChild--;
  40:Quicksort_Copy.h ****         {
  41:Quicksort_Copy.h ****             secondChild--;
 3455              		.loc 16 41 0
 3456 008b 4983EC01 		subq	$1, %r12	#, holeIndex
 3457              	.LVL214:
 3458 008f 4C89E2   		movq	%r12, %rdx	# holeIndex, tmp149
 3459 0092 48C1E204 		salq	$4, %rdx	#, tmp149
 3460 0096 498D0C17 		leaq	(%r15,%rdx), %rcx	#, _9
 3461              	.L207:
 3462              	# Quicksort_Copy.h:43:         *(first + holeIndex) = std::move(*(first + secondChild));
  42:Quicksort_Copy.h ****         }
  43:Quicksort_Copy.h ****         *(first + holeIndex) = std::move(*(first + secondChild));
 3463              		.loc 16 43 0
 3464 009a 4D89F0   		movq	%r14, %r8	# holeIndex, holeIndex
 3465 009d C5FA6F01 		vmovdqu	(%rcx), %xmm0	#* _9, *_9
 3466 00a1 49C1E004 		salq	$4, %r8	#, holeIndex
 3467 00a5 C4817811 		vmovups	%xmm0, (%r15,%r8)	# *_9,
 3467      0407
 3468              	.LVL215:
 3469              	# Quicksort_Copy.h:36:     while (secondChild < (len - 1) / 2)
  36:Quicksort_Copy.h ****     {
 3470              		.loc 16 36 0
 3471 00ab 4939EC   		cmpq	%rbp, %r12	# tmp145, holeIndex
 3472 00ae 7CB0     		jl	.L209	#,
 3473              	# Quicksort_Copy.h:47:     if ((len & 1) == 0 && secondChild == (len - 2) / 2)
  44:Quicksort_Copy.h ****         holeIndex = secondChild;
  45:Quicksort_Copy.h ****     }
  46:Quicksort_Copy.h **** 
  47:Quicksort_Copy.h ****     if ((len & 1) == 0 && secondChild == (len - 2) / 2)
 3474              		.loc 16 47 0
 3475 00b0 48837C24 		cmpq	$0, 40(%rsp)	#, %sfp
 3475      2800
 3476 00b6 7525     		jne	.L210	#,
 3477              	.LVL216:
 3478              	.L214:
 3479              	# Quicksort_Copy.h:47:     if ((len & 1) == 0 && secondChild == (len - 2) / 2)
 3480              		.loc 16 47 0 is_stmt 0 discriminator 1
 3481 00b8 498D45FE 		leaq	-2(%r13), %rax	#, tmp156
 3482 00bc 4989C5   		movq	%rax, %r13	# tmp156, tmp158
 3483              	.LVL217:
 3484 00bf 49C1ED3F 		shrq	$63, %r13	#, tmp158
 3485 00c3 4901C5   		addq	%rax, %r13	# tmp156, tmp159
 3486 00c6 49D1FD   		sarq	%r13	# tmp160
 3487 00c9 4D39E5   		cmpq	%r12, %r13	# holeIndex, tmp160
 3488 00cc 0F84BE00 		je	.L211	#,
 3488      0000
 3489 00d2 4C89E2   		movq	%r12, %rdx	# holeIndex, tmp169
 3490 00d5 48C1E204 		salq	$4, %rdx	#, tmp169
 3491 00d9 498D0C17 		leaq	(%r15,%rdx), %rcx	#, _9
 3492              	.LVL218:
 3493              	.L210:
 3494 00dd 488B4424 		movq	24(%rsp), %rax	# %sfp, value
 3494      18
 3495              	.LVL219:
 3496 00e2 48894424 		movq	%rax, 48(%rsp)	# value, value
 3496      30
 3497 00e7 488B4424 		movq	32(%rsp), %rax	# %sfp, value
 3497      20
 3498              	.LVL220:
 3499 00ec 48894424 		movq	%rax, 56(%rsp)	# value, value
 3499      38
 3500              	.LVL221:
 3501              	.LBB2424:
 3502              	.LBB2425:
 3503              	# Quicksort_Copy.h:21:     TDistance parent = (holeIndex - 1) / 2;
  21:Quicksort_Copy.h ****     while (holeIndex > topIndex && compare(first + parent, &value))
 3504              		.loc 16 21 0 is_stmt 1
 3505 00f1 498D4424 		leaq	-1(%r12), %rax	#, tmp170
 3505      FF
 3506 00f6 4989C6   		movq	%rax, %r14	# tmp170, tmp171
 3507 00f9 49C1EE3F 		shrq	$63, %r14	#, tmp171
 3508 00fd 4901C6   		addq	%rax, %r14	# tmp170, tmp172
 3509 0100 49D1FE   		sarq	%r14	# parent
 3510              	.LVL222:
 3511              	# Quicksort_Copy.h:22:     while (holeIndex > topIndex && compare(first + parent, &value))
  22:Quicksort_Copy.h ****     {
 3512              		.loc 16 22 0
 3513 0103 4C3B6424 		cmpq	16(%rsp), %r12	# %sfp, holeIndex
 3513      10
 3514 0108 7E5A     		jle	.L212	#,
 3515 010a 488D6C24 		leaq	48(%rsp), %rbp	#, tmp187
 3515      30
 3516 010f EB33     		jmp	.L213	#
 3517              	.LVL223:
 3518              		.p2align 4,,10
 3519 0111 0F1F8000 		.p2align 3
 3519      000000
 3520              	.L230:
 3521              	# Quicksort_Copy.h:26:         parent = (holeIndex - 1) / 2;
  26:Quicksort_Copy.h ****     }
 3522              		.loc 16 26 0
 3523 0118 498D56FF 		leaq	-1(%r14), %rdx	#, _58
 3524              	# Quicksort_Copy.h:24:         *(first + holeIndex) = std::move(*(first + parent));
  24:Quicksort_Copy.h ****         holeIndex = parent;
 3525              		.loc 16 24 0
 3526 011c C4C17A6F 		vmovdqu	0(%r13), %xmm0	# *_53, *_53
 3526      4500
 3527 0122 4D89F4   		movq	%r14, %r12	# parent, holeIndex
 3528              	.LVL224:
 3529              	# Quicksort_Copy.h:26:         parent = (holeIndex - 1) / 2;
  26:Quicksort_Copy.h ****     }
 3530              		.loc 16 26 0
 3531 0125 4889D0   		movq	%rdx, %rax	# _58, tmp178
 3532 0128 48C1E83F 		shrq	$63, %rax	#, tmp178
 3533              	# Quicksort_Copy.h:24:         *(first + holeIndex) = std::move(*(first + parent));
  24:Quicksort_Copy.h ****         holeIndex = parent;
 3534              		.loc 16 24 0
 3535 012c C5F81101 		vmovups	%xmm0, (%rcx)	# *_53, *_146
 3536              	.LVL225:
 3537              	# Quicksort_Copy.h:26:         parent = (holeIndex - 1) / 2;
  26:Quicksort_Copy.h ****     }
 3538              		.loc 16 26 0
 3539 0130 4801D0   		addq	%rdx, %rax	# _58, tmp179
 3540 0133 48D1F8   		sarq	%rax	# tmp180
 3541              	.LVL226:
 3542              	# Quicksort_Copy.h:22:     while (holeIndex > topIndex && compare(first + parent, &value))
  22:Quicksort_Copy.h ****     {
 3543              		.loc 16 22 0
 3544 0136 4C397424 		cmpq	%r14, 16(%rsp)	# holeIndex, %sfp
 3544      10
 3545 013b 0F8D8700 		jge	.L229	#,
 3545      0000
 3546              	# Quicksort_Copy.h:26:         parent = (holeIndex - 1) / 2;
  26:Quicksort_Copy.h ****     }
 3547              		.loc 16 26 0
 3548 0141 4989C6   		movq	%rax, %r14	# tmp180, parent
 3549              	.LVL227:
 3550              	.L213:
 3551              	# Quicksort_Copy.h:22:     while (holeIndex > topIndex && compare(first + parent, &value))
  22:Quicksort_Copy.h ****     {
 3552              		.loc 16 22 0
 3553 0144 4D89F5   		movq	%r14, %r13	# parent, tmp174
 3554 0147 4889EE   		movq	%rbp, %rsi	# tmp187,
 3555 014a 49C1E504 		salq	$4, %r13	#, tmp174
 3556 014e 4D01FD   		addq	%r15, %r13	# first, _53
 3557 0151 4C89EF   		movq	%r13, %rdi	# _53,
 3558 0154 FFD3     		call	*%rbx	# compare
 3559              	.LVL228:
 3560 0156 4C89E1   		movq	%r12, %rcx	# holeIndex, holeIndex
 3561 0159 48C1E104 		salq	$4, %rcx	#, holeIndex
 3562 015d 4C01F9   		addq	%r15, %rcx	# first, _9
 3563 0160 84C0     		testb	%al, %al	# _54
 3564 0162 75B4     		jne	.L230	#,
 3565              	.LVL229:
 3566              	.L212:
 3567              	.LBE2425:
 3568              	.LBE2424:
 3569              	# Quicksort_Copy.h:55: }
  48:Quicksort_Copy.h ****     {
  49:Quicksort_Copy.h ****         secondChild = 2 * (secondChild + 1);
  50:Quicksort_Copy.h ****         *(first + holeIndex) = std::move(*(first + (secondChild - 1)));
  51:Quicksort_Copy.h ****         holeIndex = secondChild - 1;
  52:Quicksort_Copy.h ****     }
  53:Quicksort_Copy.h **** 
  54:Quicksort_Copy.h ****     push_heap(first, holeIndex, topIndex, std::move(value), compare);
  55:Quicksort_Copy.h **** }
 3570              		.loc 16 55 0
 3571 0164 488B4424 		movq	72(%rsp), %rax	# D.83965, tmp189
 3571      48
 3572 0169 64483304 		xorq	%fs:40, %rax	#, tmp189
 3572      25280000 
 3572      00
 3573              	.LBB2428:
 3574              	.LBB2426:
 3575              	# Quicksort_Copy.h:28:     *(first + holeIndex) = std::move(value);
  28:Quicksort_Copy.h **** }
 3576              		.loc 16 28 0
 3577 0172 C5FA6F44 		vmovdqu	48(%rsp), %xmm0	# value, value
 3577      2430
 3578 0178 C5F81101 		vmovups	%xmm0, (%rcx)	# value, *prephitmp_127
 3579              	.LVL230:
 3580              	.LBE2426:
 3581              	.LBE2428:
 3582              	# Quicksort_Copy.h:55: }
 3583              		.loc 16 55 0
 3584 017c 757D     		jne	.L231	#,
 3585 017e 4883C458 		addq	$88, %rsp	#,
 3586              		.cfi_remember_state
 3587              		.cfi_def_cfa_offset 56
 3588 0182 5B       		popq	%rbx	#
 3589              		.cfi_def_cfa_offset 48
 3590              	.LVL231:
 3591 0183 5D       		popq	%rbp	#
 3592              		.cfi_def_cfa_offset 40
 3593 0184 415C     		popq	%r12	#
 3594              		.cfi_def_cfa_offset 32
 3595 0186 415D     		popq	%r13	#
 3596              		.cfi_def_cfa_offset 24
 3597 0188 415E     		popq	%r14	#
 3598              		.cfi_def_cfa_offset 16
 3599 018a 415F     		popq	%r15	#
 3600              		.cfi_def_cfa_offset 8
 3601              	.LVL232:
 3602 018c C3       		ret
 3603              	.LVL233:
 3604 018d 0F1F00   		.p2align 4,,10
 3605              		.p2align 3
 3606              	.L211:
 3607              		.cfi_restore_state
 3608              	# Quicksort_Copy.h:49:         secondChild = 2 * (secondChild + 1);
  49:Quicksort_Copy.h ****         *(first + holeIndex) = std::move(*(first + (secondChild - 1)));
 3609              		.loc 16 49 0
 3610 0190 498D4424 		leaq	1(%r12), %rax	#, tmp162
 3610      01
 3611              	.LVL234:
 3612              	# Quicksort_Copy.h:50:         *(first + holeIndex) = std::move(*(first + (secondChild - 1)));
  50:Quicksort_Copy.h ****         holeIndex = secondChild - 1;
 3613              		.loc 16 50 0
 3614 0195 4C89E1   		movq	%r12, %rcx	# holeIndex, holeIndex
 3615              	.LVL235:
 3616              	# Quicksort_Copy.h:51:         holeIndex = secondChild - 1;
  51:Quicksort_Copy.h ****     }
 3617              		.loc 16 51 0
 3618 0198 4C8D6400 		leaq	-1(%rax,%rax), %r12	#, holeIndex
 3618      FF
 3619              	.LVL236:
 3620              	# Quicksort_Copy.h:50:         *(first + holeIndex) = std::move(*(first + (secondChild - 1)));
  50:Quicksort_Copy.h ****         holeIndex = secondChild - 1;
 3621              		.loc 16 50 0
 3622 019d 4889C2   		movq	%rax, %rdx	# tmp162, tmp165
 3623 01a0 48C1E104 		salq	$4, %rcx	#, holeIndex
 3624 01a4 48C1E205 		salq	$5, %rdx	#, tmp165
 3625 01a8 C4C17A6F 		vmovdqu	-16(%r15,%rdx), %xmm0	# *_23, *_23
 3625      4417F0
 3626 01af 4C89E2   		movq	%r12, %rdx	# holeIndex, tmp169
 3627 01b2 48C1E204 		salq	$4, %rdx	#, tmp169
 3628 01b6 C4C17811 		vmovups	%xmm0, (%r15,%rcx)	# *_23, *_26
 3628      040F
 3629 01bc 498D0C17 		leaq	(%r15,%rdx), %rcx	#, _9
 3630 01c0 E918FFFF 		jmp	.L210	#
 3630      FF
 3631              	.LVL237:
 3632              		.p2align 4,,10
 3633 01c5 0F1F00   		.p2align 3
 3634              	.L229:
 3635              	.LBB2429:
 3636              	.LBB2427:
 3637              	# Quicksort_Copy.h:22:     while (holeIndex > topIndex && compare(first + parent, &value))
  22:Quicksort_Copy.h ****     {
 3638              		.loc 16 22 0
 3639 01c8 4C89E9   		movq	%r13, %rcx	# _53, _9
 3640 01cb EB97     		jmp	.L212	#
 3641              	.LVL238:
 3642 01cd 0F1F00   		.p2align 4,,10
 3643              		.p2align 3
 3644              	.L205:
 3645              	.LBE2427:
 3646              	.LBE2429:
 3647              	# Quicksort_Copy.h:47:     if ((len & 1) == 0 && secondChild == (len - 2) / 2)
  47:Quicksort_Copy.h ****     {
 3648              		.loc 16 47 0
 3649 01d0 48837C24 		cmpq	$0, 40(%rsp)	#, %sfp
 3649      2800
 3650 01d6 4989F4   		movq	%rsi, %r12	# holeIndex, holeIndex
 3651 01d9 0F84D9FE 		je	.L214	#,
 3651      FFFF
 3652              	.LVL239:
 3653 01df 488B4424 		movq	32(%rsp), %rax	# %sfp, value
 3653      20
 3654              	.LVL240:
 3655 01e4 49C1E404 		salq	$4, %r12	#, holeIndex
 3656 01e8 48894C24 		movq	%rcx, 48(%rsp)	# value, value
 3656      30
 3657 01ed 4B8D0C27 		leaq	(%r15,%r12), %rcx	#, _9
 3658              	.LVL241:
 3659 01f1 48894424 		movq	%rax, 56(%rsp)	# value, value
 3659      38
 3660              	.LVL242:
 3661 01f6 E969FFFF 		jmp	.L212	#
 3661      FF
 3662              	.LVL243:
 3663              	.L231:
 3664              	# Quicksort_Copy.h:55: }
 3665              		.loc 16 55 0
 3666 01fb E8000000 		call	__stack_chk_fail@PLT	#
 3666      00
 3667              	.LVL244:
 3668              		.cfi_endproc
 3669              	.LFE4058:
 3671              		.section	.text._ZN13quicksortcopy11heap_selectI11SortableRefPFbPS1_S2_EEEvPT_S6_S6_T0_,"axG",@prog
 3672              		.p2align 4,,15
 3673              		.weak	_ZN13quicksortcopy11heap_selectI11SortableRefPFbPS1_S2_EEEvPT_S6_S6_T0_
 3675              	_ZN13quicksortcopy11heap_selectI11SortableRefPFbPS1_S2_EEEvPT_S6_S6_T0_:
 3676              	.LFB3960:
  56:Quicksort_Copy.h **** 
  57:Quicksort_Copy.h **** template <typename TValueType, typename TCompare>
  58:Quicksort_Copy.h **** void make_heap(TValueType* first, TValueType* last, TCompare& compare)
  59:Quicksort_Copy.h **** {
  60:Quicksort_Copy.h ****     if (last - first < 2)
  61:Quicksort_Copy.h ****     {
  62:Quicksort_Copy.h ****         return;
  63:Quicksort_Copy.h ****     }
  64:Quicksort_Copy.h **** 
  65:Quicksort_Copy.h ****     const long int len = last - first;
  66:Quicksort_Copy.h ****     long int parent = (len - 2) / 2;
  67:Quicksort_Copy.h ****     while (true)
  68:Quicksort_Copy.h ****     {
  69:Quicksort_Copy.h ****         TValueType value = std::move(*(first + parent));
  70:Quicksort_Copy.h ****         adjust_heap(first, parent, len, std::move(value), compare);
  71:Quicksort_Copy.h ****         if (parent == 0)
  72:Quicksort_Copy.h ****         {
  73:Quicksort_Copy.h ****             return;
  74:Quicksort_Copy.h ****         }
  75:Quicksort_Copy.h ****         parent--;
  76:Quicksort_Copy.h ****     }
  77:Quicksort_Copy.h **** }
  78:Quicksort_Copy.h **** 
  79:Quicksort_Copy.h **** template <typename TValueType, typename TCompare>
  80:Quicksort_Copy.h **** inline
  81:Quicksort_Copy.h **** void pop_heap(TValueType* first, TValueType* last, TValueType* result, TCompare& compare)
  82:Quicksort_Copy.h **** {
  83:Quicksort_Copy.h ****     TValueType value = std::move(*result);
  84:Quicksort_Copy.h ****     *result = std::move(*first);
  85:Quicksort_Copy.h ****     adjust_heap(first, (long int) 0, last - first, std::move(value), compare);
  86:Quicksort_Copy.h **** }
  87:Quicksort_Copy.h **** 
  88:Quicksort_Copy.h **** template <typename TValueType, typename TCompare>
  89:Quicksort_Copy.h **** void sort_heap(TValueType* first, TValueType* last, TCompare& compare)
  90:Quicksort_Copy.h **** {
  91:Quicksort_Copy.h ****     while (last - first > 1)
  92:Quicksort_Copy.h ****     {
  93:Quicksort_Copy.h ****         --last;
  94:Quicksort_Copy.h ****         pop_heap(first, last, last, compare);
  95:Quicksort_Copy.h ****     }
  96:Quicksort_Copy.h **** }
  97:Quicksort_Copy.h **** 
  98:Quicksort_Copy.h **** 
  99:Quicksort_Copy.h **** template <typename TValueType, typename TCompare>
 100:Quicksort_Copy.h **** void heap_select(TValueType* first, TValueType* middle, TValueType* last, TCompare compare)
 3677              		.loc 16 100 0
 3678              		.cfi_startproc
 3679              	.LVL245:
 3680 0000 4157     		pushq	%r15	#
 3681              		.cfi_def_cfa_offset 16
 3682              		.cfi_offset 15, -16
 3683              	.LBB2436:
 3684              	.LBB2437:
 3685              	# Quicksort_Copy.h:60:     if (last - first < 2)
  60:Quicksort_Copy.h ****     {
 3686              		.loc 16 60 0
 3687 0002 4889F0   		movq	%rsi, %rax	# middle, _24
 3688              	.LBE2437:
 3689              	.LBE2436:
 3690              	# Quicksort_Copy.h:100: void heap_select(TValueType* first, TValueType* middle, TValueType* last, T
 3691              		.loc 16 100 0
 3692 0005 4156     		pushq	%r14	#
 3693              		.cfi_def_cfa_offset 24
 3694              		.cfi_offset 14, -24
 3695              	.LBB2441:
 3696              	.LBB2439:
 3697              	# Quicksort_Copy.h:60:     if (last - first < 2)
  60:Quicksort_Copy.h ****     {
 3698              		.loc 16 60 0
 3699 0007 4829F8   		subq	%rdi, %rax	# first, _24
 3700              	.LBE2439:
 3701              	.LBE2441:
 3702              	# Quicksort_Copy.h:100: void heap_select(TValueType* first, TValueType* middle, TValueType* last, T
 3703              		.loc 16 100 0
 3704 000a 4155     		pushq	%r13	#
 3705              		.cfi_def_cfa_offset 32
 3706              		.cfi_offset 13, -32
 3707 000c 4989CD   		movq	%rcx, %r13	# compare, compare
 3708 000f 4154     		pushq	%r12	#
 3709              		.cfi_def_cfa_offset 40
 3710              		.cfi_offset 12, -40
 3711 0011 4989FC   		movq	%rdi, %r12	# first, first
 3712 0014 55       		pushq	%rbp	#
 3713              		.cfi_def_cfa_offset 48
 3714              		.cfi_offset 6, -48
 3715 0015 4889F5   		movq	%rsi, %rbp	# middle, middle
 3716 0018 53       		pushq	%rbx	#
 3717              		.cfi_def_cfa_offset 56
 3718              		.cfi_offset 3, -56
 3719 0019 4883EC18 		subq	$24, %rsp	#,
 3720              		.cfi_def_cfa_offset 80
 3721              	# Quicksort_Copy.h:100: void heap_select(TValueType* first, TValueType* middle, TValueType* last, T
 3722              		.loc 16 100 0
 3723 001d 48891424 		movq	%rdx, (%rsp)	# last, %sfp
 3724              	.LBB2442:
 3725              	.LBB2440:
 3726              	# Quicksort_Copy.h:60:     if (last - first < 2)
  60:Quicksort_Copy.h ****     {
 3727              		.loc 16 60 0
 3728 0021 48894424 		movq	%rax, 8(%rsp)	# _24, %sfp
 3728      08
 3729 0026 4883F810 		cmpq	$16, %rax	#, _24
 3730 002a 7E51     		jle	.L233	#,
 3731              	# Quicksort_Copy.h:65:     const long int len = last - first;
  65:Quicksort_Copy.h ****     long int parent = (len - 2) / 2;
 3732              		.loc 16 65 0
 3733 002c 4989C7   		movq	%rax, %r15	# _24, tmp137
 3734 002f 49C1FF04 		sarq	$4, %r15	#, tmp137
 3735              	.LVL246:
 3736              	# Quicksort_Copy.h:66:     long int parent = (len - 2) / 2;
  66:Quicksort_Copy.h ****     while (true)
 3737              		.loc 16 66 0
 3738 0033 498D57FE 		leaq	-2(%r15), %rdx	#, tmp138
 3739              	.LVL247:
 3740 0037 4889D0   		movq	%rdx, %rax	# tmp138, tmp139
 3741 003a 48C1E83F 		shrq	$63, %rax	#, tmp139
 3742 003e 4801D0   		addq	%rdx, %rax	# tmp138, tmp140
 3743 0041 48D1F8   		sarq	%rax	# tmp140
 3744 0044 4989C2   		movq	%rax, %r10	# parent, tmp142
 3745 0047 4989C6   		movq	%rax, %r14	# tmp140, parent
 3746              	.LVL248:
 3747 004a 49C1E204 		salq	$4, %r10	#, tmp142
 3748 004e 4A8D1C17 		leaq	(%rdi,%r10), %rbx	#, ivtmp.554
 3749 0052 EB08     		jmp	.L235	#
 3750              	.LVL249:
 3751              		.p2align 4,,10
 3752 0054 0F1F4000 		.p2align 3
 3753              	.L248:
 3754              	.LBB2438:
 3755              	# Quicksort_Copy.h:75:         parent--;
  75:Quicksort_Copy.h ****     }
 3756              		.loc 16 75 0
 3757 0058 4983EE01 		subq	$1, %r14	#, parent
 3758              	.LVL250:
 3759              	.L235:
 3760              	# Quicksort_Copy.h:69:         TValueType value = std::move(*(first + parent));
  69:Quicksort_Copy.h ****         adjust_heap(first, parent, len, std::move(value), compare);
 3761              		.loc 16 69 0
 3762 005c 488B0B   		movq	(%rbx), %rcx	# MEM[base: _50, offset: 0], value
 3763              	.LVL251:
 3764              	# Quicksort_Copy.h:70:         adjust_heap(first, parent, len, std::move(value), compare);
  70:Quicksort_Copy.h ****         if (parent == 0)
 3765              		.loc 16 70 0
 3766 005f 4D89E9   		movq	%r13, %r9	# compare,
 3767 0062 4C89FA   		movq	%r15, %rdx	# tmp137,
 3768 0065 4C89F6   		movq	%r14, %rsi	# parent,
 3769 0068 4C8B4308 		movq	8(%rbx), %r8	# MEM[base: _50, offset: 0], tmp162
 3770 006c 4C89E7   		movq	%r12, %rdi	# first,
 3771 006f 4883EB10 		subq	$16, %rbx	#, ivtmp.554
 3772 0073 E8000000 		call	_ZN13quicksortcopy11adjust_heapI11SortableReflPFbPS1_S2_EEEvPT_T0_S7_S5_T1_	#
 3772      00
 3773              	.LVL252:
 3774              	# Quicksort_Copy.h:71:         if (parent == 0)
  71:Quicksort_Copy.h ****         {
 3775              		.loc 16 71 0
 3776 0078 4D85F6   		testq	%r14, %r14	# parent
 3777 007b 75DB     		jne	.L248	#,
 3778              	.LVL253:
 3779              	.L233:
 3780              	.LBE2438:
 3781              	.LBE2440:
 3782              	.LBE2442:
 3783              	.LBB2443:
 3784              	# Quicksort_Copy.h:103:     for (TValueType* i = middle; i < last; ++i)
 101:Quicksort_Copy.h **** {
 102:Quicksort_Copy.h ****     make_heap(first, middle, compare);
 103:Quicksort_Copy.h ****     for (TValueType* i = middle; i < last; ++i)
 3785              		.loc 16 103 0 discriminator 1
 3786 007d 488B0424 		movq	(%rsp), %rax	# %sfp, last
 3787 0081 4839C5   		cmpq	%rax, %rbp	# last, middle
 3788 0084 7366     		jnb	.L246	#,
 3789              	.LBB2444:
 3790              	.LBB2445:
 3791              	# Quicksort_Copy.h:85:     adjust_heap(first, (long int) 0, last - first, std::move(value), compare
  85:Quicksort_Copy.h **** }
 3792              		.loc 16 85 0
 3793 0086 4C8B7424 		movq	8(%rsp), %r14	# %sfp, _24
 3793      08
 3794 008b 488D5D10 		leaq	16(%rbp), %rbx	#, middle
 3795 008f 4883C00F 		addq	$15, %rax	#, last
 3796 0093 4829D8   		subq	%rbx, %rax	# middle, tmp150
 3797 0096 4883E0F0 		andq	$-16, %rax	#, tmp152
 3798 009a 4C8D7C05 		leaq	16(%rbp,%rax), %r15	#, _43
 3798      10
 3799 009f 49C1FE04 		sarq	$4, %r14	#, _24
 3800 00a3 EB0F     		jmp	.L238	#
 3801              	.LVL254:
 3802              		.p2align 4,,10
 3803 00a5 0F1F00   		.p2align 3
 3804              	.L237:
 3805              	.LBE2445:
 3806              	.LBE2444:
 3807              	# Quicksort_Copy.h:103:     for (TValueType* i = middle; i < last; ++i)
 3808              		.loc 16 103 0 discriminator 2
 3809 00a8 4889DD   		movq	%rbx, %rbp	# middle, middle
 3810              	.LVL255:
 3811 00ab 4C39FB   		cmpq	%r15, %rbx	# _43, middle
 3812 00ae 743C     		je	.L246	#,
 3813              	.L249:
 3814 00b0 4883C310 		addq	$16, %rbx	#, middle
 3815              	.LVL256:
 3816              	.L238:
 3817              	# Quicksort_Copy.h:105:         if (compare(i, first))
 104:Quicksort_Copy.h ****     {
 105:Quicksort_Copy.h ****         if (compare(i, first))
 3818              		.loc 16 105 0
 3819 00b4 4C89E6   		movq	%r12, %rsi	# first,
 3820 00b7 4889EF   		movq	%rbp, %rdi	# middle,
 3821 00ba 41FFD5   		call	*%r13	# compare
 3822              	.LVL257:
 3823 00bd 84C0     		testb	%al, %al	# _11
 3824 00bf 74E7     		je	.L237	#,
 3825              	.LVL258:
 3826              	.LBB2448:
 3827              	.LBB2446:
 3828              	# Quicksort_Copy.h:83:     TValueType value = std::move(*result);
  83:Quicksort_Copy.h ****     *result = std::move(*first);
 3829              		.loc 16 83 0
 3830 00c1 488B4D00 		movq	0(%rbp), %rcx	# MEM[base: i_14, offset: 0], value
 3831              	.LVL259:
 3832              	# Quicksort_Copy.h:85:     adjust_heap(first, (long int) 0, last - first, std::move(value), compare
  85:Quicksort_Copy.h **** }
 3833              		.loc 16 85 0
 3834 00c5 4D89E9   		movq	%r13, %r9	# compare,
 3835 00c8 4C89F2   		movq	%r14, %rdx	# tmp147,
 3836 00cb 31F6     		xorl	%esi, %esi	#
 3837              	# Quicksort_Copy.h:83:     TValueType value = std::move(*result);
  83:Quicksort_Copy.h ****     *result = std::move(*first);
 3838              		.loc 16 83 0
 3839 00cd 4C8B4508 		movq	8(%rbp), %r8	# MEM[base: i_14, offset: 0], value
 3840              	# Quicksort_Copy.h:85:     adjust_heap(first, (long int) 0, last - first, std::move(value), compare
  85:Quicksort_Copy.h **** }
 3841              		.loc 16 85 0
 3842 00d1 4C89E7   		movq	%r12, %rdi	# first,
 3843              	# Quicksort_Copy.h:84:     *result = std::move(*first);
  84:Quicksort_Copy.h ****     adjust_heap(first, (long int) 0, last - first, std::move(value), compare);
 3844              		.loc 16 84 0
 3845 00d4 C4C17A6F 		vmovdqu	(%r12), %xmm0	# *first_6(D), *first_6(D)
 3845      0424
 3846 00da C5F81145 		vmovups	%xmm0, 0(%rbp)	# *first_6(D), MEM[base: i_14, offset: 0B]
 3846      00
 3847              	.LBE2446:
 3848              	.LBE2448:
 3849              	# Quicksort_Copy.h:103:     for (TValueType* i = middle; i < last; ++i)
 103:Quicksort_Copy.h ****     {
 3850              		.loc 16 103 0
 3851 00df 4889DD   		movq	%rbx, %rbp	# middle, middle
 3852              	.LVL260:
 3853              	.LBB2449:
 3854              	.LBB2447:
 3855              	# Quicksort_Copy.h:85:     adjust_heap(first, (long int) 0, last - first, std::move(value), compare
  85:Quicksort_Copy.h **** }
 3856              		.loc 16 85 0
 3857 00e2 E8000000 		call	_ZN13quicksortcopy11adjust_heapI11SortableReflPFbPS1_S2_EEEvPT_T0_S7_S5_T1_	#
 3857      00
 3858              	.LVL261:
 3859              	.LBE2447:
 3860              	.LBE2449:
 3861              	# Quicksort_Copy.h:103:     for (TValueType* i = middle; i < last; ++i)
 103:Quicksort_Copy.h ****     {
 3862              		.loc 16 103 0
 3863 00e7 4C39FB   		cmpq	%r15, %rbx	# _43, middle
 3864 00ea 75C4     		jne	.L249	#,
 3865              	.LVL262:
 3866              	.L246:
 3867              	.LBE2443:
 3868              	# Quicksort_Copy.h:110: }
 106:Quicksort_Copy.h ****         {
 107:Quicksort_Copy.h ****             pop_heap(first, middle, i, compare);
 108:Quicksort_Copy.h ****         }
 109:Quicksort_Copy.h ****     }
 110:Quicksort_Copy.h **** }
 3869              		.loc 16 110 0
 3870 00ec 4883C418 		addq	$24, %rsp	#,
 3871              		.cfi_def_cfa_offset 56
 3872              	.LVL263:
 3873 00f0 5B       		popq	%rbx	#
 3874              		.cfi_def_cfa_offset 48
 3875 00f1 5D       		popq	%rbp	#
 3876              		.cfi_def_cfa_offset 40
 3877              	.LVL264:
 3878 00f2 415C     		popq	%r12	#
 3879              		.cfi_def_cfa_offset 32
 3880              	.LVL265:
 3881 00f4 415D     		popq	%r13	#
 3882              		.cfi_def_cfa_offset 24
 3883              	.LVL266:
 3884 00f6 415E     		popq	%r14	#
 3885              		.cfi_def_cfa_offset 16
 3886 00f8 415F     		popq	%r15	#
 3887              		.cfi_def_cfa_offset 8
 3888 00fa C3       		ret
 3889              		.cfi_endproc
 3890              	.LFE3960:
 3892              		.text
 3893 0ae8 0F1F8400 		.p2align 4,,15
 3893      00000000 
 3895              	_ZN13quicksortcopy14introsort_loopI11SortableReflPFbPS1_S2_EEEvPT_S6_T0_T1_.constprop.61:
 3896              	.LFB4146:
 111:Quicksort_Copy.h **** 
 112:Quicksort_Copy.h **** template <typename TValueType, typename TCompare>
 113:Quicksort_Copy.h **** inline
 114:Quicksort_Copy.h **** void partial_sort(TValueType* first, TValueType* middle, TValueType* last, TCompare compare)
 115:Quicksort_Copy.h **** {
 116:Quicksort_Copy.h ****     heap_select(first, middle, last, compare);
 117:Quicksort_Copy.h ****     sort_heap(first, middle, compare);
 118:Quicksort_Copy.h **** }
 119:Quicksort_Copy.h **** 
 120:Quicksort_Copy.h **** //---------------------------------------------------------------------------------------------
 121:Quicksort_Copy.h **** 
 122:Quicksort_Copy.h **** template<typename TValueType, typename TCompare>
 123:Quicksort_Copy.h **** void unguarded_linear_insert(TValueType* last, TCompare compare)
 124:Quicksort_Copy.h **** {
 125:Quicksort_Copy.h ****     TValueType val = std::move(*last);
 126:Quicksort_Copy.h ****     TValueType* next = last;
 127:Quicksort_Copy.h ****     --next;
 128:Quicksort_Copy.h ****     while (compare(&val, next))
 129:Quicksort_Copy.h ****     {
 130:Quicksort_Copy.h ****         *last = std::move(*next);
 131:Quicksort_Copy.h ****         last = next;
 132:Quicksort_Copy.h ****         --next;
 133:Quicksort_Copy.h ****     }
 134:Quicksort_Copy.h ****     *last = std::move(val);
 135:Quicksort_Copy.h **** }
 136:Quicksort_Copy.h **** 
 137:Quicksort_Copy.h **** template<typename TValueType, typename TCompare>
 138:Quicksort_Copy.h **** inline void unguarded_insertion_sort(TValueType* first, TValueType* last, TCompare compare)
 139:Quicksort_Copy.h **** {
 140:Quicksort_Copy.h ****     for (TValueType* i = first; i != last; ++i)
 141:Quicksort_Copy.h ****     {
 142:Quicksort_Copy.h ****         unguarded_linear_insert(i, compare);
 143:Quicksort_Copy.h ****     }
 144:Quicksort_Copy.h **** }
 145:Quicksort_Copy.h **** 
 146:Quicksort_Copy.h **** template<typename TValueType, typename TCompare>
 147:Quicksort_Copy.h **** void insertion_sort(TValueType* first, TValueType* last, TCompare compare)
 148:Quicksort_Copy.h **** {
 149:Quicksort_Copy.h ****     if (first == last) 
 150:Quicksort_Copy.h ****     {
 151:Quicksort_Copy.h ****         return;
 152:Quicksort_Copy.h ****     }
 153:Quicksort_Copy.h **** 
 154:Quicksort_Copy.h ****     for (TValueType* i = first + 1; i != last; ++i)
 155:Quicksort_Copy.h ****     {
 156:Quicksort_Copy.h ****         if (compare(i, first))
 157:Quicksort_Copy.h ****         {
 158:Quicksort_Copy.h ****             TValueType val = std::move(*i);
 159:Quicksort_Copy.h ****             std::move_backward(first, i, i + 1);
 160:Quicksort_Copy.h ****             *first = std::move(val);
 161:Quicksort_Copy.h ****         }
 162:Quicksort_Copy.h ****         else
 163:Quicksort_Copy.h ****         {
 164:Quicksort_Copy.h ****             unguarded_linear_insert(i, compare);
 165:Quicksort_Copy.h ****         }
 166:Quicksort_Copy.h ****         
 167:Quicksort_Copy.h ****     }
 168:Quicksort_Copy.h **** }
 169:Quicksort_Copy.h **** 
 170:Quicksort_Copy.h **** template<typename TValueType, typename TCompare>
 171:Quicksort_Copy.h **** void final_insertion_sort(TValueType* first, TValueType* last, TCompare compare)
 172:Quicksort_Copy.h **** {
 173:Quicksort_Copy.h ****     if (last - first > S_threshold)
 174:Quicksort_Copy.h ****     {
 175:Quicksort_Copy.h ****         insertion_sort(first, first + S_threshold, compare);
 176:Quicksort_Copy.h ****         unguarded_insertion_sort(first + S_threshold, last, compare);
 177:Quicksort_Copy.h ****     }
 178:Quicksort_Copy.h ****     else
 179:Quicksort_Copy.h ****     {
 180:Quicksort_Copy.h ****         insertion_sort(first, last, compare);
 181:Quicksort_Copy.h ****     }
 182:Quicksort_Copy.h **** }
 183:Quicksort_Copy.h **** 
 184:Quicksort_Copy.h **** template<typename TValueType, typename TCompare>
 185:Quicksort_Copy.h **** TValueType* unguarded_partition(TValueType* first, TValueType* last, TValueType* pivot, TCompare co
 186:Quicksort_Copy.h **** {
 187:Quicksort_Copy.h ****     while (true)
 188:Quicksort_Copy.h ****     {
 189:Quicksort_Copy.h ****         while (compare(first, pivot))
 190:Quicksort_Copy.h ****         {
 191:Quicksort_Copy.h ****             ++first;
 192:Quicksort_Copy.h ****         }
 193:Quicksort_Copy.h ****         --last;
 194:Quicksort_Copy.h ****         while (compare(pivot, last))
 195:Quicksort_Copy.h ****         {
 196:Quicksort_Copy.h ****             --last;
 197:Quicksort_Copy.h ****         }
 198:Quicksort_Copy.h ****         if (!(first < last))
 199:Quicksort_Copy.h ****         {
 200:Quicksort_Copy.h ****             return first;
 201:Quicksort_Copy.h ****         }
 202:Quicksort_Copy.h ****         std::iter_swap(first, last);
 203:Quicksort_Copy.h ****         ++first;
 204:Quicksort_Copy.h ****     }
 205:Quicksort_Copy.h **** }
 206:Quicksort_Copy.h **** 
 207:Quicksort_Copy.h **** template<typename TValueType, typename TCompare>
 208:Quicksort_Copy.h **** void move_median_to_first(TValueType* result, TValueType* one, TValueType* two, TValueType* three, 
 209:Quicksort_Copy.h **** {
 210:Quicksort_Copy.h ****     if (compare(one, two))
 211:Quicksort_Copy.h ****     {
 212:Quicksort_Copy.h ****         if (compare(two, three))
 213:Quicksort_Copy.h ****         {
 214:Quicksort_Copy.h ****             std::iter_swap(result, two);
 215:Quicksort_Copy.h ****         }
 216:Quicksort_Copy.h ****         else if (compare(one, three))
 217:Quicksort_Copy.h ****         {
 218:Quicksort_Copy.h ****             std::iter_swap(result, three);
 219:Quicksort_Copy.h ****         }
 220:Quicksort_Copy.h ****         else
 221:Quicksort_Copy.h ****         {
 222:Quicksort_Copy.h ****             std::iter_swap(result, one);
 223:Quicksort_Copy.h ****         }
 224:Quicksort_Copy.h ****         
 225:Quicksort_Copy.h ****     }
 226:Quicksort_Copy.h ****     else if (compare(one, three))
 227:Quicksort_Copy.h ****     {
 228:Quicksort_Copy.h ****         std::iter_swap(result, one);
 229:Quicksort_Copy.h ****     }
 230:Quicksort_Copy.h ****     else if (compare(two, three))
 231:Quicksort_Copy.h ****     {
 232:Quicksort_Copy.h ****         std::iter_swap(result, three);
 233:Quicksort_Copy.h ****     }
 234:Quicksort_Copy.h ****     else
 235:Quicksort_Copy.h ****     {
 236:Quicksort_Copy.h ****         std::iter_swap(result, two);
 237:Quicksort_Copy.h ****     }
 238:Quicksort_Copy.h **** }
 239:Quicksort_Copy.h **** 
 240:Quicksort_Copy.h **** template<typename TValueType, typename TCompare>
 241:Quicksort_Copy.h **** inline 
 242:Quicksort_Copy.h **** TValueType* unguarded_partition_pivot(TValueType* first, TValueType* last, TCompare compare)
 243:Quicksort_Copy.h **** {
 244:Quicksort_Copy.h ****     TValueType* mid = first + (last - first) / 2;
 245:Quicksort_Copy.h ****     move_median_to_first(first, first + 1, mid, last - 1, compare);
 246:Quicksort_Copy.h ****     return unguarded_partition(first + 1, last, first, compare);
 247:Quicksort_Copy.h **** }
 248:Quicksort_Copy.h **** 
 249:Quicksort_Copy.h **** 
 250:Quicksort_Copy.h **** template <typename TValueType, typename TSize, typename TCompare>
 251:Quicksort_Copy.h **** void introsort_loop(TValueType* first, TValueType* last, TSize depth_limit, TCompare compare)
 3897              		.loc 16 251 0
 3898              		.cfi_startproc
 3899              	.LVL267:
 3900              	# Quicksort_Copy.h:253:     while (last - first > S_threshold)
 252:Quicksort_Copy.h **** {
 253:Quicksort_Copy.h ****     while (last - first > S_threshold)
 3901              		.loc 16 253 0
 3902 0af0 4889F0   		movq	%rsi, %rax	# last, _5
 3903 0af3 4829F8   		subq	%rdi, %rax	# first, _5
 3904 0af6 483D0001 		cmpq	$256, %rax	#, _5
 3904      0000
 3905 0afc 0F8EA601 		jle	.L277	#,
 3905      0000
 3906              	# Quicksort_Copy.h:251: void introsort_loop(TValueType* first, TValueType* last, TSize depth_limit,
 251:Quicksort_Copy.h **** {
 3907              		.loc 16 251 0
 3908 0b02 4156     		pushq	%r14	#
 3909              		.cfi_def_cfa_offset 16
 3910              		.cfi_offset 14, -16
 3911 0b04 4989D6   		movq	%rdx, %r14	# depth_limit, depth_limit
 3912 0b07 4155     		pushq	%r13	#
 3913              		.cfi_def_cfa_offset 24
 3914              		.cfi_offset 13, -24
 3915 0b09 4989FD   		movq	%rdi, %r13	# first, first
 3916 0b0c 4154     		pushq	%r12	#
 3917              		.cfi_def_cfa_offset 32
 3918              		.cfi_offset 12, -32
 3919 0b0e 4C8D6710 		leaq	16(%rdi), %r12	#, _9
 3920 0b12 55       		pushq	%rbp	#
 3921              		.cfi_def_cfa_offset 40
 3922              		.cfi_offset 6, -40
 3923 0b13 53       		pushq	%rbx	#
 3924              		.cfi_def_cfa_offset 48
 3925              		.cfi_offset 3, -48
 3926              	.LBB2512:
 3927              	# Quicksort_Copy.h:255:         if (depth_limit == 0)
 254:Quicksort_Copy.h **** 	{
 255:Quicksort_Copy.h ****         if (depth_limit == 0)
 3928              		.loc 16 255 0
 3929 0b14 4885D2   		testq	%rdx, %rdx	# depth_limit
 3930 0b17 0F848C01 		je	.L282	#,
 3930      0000
 3931              	.LVL268:
 3932              	.L254:
 3933              	.LBB2513:
 3934              	.LBB2514:
 3935              	# Quicksort_Copy.h:244:     TValueType* mid = first + (last - first) / 2;
 244:Quicksort_Copy.h ****     move_median_to_first(first, first + 1, mid, last - 1, compare);
 3936              		.loc 16 244 0
 3937 0b1d 48C1F805 		sarq	$5, %rax	#, tmp126
 3938              	.LBB2515:
 3939              	.LBB2516:
 3940              	.LBB2517:
 3941              	.LBB2518:
 3942              	# Measure.h:193:     return *left < *right;
 193:Measure.h     **** }
 3943              		.loc 2 193 0
 3944 0b21 498B4D10 		movq	16(%r13), %rcx	# MEM[(long unsigned int *)first_3(D) + 16B], _72
 3945              	.LBE2518:
 3946              	.LBE2517:
 3947              	.LBE2516:
 3948              	.LBE2515:
 3949              	.LBE2514:
 3950              	.LBE2513:
 3951              	# Quicksort_Copy.h:260:         --depth_limit;
 256:Quicksort_Copy.h ****         {
 257:Quicksort_Copy.h ****             partial_sort(first, last, last, compare);
 258:Quicksort_Copy.h ****             return;
 259:Quicksort_Copy.h ****         }
 260:Quicksort_Copy.h ****         --depth_limit;
 3952              		.loc 16 260 0
 3953 0b25 4983EE01 		subq	$1, %r14	#, depth_limit
 3954              	.LVL269:
 3955              	.LBB2544:
 3956              	.LBB2541:
 3957              	# Quicksort_Copy.h:244:     TValueType* mid = first + (last - first) / 2;
 244:Quicksort_Copy.h ****     move_median_to_first(first, first + 1, mid, last - 1, compare);
 3958              		.loc 16 244 0
 3959 0b29 48C1E004 		salq	$4, %rax	#, tmp127
 3960 0b2d 4C8B46F0 		movq	-16(%rsi), %r8	# MEM[(long unsigned int *)last_22 + -16B], pretmp_39
 3961 0b31 4C01E8   		addq	%r13, %rax	# first, mid
 3962              	.LVL270:
 3963 0b34 498B7D00 		movq	0(%r13), %rdi	# MEM[(struct SortableRef &)first_3(D)], prephitmp_130
 3964              	.LBB2532:
 3965              	.LBB2530:
 3966              	.LBB2520:
 3967              	.LBB2519:
 3968              	# Measure.h:193:     return *left < *right;
 193:Measure.h     **** }
 3969              		.loc 2 193 0
 3970 0b38 488B10   		movq	(%rax), %rdx	# MEM[(long unsigned int *)mid_36], _73
 3971              	.LVL271:
 3972 0b3b 4D8B4D08 		movq	8(%r13), %r9	# MEM[(struct SortableRef &)first_3(D) + 8], pretmp_155
 3973              	.LBE2519:
 3974              	.LBE2520:
 3975              	# Quicksort_Copy.h:210:     if (compare(one, two))
 210:Quicksort_Copy.h ****     {
 3976              		.loc 16 210 0
 3977 0b3f 4839D1   		cmpq	%rdx, %rcx	# _73, _72
 3978 0b42 0F831801 		jnb	.L256	#,
 3978      0000
 3979              	.LVL272:
 3980              	# Quicksort_Copy.h:212:         if (compare(two, three))
 212:Quicksort_Copy.h ****         {
 3981              		.loc 16 212 0
 3982 0b48 4939D0   		cmpq	%rdx, %r8	# _73, pretmp_39
 3983 0b4b 0F871D01 		ja	.L262	#,
 3983      0000
 3984              	.LVL273:
 3985              	# Quicksort_Copy.h:216:         else if (compare(one, three))
 216:Quicksort_Copy.h ****         {
 3986              		.loc 16 216 0
 3987 0b51 4939C8   		cmpq	%rcx, %r8	# _72, pretmp_39
 3988 0b54 0F873601 		ja	.L280	#,
 3988      0000
 3989              	.LVL274:
 3990              	.L281:
 3991              	.LBB2521:
 3992              	.LBB2522:
 3993              	.LBB2523:
 3994              	# /usr/include/c++/7/bits/move.h:199:       __a = _GLIBCXX_MOVE(__b);
 3995              		.file 17 "/usr/include/c++/7/bits/move.h"
   1:/usr/include/c++/7/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/usr/include/c++/7/bits/move.h **** 
   3:/usr/include/c++/7/bits/move.h **** // Copyright (C) 2007-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/move.h **** //
   5:/usr/include/c++/7/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/move.h **** // any later version.
  10:/usr/include/c++/7/bits/move.h **** 
  11:/usr/include/c++/7/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/move.h **** 
  16:/usr/include/c++/7/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/move.h **** 
  20:/usr/include/c++/7/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/move.h **** 
  25:/usr/include/c++/7/bits/move.h **** /** @file bits/move.h
  26:/usr/include/c++/7/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/7/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/c++/7/bits/move.h ****  */
  29:/usr/include/c++/7/bits/move.h **** 
  30:/usr/include/c++/7/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/c++/7/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/c++/7/bits/move.h **** 
  33:/usr/include/c++/7/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/c++/7/bits/move.h **** #include <bits/concept_check.h>
  35:/usr/include/c++/7/bits/move.h **** 
  36:/usr/include/c++/7/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/usr/include/c++/7/bits/move.h **** {
  38:/usr/include/c++/7/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/usr/include/c++/7/bits/move.h **** 
  40:/usr/include/c++/7/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/usr/include/c++/7/bits/move.h ****   /**
  42:/usr/include/c++/7/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/usr/include/c++/7/bits/move.h ****    *  @ingroup utilities
  44:/usr/include/c++/7/bits/move.h ****    */
  45:/usr/include/c++/7/bits/move.h ****   template<typename _Tp>
  46:/usr/include/c++/7/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  47:/usr/include/c++/7/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  48:/usr/include/c++/7/bits/move.h ****     { return __builtin_addressof(__r); }
  49:/usr/include/c++/7/bits/move.h **** 
  50:/usr/include/c++/7/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  51:/usr/include/c++/7/bits/move.h **** } // namespace
  52:/usr/include/c++/7/bits/move.h **** 
  53:/usr/include/c++/7/bits/move.h **** #if __cplusplus >= 201103L
  54:/usr/include/c++/7/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  55:/usr/include/c++/7/bits/move.h **** 
  56:/usr/include/c++/7/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  57:/usr/include/c++/7/bits/move.h **** {
  58:/usr/include/c++/7/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  59:/usr/include/c++/7/bits/move.h **** 
  60:/usr/include/c++/7/bits/move.h ****   /**
  61:/usr/include/c++/7/bits/move.h ****    *  @addtogroup utilities
  62:/usr/include/c++/7/bits/move.h ****    *  @{
  63:/usr/include/c++/7/bits/move.h ****    */
  64:/usr/include/c++/7/bits/move.h **** 
  65:/usr/include/c++/7/bits/move.h ****   /**
  66:/usr/include/c++/7/bits/move.h ****    *  @brief  Forward an lvalue.
  67:/usr/include/c++/7/bits/move.h ****    *  @return The parameter cast to the specified type.
  68:/usr/include/c++/7/bits/move.h ****    *
  69:/usr/include/c++/7/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  70:/usr/include/c++/7/bits/move.h ****    */
  71:/usr/include/c++/7/bits/move.h ****   template<typename _Tp>
  72:/usr/include/c++/7/bits/move.h ****     constexpr _Tp&&
  73:/usr/include/c++/7/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  74:/usr/include/c++/7/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
  75:/usr/include/c++/7/bits/move.h **** 
  76:/usr/include/c++/7/bits/move.h ****   /**
  77:/usr/include/c++/7/bits/move.h ****    *  @brief  Forward an rvalue.
  78:/usr/include/c++/7/bits/move.h ****    *  @return The parameter cast to the specified type.
  79:/usr/include/c++/7/bits/move.h ****    *
  80:/usr/include/c++/7/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  81:/usr/include/c++/7/bits/move.h ****    */
  82:/usr/include/c++/7/bits/move.h ****   template<typename _Tp>
  83:/usr/include/c++/7/bits/move.h ****     constexpr _Tp&&
  84:/usr/include/c++/7/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
  85:/usr/include/c++/7/bits/move.h ****     {
  86:/usr/include/c++/7/bits/move.h ****       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
  87:/usr/include/c++/7/bits/move.h **** 		    " substituting _Tp is an lvalue reference type");
  88:/usr/include/c++/7/bits/move.h ****       return static_cast<_Tp&&>(__t);
  89:/usr/include/c++/7/bits/move.h ****     }
  90:/usr/include/c++/7/bits/move.h **** 
  91:/usr/include/c++/7/bits/move.h ****   /**
  92:/usr/include/c++/7/bits/move.h ****    *  @brief  Convert a value to an rvalue.
  93:/usr/include/c++/7/bits/move.h ****    *  @param  __t  A thing of arbitrary type.
  94:/usr/include/c++/7/bits/move.h ****    *  @return The parameter cast to an rvalue-reference to allow moving it.
  95:/usr/include/c++/7/bits/move.h ****   */
  96:/usr/include/c++/7/bits/move.h ****   template<typename _Tp>
  97:/usr/include/c++/7/bits/move.h ****     constexpr typename std::remove_reference<_Tp>::type&&
  98:/usr/include/c++/7/bits/move.h ****     move(_Tp&& __t) noexcept
  99:/usr/include/c++/7/bits/move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 100:/usr/include/c++/7/bits/move.h **** 
 101:/usr/include/c++/7/bits/move.h **** 
 102:/usr/include/c++/7/bits/move.h ****   template<typename _Tp>
 103:/usr/include/c++/7/bits/move.h ****     struct __move_if_noexcept_cond
 104:/usr/include/c++/7/bits/move.h ****     : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
 105:/usr/include/c++/7/bits/move.h ****                     is_copy_constructible<_Tp>>::type { };
 106:/usr/include/c++/7/bits/move.h **** 
 107:/usr/include/c++/7/bits/move.h ****   /**
 108:/usr/include/c++/7/bits/move.h ****    *  @brief  Conditionally convert a value to an rvalue.
 109:/usr/include/c++/7/bits/move.h ****    *  @param  __x  A thing of arbitrary type.
 110:/usr/include/c++/7/bits/move.h ****    *  @return The parameter, possibly cast to an rvalue-reference.
 111:/usr/include/c++/7/bits/move.h ****    *
 112:/usr/include/c++/7/bits/move.h ****    *  Same as std::move unless the type's move constructor could throw and the
 113:/usr/include/c++/7/bits/move.h ****    *  type is copyable, in which case an lvalue-reference is returned instead.
 114:/usr/include/c++/7/bits/move.h ****    */
 115:/usr/include/c++/7/bits/move.h ****   template<typename _Tp>
 116:/usr/include/c++/7/bits/move.h ****     constexpr typename
 117:/usr/include/c++/7/bits/move.h ****     conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
 118:/usr/include/c++/7/bits/move.h ****     move_if_noexcept(_Tp& __x) noexcept
 119:/usr/include/c++/7/bits/move.h ****     { return std::move(__x); }
 120:/usr/include/c++/7/bits/move.h **** 
 121:/usr/include/c++/7/bits/move.h ****   // declval, from type_traits.
 122:/usr/include/c++/7/bits/move.h **** 
 123:/usr/include/c++/7/bits/move.h **** #if __cplusplus > 201402L
 124:/usr/include/c++/7/bits/move.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 125:/usr/include/c++/7/bits/move.h ****   // 2296. std::addressof should be constexpr
 126:/usr/include/c++/7/bits/move.h **** # define __cpp_lib_addressof_constexpr 201603
 127:/usr/include/c++/7/bits/move.h **** #endif
 128:/usr/include/c++/7/bits/move.h ****   /**
 129:/usr/include/c++/7/bits/move.h ****    *  @brief Returns the actual address of the object or function
 130:/usr/include/c++/7/bits/move.h ****    *         referenced by r, even in the presence of an overloaded
 131:/usr/include/c++/7/bits/move.h ****    *         operator&.
 132:/usr/include/c++/7/bits/move.h ****    *  @param  __r  Reference to an object or function.
 133:/usr/include/c++/7/bits/move.h ****    *  @return   The actual address.
 134:/usr/include/c++/7/bits/move.h ****   */
 135:/usr/include/c++/7/bits/move.h ****   template<typename _Tp>
 136:/usr/include/c++/7/bits/move.h ****     inline _GLIBCXX17_CONSTEXPR _Tp*
 137:/usr/include/c++/7/bits/move.h ****     addressof(_Tp& __r) noexcept
 138:/usr/include/c++/7/bits/move.h ****     { return std::__addressof(__r); }
 139:/usr/include/c++/7/bits/move.h **** 
 140:/usr/include/c++/7/bits/move.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 141:/usr/include/c++/7/bits/move.h ****   // 2598. addressof works on temporaries
 142:/usr/include/c++/7/bits/move.h ****   template<typename _Tp>
 143:/usr/include/c++/7/bits/move.h ****     const _Tp* addressof(const _Tp&&) = delete;
 144:/usr/include/c++/7/bits/move.h **** 
 145:/usr/include/c++/7/bits/move.h ****   // C++11 version of std::exchange for internal use.
 146:/usr/include/c++/7/bits/move.h ****   template <typename _Tp, typename _Up = _Tp>
 147:/usr/include/c++/7/bits/move.h ****     inline _Tp
 148:/usr/include/c++/7/bits/move.h ****     __exchange(_Tp& __obj, _Up&& __new_val)
 149:/usr/include/c++/7/bits/move.h ****     {
 150:/usr/include/c++/7/bits/move.h ****       _Tp __old_val = std::move(__obj);
 151:/usr/include/c++/7/bits/move.h ****       __obj = std::forward<_Up>(__new_val);
 152:/usr/include/c++/7/bits/move.h ****       return __old_val;
 153:/usr/include/c++/7/bits/move.h ****     }
 154:/usr/include/c++/7/bits/move.h **** 
 155:/usr/include/c++/7/bits/move.h ****   /// @} group utilities
 156:/usr/include/c++/7/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
 157:/usr/include/c++/7/bits/move.h **** } // namespace
 158:/usr/include/c++/7/bits/move.h **** 
 159:/usr/include/c++/7/bits/move.h **** #define _GLIBCXX_MOVE(__val) std::move(__val)
 160:/usr/include/c++/7/bits/move.h **** #define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
 161:/usr/include/c++/7/bits/move.h **** #else
 162:/usr/include/c++/7/bits/move.h **** #define _GLIBCXX_MOVE(__val) (__val)
 163:/usr/include/c++/7/bits/move.h **** #define _GLIBCXX_FORWARD(_Tp, __val) (__val)
 164:/usr/include/c++/7/bits/move.h **** #endif
 165:/usr/include/c++/7/bits/move.h **** 
 166:/usr/include/c++/7/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
 167:/usr/include/c++/7/bits/move.h **** {
 168:/usr/include/c++/7/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 169:/usr/include/c++/7/bits/move.h **** 
 170:/usr/include/c++/7/bits/move.h ****   /**
 171:/usr/include/c++/7/bits/move.h ****    *  @addtogroup utilities
 172:/usr/include/c++/7/bits/move.h ****    *  @{
 173:/usr/include/c++/7/bits/move.h ****    */
 174:/usr/include/c++/7/bits/move.h **** 
 175:/usr/include/c++/7/bits/move.h ****   /**
 176:/usr/include/c++/7/bits/move.h ****    *  @brief Swaps two values.
 177:/usr/include/c++/7/bits/move.h ****    *  @param  __a  A thing of arbitrary type.
 178:/usr/include/c++/7/bits/move.h ****    *  @param  __b  Another thing of arbitrary type.
 179:/usr/include/c++/7/bits/move.h ****    *  @return   Nothing.
 180:/usr/include/c++/7/bits/move.h ****   */
 181:/usr/include/c++/7/bits/move.h ****   template<typename _Tp>
 182:/usr/include/c++/7/bits/move.h ****     inline
 183:/usr/include/c++/7/bits/move.h **** #if __cplusplus >= 201103L
 184:/usr/include/c++/7/bits/move.h ****     typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
 185:/usr/include/c++/7/bits/move.h **** 			      is_move_constructible<_Tp>,
 186:/usr/include/c++/7/bits/move.h **** 			      is_move_assignable<_Tp>>::value>::type
 187:/usr/include/c++/7/bits/move.h ****     swap(_Tp& __a, _Tp& __b)
 188:/usr/include/c++/7/bits/move.h ****     noexcept(__and_<is_nothrow_move_constructible<_Tp>,
 189:/usr/include/c++/7/bits/move.h **** 	            is_nothrow_move_assignable<_Tp>>::value)
 190:/usr/include/c++/7/bits/move.h **** #else
 191:/usr/include/c++/7/bits/move.h ****     void
 192:/usr/include/c++/7/bits/move.h ****     swap(_Tp& __a, _Tp& __b)
 193:/usr/include/c++/7/bits/move.h **** #endif
 194:/usr/include/c++/7/bits/move.h ****     {
 195:/usr/include/c++/7/bits/move.h ****       // concept requirements
 196:/usr/include/c++/7/bits/move.h ****       __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
 197:/usr/include/c++/7/bits/move.h **** 
 198:/usr/include/c++/7/bits/move.h ****       _Tp __tmp = _GLIBCXX_MOVE(__a);
 199:/usr/include/c++/7/bits/move.h ****       __a = _GLIBCXX_MOVE(__b);
 3996              		.loc 17 199 0
 3997 0b5a C4C17A6F 		vmovdqu	16(%r13), %xmm0	# MEM[(struct SortableRef &)first_3(D) + 16], MEM[(struct SortableRef &)fi
 3997      4510
 3998              	# /usr/include/c++/7/bits/move.h:200:       __b = _GLIBCXX_MOVE(__tmp);
 200:/usr/include/c++/7/bits/move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 3999              		.loc 17 200 0
 4000 0b60 49897D10 		movq	%rdi, 16(%r13)	# prephitmp_130, MEM[(struct SortableRef *)first_3(D) + 16B]
 4001 0b64 4D894D18 		movq	%r9, 24(%r13)	# pretmp_155, MEM[(struct SortableRef *)first_3(D) + 24B]
 4002              	# /usr/include/c++/7/bits/move.h:199:       __a = _GLIBCXX_MOVE(__b);
 199:/usr/include/c++/7/bits/move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 4003              		.loc 17 199 0
 4004 0b68 C4C17811 		vmovups	%xmm0, 0(%r13)	# MEM[(struct SortableRef &)first_3(D) + 16], *first_3(D)
 4004      4500
 4005              	.LVL275:
 4006 0b6e 488B7EF0 		movq	-16(%rsi), %rdi	# MEM[(long unsigned int *)last_22 + -16B], prephitmp_130
 4007              	.LVL276:
 4008              	.L258:
 4009 0b72 498B5500 		movq	0(%r13), %rdx	# MEM[(long unsigned int *)first_3(D)], prephitmp_141
 4010 0b76 4C89E3   		movq	%r12, %rbx	# _9, ivtmp.573
 4011              	.LBE2523:
 4012              	.LBE2522:
 4013              	.LBE2521:
 4014              	.LBE2530:
 4015              	.LBE2532:
 4016              	.LBE2541:
 4017              	.LBE2544:
 4018              	.LBE2512:
 4019              	# Quicksort_Copy.h:251: void introsort_loop(TValueType* first, TValueType* last, TSize depth_limit,
 251:Quicksort_Copy.h **** {
 4020              		.loc 16 251 0
 4021 0b79 4889F0   		movq	%rsi, %rax	# last, last
 4022              	.LVL277:
 4023 0b7c 0F1F4000 		.p2align 4,,10
 4024              		.p2align 3
 4025              	.L261:
 4026              	.LBB2557:
 4027              	.LBB2545:
 4028              	.LBB2542:
 4029              	.LBB2533:
 4030              	.LBB2534:
 4031              	.LBB2535:
 4032              	.LBB2536:
 4033              	# Measure.h:193:     return *left < *right;
 193:Measure.h     **** }
 4034              		.loc 2 193 0
 4035 0b80 488B0B   		movq	(%rbx), %rcx	# MEM[base: first_40, offset: 0B], _87
 4036 0b83 4889DD   		movq	%rbx, %rbp	# ivtmp.573, last
 4037              	.LVL278:
 4038              	.LBE2536:
 4039              	.LBE2535:
 4040              	# Quicksort_Copy.h:189:         while (compare(first, pivot))
 189:Quicksort_Copy.h ****         {
 4041              		.loc 16 189 0
 4042 0b86 4839D1   		cmpq	%rdx, %rcx	# prephitmp_141, _87
 4043 0b89 7236     		jb	.L263	#,
 4044 0b8b 4883E810 		subq	$16, %rax	#, last
 4045              	.LVL279:
 4046              	# Quicksort_Copy.h:194:         while (compare(pivot, last))
 194:Quicksort_Copy.h ****         {
 4047              		.loc 16 194 0
 4048 0b8f 4839D7   		cmpq	%rdx, %rdi	# prephitmp_141, prephitmp_130
 4049 0b92 760D     		jbe	.L264	#,
 4050              	.LVL280:
 4051              		.p2align 4,,10
 4052 0b94 0F1F4000 		.p2align 3
 4053              	.L265:
 4054              	# Quicksort_Copy.h:196:             --last;
 196:Quicksort_Copy.h ****         }
 4055              		.loc 16 196 0
 4056 0b98 4883E810 		subq	$16, %rax	#, last
 4057              	.LVL281:
 4058              	# Quicksort_Copy.h:194:         while (compare(pivot, last))
 194:Quicksort_Copy.h ****         {
 4059              		.loc 16 194 0
 4060 0b9c 483910   		cmpq	%rdx, (%rax)	# prephitmp_141, MEM[base: last_47, offset: 0B]
 4061 0b9f 77F7     		ja	.L265	#,
 4062              	.LVL282:
 4063              	.L264:
 4064              	# Quicksort_Copy.h:198:         if (!(first < last))
 198:Quicksort_Copy.h ****         {
 4065              		.loc 16 198 0
 4066 0ba1 4839C3   		cmpq	%rax, %rbx	# last, ivtmp.573
 4067 0ba4 732A     		jnb	.L283	#,
 4068              	.LVL283:
 4069              	.LBB2537:
 4070              	.LBB2538:
 4071              	.LBB2539:
 4072              	# /usr/include/c++/7/bits/move.h:198:       _Tp __tmp = _GLIBCXX_MOVE(__a);
 198:/usr/include/c++/7/bits/move.h ****       __a = _GLIBCXX_MOVE(__b);
 4073              		.loc 17 198 0
 4074 0ba6 488B5308 		movq	8(%rbx), %rdx	# MEM[base: first_40, offset: 8], __tmp$reference
 4075              	.LVL284:
 4076              	# /usr/include/c++/7/bits/move.h:199:       __a = _GLIBCXX_MOVE(__b);
 199:/usr/include/c++/7/bits/move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 4077              		.loc 17 199 0
 4078 0baa C5FA6F00 		vmovdqu	(%rax), %xmm0	# *last_90, *last_90
 4079 0bae C5F81103 		vmovups	%xmm0, (%rbx)	# *last_90, MEM[base: first_40, offset: 0B]
 4080 0bb2 488B78F0 		movq	-16(%rax), %rdi	# MEM[(long unsigned int *)last_90 + -16B], prephitmp_130
 4081              	# /usr/include/c++/7/bits/move.h:200:       __b = _GLIBCXX_MOVE(__tmp);
 4082              		.loc 17 200 0
 4083 0bb6 488908   		movq	%rcx, (%rax)	# _87, MEM[(struct SortableRef *)last_90]
 4084 0bb9 48895008 		movq	%rdx, 8(%rax)	# __tmp$reference, MEM[(struct SortableRef *)last_90 + 8B]
 4085              	.LVL285:
 4086 0bbd 498B5500 		movq	0(%r13), %rdx	# MEM[(long unsigned int *)first_3(D)], prephitmp_141
 4087              	.LVL286:
 4088              	.L263:
 4089 0bc1 4883C310 		addq	$16, %rbx	#, ivtmp.573
 4090 0bc5 EBB9     		jmp	.L261	#
 4091              	.LVL287:
 4092 0bc7 660F1F84 		.p2align 4,,10
 4092      00000000 
 4092      00
 4093              		.p2align 3
 4094              	.L283:
 4095              	.LBE2539:
 4096              	.LBE2538:
 4097              	.LBE2537:
 4098              	.LBE2534:
 4099              	.LBE2533:
 4100              	.LBE2542:
 4101              	.LBE2545:
 4102              	# Quicksort_Copy.h:263:         introsort_loop(cut, last, depth_limit, compare);
 261:Quicksort_Copy.h ****         TValueType* cut =
 262:Quicksort_Copy.h ****         unguarded_partition_pivot(first, last, compare);
 263:Quicksort_Copy.h ****         introsort_loop(cut, last, depth_limit, compare);
 4103              		.loc 16 263 0
 4104 0bd0 4C89F2   		movq	%r14, %rdx	# depth_limit,
 4105 0bd3 4889DF   		movq	%rbx, %rdi	# ivtmp.573,
 4106 0bd6 E815FFFF 		call	_ZN13quicksortcopy14introsort_loopI11SortableReflPFbPS1_S2_EEEvPT_S6_T0_T1_.constprop.61	#
 4106      FF
 4107              	.LVL288:
 4108              	.LBE2557:
 4109              	# Quicksort_Copy.h:253:     while (last - first > S_threshold)
 253:Quicksort_Copy.h **** 	{
 4110              		.loc 16 253 0
 4111 0bdb 4889D8   		movq	%rbx, %rax	# ivtmp.573, _5
 4112 0bde 4C29E8   		subq	%r13, %rax	# first, _5
 4113 0be1 483D0001 		cmpq	$256, %rax	#, _5
 4113      0000
 4114 0be7 7E66     		jle	.L275	#,
 4115 0be9 4889DE   		movq	%rbx, %rsi	# ivtmp.573, last
 4116              	.LBB2558:
 4117              	# Quicksort_Copy.h:255:         if (depth_limit == 0)
 255:Quicksort_Copy.h ****         {
 4118              		.loc 16 255 0
 4119 0bec 4D85F6   		testq	%r14, %r14	# depth_limit
 4120 0bef 0F8528FF 		jne	.L254	#,
 4120      FFFF
 4121              	.LVL289:
 4122              	.L252:
 4123              	.LBB2546:
 4124              	.LBB2547:
 4125              	# Quicksort_Copy.h:116:     heap_select(first, middle, last, compare);
 116:Quicksort_Copy.h ****     sort_heap(first, middle, compare);
 4126              		.loc 16 116 0
 4127 0bf5 488D0D00 		leaq	_ZN11measurement15IteratorCompareI11SortableRefEEbPT_S3_(%rip), %rcx	#,
 4127      000000
 4128 0bfc 4889EA   		movq	%rbp, %rdx	# last,
 4129 0bff 4889EE   		movq	%rbp, %rsi	# last,
 4130              	.LVL290:
 4131              	.LBB2548:
 4132              	.LBB2549:
 4133              	.LBB2550:
 4134              	.LBB2551:
 4135              	# Quicksort_Copy.h:85:     adjust_heap(first, (long int) 0, last - first, std::move(value), compare
  85:Quicksort_Copy.h **** }
 4136              		.loc 16 85 0
 4137 0c02 4C8D2500 		leaq	_ZN11measurement15IteratorCompareI11SortableRefEEbPT_S3_(%rip), %r12	#, tmp139
 4137      000000
 4138              	.LBE2551:
 4139              	.LBE2550:
 4140              	.LBE2549:
 4141              	.LBE2548:
 4142              	# Quicksort_Copy.h:116:     heap_select(first, middle, last, compare);
 116:Quicksort_Copy.h ****     sort_heap(first, middle, compare);
 4143              		.loc 16 116 0
 4144 0c09 4C89EF   		movq	%r13, %rdi	# first,
 4145 0c0c E8000000 		call	_ZN13quicksortcopy11heap_selectI11SortableRefPFbPS1_S2_EEEvPT_S6_S6_T0_	#
 4145      00
 4146              	.LVL291:
 4147              		.p2align 4,,10
 4148 0c11 0F1F8000 		.p2align 3
 4148      000000
 4149              	.L255:
 4150              	.LBB2555:
 4151              	.LBB2554:
 4152              	# Quicksort_Copy.h:93:         --last;
  93:Quicksort_Copy.h ****         pop_heap(first, last, last, compare);
 4153              		.loc 16 93 0
 4154 0c18 4883ED10 		subq	$16, %rbp	#, last
 4155              	.LVL292:
 4156              	.LBB2553:
 4157              	.LBB2552:
 4158              	# Quicksort_Copy.h:83:     TValueType value = std::move(*result);
  83:Quicksort_Copy.h ****     *result = std::move(*first);
 4159              		.loc 16 83 0
 4160 0c1c 488B4D00 		movq	0(%rbp), %rcx	# MEM[base: last_24, offset: 0], value
 4161              	.LVL293:
 4162              	# Quicksort_Copy.h:85:     adjust_heap(first, (long int) 0, last - first, std::move(value), compare
  85:Quicksort_Copy.h **** }
 4163              		.loc 16 85 0
 4164 0c20 31F6     		xorl	%esi, %esi	#
 4165 0c22 4D89E1   		movq	%r12, %r9	# tmp139,
 4166              	# Quicksort_Copy.h:83:     TValueType value = std::move(*result);
  83:Quicksort_Copy.h ****     *result = std::move(*first);
 4167              		.loc 16 83 0
 4168 0c25 4C8B4508 		movq	8(%rbp), %r8	# MEM[base: last_24, offset: 0], value
 4169              	# Quicksort_Copy.h:85:     adjust_heap(first, (long int) 0, last - first, std::move(value), compare
  85:Quicksort_Copy.h **** }
 4170              		.loc 16 85 0
 4171 0c29 4889EB   		movq	%rbp, %rbx	# last, _27
 4172 0c2c 4C89EF   		movq	%r13, %rdi	# first,
 4173 0c2f 4C29EB   		subq	%r13, %rbx	# first, _27
 4174              	# Quicksort_Copy.h:84:     *result = std::move(*first);
  84:Quicksort_Copy.h ****     adjust_heap(first, (long int) 0, last - first, std::move(value), compare);
 4175              		.loc 16 84 0
 4176 0c32 C4C17A6F 		vmovdqu	0(%r13), %xmm0	# *first_3(D), *first_3(D)
 4176      4500
 4177              	# Quicksort_Copy.h:85:     adjust_heap(first, (long int) 0, last - first, std::move(value), compare
  85:Quicksort_Copy.h **** }
 4178              		.loc 16 85 0
 4179 0c38 4889DA   		movq	%rbx, %rdx	# _27, tmp122
 4180 0c3b 48C1FA04 		sarq	$4, %rdx	#, tmp122
 4181              	# Quicksort_Copy.h:84:     *result = std::move(*first);
  84:Quicksort_Copy.h ****     adjust_heap(first, (long int) 0, last - first, std::move(value), compare);
 4182              		.loc 16 84 0
 4183 0c3f C5F81145 		vmovups	%xmm0, 0(%rbp)	# *first_3(D), MEM[base: last_24, offset: 0B]
 4183      00
 4184              	# Quicksort_Copy.h:85:     adjust_heap(first, (long int) 0, last - first, std::move(value), compare
  85:Quicksort_Copy.h **** }
 4185              		.loc 16 85 0
 4186 0c44 E8000000 		call	_ZN13quicksortcopy11adjust_heapI11SortableReflPFbPS1_S2_EEEvPT_T0_S7_S5_T1_	#
 4186      00
 4187              	.LVL294:
 4188              	.LBE2552:
 4189              	.LBE2553:
 4190              	# Quicksort_Copy.h:91:     while (last - first > 1)
  91:Quicksort_Copy.h ****     {
 4191              		.loc 16 91 0
 4192 0c49 4883FB10 		cmpq	$16, %rbx	#, _27
 4193 0c4d 7FC9     		jg	.L255	#,
 4194              	.LVL295:
 4195              	.L275:
 4196              	.LBE2554:
 4197              	.LBE2555:
 4198              	.LBE2547:
 4199              	.LBE2546:
 4200              	.LBE2558:
 4201              	# Quicksort_Copy.h:266: }
 264:Quicksort_Copy.h ****         last = cut;
 265:Quicksort_Copy.h **** 	}
 266:Quicksort_Copy.h **** }
 4202              		.loc 16 266 0
 4203 0c4f 5B       		popq	%rbx	#
 4204              		.cfi_remember_state
 4205              		.cfi_def_cfa_offset 40
 4206 0c50 5D       		popq	%rbp	#
 4207              		.cfi_def_cfa_offset 32
 4208 0c51 415C     		popq	%r12	#
 4209              		.cfi_def_cfa_offset 24
 4210 0c53 415D     		popq	%r13	#
 4211              		.cfi_def_cfa_offset 16
 4212              	.LVL296:
 4213 0c55 415E     		popq	%r14	#
 4214              		.cfi_def_cfa_offset 8
 4215 0c57 C3       		ret
 4216              	.LVL297:
 4217 0c58 0F1F8400 		.p2align 4,,10
 4217      00000000 
 4218              		.p2align 3
 4219              	.L256:
 4220              		.cfi_restore_state
 4221              	.LBB2559:
 4222              	.LBB2556:
 4223              	.LBB2543:
 4224              	.LBB2540:
 4225              	.LBB2531:
 4226              	# Quicksort_Copy.h:226:     else if (compare(one, three))
 226:Quicksort_Copy.h ****     {
 4227              		.loc 16 226 0
 4228 0c60 4939C8   		cmpq	%rcx, %r8	# _72, pretmp_39
 4229 0c63 0F87F1FE 		ja	.L281	#,
 4229      FFFF
 4230              	.LVL298:
 4231              	# Quicksort_Copy.h:230:     else if (compare(two, three))
 230:Quicksort_Copy.h ****     {
 4232              		.loc 16 230 0
 4233 0c69 4939D0   		cmpq	%rdx, %r8	# _73, pretmp_39
 4234 0c6c 7722     		ja	.L280	#,
 4235              	.LVL299:
 4236              	.L262:
 4237              	.LBB2524:
 4238              	.LBB2525:
 4239              	.LBB2526:
 4240              	# /usr/include/c++/7/bits/move.h:199:       __a = _GLIBCXX_MOVE(__b);
 199:/usr/include/c++/7/bits/move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 4241              		.loc 17 199 0
 4242 0c6e C5FA6F00 		vmovdqu	(%rax), %xmm0	# *mid_36, *mid_36
 4243 0c72 C4C17811 		vmovups	%xmm0, 0(%r13)	# *mid_36, *first_3(D)
 4243      4500
 4244              	.LVL300:
 4245              	# /usr/include/c++/7/bits/move.h:200:       __b = _GLIBCXX_MOVE(__tmp);
 4246              		.loc 17 200 0
 4247 0c78 488938   		movq	%rdi, (%rax)	# prephitmp_130, MEM[(struct SortableRef *)mid_36]
 4248 0c7b 4C894808 		movq	%r9, 8(%rax)	# pretmp_155, MEM[(struct SortableRef *)mid_36 + 8B]
 4249              	.LVL301:
 4250 0c7f 488B7EF0 		movq	-16(%rsi), %rdi	# MEM[(long unsigned int *)last_22 + -16B], prephitmp_130
 4251 0c83 E9EAFEFF 		jmp	.L258	#
 4251      FF
 4252              	.LVL302:
 4253 0c88 0F1F8400 		.p2align 4,,10
 4253      00000000 
 4254              		.p2align 3
 4255              	.L280:
 4256              	.LBE2526:
 4257              	.LBE2525:
 4258              	.LBE2524:
 4259              	.LBB2527:
 4260              	.LBB2528:
 4261              	.LBB2529:
 4262              	# /usr/include/c++/7/bits/move.h:199:       __a = _GLIBCXX_MOVE(__b);
 199:/usr/include/c++/7/bits/move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 4263              		.loc 17 199 0
 4264 0c90 C5FA6F46 		vmovdqu	-16(%rsi), %xmm0	# MEM[(struct SortableRef &)last_22 + 18446744073709551600], MEM[(struct 
 4264      F0
 4265 0c95 C4C17811 		vmovups	%xmm0, 0(%r13)	# MEM[(struct SortableRef &)last_22 + 18446744073709551600], *first_3(D)
 4265      4500
 4266              	.LVL303:
 4267              	# /usr/include/c++/7/bits/move.h:200:       __b = _GLIBCXX_MOVE(__tmp);
 4268              		.loc 17 200 0
 4269 0c9b 48897EF0 		movq	%rdi, -16(%rsi)	# prephitmp_130, MEM[(struct SortableRef *)last_22 + -16B]
 4270 0c9f 4C894EF8 		movq	%r9, -8(%rsi)	# pretmp_155, MEM[(struct SortableRef *)last_22 + -8B]
 4271              	.LVL304:
 4272 0ca3 E9CAFEFF 		jmp	.L258	#
 4272      FF
 4273              	.LVL305:
 4274              	.L277:
 4275              		.cfi_def_cfa_offset 8
 4276              		.cfi_restore 3
 4277              		.cfi_restore 6
 4278              		.cfi_restore 12
 4279              		.cfi_restore 13
 4280              		.cfi_restore 14
 4281 0ca8 C3       		ret
 4282              	.L282:
 4283              		.cfi_def_cfa_offset 48
 4284              		.cfi_offset 3, -48
 4285              		.cfi_offset 6, -40
 4286              		.cfi_offset 12, -32
 4287              		.cfi_offset 13, -24
 4288              		.cfi_offset 14, -16
 4289              	.LBE2529:
 4290              	.LBE2528:
 4291              	.LBE2527:
 4292              	.LBE2531:
 4293              	.LBE2540:
 4294              	.LBE2543:
 4295              	.LBE2556:
 4296              	# Quicksort_Copy.h:255:         if (depth_limit == 0)
 255:Quicksort_Copy.h ****         {
 4297              		.loc 16 255 0
 4298 0ca9 4889F5   		movq	%rsi, %rbp	# last, last
 4299 0cac E944FFFF 		jmp	.L252	#
 4299      FF
 4300              	.LBE2559:
 4301              		.cfi_endproc
 4302              	.LFE4146:
 4304              		.section	.text._ZSt13__adjust_heapIP11SortableReflS0_N9__gnu_cxx5__ops15_Iter_comp_iterIPFbRS0_S5_
 4305              		.p2align 4,,15
 4306              		.weak	_ZSt13__adjust_heapIP11SortableReflS0_N9__gnu_cxx5__ops15_Iter_comp_iterIPFbRS0_S5_EEEEvT_T0
 4308              	_ZSt13__adjust_heapIP11SortableReflS0_N9__gnu_cxx5__ops15_Iter_comp_iterIPFbRS0_S5_EEEEvT_T0_SA_T1_
 4309              	.LFB4086:
 4310              		.file 18 "/usr/include/c++/7/bits/stl_heap.h"
   1:/usr/include/c++/7/bits/stl_heap.h **** // Heap implementation -*- C++ -*-
   2:/usr/include/c++/7/bits/stl_heap.h **** 
   3:/usr/include/c++/7/bits/stl_heap.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/stl_heap.h **** //
   5:/usr/include/c++/7/bits/stl_heap.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/stl_heap.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/stl_heap.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/stl_heap.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/stl_heap.h **** // any later version.
  10:/usr/include/c++/7/bits/stl_heap.h **** 
  11:/usr/include/c++/7/bits/stl_heap.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/stl_heap.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/stl_heap.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/stl_heap.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/stl_heap.h **** 
  16:/usr/include/c++/7/bits/stl_heap.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/stl_heap.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/stl_heap.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/stl_heap.h **** 
  20:/usr/include/c++/7/bits/stl_heap.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/stl_heap.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/stl_heap.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/stl_heap.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/stl_heap.h **** 
  25:/usr/include/c++/7/bits/stl_heap.h **** /*
  26:/usr/include/c++/7/bits/stl_heap.h ****  *
  27:/usr/include/c++/7/bits/stl_heap.h ****  * Copyright (c) 1994
  28:/usr/include/c++/7/bits/stl_heap.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/7/bits/stl_heap.h ****  *
  30:/usr/include/c++/7/bits/stl_heap.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/7/bits/stl_heap.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/7/bits/stl_heap.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/7/bits/stl_heap.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/7/bits/stl_heap.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/7/bits/stl_heap.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/7/bits/stl_heap.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/7/bits/stl_heap.h ****  *
  38:/usr/include/c++/7/bits/stl_heap.h ****  * Copyright (c) 1997
  39:/usr/include/c++/7/bits/stl_heap.h ****  * Silicon Graphics Computer Systems, Inc.
  40:/usr/include/c++/7/bits/stl_heap.h ****  *
  41:/usr/include/c++/7/bits/stl_heap.h ****  * Permission to use, copy, modify, distribute and sell this software
  42:/usr/include/c++/7/bits/stl_heap.h ****  * and its documentation for any purpose is hereby granted without fee,
  43:/usr/include/c++/7/bits/stl_heap.h ****  * provided that the above copyright notice appear in all copies and
  44:/usr/include/c++/7/bits/stl_heap.h ****  * that both that copyright notice and this permission notice appear
  45:/usr/include/c++/7/bits/stl_heap.h ****  * in supporting documentation.  Silicon Graphics makes no
  46:/usr/include/c++/7/bits/stl_heap.h ****  * representations about the suitability of this software for any
  47:/usr/include/c++/7/bits/stl_heap.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  48:/usr/include/c++/7/bits/stl_heap.h ****  */
  49:/usr/include/c++/7/bits/stl_heap.h **** 
  50:/usr/include/c++/7/bits/stl_heap.h **** /** @file bits/stl_heap.h
  51:/usr/include/c++/7/bits/stl_heap.h ****  *  This is an internal header file, included by other library headers.
  52:/usr/include/c++/7/bits/stl_heap.h ****  *  Do not attempt to use it directly. @headername{queue}
  53:/usr/include/c++/7/bits/stl_heap.h ****  */
  54:/usr/include/c++/7/bits/stl_heap.h **** 
  55:/usr/include/c++/7/bits/stl_heap.h **** #ifndef _STL_HEAP_H
  56:/usr/include/c++/7/bits/stl_heap.h **** #define _STL_HEAP_H 1
  57:/usr/include/c++/7/bits/stl_heap.h **** 
  58:/usr/include/c++/7/bits/stl_heap.h **** #include <debug/debug.h>
  59:/usr/include/c++/7/bits/stl_heap.h **** #include <bits/move.h>
  60:/usr/include/c++/7/bits/stl_heap.h **** #include <bits/predefined_ops.h>
  61:/usr/include/c++/7/bits/stl_heap.h **** 
  62:/usr/include/c++/7/bits/stl_heap.h **** namespace std _GLIBCXX_VISIBILITY(default)
  63:/usr/include/c++/7/bits/stl_heap.h **** {
  64:/usr/include/c++/7/bits/stl_heap.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  65:/usr/include/c++/7/bits/stl_heap.h **** 
  66:/usr/include/c++/7/bits/stl_heap.h ****   /**
  67:/usr/include/c++/7/bits/stl_heap.h ****    * @defgroup heap_algorithms Heap
  68:/usr/include/c++/7/bits/stl_heap.h ****    * @ingroup sorting_algorithms
  69:/usr/include/c++/7/bits/stl_heap.h ****    */
  70:/usr/include/c++/7/bits/stl_heap.h **** 
  71:/usr/include/c++/7/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Distance,
  72:/usr/include/c++/7/bits/stl_heap.h **** 	   typename _Compare>
  73:/usr/include/c++/7/bits/stl_heap.h ****     _Distance
  74:/usr/include/c++/7/bits/stl_heap.h ****     __is_heap_until(_RandomAccessIterator __first, _Distance __n,
  75:/usr/include/c++/7/bits/stl_heap.h **** 		    _Compare& __comp)
  76:/usr/include/c++/7/bits/stl_heap.h ****     {
  77:/usr/include/c++/7/bits/stl_heap.h ****       _Distance __parent = 0;
  78:/usr/include/c++/7/bits/stl_heap.h ****       for (_Distance __child = 1; __child < __n; ++__child)
  79:/usr/include/c++/7/bits/stl_heap.h **** 	{
  80:/usr/include/c++/7/bits/stl_heap.h **** 	  if (__comp(__first + __parent, __first + __child))
  81:/usr/include/c++/7/bits/stl_heap.h **** 	    return __child;
  82:/usr/include/c++/7/bits/stl_heap.h **** 	  if ((__child & 1) == 0)
  83:/usr/include/c++/7/bits/stl_heap.h **** 	    ++__parent;
  84:/usr/include/c++/7/bits/stl_heap.h **** 	}
  85:/usr/include/c++/7/bits/stl_heap.h ****       return __n;
  86:/usr/include/c++/7/bits/stl_heap.h ****     }
  87:/usr/include/c++/7/bits/stl_heap.h **** 
  88:/usr/include/c++/7/bits/stl_heap.h ****   // __is_heap, a predicate testing whether or not a range is a heap.
  89:/usr/include/c++/7/bits/stl_heap.h ****   // This function is an extension, not part of the C++ standard.
  90:/usr/include/c++/7/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Distance>
  91:/usr/include/c++/7/bits/stl_heap.h ****     inline bool
  92:/usr/include/c++/7/bits/stl_heap.h ****     __is_heap(_RandomAccessIterator __first, _Distance __n)
  93:/usr/include/c++/7/bits/stl_heap.h ****     {
  94:/usr/include/c++/7/bits/stl_heap.h ****       __gnu_cxx::__ops::_Iter_less_iter __comp;
  95:/usr/include/c++/7/bits/stl_heap.h ****       return std::__is_heap_until(__first, __n, __comp) == __n;
  96:/usr/include/c++/7/bits/stl_heap.h ****     }
  97:/usr/include/c++/7/bits/stl_heap.h **** 
  98:/usr/include/c++/7/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Compare,
  99:/usr/include/c++/7/bits/stl_heap.h **** 	   typename _Distance>
 100:/usr/include/c++/7/bits/stl_heap.h ****     inline bool
 101:/usr/include/c++/7/bits/stl_heap.h ****     __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
 102:/usr/include/c++/7/bits/stl_heap.h ****     {
 103:/usr/include/c++/7/bits/stl_heap.h ****       typedef __decltype(__comp) _Cmp;
 104:/usr/include/c++/7/bits/stl_heap.h ****       __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(_GLIBCXX_MOVE(__comp));
 105:/usr/include/c++/7/bits/stl_heap.h ****       return std::__is_heap_until(__first, __n, __cmp) == __n;
 106:/usr/include/c++/7/bits/stl_heap.h ****     }
 107:/usr/include/c++/7/bits/stl_heap.h **** 
 108:/usr/include/c++/7/bits/stl_heap.h ****   template<typename _RandomAccessIterator>
 109:/usr/include/c++/7/bits/stl_heap.h ****     inline bool
 110:/usr/include/c++/7/bits/stl_heap.h ****     __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
 111:/usr/include/c++/7/bits/stl_heap.h ****     { return std::__is_heap(__first, std::distance(__first, __last)); }
 112:/usr/include/c++/7/bits/stl_heap.h **** 
 113:/usr/include/c++/7/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Compare>
 114:/usr/include/c++/7/bits/stl_heap.h ****     inline bool
 115:/usr/include/c++/7/bits/stl_heap.h ****     __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 116:/usr/include/c++/7/bits/stl_heap.h **** 	      _Compare __comp)
 117:/usr/include/c++/7/bits/stl_heap.h ****     {
 118:/usr/include/c++/7/bits/stl_heap.h ****       return std::__is_heap(__first, _GLIBCXX_MOVE(__comp),
 119:/usr/include/c++/7/bits/stl_heap.h **** 			    std::distance(__first, __last));
 120:/usr/include/c++/7/bits/stl_heap.h ****     }
 121:/usr/include/c++/7/bits/stl_heap.h **** 
 122:/usr/include/c++/7/bits/stl_heap.h ****   // Heap-manipulation functions: push_heap, pop_heap, make_heap, sort_heap,
 123:/usr/include/c++/7/bits/stl_heap.h ****   // + is_heap and is_heap_until in C++0x.
 124:/usr/include/c++/7/bits/stl_heap.h **** 
 125:/usr/include/c++/7/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
 126:/usr/include/c++/7/bits/stl_heap.h **** 	   typename _Compare>
 127:/usr/include/c++/7/bits/stl_heap.h ****     void
 128:/usr/include/c++/7/bits/stl_heap.h ****     __push_heap(_RandomAccessIterator __first,
 129:/usr/include/c++/7/bits/stl_heap.h **** 		_Distance __holeIndex, _Distance __topIndex, _Tp __value,
 130:/usr/include/c++/7/bits/stl_heap.h **** 		_Compare& __comp)
 131:/usr/include/c++/7/bits/stl_heap.h ****     {
 132:/usr/include/c++/7/bits/stl_heap.h ****       _Distance __parent = (__holeIndex - 1) / 2;
 133:/usr/include/c++/7/bits/stl_heap.h ****       while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 134:/usr/include/c++/7/bits/stl_heap.h **** 	{
 135:/usr/include/c++/7/bits/stl_heap.h **** 	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 136:/usr/include/c++/7/bits/stl_heap.h **** 	  __holeIndex = __parent;
 137:/usr/include/c++/7/bits/stl_heap.h **** 	  __parent = (__holeIndex - 1) / 2;
 138:/usr/include/c++/7/bits/stl_heap.h **** 	}
 139:/usr/include/c++/7/bits/stl_heap.h ****       *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 140:/usr/include/c++/7/bits/stl_heap.h ****     }
 141:/usr/include/c++/7/bits/stl_heap.h **** 
 142:/usr/include/c++/7/bits/stl_heap.h ****   /**
 143:/usr/include/c++/7/bits/stl_heap.h ****    *  @brief  Push an element onto a heap.
 144:/usr/include/c++/7/bits/stl_heap.h ****    *  @param  __first  Start of heap.
 145:/usr/include/c++/7/bits/stl_heap.h ****    *  @param  __last   End of heap + element.
 146:/usr/include/c++/7/bits/stl_heap.h ****    *  @ingroup heap_algorithms
 147:/usr/include/c++/7/bits/stl_heap.h ****    *
 148:/usr/include/c++/7/bits/stl_heap.h ****    *  This operation pushes the element at last-1 onto the valid heap
 149:/usr/include/c++/7/bits/stl_heap.h ****    *  over the range [__first,__last-1).  After completion,
 150:/usr/include/c++/7/bits/stl_heap.h ****    *  [__first,__last) is a valid heap.
 151:/usr/include/c++/7/bits/stl_heap.h ****   */
 152:/usr/include/c++/7/bits/stl_heap.h ****   template<typename _RandomAccessIterator>
 153:/usr/include/c++/7/bits/stl_heap.h ****     inline void
 154:/usr/include/c++/7/bits/stl_heap.h ****     push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
 155:/usr/include/c++/7/bits/stl_heap.h ****     {
 156:/usr/include/c++/7/bits/stl_heap.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
 157:/usr/include/c++/7/bits/stl_heap.h **** 	  _ValueType;
 158:/usr/include/c++/7/bits/stl_heap.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 159:/usr/include/c++/7/bits/stl_heap.h **** 	  _DistanceType;
 160:/usr/include/c++/7/bits/stl_heap.h **** 
 161:/usr/include/c++/7/bits/stl_heap.h ****       // concept requirements
 162:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
 163:/usr/include/c++/7/bits/stl_heap.h **** 	    _RandomAccessIterator>)
 164:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)
 165:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_valid_range(__first, __last);
 166:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_irreflexive(__first, __last);
 167:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_heap(__first, __last - 1);
 168:/usr/include/c++/7/bits/stl_heap.h **** 
 169:/usr/include/c++/7/bits/stl_heap.h ****       __gnu_cxx::__ops::_Iter_less_val __comp;
 170:/usr/include/c++/7/bits/stl_heap.h ****       _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));
 171:/usr/include/c++/7/bits/stl_heap.h ****       std::__push_heap(__first, _DistanceType((__last - __first) - 1),
 172:/usr/include/c++/7/bits/stl_heap.h **** 		       _DistanceType(0), _GLIBCXX_MOVE(__value), __comp);
 173:/usr/include/c++/7/bits/stl_heap.h ****     }
 174:/usr/include/c++/7/bits/stl_heap.h **** 
 175:/usr/include/c++/7/bits/stl_heap.h ****   /**
 176:/usr/include/c++/7/bits/stl_heap.h ****    *  @brief  Push an element onto a heap using comparison functor.
 177:/usr/include/c++/7/bits/stl_heap.h ****    *  @param  __first  Start of heap.
 178:/usr/include/c++/7/bits/stl_heap.h ****    *  @param  __last   End of heap + element.
 179:/usr/include/c++/7/bits/stl_heap.h ****    *  @param  __comp   Comparison functor.
 180:/usr/include/c++/7/bits/stl_heap.h ****    *  @ingroup heap_algorithms
 181:/usr/include/c++/7/bits/stl_heap.h ****    *
 182:/usr/include/c++/7/bits/stl_heap.h ****    *  This operation pushes the element at __last-1 onto the valid
 183:/usr/include/c++/7/bits/stl_heap.h ****    *  heap over the range [__first,__last-1).  After completion,
 184:/usr/include/c++/7/bits/stl_heap.h ****    *  [__first,__last) is a valid heap.  Compare operations are
 185:/usr/include/c++/7/bits/stl_heap.h ****    *  performed using comp.
 186:/usr/include/c++/7/bits/stl_heap.h ****   */
 187:/usr/include/c++/7/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Compare>
 188:/usr/include/c++/7/bits/stl_heap.h ****     inline void
 189:/usr/include/c++/7/bits/stl_heap.h ****     push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 190:/usr/include/c++/7/bits/stl_heap.h **** 	      _Compare __comp)
 191:/usr/include/c++/7/bits/stl_heap.h ****     {
 192:/usr/include/c++/7/bits/stl_heap.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
 193:/usr/include/c++/7/bits/stl_heap.h **** 	  _ValueType;
 194:/usr/include/c++/7/bits/stl_heap.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 195:/usr/include/c++/7/bits/stl_heap.h **** 	  _DistanceType;
 196:/usr/include/c++/7/bits/stl_heap.h **** 
 197:/usr/include/c++/7/bits/stl_heap.h ****       // concept requirements
 198:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
 199:/usr/include/c++/7/bits/stl_heap.h **** 	    _RandomAccessIterator>)
 200:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_valid_range(__first, __last);
 201:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
 202:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_heap_pred(__first, __last - 1, __comp);
 203:/usr/include/c++/7/bits/stl_heap.h **** 
 204:/usr/include/c++/7/bits/stl_heap.h ****       __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
 205:/usr/include/c++/7/bits/stl_heap.h **** 	__cmp(_GLIBCXX_MOVE(__comp));
 206:/usr/include/c++/7/bits/stl_heap.h ****       _ValueType __value = _GLIBCXX_MOVE(*(__last - 1));
 207:/usr/include/c++/7/bits/stl_heap.h ****       std::__push_heap(__first, _DistanceType((__last - __first) - 1),
 208:/usr/include/c++/7/bits/stl_heap.h **** 		       _DistanceType(0), _GLIBCXX_MOVE(__value), __cmp);
 209:/usr/include/c++/7/bits/stl_heap.h ****     }
 210:/usr/include/c++/7/bits/stl_heap.h **** 
 211:/usr/include/c++/7/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Distance,
 212:/usr/include/c++/7/bits/stl_heap.h **** 	   typename _Tp, typename _Compare>
 213:/usr/include/c++/7/bits/stl_heap.h ****     void
 214:/usr/include/c++/7/bits/stl_heap.h ****     __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 4311              		.loc 18 214 0
 4312              		.cfi_startproc
 4313              	.LVL306:
 4314 0000 4157     		pushq	%r15	#
 4315              		.cfi_def_cfa_offset 16
 4316              		.cfi_offset 15, -16
 4317 0002 4989FF   		movq	%rdi, %r15	# __first, __first
 4318 0005 4156     		pushq	%r14	#
 4319              		.cfi_def_cfa_offset 24
 4320              		.cfi_offset 14, -24
 4321 0007 4155     		pushq	%r13	#
 4322              		.cfi_def_cfa_offset 32
 4323              		.cfi_offset 13, -32
 4324 0009 4989D5   		movq	%rdx, %r13	# __len, __len
 4325 000c 4154     		pushq	%r12	#
 4326              		.cfi_def_cfa_offset 40
 4327              		.cfi_offset 12, -40
 4328 000e 55       		pushq	%rbp	#
 4329              		.cfi_def_cfa_offset 48
 4330              		.cfi_offset 6, -48
 4331 000f 53       		pushq	%rbx	#
 4332              		.cfi_def_cfa_offset 56
 4333              		.cfi_offset 3, -56
 4334 0010 4C89CB   		movq	%r9, %rbx	# __comp, __comp
 4335 0013 4883EC58 		subq	$88, %rsp	#,
 4336              		.cfi_def_cfa_offset 144
 4337              	# /usr/include/c++/7/bits/stl_heap.h:214:     __adjust_heap(_RandomAccessIterator __first, _Distanc
 4338              		.loc 18 214 0
 4339 0017 64488B04 		movq	%fs:40, %rax	#, tmp189
 4339      25280000 
 4339      00
 4340 0020 48894424 		movq	%rax, 72(%rsp)	# tmp189, D.84138
 4340      48
 4341 0025 31C0     		xorl	%eax, %eax	# tmp189
 4342              	.LVL307:
 4343              	# /usr/include/c++/7/bits/stl_heap.h:219:       while (__secondChild < (__len - 1) / 2)
 215:/usr/include/c++/7/bits/stl_heap.h **** 		  _Distance __len, _Tp __value, _Compare __comp)
 216:/usr/include/c++/7/bits/stl_heap.h ****     {
 217:/usr/include/c++/7/bits/stl_heap.h ****       const _Distance __topIndex = __holeIndex;
 218:/usr/include/c++/7/bits/stl_heap.h ****       _Distance __secondChild = __holeIndex;
 219:/usr/include/c++/7/bits/stl_heap.h ****       while (__secondChild < (__len - 1) / 2)
 4344              		.loc 18 219 0
 4345 0027 488D42FF 		leaq	-1(%rdx), %rax	#, tmp143
 4346              	# /usr/include/c++/7/bits/stl_heap.h:214:     __adjust_heap(_RandomAccessIterator __first, _Distanc
 214:/usr/include/c++/7/bits/stl_heap.h **** 		  _Distance __len, _Tp __value, _Compare __comp)
 4347              		.loc 18 214 0
 4348 002b 48897424 		movq	%rsi, 16(%rsp)	# __holeIndex, %sfp
 4348      10
 4349              	# /usr/include/c++/7/bits/stl_heap.h:219:       while (__secondChild < (__len - 1) / 2)
 4350              		.loc 18 219 0
 4351 0030 4889C5   		movq	%rax, %rbp	# tmp143, tmp144
 4352              	# /usr/include/c++/7/bits/stl_heap.h:214:     __adjust_heap(_RandomAccessIterator __first, _Distanc
 214:/usr/include/c++/7/bits/stl_heap.h **** 		  _Distance __len, _Tp __value, _Compare __comp)
 4353              		.loc 18 214 0
 4354 0033 48894C24 		movq	%rcx, 24(%rsp)	# __value, %sfp
 4354      18
 4355              	# /usr/include/c++/7/bits/stl_heap.h:219:       while (__secondChild < (__len - 1) / 2)
 4356              		.loc 18 219 0
 4357 0038 48C1ED3F 		shrq	$63, %rbp	#, tmp144
 4358              	# /usr/include/c++/7/bits/stl_heap.h:214:     __adjust_heap(_RandomAccessIterator __first, _Distanc
 214:/usr/include/c++/7/bits/stl_heap.h **** 		  _Distance __len, _Tp __value, _Compare __comp)
 4359              		.loc 18 214 0
 4360 003c 4C894424 		movq	%r8, 32(%rsp)	# __value, %sfp
 4360      20
 4361              	# /usr/include/c++/7/bits/stl_heap.h:219:       while (__secondChild < (__len - 1) / 2)
 4362              		.loc 18 219 0
 4363 0041 4801C5   		addq	%rax, %rbp	# tmp143, tmp145
 4364 0044 4889D0   		movq	%rdx, %rax	# __len, _100
 4365 0047 83E001   		andl	$1, %eax	#, _100
 4366 004a 48D1FD   		sarq	%rbp	# tmp146
 4367 004d 48894424 		movq	%rax, 40(%rsp)	# _100, %sfp
 4367      28
 4368 0052 4839EE   		cmpq	%rbp, %rsi	# tmp146, __holeIndex
 4369 0055 0F8D7501 		jge	.L285	#,
 4369      0000
 4370 005b 4989F6   		movq	%rsi, %r14	# __holeIndex, __holeIndex
 4371 005e EB03     		jmp	.L286	#
 4372              	.LVL308:
 4373              		.p2align 4,,10
 4374              		.p2align 3
 4375              	.L289:
 4376              	# /usr/include/c++/7/bits/stl_heap.h:214:     __adjust_heap(_RandomAccessIterator __first, _Distanc
 214:/usr/include/c++/7/bits/stl_heap.h **** 		  _Distance __len, _Tp __value, _Compare __comp)
 4377              		.loc 18 214 0
 4378 0060 4D89E6   		movq	%r12, %r14	# __holeIndex, __holeIndex
 4379              	.LVL309:
 4380              	.L286:
 4381              	# /usr/include/c++/7/bits/stl_heap.h:221: 	  __secondChild = 2 * (__secondChild + 1);
 220:/usr/include/c++/7/bits/stl_heap.h **** 	{
 221:/usr/include/c++/7/bits/stl_heap.h **** 	  __secondChild = 2 * (__secondChild + 1);
 4382              		.loc 18 221 0
 4383 0063 498D4601 		leaq	1(%r14), %rax	#, tmp147
 4384 0067 4C8D2400 		leaq	(%rax,%rax), %r12	#, __holeIndex
 4385              	.LVL310:
 4386              	# /usr/include/c++/7/bits/stl_heap.h:223: 		     __first + (__secondChild - 1)))
 222:/usr/include/c++/7/bits/stl_heap.h **** 	  if (__comp(__first + __secondChild,
 223:/usr/include/c++/7/bits/stl_heap.h **** 		     __first + (__secondChild - 1)))
 4387              		.loc 18 223 0
 4388 006b 48C1E005 		salq	$5, %rax	#, _5
 4389              	# /usr/include/c++/7/bits/stl_heap.h:222: 	  if (__comp(__first + __secondChild,
 222:/usr/include/c++/7/bits/stl_heap.h **** 	  if (__comp(__first + __secondChild,
 4390              		.loc 18 222 0
 4391 006f 498D0C07 		leaq	(%r15,%rax), %rcx	#, _8
 4392              	.LVL311:
 4393              	.LBB2570:
 4394              	.LBB2571:
 4395              	# /usr/include/c++/7/bits/predefined_ops.h:143:         { return bool(_M_comp(*__it1, *__it2)); }
 4396              		.file 19 "/usr/include/c++/7/bits/predefined_ops.h"
   1:/usr/include/c++/7/bits/predefined_ops.h **** // Default predicates for internal use -*- C++ -*-
   2:/usr/include/c++/7/bits/predefined_ops.h **** 
   3:/usr/include/c++/7/bits/predefined_ops.h **** // Copyright (C) 2013-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/predefined_ops.h **** //
   5:/usr/include/c++/7/bits/predefined_ops.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/predefined_ops.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/predefined_ops.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/predefined_ops.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/predefined_ops.h **** // any later version.
  10:/usr/include/c++/7/bits/predefined_ops.h **** 
  11:/usr/include/c++/7/bits/predefined_ops.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/predefined_ops.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/predefined_ops.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/predefined_ops.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/predefined_ops.h **** 
  16:/usr/include/c++/7/bits/predefined_ops.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/predefined_ops.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/predefined_ops.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/predefined_ops.h **** 
  20:/usr/include/c++/7/bits/predefined_ops.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/predefined_ops.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/predefined_ops.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/predefined_ops.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/predefined_ops.h **** 
  25:/usr/include/c++/7/bits/predefined_ops.h **** /** @file predefined_ops.h
  26:/usr/include/c++/7/bits/predefined_ops.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/7/bits/predefined_ops.h ****  *  You should not attempt to use it directly. @headername{algorithm}
  28:/usr/include/c++/7/bits/predefined_ops.h ****  */
  29:/usr/include/c++/7/bits/predefined_ops.h **** 
  30:/usr/include/c++/7/bits/predefined_ops.h **** #ifndef _GLIBCXX_PREDEFINED_OPS_H
  31:/usr/include/c++/7/bits/predefined_ops.h **** #define _GLIBCXX_PREDEFINED_OPS_H	1
  32:/usr/include/c++/7/bits/predefined_ops.h **** 
  33:/usr/include/c++/7/bits/predefined_ops.h **** namespace __gnu_cxx
  34:/usr/include/c++/7/bits/predefined_ops.h **** {
  35:/usr/include/c++/7/bits/predefined_ops.h **** namespace __ops
  36:/usr/include/c++/7/bits/predefined_ops.h **** {
  37:/usr/include/c++/7/bits/predefined_ops.h ****   struct _Iter_less_iter
  38:/usr/include/c++/7/bits/predefined_ops.h ****   {
  39:/usr/include/c++/7/bits/predefined_ops.h ****     template<typename _Iterator1, typename _Iterator2>
  40:/usr/include/c++/7/bits/predefined_ops.h ****       _GLIBCXX14_CONSTEXPR
  41:/usr/include/c++/7/bits/predefined_ops.h ****       bool
  42:/usr/include/c++/7/bits/predefined_ops.h ****       operator()(_Iterator1 __it1, _Iterator2 __it2) const
  43:/usr/include/c++/7/bits/predefined_ops.h ****       { return *__it1 < *__it2; }
  44:/usr/include/c++/7/bits/predefined_ops.h ****   };
  45:/usr/include/c++/7/bits/predefined_ops.h **** 
  46:/usr/include/c++/7/bits/predefined_ops.h ****   _GLIBCXX14_CONSTEXPR
  47:/usr/include/c++/7/bits/predefined_ops.h ****   inline _Iter_less_iter
  48:/usr/include/c++/7/bits/predefined_ops.h ****   __iter_less_iter()
  49:/usr/include/c++/7/bits/predefined_ops.h ****   { return _Iter_less_iter(); }
  50:/usr/include/c++/7/bits/predefined_ops.h **** 
  51:/usr/include/c++/7/bits/predefined_ops.h ****   struct _Iter_less_val
  52:/usr/include/c++/7/bits/predefined_ops.h ****   {
  53:/usr/include/c++/7/bits/predefined_ops.h **** #if __cplusplus >= 201103L
  54:/usr/include/c++/7/bits/predefined_ops.h ****     constexpr _Iter_less_val() = default;
  55:/usr/include/c++/7/bits/predefined_ops.h **** #else
  56:/usr/include/c++/7/bits/predefined_ops.h ****     _Iter_less_val() { }
  57:/usr/include/c++/7/bits/predefined_ops.h **** #endif
  58:/usr/include/c++/7/bits/predefined_ops.h **** 
  59:/usr/include/c++/7/bits/predefined_ops.h ****     explicit
  60:/usr/include/c++/7/bits/predefined_ops.h ****     _Iter_less_val(_Iter_less_iter) { }
  61:/usr/include/c++/7/bits/predefined_ops.h **** 
  62:/usr/include/c++/7/bits/predefined_ops.h ****     template<typename _Iterator, typename _Value>
  63:/usr/include/c++/7/bits/predefined_ops.h ****       bool
  64:/usr/include/c++/7/bits/predefined_ops.h ****       operator()(_Iterator __it, _Value& __val) const
  65:/usr/include/c++/7/bits/predefined_ops.h ****       { return *__it < __val; }
  66:/usr/include/c++/7/bits/predefined_ops.h ****   };
  67:/usr/include/c++/7/bits/predefined_ops.h **** 
  68:/usr/include/c++/7/bits/predefined_ops.h ****   inline _Iter_less_val
  69:/usr/include/c++/7/bits/predefined_ops.h ****   __iter_less_val()
  70:/usr/include/c++/7/bits/predefined_ops.h ****   { return _Iter_less_val(); }
  71:/usr/include/c++/7/bits/predefined_ops.h **** 
  72:/usr/include/c++/7/bits/predefined_ops.h ****   inline _Iter_less_val
  73:/usr/include/c++/7/bits/predefined_ops.h ****   __iter_comp_val(_Iter_less_iter)
  74:/usr/include/c++/7/bits/predefined_ops.h ****   { return _Iter_less_val(); }
  75:/usr/include/c++/7/bits/predefined_ops.h **** 
  76:/usr/include/c++/7/bits/predefined_ops.h ****   struct _Val_less_iter
  77:/usr/include/c++/7/bits/predefined_ops.h ****   {
  78:/usr/include/c++/7/bits/predefined_ops.h **** #if __cplusplus >= 201103L
  79:/usr/include/c++/7/bits/predefined_ops.h ****     constexpr _Val_less_iter() = default;
  80:/usr/include/c++/7/bits/predefined_ops.h **** #else
  81:/usr/include/c++/7/bits/predefined_ops.h ****     _Val_less_iter() { }
  82:/usr/include/c++/7/bits/predefined_ops.h **** #endif
  83:/usr/include/c++/7/bits/predefined_ops.h **** 
  84:/usr/include/c++/7/bits/predefined_ops.h ****     explicit
  85:/usr/include/c++/7/bits/predefined_ops.h ****     _Val_less_iter(_Iter_less_iter) { }
  86:/usr/include/c++/7/bits/predefined_ops.h **** 
  87:/usr/include/c++/7/bits/predefined_ops.h ****     template<typename _Value, typename _Iterator>
  88:/usr/include/c++/7/bits/predefined_ops.h ****       bool
  89:/usr/include/c++/7/bits/predefined_ops.h ****       operator()(_Value& __val, _Iterator __it) const
  90:/usr/include/c++/7/bits/predefined_ops.h ****       { return __val < *__it; }
  91:/usr/include/c++/7/bits/predefined_ops.h ****   };
  92:/usr/include/c++/7/bits/predefined_ops.h **** 
  93:/usr/include/c++/7/bits/predefined_ops.h ****   inline _Val_less_iter
  94:/usr/include/c++/7/bits/predefined_ops.h ****   __val_less_iter()
  95:/usr/include/c++/7/bits/predefined_ops.h ****   { return _Val_less_iter(); }
  96:/usr/include/c++/7/bits/predefined_ops.h **** 
  97:/usr/include/c++/7/bits/predefined_ops.h ****   inline _Val_less_iter
  98:/usr/include/c++/7/bits/predefined_ops.h ****   __val_comp_iter(_Iter_less_iter)
  99:/usr/include/c++/7/bits/predefined_ops.h ****   { return _Val_less_iter(); }
 100:/usr/include/c++/7/bits/predefined_ops.h **** 
 101:/usr/include/c++/7/bits/predefined_ops.h ****   struct _Iter_equal_to_iter
 102:/usr/include/c++/7/bits/predefined_ops.h ****   {
 103:/usr/include/c++/7/bits/predefined_ops.h ****     template<typename _Iterator1, typename _Iterator2>
 104:/usr/include/c++/7/bits/predefined_ops.h ****       bool
 105:/usr/include/c++/7/bits/predefined_ops.h ****       operator()(_Iterator1 __it1, _Iterator2 __it2) const
 106:/usr/include/c++/7/bits/predefined_ops.h ****       { return *__it1 == *__it2; }
 107:/usr/include/c++/7/bits/predefined_ops.h ****   };
 108:/usr/include/c++/7/bits/predefined_ops.h **** 
 109:/usr/include/c++/7/bits/predefined_ops.h ****   inline _Iter_equal_to_iter
 110:/usr/include/c++/7/bits/predefined_ops.h ****   __iter_equal_to_iter()
 111:/usr/include/c++/7/bits/predefined_ops.h ****   { return _Iter_equal_to_iter(); }
 112:/usr/include/c++/7/bits/predefined_ops.h **** 
 113:/usr/include/c++/7/bits/predefined_ops.h ****   struct _Iter_equal_to_val
 114:/usr/include/c++/7/bits/predefined_ops.h ****   {
 115:/usr/include/c++/7/bits/predefined_ops.h ****     template<typename _Iterator, typename _Value>
 116:/usr/include/c++/7/bits/predefined_ops.h ****       bool
 117:/usr/include/c++/7/bits/predefined_ops.h ****       operator()(_Iterator __it, _Value& __val) const
 118:/usr/include/c++/7/bits/predefined_ops.h ****       { return *__it == __val; }
 119:/usr/include/c++/7/bits/predefined_ops.h ****   };
 120:/usr/include/c++/7/bits/predefined_ops.h **** 
 121:/usr/include/c++/7/bits/predefined_ops.h ****   inline _Iter_equal_to_val
 122:/usr/include/c++/7/bits/predefined_ops.h ****   __iter_equal_to_val()
 123:/usr/include/c++/7/bits/predefined_ops.h ****   { return _Iter_equal_to_val(); }
 124:/usr/include/c++/7/bits/predefined_ops.h **** 
 125:/usr/include/c++/7/bits/predefined_ops.h ****   inline _Iter_equal_to_val
 126:/usr/include/c++/7/bits/predefined_ops.h ****   __iter_comp_val(_Iter_equal_to_iter)
 127:/usr/include/c++/7/bits/predefined_ops.h ****   { return _Iter_equal_to_val(); }
 128:/usr/include/c++/7/bits/predefined_ops.h **** 
 129:/usr/include/c++/7/bits/predefined_ops.h ****   template<typename _Compare>
 130:/usr/include/c++/7/bits/predefined_ops.h ****     struct _Iter_comp_iter
 131:/usr/include/c++/7/bits/predefined_ops.h ****     {
 132:/usr/include/c++/7/bits/predefined_ops.h ****       _Compare _M_comp;
 133:/usr/include/c++/7/bits/predefined_ops.h **** 
 134:/usr/include/c++/7/bits/predefined_ops.h ****       explicit _GLIBCXX14_CONSTEXPR
 135:/usr/include/c++/7/bits/predefined_ops.h ****       _Iter_comp_iter(_Compare __comp)
 136:/usr/include/c++/7/bits/predefined_ops.h **** 	: _M_comp(_GLIBCXX_MOVE(__comp))
 137:/usr/include/c++/7/bits/predefined_ops.h ****       { }
 138:/usr/include/c++/7/bits/predefined_ops.h **** 
 139:/usr/include/c++/7/bits/predefined_ops.h ****       template<typename _Iterator1, typename _Iterator2>
 140:/usr/include/c++/7/bits/predefined_ops.h ****         _GLIBCXX14_CONSTEXPR
 141:/usr/include/c++/7/bits/predefined_ops.h ****         bool
 142:/usr/include/c++/7/bits/predefined_ops.h ****         operator()(_Iterator1 __it1, _Iterator2 __it2)
 143:/usr/include/c++/7/bits/predefined_ops.h ****         { return bool(_M_comp(*__it1, *__it2)); }
 4397              		.loc 19 143 0
 4398 0073 48894C24 		movq	%rcx, 8(%rsp)	# _8, %sfp
 4398      08
 4399              	.LBE2571:
 4400              	.LBE2570:
 4401              	# /usr/include/c++/7/bits/stl_heap.h:222: 	  if (__comp(__first + __secondChild,
 222:/usr/include/c++/7/bits/stl_heap.h **** 	  if (__comp(__first + __secondChild,
 4402              		.loc 18 222 0
 4403 0078 498D7407 		leaq	-16(%r15,%rax), %rsi	#, tmp149
 4403      F0
 4404              	.LVL312:
 4405              	.LBB2573:
 4406              	.LBB2572:
 4407              	# /usr/include/c++/7/bits/predefined_ops.h:143:         { return bool(_M_comp(*__it1, *__it2)); }
 4408              		.loc 19 143 0
 4409 007d 4889CF   		movq	%rcx, %rdi	# _8,
 4410 0080 FFD3     		call	*%rbx	# __comp
 4411              	.LVL313:
 4412              	.LBE2572:
 4413              	.LBE2573:
 4414              	# /usr/include/c++/7/bits/stl_heap.h:222: 	  if (__comp(__first + __secondChild,
 222:/usr/include/c++/7/bits/stl_heap.h **** 	  if (__comp(__first + __secondChild,
 4415              		.loc 18 222 0
 4416 0082 488B4C24 		movq	8(%rsp), %rcx	# %sfp, _8
 4416      08
 4417 0087 84C0     		testb	%al, %al	# _44
 4418 0089 740F     		je	.L287	#,
 4419              	# /usr/include/c++/7/bits/stl_heap.h:224: 	    __secondChild--;
 224:/usr/include/c++/7/bits/stl_heap.h **** 	    __secondChild--;
 4420              		.loc 18 224 0
 4421 008b 4983EC01 		subq	$1, %r12	#, __holeIndex
 4422              	.LVL314:
 4423 008f 4C89E2   		movq	%r12, %rdx	# __holeIndex, tmp150
 4424 0092 48C1E204 		salq	$4, %rdx	#, tmp150
 4425 0096 498D0C17 		leaq	(%r15,%rdx), %rcx	#, _8
 4426              	.L287:
 4427              	# /usr/include/c++/7/bits/stl_heap.h:225: 	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + _
 225:/usr/include/c++/7/bits/stl_heap.h **** 	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 4428              		.loc 18 225 0
 4429 009a 4D89F0   		movq	%r14, %r8	# __holeIndex, __holeIndex
 4430 009d C5FA6F01 		vmovdqu	(%rcx), %xmm0	#* _8, *_8
 4431 00a1 49C1E004 		salq	$4, %r8	#, __holeIndex
 4432 00a5 C4817811 		vmovups	%xmm0, (%r15,%r8)	# *_8,
 4432      0407
 4433              	.LVL315:
 4434              	# /usr/include/c++/7/bits/stl_heap.h:219:       while (__secondChild < (__len - 1) / 2)
 219:/usr/include/c++/7/bits/stl_heap.h **** 	{
 4435              		.loc 18 219 0
 4436 00ab 4939EC   		cmpq	%rbp, %r12	# tmp146, __holeIndex
 4437 00ae 7CB0     		jl	.L289	#,
 4438              	# /usr/include/c++/7/bits/stl_heap.h:228:       if ((__len & 1) == 0 && __secondChild == (__len - 2
 226:/usr/include/c++/7/bits/stl_heap.h **** 	  __holeIndex = __secondChild;
 227:/usr/include/c++/7/bits/stl_heap.h **** 	}
 228:/usr/include/c++/7/bits/stl_heap.h ****       if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 4439              		.loc 18 228 0
 4440 00b0 48837C24 		cmpq	$0, 40(%rsp)	#, %sfp
 4440      2800
 4441 00b6 7525     		jne	.L290	#,
 4442              	.LVL316:
 4443              	.L294:
 4444              	# /usr/include/c++/7/bits/stl_heap.h:228:       if ((__len & 1) == 0 && __secondChild == (__len - 2
 4445              		.loc 18 228 0 is_stmt 0 discriminator 1
 4446 00b8 498D45FE 		leaq	-2(%r13), %rax	#, tmp157
 4447 00bc 4989C5   		movq	%rax, %r13	# tmp157, tmp159
 4448              	.LVL317:
 4449 00bf 49C1ED3F 		shrq	$63, %r13	#, tmp159
 4450 00c3 4901C5   		addq	%rax, %r13	# tmp157, tmp160
 4451 00c6 49D1FD   		sarq	%r13	# tmp161
 4452 00c9 4D39E5   		cmpq	%r12, %r13	# __holeIndex, tmp161
 4453 00cc 0F84BE00 		je	.L291	#,
 4453      0000
 4454 00d2 4C89E2   		movq	%r12, %rdx	# __holeIndex, tmp170
 4455 00d5 48C1E204 		salq	$4, %rdx	#, tmp170
 4456 00d9 498D0C17 		leaq	(%r15,%rdx), %rcx	#, _8
 4457              	.LVL318:
 4458              	.L290:
 4459 00dd 488B4424 		movq	24(%rsp), %rax	# %sfp, __value
 4459      18
 4460              	.LVL319:
 4461 00e2 48894424 		movq	%rax, 48(%rsp)	# __value, __value
 4461      30
 4462 00e7 488B4424 		movq	32(%rsp), %rax	# %sfp, __value
 4462      20
 4463              	.LVL320:
 4464 00ec 48894424 		movq	%rax, 56(%rsp)	# __value, __value
 4464      38
 4465              	.LVL321:
 4466              	.LBB2574:
 4467              	.LBB2575:
 4468              	# /usr/include/c++/7/bits/stl_heap.h:132:       _Distance __parent = (__holeIndex - 1) / 2;
 132:/usr/include/c++/7/bits/stl_heap.h ****       while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 4469              		.loc 18 132 0 is_stmt 1
 4470 00f1 498D4424 		leaq	-1(%r12), %rax	#, tmp171
 4470      FF
 4471 00f6 4989C6   		movq	%rax, %r14	# tmp171, tmp172
 4472 00f9 49C1EE3F 		shrq	$63, %r14	#, tmp172
 4473 00fd 4901C6   		addq	%rax, %r14	# tmp171, tmp173
 4474 0100 49D1FE   		sarq	%r14	# __parent
 4475              	.LVL322:
 4476              	# /usr/include/c++/7/bits/stl_heap.h:133:       while (__holeIndex > __topIndex && __comp(__first +
 133:/usr/include/c++/7/bits/stl_heap.h **** 	{
 4477              		.loc 18 133 0
 4478 0103 4C3B6424 		cmpq	16(%rsp), %r12	# %sfp, __holeIndex
 4478      10
 4479 0108 7E5A     		jle	.L292	#,
 4480 010a 488D6C24 		leaq	48(%rsp), %rbp	#, tmp188
 4480      30
 4481 010f EB33     		jmp	.L293	#
 4482              	.LVL323:
 4483              		.p2align 4,,10
 4484 0111 0F1F8000 		.p2align 3
 4484      000000
 4485              	.L310:
 4486              	# /usr/include/c++/7/bits/stl_heap.h:137: 	  __parent = (__holeIndex - 1) / 2;
 137:/usr/include/c++/7/bits/stl_heap.h **** 	}
 4487              		.loc 18 137 0
 4488 0118 498D56FF 		leaq	-1(%r14), %rdx	#, _61
 4489              	# /usr/include/c++/7/bits/stl_heap.h:135: 	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + _
 135:/usr/include/c++/7/bits/stl_heap.h **** 	  __holeIndex = __parent;
 4490              		.loc 18 135 0
 4491 011c C4C17A6F 		vmovdqu	0(%r13), %xmm0	# *_55, *_55
 4491      4500
 4492 0122 4D89F4   		movq	%r14, %r12	# __parent, __holeIndex
 4493              	.LVL324:
 4494              	# /usr/include/c++/7/bits/stl_heap.h:137: 	  __parent = (__holeIndex - 1) / 2;
 137:/usr/include/c++/7/bits/stl_heap.h **** 	}
 4495              		.loc 18 137 0
 4496 0125 4889D0   		movq	%rdx, %rax	# _61, tmp179
 4497 0128 48C1E83F 		shrq	$63, %rax	#, tmp179
 4498              	# /usr/include/c++/7/bits/stl_heap.h:135: 	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + _
 135:/usr/include/c++/7/bits/stl_heap.h **** 	  __holeIndex = __parent;
 4499              		.loc 18 135 0
 4500 012c C5F81101 		vmovups	%xmm0, (%rcx)	# *_55, *_148
 4501              	.LVL325:
 4502              	# /usr/include/c++/7/bits/stl_heap.h:137: 	  __parent = (__holeIndex - 1) / 2;
 137:/usr/include/c++/7/bits/stl_heap.h **** 	}
 4503              		.loc 18 137 0
 4504 0130 4801D0   		addq	%rdx, %rax	# _61, tmp180
 4505 0133 48D1F8   		sarq	%rax	# tmp181
 4506              	.LVL326:
 4507              	# /usr/include/c++/7/bits/stl_heap.h:133:       while (__holeIndex > __topIndex && __comp(__first +
 133:/usr/include/c++/7/bits/stl_heap.h **** 	{
 4508              		.loc 18 133 0
 4509 0136 4C397424 		cmpq	%r14, 16(%rsp)	# __holeIndex, %sfp
 4509      10
 4510 013b 0F8D8700 		jge	.L309	#,
 4510      0000
 4511              	# /usr/include/c++/7/bits/stl_heap.h:137: 	  __parent = (__holeIndex - 1) / 2;
 137:/usr/include/c++/7/bits/stl_heap.h **** 	}
 4512              		.loc 18 137 0
 4513 0141 4989C6   		movq	%rax, %r14	# tmp181, __parent
 4514              	.LVL327:
 4515              	.L293:
 4516              	# /usr/include/c++/7/bits/stl_heap.h:133:       while (__holeIndex > __topIndex && __comp(__first +
 133:/usr/include/c++/7/bits/stl_heap.h **** 	{
 4517              		.loc 18 133 0
 4518 0144 4D89F5   		movq	%r14, %r13	# __parent, tmp175
 4519              	.LBB2576:
 4520              	.LBB2577:
 4521              	# /usr/include/c++/7/bits/predefined_ops.h:177: 	{ return bool(_M_comp(*__it, __val)); }
 144:/usr/include/c++/7/bits/predefined_ops.h ****     };
 145:/usr/include/c++/7/bits/predefined_ops.h **** 
 146:/usr/include/c++/7/bits/predefined_ops.h ****   template<typename _Compare>
 147:/usr/include/c++/7/bits/predefined_ops.h ****     _GLIBCXX14_CONSTEXPR
 148:/usr/include/c++/7/bits/predefined_ops.h ****     inline _Iter_comp_iter<_Compare>
 149:/usr/include/c++/7/bits/predefined_ops.h ****     __iter_comp_iter(_Compare __comp)
 150:/usr/include/c++/7/bits/predefined_ops.h ****     { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 151:/usr/include/c++/7/bits/predefined_ops.h **** 
 152:/usr/include/c++/7/bits/predefined_ops.h ****   template<typename _Compare>
 153:/usr/include/c++/7/bits/predefined_ops.h ****     struct _Iter_comp_val
 154:/usr/include/c++/7/bits/predefined_ops.h ****     {
 155:/usr/include/c++/7/bits/predefined_ops.h ****       _Compare _M_comp;
 156:/usr/include/c++/7/bits/predefined_ops.h **** 
 157:/usr/include/c++/7/bits/predefined_ops.h ****       explicit
 158:/usr/include/c++/7/bits/predefined_ops.h ****       _Iter_comp_val(_Compare __comp)
 159:/usr/include/c++/7/bits/predefined_ops.h **** 	: _M_comp(_GLIBCXX_MOVE(__comp))
 160:/usr/include/c++/7/bits/predefined_ops.h ****       { }
 161:/usr/include/c++/7/bits/predefined_ops.h **** 
 162:/usr/include/c++/7/bits/predefined_ops.h ****       explicit
 163:/usr/include/c++/7/bits/predefined_ops.h ****       _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)
 164:/usr/include/c++/7/bits/predefined_ops.h **** 	: _M_comp(__comp._M_comp)
 165:/usr/include/c++/7/bits/predefined_ops.h ****       { }
 166:/usr/include/c++/7/bits/predefined_ops.h **** 
 167:/usr/include/c++/7/bits/predefined_ops.h **** #if __cplusplus >= 201103L
 168:/usr/include/c++/7/bits/predefined_ops.h ****       explicit
 169:/usr/include/c++/7/bits/predefined_ops.h ****       _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 170:/usr/include/c++/7/bits/predefined_ops.h **** 	: _M_comp(std::move(__comp._M_comp))
 171:/usr/include/c++/7/bits/predefined_ops.h ****       { }
 172:/usr/include/c++/7/bits/predefined_ops.h **** #endif
 173:/usr/include/c++/7/bits/predefined_ops.h **** 
 174:/usr/include/c++/7/bits/predefined_ops.h ****       template<typename _Iterator, typename _Value>
 175:/usr/include/c++/7/bits/predefined_ops.h **** 	bool
 176:/usr/include/c++/7/bits/predefined_ops.h **** 	operator()(_Iterator __it, _Value& __val)
 177:/usr/include/c++/7/bits/predefined_ops.h **** 	{ return bool(_M_comp(*__it, __val)); }
 4522              		.loc 19 177 0
 4523 0147 4889EE   		movq	%rbp, %rsi	# tmp188,
 4524              	.LBE2577:
 4525              	.LBE2576:
 4526              	# /usr/include/c++/7/bits/stl_heap.h:133:       while (__holeIndex > __topIndex && __comp(__first +
 133:/usr/include/c++/7/bits/stl_heap.h **** 	{
 4527              		.loc 18 133 0
 4528 014a 49C1E504 		salq	$4, %r13	#, tmp175
 4529 014e 4D01FD   		addq	%r15, %r13	# __first, _55
 4530              	.LVL328:
 4531              	.LBB2579:
 4532              	.LBB2578:
 4533              	# /usr/include/c++/7/bits/predefined_ops.h:177: 	{ return bool(_M_comp(*__it, __val)); }
 4534              		.loc 19 177 0
 4535 0151 4C89EF   		movq	%r13, %rdi	# _55,
 4536 0154 FFD3     		call	*%rbx	# __comp
 4537              	.LVL329:
 4538 0156 4C89E1   		movq	%r12, %rcx	# __holeIndex, __holeIndex
 4539 0159 48C1E104 		salq	$4, %rcx	#, __holeIndex
 4540 015d 4C01F9   		addq	%r15, %rcx	# __first, _8
 4541              	.LBE2578:
 4542              	.LBE2579:
 4543              	# /usr/include/c++/7/bits/stl_heap.h:133:       while (__holeIndex > __topIndex && __comp(__first +
 133:/usr/include/c++/7/bits/stl_heap.h **** 	{
 4544              		.loc 18 133 0
 4545 0160 84C0     		testb	%al, %al	# _57
 4546 0162 75B4     		jne	.L310	#,
 4547              	.LVL330:
 4548              	.L292:
 4549              	.LBE2575:
 4550              	.LBE2574:
 4551              	# /usr/include/c++/7/bits/stl_heap.h:239:     }
 229:/usr/include/c++/7/bits/stl_heap.h **** 	{
 230:/usr/include/c++/7/bits/stl_heap.h **** 	  __secondChild = 2 * (__secondChild + 1);
 231:/usr/include/c++/7/bits/stl_heap.h **** 	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 232:/usr/include/c++/7/bits/stl_heap.h **** 						     + (__secondChild - 1)));
 233:/usr/include/c++/7/bits/stl_heap.h **** 	  __holeIndex = __secondChild - 1;
 234:/usr/include/c++/7/bits/stl_heap.h **** 	}
 235:/usr/include/c++/7/bits/stl_heap.h ****       __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
 236:/usr/include/c++/7/bits/stl_heap.h **** 	__cmp(_GLIBCXX_MOVE(__comp));
 237:/usr/include/c++/7/bits/stl_heap.h ****       std::__push_heap(__first, __holeIndex, __topIndex,
 238:/usr/include/c++/7/bits/stl_heap.h **** 		       _GLIBCXX_MOVE(__value), __cmp);
 239:/usr/include/c++/7/bits/stl_heap.h ****     }
 4552              		.loc 18 239 0
 4553 0164 488B4424 		movq	72(%rsp), %rax	# D.84138, tmp190
 4553      48
 4554 0169 64483304 		xorq	%fs:40, %rax	#, tmp190
 4554      25280000 
 4554      00
 4555              	.LBB2582:
 4556              	.LBB2580:
 4557              	# /usr/include/c++/7/bits/stl_heap.h:139:       *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 139:/usr/include/c++/7/bits/stl_heap.h ****     }
 4558              		.loc 18 139 0
 4559 0172 C5FA6F44 		vmovdqu	48(%rsp), %xmm0	# __value, __value
 4559      2430
 4560 0178 C5F81101 		vmovups	%xmm0, (%rcx)	# __value, *prephitmp_129
 4561              	.LVL331:
 4562              	.LBE2580:
 4563              	.LBE2582:
 4564              	# /usr/include/c++/7/bits/stl_heap.h:239:     }
 4565              		.loc 18 239 0
 4566 017c 757D     		jne	.L311	#,
 4567 017e 4883C458 		addq	$88, %rsp	#,
 4568              		.cfi_remember_state
 4569              		.cfi_def_cfa_offset 56
 4570 0182 5B       		popq	%rbx	#
 4571              		.cfi_def_cfa_offset 48
 4572              	.LVL332:
 4573 0183 5D       		popq	%rbp	#
 4574              		.cfi_def_cfa_offset 40
 4575 0184 415C     		popq	%r12	#
 4576              		.cfi_def_cfa_offset 32
 4577 0186 415D     		popq	%r13	#
 4578              		.cfi_def_cfa_offset 24
 4579 0188 415E     		popq	%r14	#
 4580              		.cfi_def_cfa_offset 16
 4581 018a 415F     		popq	%r15	#
 4582              		.cfi_def_cfa_offset 8
 4583              	.LVL333:
 4584 018c C3       		ret
 4585              	.LVL334:
 4586 018d 0F1F00   		.p2align 4,,10
 4587              		.p2align 3
 4588              	.L291:
 4589              		.cfi_restore_state
 4590              	# /usr/include/c++/7/bits/stl_heap.h:230: 	  __secondChild = 2 * (__secondChild + 1);
 230:/usr/include/c++/7/bits/stl_heap.h **** 	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 4591              		.loc 18 230 0
 4592 0190 498D4424 		leaq	1(%r12), %rax	#, tmp163
 4592      01
 4593              	.LVL335:
 4594              	# /usr/include/c++/7/bits/stl_heap.h:231: 	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 231:/usr/include/c++/7/bits/stl_heap.h **** 						     + (__secondChild - 1)));
 4595              		.loc 18 231 0
 4596 0195 4C89E1   		movq	%r12, %rcx	# __holeIndex, __holeIndex
 4597              	.LVL336:
 4598              	# /usr/include/c++/7/bits/stl_heap.h:233: 	  __holeIndex = __secondChild - 1;
 233:/usr/include/c++/7/bits/stl_heap.h **** 	}
 4599              		.loc 18 233 0
 4600 0198 4C8D6400 		leaq	-1(%rax,%rax), %r12	#, __holeIndex
 4600      FF
 4601              	.LVL337:
 4602              	# /usr/include/c++/7/bits/stl_heap.h:231: 	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 231:/usr/include/c++/7/bits/stl_heap.h **** 						     + (__secondChild - 1)));
 4603              		.loc 18 231 0
 4604 019d 4889C2   		movq	%rax, %rdx	# tmp163, tmp166
 4605 01a0 48C1E104 		salq	$4, %rcx	#, __holeIndex
 4606 01a4 48C1E205 		salq	$5, %rdx	#, tmp166
 4607 01a8 C4C17A6F 		vmovdqu	-16(%r15,%rdx), %xmm0	# *_22, *_22
 4607      4417F0
 4608 01af 4C89E2   		movq	%r12, %rdx	# __holeIndex, tmp170
 4609 01b2 48C1E204 		salq	$4, %rdx	#, tmp170
 4610 01b6 C4C17811 		vmovups	%xmm0, (%r15,%rcx)	# *_22, *_25
 4610      040F
 4611 01bc 498D0C17 		leaq	(%r15,%rdx), %rcx	#, _8
 4612 01c0 E918FFFF 		jmp	.L290	#
 4612      FF
 4613              	.LVL338:
 4614              		.p2align 4,,10
 4615 01c5 0F1F00   		.p2align 3
 4616              	.L309:
 4617              	.LBB2583:
 4618              	.LBB2581:
 4619              	# /usr/include/c++/7/bits/stl_heap.h:133:       while (__holeIndex > __topIndex && __comp(__first +
 133:/usr/include/c++/7/bits/stl_heap.h **** 	{
 4620              		.loc 18 133 0
 4621 01c8 4C89E9   		movq	%r13, %rcx	# _55, _8
 4622 01cb EB97     		jmp	.L292	#
 4623              	.LVL339:
 4624 01cd 0F1F00   		.p2align 4,,10
 4625              		.p2align 3
 4626              	.L285:
 4627              	.LBE2581:
 4628              	.LBE2583:
 4629              	# /usr/include/c++/7/bits/stl_heap.h:228:       if ((__len & 1) == 0 && __secondChild == (__len - 2
 228:/usr/include/c++/7/bits/stl_heap.h **** 	{
 4630              		.loc 18 228 0
 4631 01d0 48837C24 		cmpq	$0, 40(%rsp)	#, %sfp
 4631      2800
 4632 01d6 4989F4   		movq	%rsi, %r12	# __holeIndex, __holeIndex
 4633 01d9 0F84D9FE 		je	.L294	#,
 4633      FFFF
 4634              	.LVL340:
 4635 01df 488B4424 		movq	32(%rsp), %rax	# %sfp, __value
 4635      20
 4636              	.LVL341:
 4637 01e4 49C1E404 		salq	$4, %r12	#, __holeIndex
 4638 01e8 48894C24 		movq	%rcx, 48(%rsp)	# __value, __value
 4638      30
 4639 01ed 4B8D0C27 		leaq	(%r15,%r12), %rcx	#, _8
 4640              	.LVL342:
 4641 01f1 48894424 		movq	%rax, 56(%rsp)	# __value, __value
 4641      38
 4642              	.LVL343:
 4643 01f6 E969FFFF 		jmp	.L292	#
 4643      FF
 4644              	.LVL344:
 4645              	.L311:
 4646              	# /usr/include/c++/7/bits/stl_heap.h:239:     }
 4647              		.loc 18 239 0
 4648 01fb E8000000 		call	__stack_chk_fail@PLT	#
 4648      00
 4649              	.LVL345:
 4650              		.cfi_endproc
 4651              	.LFE4086:
 4653              		.text
 4654 0cb1 0F1F4400 		.p2align 4,,15
 4654      00662E0F 
 4654      1F840000 
 4654      000000
 4656              	_ZSt16__introsort_loopIP11SortableReflN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRS0_S5_EEEEvT_S9_T0_T1_
 4657              	.LFB4159:
 4658              		.file 20 "/usr/include/c++/7/bits/stl_algo.h"
   1:/usr/include/c++/7/bits/stl_algo.h **** // Algorithm implementation -*- C++ -*-
   2:/usr/include/c++/7/bits/stl_algo.h **** 
   3:/usr/include/c++/7/bits/stl_algo.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/stl_algo.h **** //
   5:/usr/include/c++/7/bits/stl_algo.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/stl_algo.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/stl_algo.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/stl_algo.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/stl_algo.h **** // any later version.
  10:/usr/include/c++/7/bits/stl_algo.h **** 
  11:/usr/include/c++/7/bits/stl_algo.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/stl_algo.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/stl_algo.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/stl_algo.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/stl_algo.h **** 
  16:/usr/include/c++/7/bits/stl_algo.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/stl_algo.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/stl_algo.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/stl_algo.h **** 
  20:/usr/include/c++/7/bits/stl_algo.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/stl_algo.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/stl_algo.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/stl_algo.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/stl_algo.h **** 
  25:/usr/include/c++/7/bits/stl_algo.h **** /*
  26:/usr/include/c++/7/bits/stl_algo.h ****  *
  27:/usr/include/c++/7/bits/stl_algo.h ****  * Copyright (c) 1994
  28:/usr/include/c++/7/bits/stl_algo.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/7/bits/stl_algo.h ****  *
  30:/usr/include/c++/7/bits/stl_algo.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/7/bits/stl_algo.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/7/bits/stl_algo.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/7/bits/stl_algo.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/7/bits/stl_algo.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/7/bits/stl_algo.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/7/bits/stl_algo.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/7/bits/stl_algo.h ****  *
  38:/usr/include/c++/7/bits/stl_algo.h ****  *
  39:/usr/include/c++/7/bits/stl_algo.h ****  * Copyright (c) 1996
  40:/usr/include/c++/7/bits/stl_algo.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/7/bits/stl_algo.h ****  *
  42:/usr/include/c++/7/bits/stl_algo.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/7/bits/stl_algo.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/7/bits/stl_algo.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/7/bits/stl_algo.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/7/bits/stl_algo.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/7/bits/stl_algo.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/7/bits/stl_algo.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/7/bits/stl_algo.h ****  */
  50:/usr/include/c++/7/bits/stl_algo.h **** 
  51:/usr/include/c++/7/bits/stl_algo.h **** /** @file bits/stl_algo.h
  52:/usr/include/c++/7/bits/stl_algo.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/7/bits/stl_algo.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/c++/7/bits/stl_algo.h ****  */
  55:/usr/include/c++/7/bits/stl_algo.h **** 
  56:/usr/include/c++/7/bits/stl_algo.h **** #ifndef _STL_ALGO_H
  57:/usr/include/c++/7/bits/stl_algo.h **** #define _STL_ALGO_H 1
  58:/usr/include/c++/7/bits/stl_algo.h **** 
  59:/usr/include/c++/7/bits/stl_algo.h **** #include <cstdlib>	     // for rand
  60:/usr/include/c++/7/bits/stl_algo.h **** #include <bits/algorithmfwd.h>
  61:/usr/include/c++/7/bits/stl_algo.h **** #include <bits/stl_heap.h>
  62:/usr/include/c++/7/bits/stl_algo.h **** #include <bits/stl_tempbuf.h>  // for _Temporary_buffer
  63:/usr/include/c++/7/bits/stl_algo.h **** #include <bits/predefined_ops.h>
  64:/usr/include/c++/7/bits/stl_algo.h **** 
  65:/usr/include/c++/7/bits/stl_algo.h **** #if __cplusplus >= 201103L
  66:/usr/include/c++/7/bits/stl_algo.h **** #include <bits/uniform_int_dist.h>
  67:/usr/include/c++/7/bits/stl_algo.h **** #endif
  68:/usr/include/c++/7/bits/stl_algo.h **** 
  69:/usr/include/c++/7/bits/stl_algo.h **** // See concept_check.h for the __glibcxx_*_requires macros.
  70:/usr/include/c++/7/bits/stl_algo.h **** 
  71:/usr/include/c++/7/bits/stl_algo.h **** namespace std _GLIBCXX_VISIBILITY(default)
  72:/usr/include/c++/7/bits/stl_algo.h **** {
  73:/usr/include/c++/7/bits/stl_algo.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  74:/usr/include/c++/7/bits/stl_algo.h **** 
  75:/usr/include/c++/7/bits/stl_algo.h ****   /// Swaps the median value of *__a, *__b and *__c under __comp to *__result
  76:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _Iterator, typename _Compare>
  77:/usr/include/c++/7/bits/stl_algo.h ****     void
  78:/usr/include/c++/7/bits/stl_algo.h ****     __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
  79:/usr/include/c++/7/bits/stl_algo.h **** 			   _Iterator __c, _Compare __comp)
  80:/usr/include/c++/7/bits/stl_algo.h ****     {
  81:/usr/include/c++/7/bits/stl_algo.h ****       if (__comp(__a, __b))
  82:/usr/include/c++/7/bits/stl_algo.h **** 	{
  83:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__comp(__b, __c))
  84:/usr/include/c++/7/bits/stl_algo.h **** 	    std::iter_swap(__result, __b);
  85:/usr/include/c++/7/bits/stl_algo.h **** 	  else if (__comp(__a, __c))
  86:/usr/include/c++/7/bits/stl_algo.h **** 	    std::iter_swap(__result, __c);
  87:/usr/include/c++/7/bits/stl_algo.h **** 	  else
  88:/usr/include/c++/7/bits/stl_algo.h **** 	    std::iter_swap(__result, __a);
  89:/usr/include/c++/7/bits/stl_algo.h **** 	}
  90:/usr/include/c++/7/bits/stl_algo.h ****       else if (__comp(__a, __c))
  91:/usr/include/c++/7/bits/stl_algo.h **** 	std::iter_swap(__result, __a);
  92:/usr/include/c++/7/bits/stl_algo.h ****       else if (__comp(__b, __c))
  93:/usr/include/c++/7/bits/stl_algo.h **** 	std::iter_swap(__result, __c);
  94:/usr/include/c++/7/bits/stl_algo.h ****       else
  95:/usr/include/c++/7/bits/stl_algo.h **** 	std::iter_swap(__result, __b);
  96:/usr/include/c++/7/bits/stl_algo.h ****     }
  97:/usr/include/c++/7/bits/stl_algo.h **** 
  98:/usr/include/c++/7/bits/stl_algo.h ****   /// This is an overload used by find algos for the Input Iterator case.
  99:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 100:/usr/include/c++/7/bits/stl_algo.h ****     inline _InputIterator
 101:/usr/include/c++/7/bits/stl_algo.h ****     __find_if(_InputIterator __first, _InputIterator __last,
 102:/usr/include/c++/7/bits/stl_algo.h **** 	      _Predicate __pred, input_iterator_tag)
 103:/usr/include/c++/7/bits/stl_algo.h ****     {
 104:/usr/include/c++/7/bits/stl_algo.h ****       while (__first != __last && !__pred(__first))
 105:/usr/include/c++/7/bits/stl_algo.h **** 	++__first;
 106:/usr/include/c++/7/bits/stl_algo.h ****       return __first;
 107:/usr/include/c++/7/bits/stl_algo.h ****     }
 108:/usr/include/c++/7/bits/stl_algo.h **** 
 109:/usr/include/c++/7/bits/stl_algo.h ****   /// This is an overload used by find algos for the RAI case.
 110:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Predicate>
 111:/usr/include/c++/7/bits/stl_algo.h ****     _RandomAccessIterator
 112:/usr/include/c++/7/bits/stl_algo.h ****     __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 113:/usr/include/c++/7/bits/stl_algo.h **** 	      _Predicate __pred, random_access_iterator_tag)
 114:/usr/include/c++/7/bits/stl_algo.h ****     {
 115:/usr/include/c++/7/bits/stl_algo.h ****       typename iterator_traits<_RandomAccessIterator>::difference_type
 116:/usr/include/c++/7/bits/stl_algo.h **** 	__trip_count = (__last - __first) >> 2;
 117:/usr/include/c++/7/bits/stl_algo.h **** 
 118:/usr/include/c++/7/bits/stl_algo.h ****       for (; __trip_count > 0; --__trip_count)
 119:/usr/include/c++/7/bits/stl_algo.h **** 	{
 120:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__pred(__first))
 121:/usr/include/c++/7/bits/stl_algo.h **** 	    return __first;
 122:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first;
 123:/usr/include/c++/7/bits/stl_algo.h **** 
 124:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__pred(__first))
 125:/usr/include/c++/7/bits/stl_algo.h **** 	    return __first;
 126:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first;
 127:/usr/include/c++/7/bits/stl_algo.h **** 
 128:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__pred(__first))
 129:/usr/include/c++/7/bits/stl_algo.h **** 	    return __first;
 130:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first;
 131:/usr/include/c++/7/bits/stl_algo.h **** 
 132:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__pred(__first))
 133:/usr/include/c++/7/bits/stl_algo.h **** 	    return __first;
 134:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first;
 135:/usr/include/c++/7/bits/stl_algo.h **** 	}
 136:/usr/include/c++/7/bits/stl_algo.h **** 
 137:/usr/include/c++/7/bits/stl_algo.h ****       switch (__last - __first)
 138:/usr/include/c++/7/bits/stl_algo.h **** 	{
 139:/usr/include/c++/7/bits/stl_algo.h **** 	case 3:
 140:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__pred(__first))
 141:/usr/include/c++/7/bits/stl_algo.h **** 	    return __first;
 142:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first;
 143:/usr/include/c++/7/bits/stl_algo.h **** 	case 2:
 144:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__pred(__first))
 145:/usr/include/c++/7/bits/stl_algo.h **** 	    return __first;
 146:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first;
 147:/usr/include/c++/7/bits/stl_algo.h **** 	case 1:
 148:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__pred(__first))
 149:/usr/include/c++/7/bits/stl_algo.h **** 	    return __first;
 150:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first;
 151:/usr/include/c++/7/bits/stl_algo.h **** 	case 0:
 152:/usr/include/c++/7/bits/stl_algo.h **** 	default:
 153:/usr/include/c++/7/bits/stl_algo.h **** 	  return __last;
 154:/usr/include/c++/7/bits/stl_algo.h **** 	}
 155:/usr/include/c++/7/bits/stl_algo.h ****     }
 156:/usr/include/c++/7/bits/stl_algo.h **** 
 157:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _Iterator, typename _Predicate>
 158:/usr/include/c++/7/bits/stl_algo.h ****     inline _Iterator
 159:/usr/include/c++/7/bits/stl_algo.h ****     __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
 160:/usr/include/c++/7/bits/stl_algo.h ****     {
 161:/usr/include/c++/7/bits/stl_algo.h ****       return __find_if(__first, __last, __pred,
 162:/usr/include/c++/7/bits/stl_algo.h **** 		       std::__iterator_category(__first));
 163:/usr/include/c++/7/bits/stl_algo.h ****     }
 164:/usr/include/c++/7/bits/stl_algo.h **** 
 165:/usr/include/c++/7/bits/stl_algo.h ****   /// Provided for stable_partition to use.
 166:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 167:/usr/include/c++/7/bits/stl_algo.h ****     inline _InputIterator
 168:/usr/include/c++/7/bits/stl_algo.h ****     __find_if_not(_InputIterator __first, _InputIterator __last,
 169:/usr/include/c++/7/bits/stl_algo.h **** 		  _Predicate __pred)
 170:/usr/include/c++/7/bits/stl_algo.h ****     {
 171:/usr/include/c++/7/bits/stl_algo.h ****       return std::__find_if(__first, __last,
 172:/usr/include/c++/7/bits/stl_algo.h **** 			    __gnu_cxx::__ops::__negate(__pred),
 173:/usr/include/c++/7/bits/stl_algo.h **** 			    std::__iterator_category(__first));
 174:/usr/include/c++/7/bits/stl_algo.h ****     }
 175:/usr/include/c++/7/bits/stl_algo.h **** 
 176:/usr/include/c++/7/bits/stl_algo.h ****   /// Like find_if_not(), but uses and updates a count of the
 177:/usr/include/c++/7/bits/stl_algo.h ****   /// remaining range length instead of comparing against an end
 178:/usr/include/c++/7/bits/stl_algo.h ****   /// iterator.
 179:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate, typename _Distance>
 180:/usr/include/c++/7/bits/stl_algo.h ****     _InputIterator
 181:/usr/include/c++/7/bits/stl_algo.h ****     __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
 182:/usr/include/c++/7/bits/stl_algo.h ****     {
 183:/usr/include/c++/7/bits/stl_algo.h ****       for (; __len; --__len, ++__first)
 184:/usr/include/c++/7/bits/stl_algo.h **** 	if (!__pred(__first))
 185:/usr/include/c++/7/bits/stl_algo.h **** 	  break;
 186:/usr/include/c++/7/bits/stl_algo.h ****       return __first;
 187:/usr/include/c++/7/bits/stl_algo.h ****     }
 188:/usr/include/c++/7/bits/stl_algo.h **** 
 189:/usr/include/c++/7/bits/stl_algo.h ****   // set_difference
 190:/usr/include/c++/7/bits/stl_algo.h ****   // set_intersection
 191:/usr/include/c++/7/bits/stl_algo.h ****   // set_symmetric_difference
 192:/usr/include/c++/7/bits/stl_algo.h ****   // set_union
 193:/usr/include/c++/7/bits/stl_algo.h ****   // for_each
 194:/usr/include/c++/7/bits/stl_algo.h ****   // find
 195:/usr/include/c++/7/bits/stl_algo.h ****   // find_if
 196:/usr/include/c++/7/bits/stl_algo.h ****   // find_first_of
 197:/usr/include/c++/7/bits/stl_algo.h ****   // adjacent_find
 198:/usr/include/c++/7/bits/stl_algo.h ****   // count
 199:/usr/include/c++/7/bits/stl_algo.h ****   // count_if
 200:/usr/include/c++/7/bits/stl_algo.h ****   // search
 201:/usr/include/c++/7/bits/stl_algo.h **** 
 202:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 203:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 204:/usr/include/c++/7/bits/stl_algo.h ****     _ForwardIterator1
 205:/usr/include/c++/7/bits/stl_algo.h ****     __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 206:/usr/include/c++/7/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 207:/usr/include/c++/7/bits/stl_algo.h **** 	     _BinaryPredicate  __predicate)
 208:/usr/include/c++/7/bits/stl_algo.h ****     {
 209:/usr/include/c++/7/bits/stl_algo.h ****       // Test for empty ranges
 210:/usr/include/c++/7/bits/stl_algo.h ****       if (__first1 == __last1 || __first2 == __last2)
 211:/usr/include/c++/7/bits/stl_algo.h **** 	return __first1;
 212:/usr/include/c++/7/bits/stl_algo.h **** 
 213:/usr/include/c++/7/bits/stl_algo.h ****       // Test for a pattern of length 1.
 214:/usr/include/c++/7/bits/stl_algo.h ****       _ForwardIterator2 __p1(__first2);
 215:/usr/include/c++/7/bits/stl_algo.h ****       if (++__p1 == __last2)
 216:/usr/include/c++/7/bits/stl_algo.h **** 	return std::__find_if(__first1, __last1,
 217:/usr/include/c++/7/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));
 218:/usr/include/c++/7/bits/stl_algo.h **** 
 219:/usr/include/c++/7/bits/stl_algo.h ****       // General case.
 220:/usr/include/c++/7/bits/stl_algo.h ****       _ForwardIterator2 __p;
 221:/usr/include/c++/7/bits/stl_algo.h ****       _ForwardIterator1 __current = __first1;
 222:/usr/include/c++/7/bits/stl_algo.h **** 
 223:/usr/include/c++/7/bits/stl_algo.h ****       for (;;)
 224:/usr/include/c++/7/bits/stl_algo.h **** 	{
 225:/usr/include/c++/7/bits/stl_algo.h **** 	  __first1 =
 226:/usr/include/c++/7/bits/stl_algo.h **** 	    std::__find_if(__first1, __last1,
 227:/usr/include/c++/7/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));
 228:/usr/include/c++/7/bits/stl_algo.h **** 
 229:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__first1 == __last1)
 230:/usr/include/c++/7/bits/stl_algo.h **** 	    return __last1;
 231:/usr/include/c++/7/bits/stl_algo.h **** 
 232:/usr/include/c++/7/bits/stl_algo.h **** 	  __p = __p1;
 233:/usr/include/c++/7/bits/stl_algo.h **** 	  __current = __first1;
 234:/usr/include/c++/7/bits/stl_algo.h **** 	  if (++__current == __last1)
 235:/usr/include/c++/7/bits/stl_algo.h **** 	    return __last1;
 236:/usr/include/c++/7/bits/stl_algo.h **** 
 237:/usr/include/c++/7/bits/stl_algo.h **** 	  while (__predicate(__current, __p))
 238:/usr/include/c++/7/bits/stl_algo.h **** 	    {
 239:/usr/include/c++/7/bits/stl_algo.h **** 	      if (++__p == __last2)
 240:/usr/include/c++/7/bits/stl_algo.h **** 		return __first1;
 241:/usr/include/c++/7/bits/stl_algo.h **** 	      if (++__current == __last1)
 242:/usr/include/c++/7/bits/stl_algo.h **** 		return __last1;
 243:/usr/include/c++/7/bits/stl_algo.h **** 	    }
 244:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first1;
 245:/usr/include/c++/7/bits/stl_algo.h **** 	}
 246:/usr/include/c++/7/bits/stl_algo.h ****       return __first1;
 247:/usr/include/c++/7/bits/stl_algo.h ****     }
 248:/usr/include/c++/7/bits/stl_algo.h **** 
 249:/usr/include/c++/7/bits/stl_algo.h ****   // search_n
 250:/usr/include/c++/7/bits/stl_algo.h **** 
 251:/usr/include/c++/7/bits/stl_algo.h ****   /**
 252:/usr/include/c++/7/bits/stl_algo.h ****    *  This is an helper function for search_n overloaded for forward iterators.
 253:/usr/include/c++/7/bits/stl_algo.h ****   */
 254:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Integer,
 255:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 256:/usr/include/c++/7/bits/stl_algo.h ****     _ForwardIterator
 257:/usr/include/c++/7/bits/stl_algo.h ****     __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,
 258:/usr/include/c++/7/bits/stl_algo.h **** 		   _Integer __count, _UnaryPredicate __unary_pred,
 259:/usr/include/c++/7/bits/stl_algo.h **** 		   std::forward_iterator_tag)
 260:/usr/include/c++/7/bits/stl_algo.h ****     {
 261:/usr/include/c++/7/bits/stl_algo.h ****       __first = std::__find_if(__first, __last, __unary_pred);
 262:/usr/include/c++/7/bits/stl_algo.h ****       while (__first != __last)
 263:/usr/include/c++/7/bits/stl_algo.h **** 	{
 264:/usr/include/c++/7/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::difference_type
 265:/usr/include/c++/7/bits/stl_algo.h **** 	    __n = __count;
 266:/usr/include/c++/7/bits/stl_algo.h **** 	  _ForwardIterator __i = __first;
 267:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__i;
 268:/usr/include/c++/7/bits/stl_algo.h **** 	  while (__i != __last && __n != 1 && __unary_pred(__i))
 269:/usr/include/c++/7/bits/stl_algo.h **** 	    {
 270:/usr/include/c++/7/bits/stl_algo.h **** 	      ++__i;
 271:/usr/include/c++/7/bits/stl_algo.h **** 	      --__n;
 272:/usr/include/c++/7/bits/stl_algo.h **** 	    }
 273:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__n == 1)
 274:/usr/include/c++/7/bits/stl_algo.h **** 	    return __first;
 275:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__i == __last)
 276:/usr/include/c++/7/bits/stl_algo.h **** 	    return __last;
 277:/usr/include/c++/7/bits/stl_algo.h **** 	  __first = std::__find_if(++__i, __last, __unary_pred);
 278:/usr/include/c++/7/bits/stl_algo.h **** 	}
 279:/usr/include/c++/7/bits/stl_algo.h ****       return __last;
 280:/usr/include/c++/7/bits/stl_algo.h ****     }
 281:/usr/include/c++/7/bits/stl_algo.h **** 
 282:/usr/include/c++/7/bits/stl_algo.h ****   /**
 283:/usr/include/c++/7/bits/stl_algo.h ****    *  This is an helper function for search_n overloaded for random access
 284:/usr/include/c++/7/bits/stl_algo.h ****    *  iterators.
 285:/usr/include/c++/7/bits/stl_algo.h ****   */
 286:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _RandomAccessIter, typename _Integer,
 287:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 288:/usr/include/c++/7/bits/stl_algo.h ****     _RandomAccessIter
 289:/usr/include/c++/7/bits/stl_algo.h ****     __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,
 290:/usr/include/c++/7/bits/stl_algo.h **** 		   _Integer __count, _UnaryPredicate __unary_pred,
 291:/usr/include/c++/7/bits/stl_algo.h **** 		   std::random_access_iterator_tag)
 292:/usr/include/c++/7/bits/stl_algo.h ****     {
 293:/usr/include/c++/7/bits/stl_algo.h ****       typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 294:/usr/include/c++/7/bits/stl_algo.h **** 	_DistanceType;
 295:/usr/include/c++/7/bits/stl_algo.h **** 
 296:/usr/include/c++/7/bits/stl_algo.h ****       _DistanceType __tailSize = __last - __first;
 297:/usr/include/c++/7/bits/stl_algo.h ****       _DistanceType __remainder = __count;
 298:/usr/include/c++/7/bits/stl_algo.h **** 
 299:/usr/include/c++/7/bits/stl_algo.h ****       while (__remainder <= __tailSize) // the main loop...
 300:/usr/include/c++/7/bits/stl_algo.h **** 	{
 301:/usr/include/c++/7/bits/stl_algo.h **** 	  __first += __remainder;
 302:/usr/include/c++/7/bits/stl_algo.h **** 	  __tailSize -= __remainder;
 303:/usr/include/c++/7/bits/stl_algo.h **** 	  // __first here is always pointing to one past the last element of
 304:/usr/include/c++/7/bits/stl_algo.h **** 	  // next possible match.
 305:/usr/include/c++/7/bits/stl_algo.h **** 	  _RandomAccessIter __backTrack = __first; 
 306:/usr/include/c++/7/bits/stl_algo.h **** 	  while (__unary_pred(--__backTrack))
 307:/usr/include/c++/7/bits/stl_algo.h **** 	    {
 308:/usr/include/c++/7/bits/stl_algo.h **** 	      if (--__remainder == 0)
 309:/usr/include/c++/7/bits/stl_algo.h **** 		return (__first - __count); // Success
 310:/usr/include/c++/7/bits/stl_algo.h **** 	    }
 311:/usr/include/c++/7/bits/stl_algo.h **** 	  __remainder = __count + 1 - (__first - __backTrack);
 312:/usr/include/c++/7/bits/stl_algo.h **** 	}
 313:/usr/include/c++/7/bits/stl_algo.h ****       return __last; // Failure
 314:/usr/include/c++/7/bits/stl_algo.h ****     }
 315:/usr/include/c++/7/bits/stl_algo.h **** 
 316:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Integer,
 317:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 318:/usr/include/c++/7/bits/stl_algo.h ****     _ForwardIterator
 319:/usr/include/c++/7/bits/stl_algo.h ****     __search_n(_ForwardIterator __first, _ForwardIterator __last,
 320:/usr/include/c++/7/bits/stl_algo.h **** 	       _Integer __count,
 321:/usr/include/c++/7/bits/stl_algo.h **** 	       _UnaryPredicate __unary_pred)
 322:/usr/include/c++/7/bits/stl_algo.h ****     {
 323:/usr/include/c++/7/bits/stl_algo.h ****       if (__count <= 0)
 324:/usr/include/c++/7/bits/stl_algo.h **** 	return __first;
 325:/usr/include/c++/7/bits/stl_algo.h **** 
 326:/usr/include/c++/7/bits/stl_algo.h ****       if (__count == 1)
 327:/usr/include/c++/7/bits/stl_algo.h **** 	return std::__find_if(__first, __last, __unary_pred);
 328:/usr/include/c++/7/bits/stl_algo.h **** 
 329:/usr/include/c++/7/bits/stl_algo.h ****       return std::__search_n_aux(__first, __last, __count, __unary_pred,
 330:/usr/include/c++/7/bits/stl_algo.h **** 				 std::__iterator_category(__first));
 331:/usr/include/c++/7/bits/stl_algo.h ****     }
 332:/usr/include/c++/7/bits/stl_algo.h **** 
 333:/usr/include/c++/7/bits/stl_algo.h ****   // find_end for forward iterators.
 334:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 335:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 336:/usr/include/c++/7/bits/stl_algo.h ****     _ForwardIterator1
 337:/usr/include/c++/7/bits/stl_algo.h ****     __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 338:/usr/include/c++/7/bits/stl_algo.h **** 	       _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 339:/usr/include/c++/7/bits/stl_algo.h **** 	       forward_iterator_tag, forward_iterator_tag,
 340:/usr/include/c++/7/bits/stl_algo.h **** 	       _BinaryPredicate __comp)
 341:/usr/include/c++/7/bits/stl_algo.h ****     {
 342:/usr/include/c++/7/bits/stl_algo.h ****       if (__first2 == __last2)
 343:/usr/include/c++/7/bits/stl_algo.h **** 	return __last1;
 344:/usr/include/c++/7/bits/stl_algo.h **** 
 345:/usr/include/c++/7/bits/stl_algo.h ****       _ForwardIterator1 __result = __last1;
 346:/usr/include/c++/7/bits/stl_algo.h ****       while (1)
 347:/usr/include/c++/7/bits/stl_algo.h **** 	{
 348:/usr/include/c++/7/bits/stl_algo.h **** 	  _ForwardIterator1 __new_result
 349:/usr/include/c++/7/bits/stl_algo.h **** 	    = std::__search(__first1, __last1, __first2, __last2, __comp);
 350:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__new_result == __last1)
 351:/usr/include/c++/7/bits/stl_algo.h **** 	    return __result;
 352:/usr/include/c++/7/bits/stl_algo.h **** 	  else
 353:/usr/include/c++/7/bits/stl_algo.h **** 	    {
 354:/usr/include/c++/7/bits/stl_algo.h **** 	      __result = __new_result;
 355:/usr/include/c++/7/bits/stl_algo.h **** 	      __first1 = __new_result;
 356:/usr/include/c++/7/bits/stl_algo.h **** 	      ++__first1;
 357:/usr/include/c++/7/bits/stl_algo.h **** 	    }
 358:/usr/include/c++/7/bits/stl_algo.h **** 	}
 359:/usr/include/c++/7/bits/stl_algo.h ****     }
 360:/usr/include/c++/7/bits/stl_algo.h **** 
 361:/usr/include/c++/7/bits/stl_algo.h ****   // find_end for bidirectional iterators (much faster).
 362:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
 363:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 364:/usr/include/c++/7/bits/stl_algo.h ****     _BidirectionalIterator1
 365:/usr/include/c++/7/bits/stl_algo.h ****     __find_end(_BidirectionalIterator1 __first1,
 366:/usr/include/c++/7/bits/stl_algo.h **** 	       _BidirectionalIterator1 __last1,
 367:/usr/include/c++/7/bits/stl_algo.h **** 	       _BidirectionalIterator2 __first2,
 368:/usr/include/c++/7/bits/stl_algo.h **** 	       _BidirectionalIterator2 __last2,
 369:/usr/include/c++/7/bits/stl_algo.h **** 	       bidirectional_iterator_tag, bidirectional_iterator_tag,
 370:/usr/include/c++/7/bits/stl_algo.h **** 	       _BinaryPredicate __comp)
 371:/usr/include/c++/7/bits/stl_algo.h ****     {
 372:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
 373:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
 374:/usr/include/c++/7/bits/stl_algo.h **** 				  _BidirectionalIterator1>)
 375:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
 376:/usr/include/c++/7/bits/stl_algo.h **** 				  _BidirectionalIterator2>)
 377:/usr/include/c++/7/bits/stl_algo.h **** 
 378:/usr/include/c++/7/bits/stl_algo.h ****       typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
 379:/usr/include/c++/7/bits/stl_algo.h ****       typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;
 380:/usr/include/c++/7/bits/stl_algo.h **** 
 381:/usr/include/c++/7/bits/stl_algo.h ****       _RevIterator1 __rlast1(__first1);
 382:/usr/include/c++/7/bits/stl_algo.h ****       _RevIterator2 __rlast2(__first2);
 383:/usr/include/c++/7/bits/stl_algo.h ****       _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1,
 384:/usr/include/c++/7/bits/stl_algo.h **** 					      _RevIterator2(__last2), __rlast2,
 385:/usr/include/c++/7/bits/stl_algo.h **** 					      __comp);
 386:/usr/include/c++/7/bits/stl_algo.h **** 
 387:/usr/include/c++/7/bits/stl_algo.h ****       if (__rresult == __rlast1)
 388:/usr/include/c++/7/bits/stl_algo.h **** 	return __last1;
 389:/usr/include/c++/7/bits/stl_algo.h ****       else
 390:/usr/include/c++/7/bits/stl_algo.h **** 	{
 391:/usr/include/c++/7/bits/stl_algo.h **** 	  _BidirectionalIterator1 __result = __rresult.base();
 392:/usr/include/c++/7/bits/stl_algo.h **** 	  std::advance(__result, -std::distance(__first2, __last2));
 393:/usr/include/c++/7/bits/stl_algo.h **** 	  return __result;
 394:/usr/include/c++/7/bits/stl_algo.h **** 	}
 395:/usr/include/c++/7/bits/stl_algo.h ****     }
 396:/usr/include/c++/7/bits/stl_algo.h **** 
 397:/usr/include/c++/7/bits/stl_algo.h ****   /**
 398:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief  Find last matching subsequence in a sequence.
 399:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 400:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first1  Start of range to search.
 401:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last1   End of range to search.
 402:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first2  Start of sequence to match.
 403:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last2   End of sequence to match.
 404:/usr/include/c++/7/bits/stl_algo.h ****    *  @return   The last iterator @c i in the range
 405:/usr/include/c++/7/bits/stl_algo.h ****    *  @p [__first1,__last1-(__last2-__first2)) such that @c *(i+N) ==
 406:/usr/include/c++/7/bits/stl_algo.h ****    *  @p *(__first2+N) for each @c N in the range @p
 407:/usr/include/c++/7/bits/stl_algo.h ****    *  [0,__last2-__first2), or @p __last1 if no such iterator exists.
 408:/usr/include/c++/7/bits/stl_algo.h ****    *
 409:/usr/include/c++/7/bits/stl_algo.h ****    *  Searches the range @p [__first1,__last1) for a sub-sequence that
 410:/usr/include/c++/7/bits/stl_algo.h ****    *  compares equal value-by-value with the sequence given by @p
 411:/usr/include/c++/7/bits/stl_algo.h ****    *  [__first2,__last2) and returns an iterator to the __first
 412:/usr/include/c++/7/bits/stl_algo.h ****    *  element of the sub-sequence, or @p __last1 if the sub-sequence
 413:/usr/include/c++/7/bits/stl_algo.h ****    *  is not found.  The sub-sequence will be the last such
 414:/usr/include/c++/7/bits/stl_algo.h ****    *  subsequence contained in [__first1,__last1).
 415:/usr/include/c++/7/bits/stl_algo.h ****    *
 416:/usr/include/c++/7/bits/stl_algo.h ****    *  Because the sub-sequence must lie completely within the range @p
 417:/usr/include/c++/7/bits/stl_algo.h ****    *  [__first1,__last1) it must start at a position less than @p
 418:/usr/include/c++/7/bits/stl_algo.h ****    *  __last1-(__last2-__first2) where @p __last2-__first2 is the
 419:/usr/include/c++/7/bits/stl_algo.h ****    *  length of the sub-sequence.  This means that the returned
 420:/usr/include/c++/7/bits/stl_algo.h ****    *  iterator @c i will be in the range @p
 421:/usr/include/c++/7/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2))
 422:/usr/include/c++/7/bits/stl_algo.h ****   */
 423:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 424:/usr/include/c++/7/bits/stl_algo.h ****     inline _ForwardIterator1
 425:/usr/include/c++/7/bits/stl_algo.h ****     find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 426:/usr/include/c++/7/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2)
 427:/usr/include/c++/7/bits/stl_algo.h ****     {
 428:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
 429:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
 430:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
 431:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 432:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
 433:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
 434:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 435:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
 436:/usr/include/c++/7/bits/stl_algo.h **** 
 437:/usr/include/c++/7/bits/stl_algo.h ****       return std::__find_end(__first1, __last1, __first2, __last2,
 438:/usr/include/c++/7/bits/stl_algo.h **** 			     std::__iterator_category(__first1),
 439:/usr/include/c++/7/bits/stl_algo.h **** 			     std::__iterator_category(__first2),
 440:/usr/include/c++/7/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_equal_to_iter());
 441:/usr/include/c++/7/bits/stl_algo.h ****     }
 442:/usr/include/c++/7/bits/stl_algo.h **** 
 443:/usr/include/c++/7/bits/stl_algo.h ****   /**
 444:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief  Find last matching subsequence in a sequence using a predicate.
 445:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 446:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first1  Start of range to search.
 447:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last1   End of range to search.
 448:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first2  Start of sequence to match.
 449:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last2   End of sequence to match.
 450:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __comp    The predicate to use.
 451:/usr/include/c++/7/bits/stl_algo.h ****    *  @return The last iterator @c i in the range @p
 452:/usr/include/c++/7/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2)) such that @c
 453:/usr/include/c++/7/bits/stl_algo.h ****    *  predicate(*(i+N), @p (__first2+N)) is true for each @c N in the
 454:/usr/include/c++/7/bits/stl_algo.h ****    *  range @p [0,__last2-__first2), or @p __last1 if no such iterator
 455:/usr/include/c++/7/bits/stl_algo.h ****    *  exists.
 456:/usr/include/c++/7/bits/stl_algo.h ****    *
 457:/usr/include/c++/7/bits/stl_algo.h ****    *  Searches the range @p [__first1,__last1) for a sub-sequence that
 458:/usr/include/c++/7/bits/stl_algo.h ****    *  compares equal value-by-value with the sequence given by @p
 459:/usr/include/c++/7/bits/stl_algo.h ****    *  [__first2,__last2) using comp as a predicate and returns an
 460:/usr/include/c++/7/bits/stl_algo.h ****    *  iterator to the first element of the sub-sequence, or @p __last1
 461:/usr/include/c++/7/bits/stl_algo.h ****    *  if the sub-sequence is not found.  The sub-sequence will be the
 462:/usr/include/c++/7/bits/stl_algo.h ****    *  last such subsequence contained in [__first,__last1).
 463:/usr/include/c++/7/bits/stl_algo.h ****    *
 464:/usr/include/c++/7/bits/stl_algo.h ****    *  Because the sub-sequence must lie completely within the range @p
 465:/usr/include/c++/7/bits/stl_algo.h ****    *  [__first1,__last1) it must start at a position less than @p
 466:/usr/include/c++/7/bits/stl_algo.h ****    *  __last1-(__last2-__first2) where @p __last2-__first2 is the
 467:/usr/include/c++/7/bits/stl_algo.h ****    *  length of the sub-sequence.  This means that the returned
 468:/usr/include/c++/7/bits/stl_algo.h ****    *  iterator @c i will be in the range @p
 469:/usr/include/c++/7/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2))
 470:/usr/include/c++/7/bits/stl_algo.h ****   */
 471:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 472:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 473:/usr/include/c++/7/bits/stl_algo.h ****     inline _ForwardIterator1
 474:/usr/include/c++/7/bits/stl_algo.h ****     find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 475:/usr/include/c++/7/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 476:/usr/include/c++/7/bits/stl_algo.h **** 	     _BinaryPredicate __comp)
 477:/usr/include/c++/7/bits/stl_algo.h ****     {
 478:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
 479:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
 480:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
 481:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
 482:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
 483:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
 484:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 485:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
 486:/usr/include/c++/7/bits/stl_algo.h **** 
 487:/usr/include/c++/7/bits/stl_algo.h ****       return std::__find_end(__first1, __last1, __first2, __last2,
 488:/usr/include/c++/7/bits/stl_algo.h **** 			     std::__iterator_category(__first1),
 489:/usr/include/c++/7/bits/stl_algo.h **** 			     std::__iterator_category(__first2),
 490:/usr/include/c++/7/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_comp_iter(__comp));
 491:/usr/include/c++/7/bits/stl_algo.h ****     }
 492:/usr/include/c++/7/bits/stl_algo.h **** 
 493:/usr/include/c++/7/bits/stl_algo.h **** #if __cplusplus >= 201103L
 494:/usr/include/c++/7/bits/stl_algo.h ****   /**
 495:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief  Checks that a predicate is true for all the elements
 496:/usr/include/c++/7/bits/stl_algo.h ****    *          of a sequence.
 497:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 498:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 499:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 500:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 501:/usr/include/c++/7/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 502:/usr/include/c++/7/bits/stl_algo.h ****    *
 503:/usr/include/c++/7/bits/stl_algo.h ****    *  Returns true if @p __pred is true for each element in the range
 504:/usr/include/c++/7/bits/stl_algo.h ****    *  @p [__first,__last), and false otherwise.
 505:/usr/include/c++/7/bits/stl_algo.h ****   */
 506:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 507:/usr/include/c++/7/bits/stl_algo.h ****     inline bool
 508:/usr/include/c++/7/bits/stl_algo.h ****     all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 509:/usr/include/c++/7/bits/stl_algo.h ****     { return __last == std::find_if_not(__first, __last, __pred); }
 510:/usr/include/c++/7/bits/stl_algo.h **** 
 511:/usr/include/c++/7/bits/stl_algo.h ****   /**
 512:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief  Checks that a predicate is false for all the elements
 513:/usr/include/c++/7/bits/stl_algo.h ****    *          of a sequence.
 514:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 515:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 516:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 517:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 518:/usr/include/c++/7/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 519:/usr/include/c++/7/bits/stl_algo.h ****    *
 520:/usr/include/c++/7/bits/stl_algo.h ****    *  Returns true if @p __pred is false for each element in the range
 521:/usr/include/c++/7/bits/stl_algo.h ****    *  @p [__first,__last), and false otherwise.
 522:/usr/include/c++/7/bits/stl_algo.h ****   */
 523:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 524:/usr/include/c++/7/bits/stl_algo.h ****     inline bool
 525:/usr/include/c++/7/bits/stl_algo.h ****     none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 526:/usr/include/c++/7/bits/stl_algo.h ****     { return __last == _GLIBCXX_STD_A::find_if(__first, __last, __pred); }
 527:/usr/include/c++/7/bits/stl_algo.h **** 
 528:/usr/include/c++/7/bits/stl_algo.h ****   /**
 529:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief  Checks that a predicate is false for at least an element
 530:/usr/include/c++/7/bits/stl_algo.h ****    *          of a sequence.
 531:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 532:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 533:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 534:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 535:/usr/include/c++/7/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 536:/usr/include/c++/7/bits/stl_algo.h ****    *
 537:/usr/include/c++/7/bits/stl_algo.h ****    *  Returns true if an element exists in the range @p
 538:/usr/include/c++/7/bits/stl_algo.h ****    *  [__first,__last) such that @p __pred is true, and false
 539:/usr/include/c++/7/bits/stl_algo.h ****    *  otherwise.
 540:/usr/include/c++/7/bits/stl_algo.h ****   */
 541:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 542:/usr/include/c++/7/bits/stl_algo.h ****     inline bool
 543:/usr/include/c++/7/bits/stl_algo.h ****     any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 544:/usr/include/c++/7/bits/stl_algo.h ****     { return !std::none_of(__first, __last, __pred); }
 545:/usr/include/c++/7/bits/stl_algo.h **** 
 546:/usr/include/c++/7/bits/stl_algo.h ****   /**
 547:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief  Find the first element in a sequence for which a
 548:/usr/include/c++/7/bits/stl_algo.h ****    *          predicate is false.
 549:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 550:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 551:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 552:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 553:/usr/include/c++/7/bits/stl_algo.h ****    *  @return   The first iterator @c i in the range @p [__first,__last)
 554:/usr/include/c++/7/bits/stl_algo.h ****    *  such that @p __pred(*i) is false, or @p __last if no such iterator exists.
 555:/usr/include/c++/7/bits/stl_algo.h ****   */
 556:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 557:/usr/include/c++/7/bits/stl_algo.h ****     inline _InputIterator
 558:/usr/include/c++/7/bits/stl_algo.h ****     find_if_not(_InputIterator __first, _InputIterator __last,
 559:/usr/include/c++/7/bits/stl_algo.h **** 		_Predicate __pred)
 560:/usr/include/c++/7/bits/stl_algo.h ****     {
 561:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
 562:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 563:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 564:/usr/include/c++/7/bits/stl_algo.h **** 	      typename iterator_traits<_InputIterator>::value_type>)
 565:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 566:/usr/include/c++/7/bits/stl_algo.h ****       return std::__find_if_not(__first, __last,
 567:/usr/include/c++/7/bits/stl_algo.h **** 				__gnu_cxx::__ops::__pred_iter(__pred));
 568:/usr/include/c++/7/bits/stl_algo.h ****     }
 569:/usr/include/c++/7/bits/stl_algo.h **** 
 570:/usr/include/c++/7/bits/stl_algo.h ****   /**
 571:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief  Checks whether the sequence is partitioned.
 572:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 573:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 574:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 575:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 576:/usr/include/c++/7/bits/stl_algo.h ****    *  @return  True if the range @p [__first,__last) is partioned by @p __pred,
 577:/usr/include/c++/7/bits/stl_algo.h ****    *  i.e. if all elements that satisfy @p __pred appear before those that
 578:/usr/include/c++/7/bits/stl_algo.h ****    *  do not.
 579:/usr/include/c++/7/bits/stl_algo.h ****   */
 580:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 581:/usr/include/c++/7/bits/stl_algo.h ****     inline bool
 582:/usr/include/c++/7/bits/stl_algo.h ****     is_partitioned(_InputIterator __first, _InputIterator __last,
 583:/usr/include/c++/7/bits/stl_algo.h **** 		   _Predicate __pred)
 584:/usr/include/c++/7/bits/stl_algo.h ****     {
 585:/usr/include/c++/7/bits/stl_algo.h ****       __first = std::find_if_not(__first, __last, __pred);
 586:/usr/include/c++/7/bits/stl_algo.h ****       if (__first == __last)
 587:/usr/include/c++/7/bits/stl_algo.h **** 	return true;
 588:/usr/include/c++/7/bits/stl_algo.h ****       ++__first;
 589:/usr/include/c++/7/bits/stl_algo.h ****       return std::none_of(__first, __last, __pred);
 590:/usr/include/c++/7/bits/stl_algo.h ****     }
 591:/usr/include/c++/7/bits/stl_algo.h **** 
 592:/usr/include/c++/7/bits/stl_algo.h ****   /**
 593:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief  Find the partition point of a partitioned range.
 594:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 595:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first   An iterator.
 596:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last    Another iterator.
 597:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 598:/usr/include/c++/7/bits/stl_algo.h ****    *  @return  An iterator @p mid such that @p all_of(__first, mid, __pred)
 599:/usr/include/c++/7/bits/stl_algo.h ****    *           and @p none_of(mid, __last, __pred) are both true.
 600:/usr/include/c++/7/bits/stl_algo.h ****   */
 601:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 602:/usr/include/c++/7/bits/stl_algo.h ****     _ForwardIterator
 603:/usr/include/c++/7/bits/stl_algo.h ****     partition_point(_ForwardIterator __first, _ForwardIterator __last,
 604:/usr/include/c++/7/bits/stl_algo.h **** 		    _Predicate __pred)
 605:/usr/include/c++/7/bits/stl_algo.h ****     {
 606:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
 607:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
 608:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 609:/usr/include/c++/7/bits/stl_algo.h **** 	      typename iterator_traits<_ForwardIterator>::value_type>)
 610:/usr/include/c++/7/bits/stl_algo.h **** 
 611:/usr/include/c++/7/bits/stl_algo.h ****       // A specific debug-mode test will be necessary...
 612:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 613:/usr/include/c++/7/bits/stl_algo.h **** 
 614:/usr/include/c++/7/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
 615:/usr/include/c++/7/bits/stl_algo.h **** 	_DistanceType;
 616:/usr/include/c++/7/bits/stl_algo.h **** 
 617:/usr/include/c++/7/bits/stl_algo.h ****       _DistanceType __len = std::distance(__first, __last);
 618:/usr/include/c++/7/bits/stl_algo.h ****       _DistanceType __half;
 619:/usr/include/c++/7/bits/stl_algo.h ****       _ForwardIterator __middle;
 620:/usr/include/c++/7/bits/stl_algo.h **** 
 621:/usr/include/c++/7/bits/stl_algo.h ****       while (__len > 0)
 622:/usr/include/c++/7/bits/stl_algo.h **** 	{
 623:/usr/include/c++/7/bits/stl_algo.h **** 	  __half = __len >> 1;
 624:/usr/include/c++/7/bits/stl_algo.h **** 	  __middle = __first;
 625:/usr/include/c++/7/bits/stl_algo.h **** 	  std::advance(__middle, __half);
 626:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__pred(*__middle))
 627:/usr/include/c++/7/bits/stl_algo.h **** 	    {
 628:/usr/include/c++/7/bits/stl_algo.h **** 	      __first = __middle;
 629:/usr/include/c++/7/bits/stl_algo.h **** 	      ++__first;
 630:/usr/include/c++/7/bits/stl_algo.h **** 	      __len = __len - __half - 1;
 631:/usr/include/c++/7/bits/stl_algo.h **** 	    }
 632:/usr/include/c++/7/bits/stl_algo.h **** 	  else
 633:/usr/include/c++/7/bits/stl_algo.h **** 	    __len = __half;
 634:/usr/include/c++/7/bits/stl_algo.h **** 	}
 635:/usr/include/c++/7/bits/stl_algo.h ****       return __first;
 636:/usr/include/c++/7/bits/stl_algo.h ****     }
 637:/usr/include/c++/7/bits/stl_algo.h **** #endif
 638:/usr/include/c++/7/bits/stl_algo.h **** 
 639:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 640:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _Predicate>
 641:/usr/include/c++/7/bits/stl_algo.h ****     _OutputIterator
 642:/usr/include/c++/7/bits/stl_algo.h ****     __remove_copy_if(_InputIterator __first, _InputIterator __last,
 643:/usr/include/c++/7/bits/stl_algo.h **** 		     _OutputIterator __result, _Predicate __pred)
 644:/usr/include/c++/7/bits/stl_algo.h ****     {
 645:/usr/include/c++/7/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 646:/usr/include/c++/7/bits/stl_algo.h **** 	if (!__pred(__first))
 647:/usr/include/c++/7/bits/stl_algo.h **** 	  {
 648:/usr/include/c++/7/bits/stl_algo.h **** 	    *__result = *__first;
 649:/usr/include/c++/7/bits/stl_algo.h **** 	    ++__result;
 650:/usr/include/c++/7/bits/stl_algo.h **** 	  }
 651:/usr/include/c++/7/bits/stl_algo.h ****       return __result;
 652:/usr/include/c++/7/bits/stl_algo.h ****     }
 653:/usr/include/c++/7/bits/stl_algo.h **** 
 654:/usr/include/c++/7/bits/stl_algo.h ****   /**
 655:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief Copy a sequence, removing elements of a given value.
 656:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 657:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 658:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 659:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 660:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __value   The value to be removed.
 661:/usr/include/c++/7/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 662:/usr/include/c++/7/bits/stl_algo.h ****    *
 663:/usr/include/c++/7/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) not equal
 664:/usr/include/c++/7/bits/stl_algo.h ****    *  to @p __value to the range beginning at @p __result.
 665:/usr/include/c++/7/bits/stl_algo.h ****    *  remove_copy() is stable, so the relative order of elements that
 666:/usr/include/c++/7/bits/stl_algo.h ****    *  are copied is unchanged.
 667:/usr/include/c++/7/bits/stl_algo.h ****   */
 668:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator, typename _Tp>
 669:/usr/include/c++/7/bits/stl_algo.h ****     inline _OutputIterator
 670:/usr/include/c++/7/bits/stl_algo.h ****     remove_copy(_InputIterator __first, _InputIterator __last,
 671:/usr/include/c++/7/bits/stl_algo.h **** 		_OutputIterator __result, const _Tp& __value)
 672:/usr/include/c++/7/bits/stl_algo.h ****     {
 673:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
 674:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 675:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 676:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 677:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 678:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type, _Tp>)
 679:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 680:/usr/include/c++/7/bits/stl_algo.h **** 
 681:/usr/include/c++/7/bits/stl_algo.h ****       return std::__remove_copy_if(__first, __last, __result,
 682:/usr/include/c++/7/bits/stl_algo.h **** 	__gnu_cxx::__ops::__iter_equals_val(__value));
 683:/usr/include/c++/7/bits/stl_algo.h ****     }
 684:/usr/include/c++/7/bits/stl_algo.h **** 
 685:/usr/include/c++/7/bits/stl_algo.h ****   /**
 686:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief Copy a sequence, removing elements for which a predicate is true.
 687:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 688:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 689:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 690:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 691:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 692:/usr/include/c++/7/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 693:/usr/include/c++/7/bits/stl_algo.h ****    *
 694:/usr/include/c++/7/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 695:/usr/include/c++/7/bits/stl_algo.h ****    *  @p __pred returns false to the range beginning at @p __result.
 696:/usr/include/c++/7/bits/stl_algo.h ****    *
 697:/usr/include/c++/7/bits/stl_algo.h ****    *  remove_copy_if() is stable, so the relative order of elements that are
 698:/usr/include/c++/7/bits/stl_algo.h ****    *  copied is unchanged.
 699:/usr/include/c++/7/bits/stl_algo.h ****   */
 700:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 701:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _Predicate>
 702:/usr/include/c++/7/bits/stl_algo.h ****     inline _OutputIterator
 703:/usr/include/c++/7/bits/stl_algo.h ****     remove_copy_if(_InputIterator __first, _InputIterator __last,
 704:/usr/include/c++/7/bits/stl_algo.h **** 		   _OutputIterator __result, _Predicate __pred)
 705:/usr/include/c++/7/bits/stl_algo.h ****     {
 706:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
 707:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 708:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 709:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 710:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 711:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 712:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 713:/usr/include/c++/7/bits/stl_algo.h **** 
 714:/usr/include/c++/7/bits/stl_algo.h ****       return std::__remove_copy_if(__first, __last, __result,
 715:/usr/include/c++/7/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__pred_iter(__pred));
 716:/usr/include/c++/7/bits/stl_algo.h ****     }
 717:/usr/include/c++/7/bits/stl_algo.h **** 
 718:/usr/include/c++/7/bits/stl_algo.h **** #if __cplusplus >= 201103L
 719:/usr/include/c++/7/bits/stl_algo.h ****   /**
 720:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief Copy the elements of a sequence for which a predicate is true.
 721:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 722:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 723:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 724:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 725:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 726:/usr/include/c++/7/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 727:/usr/include/c++/7/bits/stl_algo.h ****    *
 728:/usr/include/c++/7/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 729:/usr/include/c++/7/bits/stl_algo.h ****    *  @p __pred returns true to the range beginning at @p __result.
 730:/usr/include/c++/7/bits/stl_algo.h ****    *
 731:/usr/include/c++/7/bits/stl_algo.h ****    *  copy_if() is stable, so the relative order of elements that are
 732:/usr/include/c++/7/bits/stl_algo.h ****    *  copied is unchanged.
 733:/usr/include/c++/7/bits/stl_algo.h ****   */
 734:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 735:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _Predicate>
 736:/usr/include/c++/7/bits/stl_algo.h ****     _OutputIterator
 737:/usr/include/c++/7/bits/stl_algo.h ****     copy_if(_InputIterator __first, _InputIterator __last,
 738:/usr/include/c++/7/bits/stl_algo.h **** 	    _OutputIterator __result, _Predicate __pred)
 739:/usr/include/c++/7/bits/stl_algo.h ****     {
 740:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
 741:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 742:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 743:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 744:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 745:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 746:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 747:/usr/include/c++/7/bits/stl_algo.h **** 
 748:/usr/include/c++/7/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 749:/usr/include/c++/7/bits/stl_algo.h **** 	if (__pred(*__first))
 750:/usr/include/c++/7/bits/stl_algo.h **** 	  {
 751:/usr/include/c++/7/bits/stl_algo.h **** 	    *__result = *__first;
 752:/usr/include/c++/7/bits/stl_algo.h **** 	    ++__result;
 753:/usr/include/c++/7/bits/stl_algo.h **** 	  }
 754:/usr/include/c++/7/bits/stl_algo.h ****       return __result;
 755:/usr/include/c++/7/bits/stl_algo.h ****     }
 756:/usr/include/c++/7/bits/stl_algo.h **** 
 757:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 758:/usr/include/c++/7/bits/stl_algo.h ****     _OutputIterator
 759:/usr/include/c++/7/bits/stl_algo.h ****     __copy_n(_InputIterator __first, _Size __n,
 760:/usr/include/c++/7/bits/stl_algo.h **** 	     _OutputIterator __result, input_iterator_tag)
 761:/usr/include/c++/7/bits/stl_algo.h ****     {
 762:/usr/include/c++/7/bits/stl_algo.h ****       if (__n > 0)
 763:/usr/include/c++/7/bits/stl_algo.h **** 	{
 764:/usr/include/c++/7/bits/stl_algo.h **** 	  while (true)
 765:/usr/include/c++/7/bits/stl_algo.h **** 	    {
 766:/usr/include/c++/7/bits/stl_algo.h **** 	      *__result = *__first;
 767:/usr/include/c++/7/bits/stl_algo.h **** 	      ++__result;
 768:/usr/include/c++/7/bits/stl_algo.h **** 	      if (--__n > 0)
 769:/usr/include/c++/7/bits/stl_algo.h **** 		++__first;
 770:/usr/include/c++/7/bits/stl_algo.h **** 	      else
 771:/usr/include/c++/7/bits/stl_algo.h **** 		break;
 772:/usr/include/c++/7/bits/stl_algo.h **** 	    }
 773:/usr/include/c++/7/bits/stl_algo.h **** 	}
 774:/usr/include/c++/7/bits/stl_algo.h ****       return __result;
 775:/usr/include/c++/7/bits/stl_algo.h ****     }
 776:/usr/include/c++/7/bits/stl_algo.h **** 
 777:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size,
 778:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _OutputIterator>
 779:/usr/include/c++/7/bits/stl_algo.h ****     inline _OutputIterator
 780:/usr/include/c++/7/bits/stl_algo.h ****     __copy_n(_RandomAccessIterator __first, _Size __n,
 781:/usr/include/c++/7/bits/stl_algo.h **** 	     _OutputIterator __result, random_access_iterator_tag)
 782:/usr/include/c++/7/bits/stl_algo.h ****     { return std::copy(__first, __first + __n, __result); }
 783:/usr/include/c++/7/bits/stl_algo.h **** 
 784:/usr/include/c++/7/bits/stl_algo.h ****   /**
 785:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief Copies the range [first,first+n) into [result,result+n).
 786:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 787:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 788:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __n      The number of elements to copy.
 789:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __result An output iterator.
 790:/usr/include/c++/7/bits/stl_algo.h ****    *  @return  result+n.
 791:/usr/include/c++/7/bits/stl_algo.h ****    *
 792:/usr/include/c++/7/bits/stl_algo.h ****    *  This inline function will boil down to a call to @c memmove whenever
 793:/usr/include/c++/7/bits/stl_algo.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 794:/usr/include/c++/7/bits/stl_algo.h ****    *  loop count will be known (and therefore a candidate for compiler
 795:/usr/include/c++/7/bits/stl_algo.h ****    *  optimizations such as unrolling).
 796:/usr/include/c++/7/bits/stl_algo.h ****   */
 797:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 798:/usr/include/c++/7/bits/stl_algo.h ****     inline _OutputIterator
 799:/usr/include/c++/7/bits/stl_algo.h ****     copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
 800:/usr/include/c++/7/bits/stl_algo.h ****     {
 801:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
 802:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 803:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 804:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 805:/usr/include/c++/7/bits/stl_algo.h **** 
 806:/usr/include/c++/7/bits/stl_algo.h ****       return std::__copy_n(__first, __n, __result,
 807:/usr/include/c++/7/bits/stl_algo.h **** 			   std::__iterator_category(__first));
 808:/usr/include/c++/7/bits/stl_algo.h ****     }
 809:/usr/include/c++/7/bits/stl_algo.h **** 
 810:/usr/include/c++/7/bits/stl_algo.h ****   /**
 811:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief Copy the elements of a sequence to separate output sequences
 812:/usr/include/c++/7/bits/stl_algo.h ****    *         depending on the truth value of a predicate.
 813:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 814:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 815:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 816:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __out_true   An output iterator.
 817:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __out_false  An output iterator.
 818:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 819:/usr/include/c++/7/bits/stl_algo.h ****    *  @return   A pair designating the ends of the resulting sequences.
 820:/usr/include/c++/7/bits/stl_algo.h ****    *
 821:/usr/include/c++/7/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 822:/usr/include/c++/7/bits/stl_algo.h ****    *  @p __pred returns true to the range beginning at @p out_true
 823:/usr/include/c++/7/bits/stl_algo.h ****    *  and each element for which @p __pred returns false to @p __out_false.
 824:/usr/include/c++/7/bits/stl_algo.h ****   */
 825:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator1,
 826:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _OutputIterator2, typename _Predicate>
 827:/usr/include/c++/7/bits/stl_algo.h ****     pair<_OutputIterator1, _OutputIterator2>
 828:/usr/include/c++/7/bits/stl_algo.h ****     partition_copy(_InputIterator __first, _InputIterator __last,
 829:/usr/include/c++/7/bits/stl_algo.h **** 		   _OutputIterator1 __out_true, _OutputIterator2 __out_false,
 830:/usr/include/c++/7/bits/stl_algo.h **** 		   _Predicate __pred)
 831:/usr/include/c++/7/bits/stl_algo.h ****     {
 832:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
 833:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 834:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator1,
 835:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 836:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator2,
 837:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 838:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 839:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 840:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 841:/usr/include/c++/7/bits/stl_algo.h ****       
 842:/usr/include/c++/7/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 843:/usr/include/c++/7/bits/stl_algo.h **** 	if (__pred(*__first))
 844:/usr/include/c++/7/bits/stl_algo.h **** 	  {
 845:/usr/include/c++/7/bits/stl_algo.h **** 	    *__out_true = *__first;
 846:/usr/include/c++/7/bits/stl_algo.h **** 	    ++__out_true;
 847:/usr/include/c++/7/bits/stl_algo.h **** 	  }
 848:/usr/include/c++/7/bits/stl_algo.h **** 	else
 849:/usr/include/c++/7/bits/stl_algo.h **** 	  {
 850:/usr/include/c++/7/bits/stl_algo.h **** 	    *__out_false = *__first;
 851:/usr/include/c++/7/bits/stl_algo.h **** 	    ++__out_false;
 852:/usr/include/c++/7/bits/stl_algo.h **** 	  }
 853:/usr/include/c++/7/bits/stl_algo.h **** 
 854:/usr/include/c++/7/bits/stl_algo.h ****       return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
 855:/usr/include/c++/7/bits/stl_algo.h ****     }
 856:/usr/include/c++/7/bits/stl_algo.h **** #endif
 857:/usr/include/c++/7/bits/stl_algo.h **** 
 858:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 859:/usr/include/c++/7/bits/stl_algo.h ****     _ForwardIterator
 860:/usr/include/c++/7/bits/stl_algo.h ****     __remove_if(_ForwardIterator __first, _ForwardIterator __last,
 861:/usr/include/c++/7/bits/stl_algo.h **** 		_Predicate __pred)
 862:/usr/include/c++/7/bits/stl_algo.h ****     {
 863:/usr/include/c++/7/bits/stl_algo.h ****       __first = std::__find_if(__first, __last, __pred);
 864:/usr/include/c++/7/bits/stl_algo.h ****       if (__first == __last)
 865:/usr/include/c++/7/bits/stl_algo.h **** 	return __first;
 866:/usr/include/c++/7/bits/stl_algo.h ****       _ForwardIterator __result = __first;
 867:/usr/include/c++/7/bits/stl_algo.h ****       ++__first;
 868:/usr/include/c++/7/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 869:/usr/include/c++/7/bits/stl_algo.h **** 	if (!__pred(__first))
 870:/usr/include/c++/7/bits/stl_algo.h **** 	  {
 871:/usr/include/c++/7/bits/stl_algo.h **** 	    *__result = _GLIBCXX_MOVE(*__first);
 872:/usr/include/c++/7/bits/stl_algo.h **** 	    ++__result;
 873:/usr/include/c++/7/bits/stl_algo.h **** 	  }
 874:/usr/include/c++/7/bits/stl_algo.h ****       return __result;
 875:/usr/include/c++/7/bits/stl_algo.h ****     }
 876:/usr/include/c++/7/bits/stl_algo.h **** 
 877:/usr/include/c++/7/bits/stl_algo.h ****   /**
 878:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief Remove elements from a sequence.
 879:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 880:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 881:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 882:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __value  The value to be removed.
 883:/usr/include/c++/7/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 884:/usr/include/c++/7/bits/stl_algo.h ****    *
 885:/usr/include/c++/7/bits/stl_algo.h ****    *  All elements equal to @p __value are removed from the range
 886:/usr/include/c++/7/bits/stl_algo.h ****    *  @p [__first,__last).
 887:/usr/include/c++/7/bits/stl_algo.h ****    *
 888:/usr/include/c++/7/bits/stl_algo.h ****    *  remove() is stable, so the relative order of elements that are
 889:/usr/include/c++/7/bits/stl_algo.h ****    *  not removed is unchanged.
 890:/usr/include/c++/7/bits/stl_algo.h ****    *
 891:/usr/include/c++/7/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 892:/usr/include/c++/7/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 893:/usr/include/c++/7/bits/stl_algo.h ****   */
 894:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
 895:/usr/include/c++/7/bits/stl_algo.h ****     inline _ForwardIterator
 896:/usr/include/c++/7/bits/stl_algo.h ****     remove(_ForwardIterator __first, _ForwardIterator __last,
 897:/usr/include/c++/7/bits/stl_algo.h **** 	   const _Tp& __value)
 898:/usr/include/c++/7/bits/stl_algo.h ****     {
 899:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
 900:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 901:/usr/include/c++/7/bits/stl_algo.h **** 				  _ForwardIterator>)
 902:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 903:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
 904:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 905:/usr/include/c++/7/bits/stl_algo.h **** 
 906:/usr/include/c++/7/bits/stl_algo.h ****       return std::__remove_if(__first, __last,
 907:/usr/include/c++/7/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_equals_val(__value));
 908:/usr/include/c++/7/bits/stl_algo.h ****     }
 909:/usr/include/c++/7/bits/stl_algo.h **** 
 910:/usr/include/c++/7/bits/stl_algo.h ****   /**
 911:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief Remove elements from a sequence using a predicate.
 912:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 913:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first  A forward iterator.
 914:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last   A forward iterator.
 915:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 916:/usr/include/c++/7/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 917:/usr/include/c++/7/bits/stl_algo.h ****    *
 918:/usr/include/c++/7/bits/stl_algo.h ****    *  All elements for which @p __pred returns true are removed from the range
 919:/usr/include/c++/7/bits/stl_algo.h ****    *  @p [__first,__last).
 920:/usr/include/c++/7/bits/stl_algo.h ****    *
 921:/usr/include/c++/7/bits/stl_algo.h ****    *  remove_if() is stable, so the relative order of elements that are
 922:/usr/include/c++/7/bits/stl_algo.h ****    *  not removed is unchanged.
 923:/usr/include/c++/7/bits/stl_algo.h ****    *
 924:/usr/include/c++/7/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 925:/usr/include/c++/7/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 926:/usr/include/c++/7/bits/stl_algo.h ****   */
 927:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 928:/usr/include/c++/7/bits/stl_algo.h ****     inline _ForwardIterator
 929:/usr/include/c++/7/bits/stl_algo.h ****     remove_if(_ForwardIterator __first, _ForwardIterator __last,
 930:/usr/include/c++/7/bits/stl_algo.h **** 	      _Predicate __pred)
 931:/usr/include/c++/7/bits/stl_algo.h ****     {
 932:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
 933:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 934:/usr/include/c++/7/bits/stl_algo.h **** 				  _ForwardIterator>)
 935:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 936:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
 937:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 938:/usr/include/c++/7/bits/stl_algo.h **** 
 939:/usr/include/c++/7/bits/stl_algo.h ****       return std::__remove_if(__first, __last,
 940:/usr/include/c++/7/bits/stl_algo.h **** 			      __gnu_cxx::__ops::__pred_iter(__pred));
 941:/usr/include/c++/7/bits/stl_algo.h ****     }
 942:/usr/include/c++/7/bits/stl_algo.h **** 
 943:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
 944:/usr/include/c++/7/bits/stl_algo.h ****     _ForwardIterator
 945:/usr/include/c++/7/bits/stl_algo.h ****     __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
 946:/usr/include/c++/7/bits/stl_algo.h **** 		    _BinaryPredicate __binary_pred)
 947:/usr/include/c++/7/bits/stl_algo.h ****     {
 948:/usr/include/c++/7/bits/stl_algo.h ****       if (__first == __last)
 949:/usr/include/c++/7/bits/stl_algo.h **** 	return __last;
 950:/usr/include/c++/7/bits/stl_algo.h ****       _ForwardIterator __next = __first;
 951:/usr/include/c++/7/bits/stl_algo.h ****       while (++__next != __last)
 952:/usr/include/c++/7/bits/stl_algo.h **** 	{
 953:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__binary_pred(__first, __next))
 954:/usr/include/c++/7/bits/stl_algo.h **** 	    return __first;
 955:/usr/include/c++/7/bits/stl_algo.h **** 	  __first = __next;
 956:/usr/include/c++/7/bits/stl_algo.h **** 	}
 957:/usr/include/c++/7/bits/stl_algo.h ****       return __last;
 958:/usr/include/c++/7/bits/stl_algo.h ****     }
 959:/usr/include/c++/7/bits/stl_algo.h **** 
 960:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
 961:/usr/include/c++/7/bits/stl_algo.h ****     _ForwardIterator
 962:/usr/include/c++/7/bits/stl_algo.h ****     __unique(_ForwardIterator __first, _ForwardIterator __last,
 963:/usr/include/c++/7/bits/stl_algo.h **** 	     _BinaryPredicate __binary_pred)
 964:/usr/include/c++/7/bits/stl_algo.h ****     {
 965:/usr/include/c++/7/bits/stl_algo.h ****       // Skip the beginning, if already unique.
 966:/usr/include/c++/7/bits/stl_algo.h ****       __first = std::__adjacent_find(__first, __last, __binary_pred);
 967:/usr/include/c++/7/bits/stl_algo.h ****       if (__first == __last)
 968:/usr/include/c++/7/bits/stl_algo.h **** 	return __last;
 969:/usr/include/c++/7/bits/stl_algo.h **** 
 970:/usr/include/c++/7/bits/stl_algo.h ****       // Do the real copy work.
 971:/usr/include/c++/7/bits/stl_algo.h ****       _ForwardIterator __dest = __first;
 972:/usr/include/c++/7/bits/stl_algo.h ****       ++__first;
 973:/usr/include/c++/7/bits/stl_algo.h ****       while (++__first != __last)
 974:/usr/include/c++/7/bits/stl_algo.h **** 	if (!__binary_pred(__dest, __first))
 975:/usr/include/c++/7/bits/stl_algo.h **** 	  *++__dest = _GLIBCXX_MOVE(*__first);
 976:/usr/include/c++/7/bits/stl_algo.h ****       return ++__dest;
 977:/usr/include/c++/7/bits/stl_algo.h ****     }
 978:/usr/include/c++/7/bits/stl_algo.h **** 
 979:/usr/include/c++/7/bits/stl_algo.h ****   /**
 980:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief Remove consecutive duplicate values from a sequence.
 981:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 982:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first  A forward iterator.
 983:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last   A forward iterator.
 984:/usr/include/c++/7/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
 985:/usr/include/c++/7/bits/stl_algo.h ****    *
 986:/usr/include/c++/7/bits/stl_algo.h ****    *  Removes all but the first element from each group of consecutive
 987:/usr/include/c++/7/bits/stl_algo.h ****    *  values that compare equal.
 988:/usr/include/c++/7/bits/stl_algo.h ****    *  unique() is stable, so the relative order of elements that are
 989:/usr/include/c++/7/bits/stl_algo.h ****    *  not removed is unchanged.
 990:/usr/include/c++/7/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 991:/usr/include/c++/7/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 992:/usr/include/c++/7/bits/stl_algo.h ****   */
 993:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator>
 994:/usr/include/c++/7/bits/stl_algo.h ****     inline _ForwardIterator
 995:/usr/include/c++/7/bits/stl_algo.h ****     unique(_ForwardIterator __first, _ForwardIterator __last)
 996:/usr/include/c++/7/bits/stl_algo.h ****     {
 997:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
 998:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 999:/usr/include/c++/7/bits/stl_algo.h **** 				  _ForwardIterator>)
1000:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualityComparableConcept<
1001:/usr/include/c++/7/bits/stl_algo.h **** 		     typename iterator_traits<_ForwardIterator>::value_type>)
1002:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1003:/usr/include/c++/7/bits/stl_algo.h **** 
1004:/usr/include/c++/7/bits/stl_algo.h ****       return std::__unique(__first, __last,
1005:/usr/include/c++/7/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_equal_to_iter());
1006:/usr/include/c++/7/bits/stl_algo.h ****     }
1007:/usr/include/c++/7/bits/stl_algo.h **** 
1008:/usr/include/c++/7/bits/stl_algo.h ****   /**
1009:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief Remove consecutive values from a sequence using a predicate.
1010:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1011:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first        A forward iterator.
1012:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last         A forward iterator.
1013:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __binary_pred  A binary predicate.
1014:/usr/include/c++/7/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
1015:/usr/include/c++/7/bits/stl_algo.h ****    *
1016:/usr/include/c++/7/bits/stl_algo.h ****    *  Removes all but the first element from each group of consecutive
1017:/usr/include/c++/7/bits/stl_algo.h ****    *  values for which @p __binary_pred returns true.
1018:/usr/include/c++/7/bits/stl_algo.h ****    *  unique() is stable, so the relative order of elements that are
1019:/usr/include/c++/7/bits/stl_algo.h ****    *  not removed is unchanged.
1020:/usr/include/c++/7/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
1021:/usr/include/c++/7/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
1022:/usr/include/c++/7/bits/stl_algo.h ****   */
1023:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
1024:/usr/include/c++/7/bits/stl_algo.h ****     inline _ForwardIterator
1025:/usr/include/c++/7/bits/stl_algo.h ****     unique(_ForwardIterator __first, _ForwardIterator __last,
1026:/usr/include/c++/7/bits/stl_algo.h **** 	   _BinaryPredicate __binary_pred)
1027:/usr/include/c++/7/bits/stl_algo.h ****     {
1028:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
1029:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1030:/usr/include/c++/7/bits/stl_algo.h **** 				  _ForwardIterator>)
1031:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1032:/usr/include/c++/7/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type,
1033:/usr/include/c++/7/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type>)
1034:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1035:/usr/include/c++/7/bits/stl_algo.h **** 
1036:/usr/include/c++/7/bits/stl_algo.h ****       return std::__unique(__first, __last,
1037:/usr/include/c++/7/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
1038:/usr/include/c++/7/bits/stl_algo.h ****     }
1039:/usr/include/c++/7/bits/stl_algo.h **** 
1040:/usr/include/c++/7/bits/stl_algo.h ****   /**
1041:/usr/include/c++/7/bits/stl_algo.h ****    *  This is an uglified
1042:/usr/include/c++/7/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1043:/usr/include/c++/7/bits/stl_algo.h ****    *              _BinaryPredicate)
1044:/usr/include/c++/7/bits/stl_algo.h ****    *  overloaded for forward iterators and output iterator as result.
1045:/usr/include/c++/7/bits/stl_algo.h ****   */
1046:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _OutputIterator,
1047:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1048:/usr/include/c++/7/bits/stl_algo.h ****     _OutputIterator
1049:/usr/include/c++/7/bits/stl_algo.h ****     __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
1050:/usr/include/c++/7/bits/stl_algo.h **** 		  _OutputIterator __result, _BinaryPredicate __binary_pred,
1051:/usr/include/c++/7/bits/stl_algo.h **** 		  forward_iterator_tag, output_iterator_tag)
1052:/usr/include/c++/7/bits/stl_algo.h ****     {
1053:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1054:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1055:/usr/include/c++/7/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type,
1056:/usr/include/c++/7/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type>)
1057:/usr/include/c++/7/bits/stl_algo.h **** 
1058:/usr/include/c++/7/bits/stl_algo.h ****       _ForwardIterator __next = __first;
1059:/usr/include/c++/7/bits/stl_algo.h ****       *__result = *__first;
1060:/usr/include/c++/7/bits/stl_algo.h ****       while (++__next != __last)
1061:/usr/include/c++/7/bits/stl_algo.h **** 	if (!__binary_pred(__first, __next))
1062:/usr/include/c++/7/bits/stl_algo.h **** 	  {
1063:/usr/include/c++/7/bits/stl_algo.h **** 	    __first = __next;
1064:/usr/include/c++/7/bits/stl_algo.h **** 	    *++__result = *__first;
1065:/usr/include/c++/7/bits/stl_algo.h **** 	  }
1066:/usr/include/c++/7/bits/stl_algo.h ****       return ++__result;
1067:/usr/include/c++/7/bits/stl_algo.h ****     }
1068:/usr/include/c++/7/bits/stl_algo.h **** 
1069:/usr/include/c++/7/bits/stl_algo.h ****   /**
1070:/usr/include/c++/7/bits/stl_algo.h ****    *  This is an uglified
1071:/usr/include/c++/7/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1072:/usr/include/c++/7/bits/stl_algo.h ****    *              _BinaryPredicate)
1073:/usr/include/c++/7/bits/stl_algo.h ****    *  overloaded for input iterators and output iterator as result.
1074:/usr/include/c++/7/bits/stl_algo.h ****   */
1075:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
1076:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1077:/usr/include/c++/7/bits/stl_algo.h ****     _OutputIterator
1078:/usr/include/c++/7/bits/stl_algo.h ****     __unique_copy(_InputIterator __first, _InputIterator __last,
1079:/usr/include/c++/7/bits/stl_algo.h **** 		  _OutputIterator __result, _BinaryPredicate __binary_pred,
1080:/usr/include/c++/7/bits/stl_algo.h **** 		  input_iterator_tag, output_iterator_tag)
1081:/usr/include/c++/7/bits/stl_algo.h ****     {
1082:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1083:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1084:/usr/include/c++/7/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type,
1085:/usr/include/c++/7/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type>)
1086:/usr/include/c++/7/bits/stl_algo.h **** 
1087:/usr/include/c++/7/bits/stl_algo.h ****       typename iterator_traits<_InputIterator>::value_type __value = *__first;
1088:/usr/include/c++/7/bits/stl_algo.h ****       __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred))
1089:/usr/include/c++/7/bits/stl_algo.h **** 	__rebound_pred
1090:/usr/include/c++/7/bits/stl_algo.h **** 	= __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
1091:/usr/include/c++/7/bits/stl_algo.h ****       *__result = __value;
1092:/usr/include/c++/7/bits/stl_algo.h ****       while (++__first != __last)
1093:/usr/include/c++/7/bits/stl_algo.h **** 	if (!__rebound_pred(__first, __value))
1094:/usr/include/c++/7/bits/stl_algo.h **** 	  {
1095:/usr/include/c++/7/bits/stl_algo.h **** 	    __value = *__first;
1096:/usr/include/c++/7/bits/stl_algo.h **** 	    *++__result = __value;
1097:/usr/include/c++/7/bits/stl_algo.h **** 	  }
1098:/usr/include/c++/7/bits/stl_algo.h ****       return ++__result;
1099:/usr/include/c++/7/bits/stl_algo.h ****     }
1100:/usr/include/c++/7/bits/stl_algo.h **** 
1101:/usr/include/c++/7/bits/stl_algo.h ****   /**
1102:/usr/include/c++/7/bits/stl_algo.h ****    *  This is an uglified
1103:/usr/include/c++/7/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1104:/usr/include/c++/7/bits/stl_algo.h ****    *              _BinaryPredicate)
1105:/usr/include/c++/7/bits/stl_algo.h ****    *  overloaded for input iterators and forward iterator as result.
1106:/usr/include/c++/7/bits/stl_algo.h ****   */
1107:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _ForwardIterator,
1108:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1109:/usr/include/c++/7/bits/stl_algo.h ****     _ForwardIterator
1110:/usr/include/c++/7/bits/stl_algo.h ****     __unique_copy(_InputIterator __first, _InputIterator __last,
1111:/usr/include/c++/7/bits/stl_algo.h **** 		  _ForwardIterator __result, _BinaryPredicate __binary_pred,
1112:/usr/include/c++/7/bits/stl_algo.h **** 		  input_iterator_tag, forward_iterator_tag)
1113:/usr/include/c++/7/bits/stl_algo.h ****     {
1114:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1115:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1116:/usr/include/c++/7/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type,
1117:/usr/include/c++/7/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type>)
1118:/usr/include/c++/7/bits/stl_algo.h ****       *__result = *__first;
1119:/usr/include/c++/7/bits/stl_algo.h ****       while (++__first != __last)
1120:/usr/include/c++/7/bits/stl_algo.h **** 	if (!__binary_pred(__result, __first))
1121:/usr/include/c++/7/bits/stl_algo.h **** 	  *++__result = *__first;
1122:/usr/include/c++/7/bits/stl_algo.h ****       return ++__result;
1123:/usr/include/c++/7/bits/stl_algo.h ****     }
1124:/usr/include/c++/7/bits/stl_algo.h **** 
1125:/usr/include/c++/7/bits/stl_algo.h ****   /**
1126:/usr/include/c++/7/bits/stl_algo.h ****    *  This is an uglified reverse(_BidirectionalIterator,
1127:/usr/include/c++/7/bits/stl_algo.h ****    *                              _BidirectionalIterator)
1128:/usr/include/c++/7/bits/stl_algo.h ****    *  overloaded for bidirectional iterators.
1129:/usr/include/c++/7/bits/stl_algo.h ****   */
1130:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1131:/usr/include/c++/7/bits/stl_algo.h ****     void
1132:/usr/include/c++/7/bits/stl_algo.h ****     __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
1133:/usr/include/c++/7/bits/stl_algo.h **** 	      bidirectional_iterator_tag)
1134:/usr/include/c++/7/bits/stl_algo.h ****     {
1135:/usr/include/c++/7/bits/stl_algo.h ****       while (true)
1136:/usr/include/c++/7/bits/stl_algo.h **** 	if (__first == __last || __first == --__last)
1137:/usr/include/c++/7/bits/stl_algo.h **** 	  return;
1138:/usr/include/c++/7/bits/stl_algo.h **** 	else
1139:/usr/include/c++/7/bits/stl_algo.h **** 	  {
1140:/usr/include/c++/7/bits/stl_algo.h **** 	    std::iter_swap(__first, __last);
1141:/usr/include/c++/7/bits/stl_algo.h **** 	    ++__first;
1142:/usr/include/c++/7/bits/stl_algo.h **** 	  }
1143:/usr/include/c++/7/bits/stl_algo.h ****     }
1144:/usr/include/c++/7/bits/stl_algo.h **** 
1145:/usr/include/c++/7/bits/stl_algo.h ****   /**
1146:/usr/include/c++/7/bits/stl_algo.h ****    *  This is an uglified reverse(_BidirectionalIterator,
1147:/usr/include/c++/7/bits/stl_algo.h ****    *                              _BidirectionalIterator)
1148:/usr/include/c++/7/bits/stl_algo.h ****    *  overloaded for random access iterators.
1149:/usr/include/c++/7/bits/stl_algo.h ****   */
1150:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _RandomAccessIterator>
1151:/usr/include/c++/7/bits/stl_algo.h ****     void
1152:/usr/include/c++/7/bits/stl_algo.h ****     __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
1153:/usr/include/c++/7/bits/stl_algo.h **** 	      random_access_iterator_tag)
1154:/usr/include/c++/7/bits/stl_algo.h ****     {
1155:/usr/include/c++/7/bits/stl_algo.h ****       if (__first == __last)
1156:/usr/include/c++/7/bits/stl_algo.h **** 	return;
1157:/usr/include/c++/7/bits/stl_algo.h ****       --__last;
1158:/usr/include/c++/7/bits/stl_algo.h ****       while (__first < __last)
1159:/usr/include/c++/7/bits/stl_algo.h **** 	{
1160:/usr/include/c++/7/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1161:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first;
1162:/usr/include/c++/7/bits/stl_algo.h **** 	  --__last;
1163:/usr/include/c++/7/bits/stl_algo.h **** 	}
1164:/usr/include/c++/7/bits/stl_algo.h ****     }
1165:/usr/include/c++/7/bits/stl_algo.h **** 
1166:/usr/include/c++/7/bits/stl_algo.h ****   /**
1167:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief Reverse a sequence.
1168:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1169:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first  A bidirectional iterator.
1170:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last   A bidirectional iterator.
1171:/usr/include/c++/7/bits/stl_algo.h ****    *  @return   reverse() returns no value.
1172:/usr/include/c++/7/bits/stl_algo.h ****    *
1173:/usr/include/c++/7/bits/stl_algo.h ****    *  Reverses the order of the elements in the range @p [__first,__last),
1174:/usr/include/c++/7/bits/stl_algo.h ****    *  so that the first element becomes the last etc.
1175:/usr/include/c++/7/bits/stl_algo.h ****    *  For every @c i such that @p 0<=i<=(__last-__first)/2), @p reverse()
1176:/usr/include/c++/7/bits/stl_algo.h ****    *  swaps @p *(__first+i) and @p *(__last-(i+1))
1177:/usr/include/c++/7/bits/stl_algo.h ****   */
1178:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1179:/usr/include/c++/7/bits/stl_algo.h ****     inline void
1180:/usr/include/c++/7/bits/stl_algo.h ****     reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
1181:/usr/include/c++/7/bits/stl_algo.h ****     {
1182:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
1183:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
1184:/usr/include/c++/7/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1185:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1186:/usr/include/c++/7/bits/stl_algo.h ****       std::__reverse(__first, __last, std::__iterator_category(__first));
1187:/usr/include/c++/7/bits/stl_algo.h ****     }
1188:/usr/include/c++/7/bits/stl_algo.h **** 
1189:/usr/include/c++/7/bits/stl_algo.h ****   /**
1190:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief Copy a sequence, reversing its elements.
1191:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1192:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first   A bidirectional iterator.
1193:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last    A bidirectional iterator.
1194:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __result  An output iterator.
1195:/usr/include/c++/7/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
1196:/usr/include/c++/7/bits/stl_algo.h ****    *
1197:/usr/include/c++/7/bits/stl_algo.h ****    *  Copies the elements in the range @p [__first,__last) to the
1198:/usr/include/c++/7/bits/stl_algo.h ****    *  range @p [__result,__result+(__last-__first)) such that the
1199:/usr/include/c++/7/bits/stl_algo.h ****    *  order of the elements is reversed.  For every @c i such that @p
1200:/usr/include/c++/7/bits/stl_algo.h ****    *  0<=i<=(__last-__first), @p reverse_copy() performs the
1201:/usr/include/c++/7/bits/stl_algo.h ****    *  assignment @p *(__result+(__last-__first)-1-i) = *(__first+i).
1202:/usr/include/c++/7/bits/stl_algo.h ****    *  The ranges @p [__first,__last) and @p
1203:/usr/include/c++/7/bits/stl_algo.h ****    *  [__result,__result+(__last-__first)) must not overlap.
1204:/usr/include/c++/7/bits/stl_algo.h ****   */
1205:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _OutputIterator>
1206:/usr/include/c++/7/bits/stl_algo.h ****     _OutputIterator
1207:/usr/include/c++/7/bits/stl_algo.h ****     reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
1208:/usr/include/c++/7/bits/stl_algo.h **** 		 _OutputIterator __result)
1209:/usr/include/c++/7/bits/stl_algo.h ****     {
1210:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
1211:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
1212:/usr/include/c++/7/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1213:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
1214:/usr/include/c++/7/bits/stl_algo.h **** 		typename iterator_traits<_BidirectionalIterator>::value_type>)
1215:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1216:/usr/include/c++/7/bits/stl_algo.h **** 
1217:/usr/include/c++/7/bits/stl_algo.h ****       while (__first != __last)
1218:/usr/include/c++/7/bits/stl_algo.h **** 	{
1219:/usr/include/c++/7/bits/stl_algo.h **** 	  --__last;
1220:/usr/include/c++/7/bits/stl_algo.h **** 	  *__result = *__last;
1221:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__result;
1222:/usr/include/c++/7/bits/stl_algo.h **** 	}
1223:/usr/include/c++/7/bits/stl_algo.h ****       return __result;
1224:/usr/include/c++/7/bits/stl_algo.h ****     }
1225:/usr/include/c++/7/bits/stl_algo.h **** 
1226:/usr/include/c++/7/bits/stl_algo.h ****   /**
1227:/usr/include/c++/7/bits/stl_algo.h ****    *  This is a helper function for the rotate algorithm specialized on RAIs.
1228:/usr/include/c++/7/bits/stl_algo.h ****    *  It returns the greatest common divisor of two integer values.
1229:/usr/include/c++/7/bits/stl_algo.h ****   */
1230:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _EuclideanRingElement>
1231:/usr/include/c++/7/bits/stl_algo.h ****     _EuclideanRingElement
1232:/usr/include/c++/7/bits/stl_algo.h ****     __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
1233:/usr/include/c++/7/bits/stl_algo.h ****     {
1234:/usr/include/c++/7/bits/stl_algo.h ****       while (__n != 0)
1235:/usr/include/c++/7/bits/stl_algo.h **** 	{
1236:/usr/include/c++/7/bits/stl_algo.h **** 	  _EuclideanRingElement __t = __m % __n;
1237:/usr/include/c++/7/bits/stl_algo.h **** 	  __m = __n;
1238:/usr/include/c++/7/bits/stl_algo.h **** 	  __n = __t;
1239:/usr/include/c++/7/bits/stl_algo.h **** 	}
1240:/usr/include/c++/7/bits/stl_algo.h ****       return __m;
1241:/usr/include/c++/7/bits/stl_algo.h ****     }
1242:/usr/include/c++/7/bits/stl_algo.h **** 
1243:/usr/include/c++/7/bits/stl_algo.h ****   inline namespace _V2
1244:/usr/include/c++/7/bits/stl_algo.h ****   {
1245:/usr/include/c++/7/bits/stl_algo.h **** 
1246:/usr/include/c++/7/bits/stl_algo.h ****   /// This is a helper function for the rotate algorithm.
1247:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator>
1248:/usr/include/c++/7/bits/stl_algo.h ****     _ForwardIterator
1249:/usr/include/c++/7/bits/stl_algo.h ****     __rotate(_ForwardIterator __first,
1250:/usr/include/c++/7/bits/stl_algo.h **** 	     _ForwardIterator __middle,
1251:/usr/include/c++/7/bits/stl_algo.h **** 	     _ForwardIterator __last,
1252:/usr/include/c++/7/bits/stl_algo.h **** 	     forward_iterator_tag)
1253:/usr/include/c++/7/bits/stl_algo.h ****     {
1254:/usr/include/c++/7/bits/stl_algo.h ****       if (__first == __middle)
1255:/usr/include/c++/7/bits/stl_algo.h **** 	return __last;
1256:/usr/include/c++/7/bits/stl_algo.h ****       else if (__last  == __middle)
1257:/usr/include/c++/7/bits/stl_algo.h **** 	return __first;
1258:/usr/include/c++/7/bits/stl_algo.h **** 
1259:/usr/include/c++/7/bits/stl_algo.h ****       _ForwardIterator __first2 = __middle;
1260:/usr/include/c++/7/bits/stl_algo.h ****       do
1261:/usr/include/c++/7/bits/stl_algo.h **** 	{
1262:/usr/include/c++/7/bits/stl_algo.h **** 	  std::iter_swap(__first, __first2);
1263:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first;
1264:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first2;
1265:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__first == __middle)
1266:/usr/include/c++/7/bits/stl_algo.h **** 	    __middle = __first2;
1267:/usr/include/c++/7/bits/stl_algo.h **** 	}
1268:/usr/include/c++/7/bits/stl_algo.h ****       while (__first2 != __last);
1269:/usr/include/c++/7/bits/stl_algo.h **** 
1270:/usr/include/c++/7/bits/stl_algo.h ****       _ForwardIterator __ret = __first;
1271:/usr/include/c++/7/bits/stl_algo.h **** 
1272:/usr/include/c++/7/bits/stl_algo.h ****       __first2 = __middle;
1273:/usr/include/c++/7/bits/stl_algo.h **** 
1274:/usr/include/c++/7/bits/stl_algo.h ****       while (__first2 != __last)
1275:/usr/include/c++/7/bits/stl_algo.h **** 	{
1276:/usr/include/c++/7/bits/stl_algo.h **** 	  std::iter_swap(__first, __first2);
1277:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first;
1278:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first2;
1279:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__first == __middle)
1280:/usr/include/c++/7/bits/stl_algo.h **** 	    __middle = __first2;
1281:/usr/include/c++/7/bits/stl_algo.h **** 	  else if (__first2 == __last)
1282:/usr/include/c++/7/bits/stl_algo.h **** 	    __first2 = __middle;
1283:/usr/include/c++/7/bits/stl_algo.h **** 	}
1284:/usr/include/c++/7/bits/stl_algo.h ****       return __ret;
1285:/usr/include/c++/7/bits/stl_algo.h ****     }
1286:/usr/include/c++/7/bits/stl_algo.h **** 
1287:/usr/include/c++/7/bits/stl_algo.h ****    /// This is a helper function for the rotate algorithm.
1288:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1289:/usr/include/c++/7/bits/stl_algo.h ****     _BidirectionalIterator
1290:/usr/include/c++/7/bits/stl_algo.h ****     __rotate(_BidirectionalIterator __first,
1291:/usr/include/c++/7/bits/stl_algo.h **** 	     _BidirectionalIterator __middle,
1292:/usr/include/c++/7/bits/stl_algo.h **** 	     _BidirectionalIterator __last,
1293:/usr/include/c++/7/bits/stl_algo.h **** 	      bidirectional_iterator_tag)
1294:/usr/include/c++/7/bits/stl_algo.h ****     {
1295:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
1296:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
1297:/usr/include/c++/7/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1298:/usr/include/c++/7/bits/stl_algo.h **** 
1299:/usr/include/c++/7/bits/stl_algo.h ****       if (__first == __middle)
1300:/usr/include/c++/7/bits/stl_algo.h **** 	return __last;
1301:/usr/include/c++/7/bits/stl_algo.h ****       else if (__last  == __middle)
1302:/usr/include/c++/7/bits/stl_algo.h **** 	return __first;
1303:/usr/include/c++/7/bits/stl_algo.h **** 
1304:/usr/include/c++/7/bits/stl_algo.h ****       std::__reverse(__first,  __middle, bidirectional_iterator_tag());
1305:/usr/include/c++/7/bits/stl_algo.h ****       std::__reverse(__middle, __last,   bidirectional_iterator_tag());
1306:/usr/include/c++/7/bits/stl_algo.h **** 
1307:/usr/include/c++/7/bits/stl_algo.h ****       while (__first != __middle && __middle != __last)
1308:/usr/include/c++/7/bits/stl_algo.h **** 	{
1309:/usr/include/c++/7/bits/stl_algo.h **** 	  std::iter_swap(__first, --__last);
1310:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first;
1311:/usr/include/c++/7/bits/stl_algo.h **** 	}
1312:/usr/include/c++/7/bits/stl_algo.h **** 
1313:/usr/include/c++/7/bits/stl_algo.h ****       if (__first == __middle)
1314:/usr/include/c++/7/bits/stl_algo.h **** 	{
1315:/usr/include/c++/7/bits/stl_algo.h **** 	  std::__reverse(__middle, __last,   bidirectional_iterator_tag());
1316:/usr/include/c++/7/bits/stl_algo.h **** 	  return __last;
1317:/usr/include/c++/7/bits/stl_algo.h **** 	}
1318:/usr/include/c++/7/bits/stl_algo.h ****       else
1319:/usr/include/c++/7/bits/stl_algo.h **** 	{
1320:/usr/include/c++/7/bits/stl_algo.h **** 	  std::__reverse(__first,  __middle, bidirectional_iterator_tag());
1321:/usr/include/c++/7/bits/stl_algo.h **** 	  return __first;
1322:/usr/include/c++/7/bits/stl_algo.h **** 	}
1323:/usr/include/c++/7/bits/stl_algo.h ****     }
1324:/usr/include/c++/7/bits/stl_algo.h **** 
1325:/usr/include/c++/7/bits/stl_algo.h ****   /// This is a helper function for the rotate algorithm.
1326:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _RandomAccessIterator>
1327:/usr/include/c++/7/bits/stl_algo.h ****     _RandomAccessIterator
1328:/usr/include/c++/7/bits/stl_algo.h ****     __rotate(_RandomAccessIterator __first,
1329:/usr/include/c++/7/bits/stl_algo.h **** 	     _RandomAccessIterator __middle,
1330:/usr/include/c++/7/bits/stl_algo.h **** 	     _RandomAccessIterator __last,
1331:/usr/include/c++/7/bits/stl_algo.h **** 	     random_access_iterator_tag)
1332:/usr/include/c++/7/bits/stl_algo.h ****     {
1333:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
1334:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
1335:/usr/include/c++/7/bits/stl_algo.h **** 				  _RandomAccessIterator>)
1336:/usr/include/c++/7/bits/stl_algo.h **** 
1337:/usr/include/c++/7/bits/stl_algo.h ****       if (__first == __middle)
1338:/usr/include/c++/7/bits/stl_algo.h **** 	return __last;
1339:/usr/include/c++/7/bits/stl_algo.h ****       else if (__last  == __middle)
1340:/usr/include/c++/7/bits/stl_algo.h **** 	return __first;
1341:/usr/include/c++/7/bits/stl_algo.h **** 
1342:/usr/include/c++/7/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
1343:/usr/include/c++/7/bits/stl_algo.h **** 	_Distance;
1344:/usr/include/c++/7/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1345:/usr/include/c++/7/bits/stl_algo.h **** 	_ValueType;
1346:/usr/include/c++/7/bits/stl_algo.h **** 
1347:/usr/include/c++/7/bits/stl_algo.h ****       _Distance __n = __last   - __first;
1348:/usr/include/c++/7/bits/stl_algo.h ****       _Distance __k = __middle - __first;
1349:/usr/include/c++/7/bits/stl_algo.h **** 
1350:/usr/include/c++/7/bits/stl_algo.h ****       if (__k == __n - __k)
1351:/usr/include/c++/7/bits/stl_algo.h **** 	{
1352:/usr/include/c++/7/bits/stl_algo.h **** 	  std::swap_ranges(__first, __middle, __middle);
1353:/usr/include/c++/7/bits/stl_algo.h **** 	  return __middle;
1354:/usr/include/c++/7/bits/stl_algo.h **** 	}
1355:/usr/include/c++/7/bits/stl_algo.h **** 
1356:/usr/include/c++/7/bits/stl_algo.h ****       _RandomAccessIterator __p = __first;
1357:/usr/include/c++/7/bits/stl_algo.h ****       _RandomAccessIterator __ret = __first + (__last - __middle);
1358:/usr/include/c++/7/bits/stl_algo.h **** 
1359:/usr/include/c++/7/bits/stl_algo.h ****       for (;;)
1360:/usr/include/c++/7/bits/stl_algo.h **** 	{
1361:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__k < __n - __k)
1362:/usr/include/c++/7/bits/stl_algo.h **** 	    {
1363:/usr/include/c++/7/bits/stl_algo.h **** 	      if (__is_pod(_ValueType) && __k == 1)
1364:/usr/include/c++/7/bits/stl_algo.h **** 		{
1365:/usr/include/c++/7/bits/stl_algo.h **** 		  _ValueType __t = _GLIBCXX_MOVE(*__p);
1366:/usr/include/c++/7/bits/stl_algo.h **** 		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
1367:/usr/include/c++/7/bits/stl_algo.h **** 		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
1368:/usr/include/c++/7/bits/stl_algo.h **** 		  return __ret;
1369:/usr/include/c++/7/bits/stl_algo.h **** 		}
1370:/usr/include/c++/7/bits/stl_algo.h **** 	      _RandomAccessIterator __q = __p + __k;
1371:/usr/include/c++/7/bits/stl_algo.h **** 	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
1372:/usr/include/c++/7/bits/stl_algo.h **** 		{
1373:/usr/include/c++/7/bits/stl_algo.h **** 		  std::iter_swap(__p, __q);
1374:/usr/include/c++/7/bits/stl_algo.h **** 		  ++__p;
1375:/usr/include/c++/7/bits/stl_algo.h **** 		  ++__q;
1376:/usr/include/c++/7/bits/stl_algo.h **** 		}
1377:/usr/include/c++/7/bits/stl_algo.h **** 	      __n %= __k;
1378:/usr/include/c++/7/bits/stl_algo.h **** 	      if (__n == 0)
1379:/usr/include/c++/7/bits/stl_algo.h **** 		return __ret;
1380:/usr/include/c++/7/bits/stl_algo.h **** 	      std::swap(__n, __k);
1381:/usr/include/c++/7/bits/stl_algo.h **** 	      __k = __n - __k;
1382:/usr/include/c++/7/bits/stl_algo.h **** 	    }
1383:/usr/include/c++/7/bits/stl_algo.h **** 	  else
1384:/usr/include/c++/7/bits/stl_algo.h **** 	    {
1385:/usr/include/c++/7/bits/stl_algo.h **** 	      __k = __n - __k;
1386:/usr/include/c++/7/bits/stl_algo.h **** 	      if (__is_pod(_ValueType) && __k == 1)
1387:/usr/include/c++/7/bits/stl_algo.h **** 		{
1388:/usr/include/c++/7/bits/stl_algo.h **** 		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
1389:/usr/include/c++/7/bits/stl_algo.h **** 		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
1390:/usr/include/c++/7/bits/stl_algo.h **** 		  *__p = _GLIBCXX_MOVE(__t);
1391:/usr/include/c++/7/bits/stl_algo.h **** 		  return __ret;
1392:/usr/include/c++/7/bits/stl_algo.h **** 		}
1393:/usr/include/c++/7/bits/stl_algo.h **** 	      _RandomAccessIterator __q = __p + __n;
1394:/usr/include/c++/7/bits/stl_algo.h **** 	      __p = __q - __k;
1395:/usr/include/c++/7/bits/stl_algo.h **** 	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
1396:/usr/include/c++/7/bits/stl_algo.h **** 		{
1397:/usr/include/c++/7/bits/stl_algo.h **** 		  --__p;
1398:/usr/include/c++/7/bits/stl_algo.h **** 		  --__q;
1399:/usr/include/c++/7/bits/stl_algo.h **** 		  std::iter_swap(__p, __q);
1400:/usr/include/c++/7/bits/stl_algo.h **** 		}
1401:/usr/include/c++/7/bits/stl_algo.h **** 	      __n %= __k;
1402:/usr/include/c++/7/bits/stl_algo.h **** 	      if (__n == 0)
1403:/usr/include/c++/7/bits/stl_algo.h **** 		return __ret;
1404:/usr/include/c++/7/bits/stl_algo.h **** 	      std::swap(__n, __k);
1405:/usr/include/c++/7/bits/stl_algo.h **** 	    }
1406:/usr/include/c++/7/bits/stl_algo.h **** 	}
1407:/usr/include/c++/7/bits/stl_algo.h ****     }
1408:/usr/include/c++/7/bits/stl_algo.h **** 
1409:/usr/include/c++/7/bits/stl_algo.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
1410:/usr/include/c++/7/bits/stl_algo.h ****    // DR 488. rotate throws away useful information
1411:/usr/include/c++/7/bits/stl_algo.h ****   /**
1412:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief Rotate the elements of a sequence.
1413:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1414:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1415:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __middle  A forward iterator.
1416:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1417:/usr/include/c++/7/bits/stl_algo.h ****    *  @return  first + (last - middle).
1418:/usr/include/c++/7/bits/stl_algo.h ****    *
1419:/usr/include/c++/7/bits/stl_algo.h ****    *  Rotates the elements of the range @p [__first,__last) by 
1420:/usr/include/c++/7/bits/stl_algo.h ****    *  @p (__middle - __first) positions so that the element at @p __middle
1421:/usr/include/c++/7/bits/stl_algo.h ****    *  is moved to @p __first, the element at @p __middle+1 is moved to
1422:/usr/include/c++/7/bits/stl_algo.h ****    *  @p __first+1 and so on for each element in the range
1423:/usr/include/c++/7/bits/stl_algo.h ****    *  @p [__first,__last).
1424:/usr/include/c++/7/bits/stl_algo.h ****    *
1425:/usr/include/c++/7/bits/stl_algo.h ****    *  This effectively swaps the ranges @p [__first,__middle) and
1426:/usr/include/c++/7/bits/stl_algo.h ****    *  @p [__middle,__last).
1427:/usr/include/c++/7/bits/stl_algo.h ****    *
1428:/usr/include/c++/7/bits/stl_algo.h ****    *  Performs
1429:/usr/include/c++/7/bits/stl_algo.h ****    *   @p *(__first+(n+(__last-__middle))%(__last-__first))=*(__first+n)
1430:/usr/include/c++/7/bits/stl_algo.h ****    *  for each @p n in the range @p [0,__last-__first).
1431:/usr/include/c++/7/bits/stl_algo.h ****   */
1432:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator>
1433:/usr/include/c++/7/bits/stl_algo.h ****     inline _ForwardIterator
1434:/usr/include/c++/7/bits/stl_algo.h ****     rotate(_ForwardIterator __first, _ForwardIterator __middle,
1435:/usr/include/c++/7/bits/stl_algo.h **** 	   _ForwardIterator __last)
1436:/usr/include/c++/7/bits/stl_algo.h ****     {
1437:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
1438:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1439:/usr/include/c++/7/bits/stl_algo.h **** 				  _ForwardIterator>)
1440:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __middle);
1441:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__middle, __last);
1442:/usr/include/c++/7/bits/stl_algo.h **** 
1443:/usr/include/c++/7/bits/stl_algo.h ****       return std::__rotate(__first, __middle, __last,
1444:/usr/include/c++/7/bits/stl_algo.h **** 			   std::__iterator_category(__first));
1445:/usr/include/c++/7/bits/stl_algo.h ****     }
1446:/usr/include/c++/7/bits/stl_algo.h **** 
1447:/usr/include/c++/7/bits/stl_algo.h ****   } // namespace _V2
1448:/usr/include/c++/7/bits/stl_algo.h **** 
1449:/usr/include/c++/7/bits/stl_algo.h ****   /**
1450:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief Copy a sequence, rotating its elements.
1451:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1452:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1453:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __middle  A forward iterator.
1454:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1455:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __result  An output iterator.
1456:/usr/include/c++/7/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
1457:/usr/include/c++/7/bits/stl_algo.h ****    *
1458:/usr/include/c++/7/bits/stl_algo.h ****    *  Copies the elements of the range @p [__first,__last) to the
1459:/usr/include/c++/7/bits/stl_algo.h ****    *  range beginning at @result, rotating the copied elements by 
1460:/usr/include/c++/7/bits/stl_algo.h ****    *  @p (__middle-__first) positions so that the element at @p __middle
1461:/usr/include/c++/7/bits/stl_algo.h ****    *  is moved to @p __result, the element at @p __middle+1 is moved
1462:/usr/include/c++/7/bits/stl_algo.h ****    *  to @p __result+1 and so on for each element in the range @p
1463:/usr/include/c++/7/bits/stl_algo.h ****    *  [__first,__last).
1464:/usr/include/c++/7/bits/stl_algo.h ****    *
1465:/usr/include/c++/7/bits/stl_algo.h ****    *  Performs 
1466:/usr/include/c++/7/bits/stl_algo.h ****    *  @p *(__result+(n+(__last-__middle))%(__last-__first))=*(__first+n)
1467:/usr/include/c++/7/bits/stl_algo.h ****    *  for each @p n in the range @p [0,__last-__first).
1468:/usr/include/c++/7/bits/stl_algo.h ****   */
1469:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _OutputIterator>
1470:/usr/include/c++/7/bits/stl_algo.h ****     inline _OutputIterator
1471:/usr/include/c++/7/bits/stl_algo.h ****     rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
1472:/usr/include/c++/7/bits/stl_algo.h **** 		_ForwardIterator __last, _OutputIterator __result)
1473:/usr/include/c++/7/bits/stl_algo.h ****     {
1474:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
1475:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
1476:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
1477:/usr/include/c++/7/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type>)
1478:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __middle);
1479:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__middle, __last);
1480:/usr/include/c++/7/bits/stl_algo.h **** 
1481:/usr/include/c++/7/bits/stl_algo.h ****       return std::copy(__first, __middle,
1482:/usr/include/c++/7/bits/stl_algo.h **** 		       std::copy(__middle, __last, __result));
1483:/usr/include/c++/7/bits/stl_algo.h ****     }
1484:/usr/include/c++/7/bits/stl_algo.h **** 
1485:/usr/include/c++/7/bits/stl_algo.h ****   /// This is a helper function...
1486:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1487:/usr/include/c++/7/bits/stl_algo.h ****     _ForwardIterator
1488:/usr/include/c++/7/bits/stl_algo.h ****     __partition(_ForwardIterator __first, _ForwardIterator __last,
1489:/usr/include/c++/7/bits/stl_algo.h **** 		_Predicate __pred, forward_iterator_tag)
1490:/usr/include/c++/7/bits/stl_algo.h ****     {
1491:/usr/include/c++/7/bits/stl_algo.h ****       if (__first == __last)
1492:/usr/include/c++/7/bits/stl_algo.h **** 	return __first;
1493:/usr/include/c++/7/bits/stl_algo.h **** 
1494:/usr/include/c++/7/bits/stl_algo.h ****       while (__pred(*__first))
1495:/usr/include/c++/7/bits/stl_algo.h **** 	if (++__first == __last)
1496:/usr/include/c++/7/bits/stl_algo.h **** 	  return __first;
1497:/usr/include/c++/7/bits/stl_algo.h **** 
1498:/usr/include/c++/7/bits/stl_algo.h ****       _ForwardIterator __next = __first;
1499:/usr/include/c++/7/bits/stl_algo.h **** 
1500:/usr/include/c++/7/bits/stl_algo.h ****       while (++__next != __last)
1501:/usr/include/c++/7/bits/stl_algo.h **** 	if (__pred(*__next))
1502:/usr/include/c++/7/bits/stl_algo.h **** 	  {
1503:/usr/include/c++/7/bits/stl_algo.h **** 	    std::iter_swap(__first, __next);
1504:/usr/include/c++/7/bits/stl_algo.h **** 	    ++__first;
1505:/usr/include/c++/7/bits/stl_algo.h **** 	  }
1506:/usr/include/c++/7/bits/stl_algo.h **** 
1507:/usr/include/c++/7/bits/stl_algo.h ****       return __first;
1508:/usr/include/c++/7/bits/stl_algo.h ****     }
1509:/usr/include/c++/7/bits/stl_algo.h **** 
1510:/usr/include/c++/7/bits/stl_algo.h ****   /// This is a helper function...
1511:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Predicate>
1512:/usr/include/c++/7/bits/stl_algo.h ****     _BidirectionalIterator
1513:/usr/include/c++/7/bits/stl_algo.h ****     __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
1514:/usr/include/c++/7/bits/stl_algo.h **** 		_Predicate __pred, bidirectional_iterator_tag)
1515:/usr/include/c++/7/bits/stl_algo.h ****     {
1516:/usr/include/c++/7/bits/stl_algo.h ****       while (true)
1517:/usr/include/c++/7/bits/stl_algo.h **** 	{
1518:/usr/include/c++/7/bits/stl_algo.h **** 	  while (true)
1519:/usr/include/c++/7/bits/stl_algo.h **** 	    if (__first == __last)
1520:/usr/include/c++/7/bits/stl_algo.h **** 	      return __first;
1521:/usr/include/c++/7/bits/stl_algo.h **** 	    else if (__pred(*__first))
1522:/usr/include/c++/7/bits/stl_algo.h **** 	      ++__first;
1523:/usr/include/c++/7/bits/stl_algo.h **** 	    else
1524:/usr/include/c++/7/bits/stl_algo.h **** 	      break;
1525:/usr/include/c++/7/bits/stl_algo.h **** 	  --__last;
1526:/usr/include/c++/7/bits/stl_algo.h **** 	  while (true)
1527:/usr/include/c++/7/bits/stl_algo.h **** 	    if (__first == __last)
1528:/usr/include/c++/7/bits/stl_algo.h **** 	      return __first;
1529:/usr/include/c++/7/bits/stl_algo.h **** 	    else if (!bool(__pred(*__last)))
1530:/usr/include/c++/7/bits/stl_algo.h **** 	      --__last;
1531:/usr/include/c++/7/bits/stl_algo.h **** 	    else
1532:/usr/include/c++/7/bits/stl_algo.h **** 	      break;
1533:/usr/include/c++/7/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1534:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first;
1535:/usr/include/c++/7/bits/stl_algo.h **** 	}
1536:/usr/include/c++/7/bits/stl_algo.h ****     }
1537:/usr/include/c++/7/bits/stl_algo.h **** 
1538:/usr/include/c++/7/bits/stl_algo.h ****   // partition
1539:/usr/include/c++/7/bits/stl_algo.h **** 
1540:/usr/include/c++/7/bits/stl_algo.h ****   /// This is a helper function...
1541:/usr/include/c++/7/bits/stl_algo.h ****   /// Requires __first != __last and !__pred(__first)
1542:/usr/include/c++/7/bits/stl_algo.h ****   /// and __len == distance(__first, __last).
1543:/usr/include/c++/7/bits/stl_algo.h ****   ///
1544:/usr/include/c++/7/bits/stl_algo.h ****   /// !__pred(__first) allows us to guarantee that we don't
1545:/usr/include/c++/7/bits/stl_algo.h ****   /// move-assign an element onto itself.
1546:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
1547:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _Distance>
1548:/usr/include/c++/7/bits/stl_algo.h ****     _ForwardIterator
1549:/usr/include/c++/7/bits/stl_algo.h ****     __stable_partition_adaptive(_ForwardIterator __first,
1550:/usr/include/c++/7/bits/stl_algo.h **** 				_ForwardIterator __last,
1551:/usr/include/c++/7/bits/stl_algo.h **** 				_Predicate __pred, _Distance __len,
1552:/usr/include/c++/7/bits/stl_algo.h **** 				_Pointer __buffer,
1553:/usr/include/c++/7/bits/stl_algo.h **** 				_Distance __buffer_size)
1554:/usr/include/c++/7/bits/stl_algo.h ****     {
1555:/usr/include/c++/7/bits/stl_algo.h ****       if (__len == 1)
1556:/usr/include/c++/7/bits/stl_algo.h **** 	return __first;
1557:/usr/include/c++/7/bits/stl_algo.h **** 
1558:/usr/include/c++/7/bits/stl_algo.h ****       if (__len <= __buffer_size)
1559:/usr/include/c++/7/bits/stl_algo.h **** 	{
1560:/usr/include/c++/7/bits/stl_algo.h **** 	  _ForwardIterator __result1 = __first;
1561:/usr/include/c++/7/bits/stl_algo.h **** 	  _Pointer __result2 = __buffer;
1562:/usr/include/c++/7/bits/stl_algo.h **** 
1563:/usr/include/c++/7/bits/stl_algo.h **** 	  // The precondition guarantees that !__pred(__first), so
1564:/usr/include/c++/7/bits/stl_algo.h **** 	  // move that element to the buffer before starting the loop.
1565:/usr/include/c++/7/bits/stl_algo.h **** 	  // This ensures that we only call __pred once per element.
1566:/usr/include/c++/7/bits/stl_algo.h **** 	  *__result2 = _GLIBCXX_MOVE(*__first);
1567:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__result2;
1568:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first;
1569:/usr/include/c++/7/bits/stl_algo.h **** 	  for (; __first != __last; ++__first)
1570:/usr/include/c++/7/bits/stl_algo.h **** 	    if (__pred(__first))
1571:/usr/include/c++/7/bits/stl_algo.h **** 	      {
1572:/usr/include/c++/7/bits/stl_algo.h **** 		*__result1 = _GLIBCXX_MOVE(*__first);
1573:/usr/include/c++/7/bits/stl_algo.h **** 		++__result1;
1574:/usr/include/c++/7/bits/stl_algo.h **** 	      }
1575:/usr/include/c++/7/bits/stl_algo.h **** 	    else
1576:/usr/include/c++/7/bits/stl_algo.h **** 	      {
1577:/usr/include/c++/7/bits/stl_algo.h **** 		*__result2 = _GLIBCXX_MOVE(*__first);
1578:/usr/include/c++/7/bits/stl_algo.h **** 		++__result2;
1579:/usr/include/c++/7/bits/stl_algo.h **** 	      }
1580:/usr/include/c++/7/bits/stl_algo.h **** 
1581:/usr/include/c++/7/bits/stl_algo.h **** 	  _GLIBCXX_MOVE3(__buffer, __result2, __result1);
1582:/usr/include/c++/7/bits/stl_algo.h **** 	  return __result1;
1583:/usr/include/c++/7/bits/stl_algo.h **** 	}
1584:/usr/include/c++/7/bits/stl_algo.h **** 
1585:/usr/include/c++/7/bits/stl_algo.h ****       _ForwardIterator __middle = __first;
1586:/usr/include/c++/7/bits/stl_algo.h ****       std::advance(__middle, __len / 2);
1587:/usr/include/c++/7/bits/stl_algo.h ****       _ForwardIterator __left_split =
1588:/usr/include/c++/7/bits/stl_algo.h **** 	std::__stable_partition_adaptive(__first, __middle, __pred,
1589:/usr/include/c++/7/bits/stl_algo.h **** 					 __len / 2, __buffer,
1590:/usr/include/c++/7/bits/stl_algo.h **** 					 __buffer_size);
1591:/usr/include/c++/7/bits/stl_algo.h **** 
1592:/usr/include/c++/7/bits/stl_algo.h ****       // Advance past true-predicate values to satisfy this
1593:/usr/include/c++/7/bits/stl_algo.h ****       // function's preconditions.
1594:/usr/include/c++/7/bits/stl_algo.h ****       _Distance __right_len = __len - __len / 2;
1595:/usr/include/c++/7/bits/stl_algo.h ****       _ForwardIterator __right_split =
1596:/usr/include/c++/7/bits/stl_algo.h **** 	std::__find_if_not_n(__middle, __right_len, __pred);
1597:/usr/include/c++/7/bits/stl_algo.h **** 
1598:/usr/include/c++/7/bits/stl_algo.h ****       if (__right_len)
1599:/usr/include/c++/7/bits/stl_algo.h **** 	__right_split =
1600:/usr/include/c++/7/bits/stl_algo.h **** 	  std::__stable_partition_adaptive(__right_split, __last, __pred,
1601:/usr/include/c++/7/bits/stl_algo.h **** 					   __right_len,
1602:/usr/include/c++/7/bits/stl_algo.h **** 					   __buffer, __buffer_size);
1603:/usr/include/c++/7/bits/stl_algo.h **** 
1604:/usr/include/c++/7/bits/stl_algo.h ****       std::rotate(__left_split, __middle, __right_split);
1605:/usr/include/c++/7/bits/stl_algo.h ****       std::advance(__left_split, std::distance(__middle, __right_split));
1606:/usr/include/c++/7/bits/stl_algo.h ****       return __left_split;
1607:/usr/include/c++/7/bits/stl_algo.h ****     }
1608:/usr/include/c++/7/bits/stl_algo.h **** 
1609:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1610:/usr/include/c++/7/bits/stl_algo.h ****     _ForwardIterator
1611:/usr/include/c++/7/bits/stl_algo.h ****     __stable_partition(_ForwardIterator __first, _ForwardIterator __last,
1612:/usr/include/c++/7/bits/stl_algo.h **** 		       _Predicate __pred)
1613:/usr/include/c++/7/bits/stl_algo.h ****     {
1614:/usr/include/c++/7/bits/stl_algo.h ****       __first = std::__find_if_not(__first, __last, __pred);
1615:/usr/include/c++/7/bits/stl_algo.h **** 
1616:/usr/include/c++/7/bits/stl_algo.h ****       if (__first == __last)
1617:/usr/include/c++/7/bits/stl_algo.h **** 	return __first;
1618:/usr/include/c++/7/bits/stl_algo.h **** 
1619:/usr/include/c++/7/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
1620:/usr/include/c++/7/bits/stl_algo.h **** 	_ValueType;
1621:/usr/include/c++/7/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
1622:/usr/include/c++/7/bits/stl_algo.h **** 	_DistanceType;
1623:/usr/include/c++/7/bits/stl_algo.h **** 
1624:/usr/include/c++/7/bits/stl_algo.h ****       _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first, __last);
1625:/usr/include/c++/7/bits/stl_algo.h ****       return
1626:/usr/include/c++/7/bits/stl_algo.h **** 	std::__stable_partition_adaptive(__first, __last, __pred,
1627:/usr/include/c++/7/bits/stl_algo.h **** 					 _DistanceType(__buf.requested_size()),
1628:/usr/include/c++/7/bits/stl_algo.h **** 					 __buf.begin(),
1629:/usr/include/c++/7/bits/stl_algo.h **** 					 _DistanceType(__buf.size()));
1630:/usr/include/c++/7/bits/stl_algo.h ****     }
1631:/usr/include/c++/7/bits/stl_algo.h **** 
1632:/usr/include/c++/7/bits/stl_algo.h ****   /**
1633:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief Move elements for which a predicate is true to the beginning
1634:/usr/include/c++/7/bits/stl_algo.h ****    *         of a sequence, preserving relative ordering.
1635:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1636:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1637:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1638:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __pred    A predicate functor.
1639:/usr/include/c++/7/bits/stl_algo.h ****    *  @return  An iterator @p middle such that @p __pred(i) is true for each
1640:/usr/include/c++/7/bits/stl_algo.h ****    *  iterator @p i in the range @p [first,middle) and false for each @p i
1641:/usr/include/c++/7/bits/stl_algo.h ****    *  in the range @p [middle,last).
1642:/usr/include/c++/7/bits/stl_algo.h ****    *
1643:/usr/include/c++/7/bits/stl_algo.h ****    *  Performs the same function as @p partition() with the additional
1644:/usr/include/c++/7/bits/stl_algo.h ****    *  guarantee that the relative ordering of elements in each group is
1645:/usr/include/c++/7/bits/stl_algo.h ****    *  preserved, so any two elements @p x and @p y in the range
1646:/usr/include/c++/7/bits/stl_algo.h ****    *  @p [__first,__last) such that @p __pred(x)==__pred(y) will have the same
1647:/usr/include/c++/7/bits/stl_algo.h ****    *  relative ordering after calling @p stable_partition().
1648:/usr/include/c++/7/bits/stl_algo.h ****   */
1649:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1650:/usr/include/c++/7/bits/stl_algo.h ****     inline _ForwardIterator
1651:/usr/include/c++/7/bits/stl_algo.h ****     stable_partition(_ForwardIterator __first, _ForwardIterator __last,
1652:/usr/include/c++/7/bits/stl_algo.h **** 		     _Predicate __pred)
1653:/usr/include/c++/7/bits/stl_algo.h ****     {
1654:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
1655:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1656:/usr/include/c++/7/bits/stl_algo.h **** 				  _ForwardIterator>)
1657:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
1658:/usr/include/c++/7/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
1659:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1660:/usr/include/c++/7/bits/stl_algo.h **** 
1661:/usr/include/c++/7/bits/stl_algo.h ****       return std::__stable_partition(__first, __last,
1662:/usr/include/c++/7/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__pred_iter(__pred));
1663:/usr/include/c++/7/bits/stl_algo.h ****     }
1664:/usr/include/c++/7/bits/stl_algo.h **** 
1665:/usr/include/c++/7/bits/stl_algo.h ****   /// This is a helper function for the sort routines.
1666:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1667:/usr/include/c++/7/bits/stl_algo.h ****     void
1668:/usr/include/c++/7/bits/stl_algo.h ****     __heap_select(_RandomAccessIterator __first,
1669:/usr/include/c++/7/bits/stl_algo.h **** 		  _RandomAccessIterator __middle,
1670:/usr/include/c++/7/bits/stl_algo.h **** 		  _RandomAccessIterator __last, _Compare __comp)
1671:/usr/include/c++/7/bits/stl_algo.h ****     {
1672:/usr/include/c++/7/bits/stl_algo.h ****       std::__make_heap(__first, __middle, __comp);
1673:/usr/include/c++/7/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
1674:/usr/include/c++/7/bits/stl_algo.h **** 	if (__comp(__i, __first))
1675:/usr/include/c++/7/bits/stl_algo.h **** 	  std::__pop_heap(__first, __middle, __i, __comp);
1676:/usr/include/c++/7/bits/stl_algo.h ****     }
1677:/usr/include/c++/7/bits/stl_algo.h **** 
1678:/usr/include/c++/7/bits/stl_algo.h ****   // partial_sort
1679:/usr/include/c++/7/bits/stl_algo.h **** 
1680:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator,
1681:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _Compare>
1682:/usr/include/c++/7/bits/stl_algo.h ****     _RandomAccessIterator
1683:/usr/include/c++/7/bits/stl_algo.h ****     __partial_sort_copy(_InputIterator __first, _InputIterator __last,
1684:/usr/include/c++/7/bits/stl_algo.h **** 			_RandomAccessIterator __result_first,
1685:/usr/include/c++/7/bits/stl_algo.h **** 			_RandomAccessIterator __result_last,
1686:/usr/include/c++/7/bits/stl_algo.h **** 			_Compare __comp)
1687:/usr/include/c++/7/bits/stl_algo.h ****     {
1688:/usr/include/c++/7/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1689:/usr/include/c++/7/bits/stl_algo.h **** 	_InputValueType;
1690:/usr/include/c++/7/bits/stl_algo.h ****       typedef iterator_traits<_RandomAccessIterator> _RItTraits;
1691:/usr/include/c++/7/bits/stl_algo.h ****       typedef typename _RItTraits::difference_type _DistanceType;
1692:/usr/include/c++/7/bits/stl_algo.h **** 
1693:/usr/include/c++/7/bits/stl_algo.h ****       if (__result_first == __result_last)
1694:/usr/include/c++/7/bits/stl_algo.h **** 	return __result_last;
1695:/usr/include/c++/7/bits/stl_algo.h ****       _RandomAccessIterator __result_real_last = __result_first;
1696:/usr/include/c++/7/bits/stl_algo.h ****       while (__first != __last && __result_real_last != __result_last)
1697:/usr/include/c++/7/bits/stl_algo.h **** 	{
1698:/usr/include/c++/7/bits/stl_algo.h **** 	  *__result_real_last = *__first;
1699:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__result_real_last;
1700:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first;
1701:/usr/include/c++/7/bits/stl_algo.h **** 	}
1702:/usr/include/c++/7/bits/stl_algo.h ****       
1703:/usr/include/c++/7/bits/stl_algo.h ****       std::__make_heap(__result_first, __result_real_last, __comp);
1704:/usr/include/c++/7/bits/stl_algo.h ****       while (__first != __last)
1705:/usr/include/c++/7/bits/stl_algo.h **** 	{
1706:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__comp(__first, __result_first))
1707:/usr/include/c++/7/bits/stl_algo.h **** 	    std::__adjust_heap(__result_first, _DistanceType(0),
1708:/usr/include/c++/7/bits/stl_algo.h **** 			       _DistanceType(__result_real_last
1709:/usr/include/c++/7/bits/stl_algo.h **** 					     - __result_first),
1710:/usr/include/c++/7/bits/stl_algo.h **** 			       _InputValueType(*__first), __comp);
1711:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first;
1712:/usr/include/c++/7/bits/stl_algo.h **** 	}
1713:/usr/include/c++/7/bits/stl_algo.h ****       std::__sort_heap(__result_first, __result_real_last, __comp);
1714:/usr/include/c++/7/bits/stl_algo.h ****       return __result_real_last;
1715:/usr/include/c++/7/bits/stl_algo.h ****     }
1716:/usr/include/c++/7/bits/stl_algo.h **** 
1717:/usr/include/c++/7/bits/stl_algo.h ****   /**
1718:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief Copy the smallest elements of a sequence.
1719:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
1720:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first   An iterator.
1721:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last    Another iterator.
1722:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __result_first   A random-access iterator.
1723:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __result_last    Another random-access iterator.
1724:/usr/include/c++/7/bits/stl_algo.h ****    *  @return   An iterator indicating the end of the resulting sequence.
1725:/usr/include/c++/7/bits/stl_algo.h ****    *
1726:/usr/include/c++/7/bits/stl_algo.h ****    *  Copies and sorts the smallest N values from the range @p [__first,__last)
1727:/usr/include/c++/7/bits/stl_algo.h ****    *  to the range beginning at @p __result_first, where the number of
1728:/usr/include/c++/7/bits/stl_algo.h ****    *  elements to be copied, @p N, is the smaller of @p (__last-__first) and
1729:/usr/include/c++/7/bits/stl_algo.h ****    *  @p (__result_last-__result_first).
1730:/usr/include/c++/7/bits/stl_algo.h ****    *  After the sort if @e i and @e j are iterators in the range
1731:/usr/include/c++/7/bits/stl_algo.h ****    *  @p [__result_first,__result_first+N) such that i precedes j then
1732:/usr/include/c++/7/bits/stl_algo.h ****    *  *j<*i is false.
1733:/usr/include/c++/7/bits/stl_algo.h ****    *  The value returned is @p __result_first+N.
1734:/usr/include/c++/7/bits/stl_algo.h ****   */
1735:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator>
1736:/usr/include/c++/7/bits/stl_algo.h ****     inline _RandomAccessIterator
1737:/usr/include/c++/7/bits/stl_algo.h ****     partial_sort_copy(_InputIterator __first, _InputIterator __last,
1738:/usr/include/c++/7/bits/stl_algo.h **** 		      _RandomAccessIterator __result_first,
1739:/usr/include/c++/7/bits/stl_algo.h **** 		      _RandomAccessIterator __result_last)
1740:/usr/include/c++/7/bits/stl_algo.h ****     {
1741:/usr/include/c++/7/bits/stl_algo.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
1742:/usr/include/c++/7/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1743:/usr/include/c++/7/bits/stl_algo.h **** 	_InputValueType;
1744:/usr/include/c++/7/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1745:/usr/include/c++/7/bits/stl_algo.h **** 	_OutputValueType;
1746:/usr/include/c++/7/bits/stl_algo.h **** #endif
1747:/usr/include/c++/7/bits/stl_algo.h **** 
1748:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
1749:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
1750:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_ConvertibleConcept<_InputValueType,
1751:/usr/include/c++/7/bits/stl_algo.h **** 				  _OutputValueType>)
1752:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<_InputValueType,
1753:/usr/include/c++/7/bits/stl_algo.h **** 						     _OutputValueType>)
1754:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_OutputValueType>)
1755:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1756:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
1757:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__result_first, __result_last);
1758:/usr/include/c++/7/bits/stl_algo.h **** 
1759:/usr/include/c++/7/bits/stl_algo.h ****       return std::__partial_sort_copy(__first, __last,
1760:/usr/include/c++/7/bits/stl_algo.h **** 				      __result_first, __result_last,
1761:/usr/include/c++/7/bits/stl_algo.h **** 				      __gnu_cxx::__ops::__iter_less_iter());
1762:/usr/include/c++/7/bits/stl_algo.h ****     }
1763:/usr/include/c++/7/bits/stl_algo.h **** 
1764:/usr/include/c++/7/bits/stl_algo.h ****   /**
1765:/usr/include/c++/7/bits/stl_algo.h ****    *  @brief Copy the smallest elements of a sequence using a predicate for
1766:/usr/include/c++/7/bits/stl_algo.h ****    *         comparison.
1767:/usr/include/c++/7/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
1768:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __first   An input iterator.
1769:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __last    Another input iterator.
1770:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __result_first   A random-access iterator.
1771:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __result_last    Another random-access iterator.
1772:/usr/include/c++/7/bits/stl_algo.h ****    *  @param  __comp    A comparison functor.
1773:/usr/include/c++/7/bits/stl_algo.h ****    *  @return   An iterator indicating the end of the resulting sequence.
1774:/usr/include/c++/7/bits/stl_algo.h ****    *
1775:/usr/include/c++/7/bits/stl_algo.h ****    *  Copies and sorts the smallest N values from the range @p [__first,__last)
1776:/usr/include/c++/7/bits/stl_algo.h ****    *  to the range beginning at @p result_first, where the number of
1777:/usr/include/c++/7/bits/stl_algo.h ****    *  elements to be copied, @p N, is the smaller of @p (__last-__first) and
1778:/usr/include/c++/7/bits/stl_algo.h ****    *  @p (__result_last-__result_first).
1779:/usr/include/c++/7/bits/stl_algo.h ****    *  After the sort if @e i and @e j are iterators in the range
1780:/usr/include/c++/7/bits/stl_algo.h ****    *  @p [__result_first,__result_first+N) such that i precedes j then
1781:/usr/include/c++/7/bits/stl_algo.h ****    *  @p __comp(*j,*i) is false.
1782:/usr/include/c++/7/bits/stl_algo.h ****    *  The value returned is @p __result_first+N.
1783:/usr/include/c++/7/bits/stl_algo.h ****   */
1784:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator,
1785:/usr/include/c++/7/bits/stl_algo.h **** 	   typename _Compare>
1786:/usr/include/c++/7/bits/stl_algo.h ****     inline _RandomAccessIterator
1787:/usr/include/c++/7/bits/stl_algo.h ****     partial_sort_copy(_InputIterator __first, _InputIterator __last,
1788:/usr/include/c++/7/bits/stl_algo.h **** 		      _RandomAccessIterator __result_first,
1789:/usr/include/c++/7/bits/stl_algo.h **** 		      _RandomAccessIterator __result_last,
1790:/usr/include/c++/7/bits/stl_algo.h **** 		      _Compare __comp)
1791:/usr/include/c++/7/bits/stl_algo.h ****     {
1792:/usr/include/c++/7/bits/stl_algo.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
1793:/usr/include/c++/7/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1794:/usr/include/c++/7/bits/stl_algo.h **** 	_InputValueType;
1795:/usr/include/c++/7/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1796:/usr/include/c++/7/bits/stl_algo.h **** 	_OutputValueType;
1797:/usr/include/c++/7/bits/stl_algo.h **** #endif
1798:/usr/include/c++/7/bits/stl_algo.h **** 
1799:/usr/include/c++/7/bits/stl_algo.h ****       // concept requirements
1800:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
1801:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
1802:/usr/include/c++/7/bits/stl_algo.h **** 				  _RandomAccessIterator>)
1803:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_ConvertibleConcept<_InputValueType,
1804:/usr/include/c++/7/bits/stl_algo.h **** 				  _OutputValueType>)
1805:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
1806:/usr/include/c++/7/bits/stl_algo.h **** 				  _InputValueType, _OutputValueType>)
1807:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
1808:/usr/include/c++/7/bits/stl_algo.h **** 				  _OutputValueType, _OutputValueType>)
1809:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1810:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
1811:/usr/include/c++/7/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__result_first, __result_last);
1812:/usr/include/c++/7/bits/stl_algo.h **** 
1813:/usr/include/c++/7/bits/stl_algo.h ****       return std::__partial_sort_copy(__first, __last,
1814:/usr/include/c++/7/bits/stl_algo.h **** 				      __result_first, __result_last,
1815:/usr/include/c++/7/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_iter(__comp));
1816:/usr/include/c++/7/bits/stl_algo.h ****     }
1817:/usr/include/c++/7/bits/stl_algo.h **** 
1818:/usr/include/c++/7/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1819:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1820:/usr/include/c++/7/bits/stl_algo.h ****     void
1821:/usr/include/c++/7/bits/stl_algo.h ****     __unguarded_linear_insert(_RandomAccessIterator __last,
1822:/usr/include/c++/7/bits/stl_algo.h **** 			      _Compare __comp)
1823:/usr/include/c++/7/bits/stl_algo.h ****     {
1824:/usr/include/c++/7/bits/stl_algo.h ****       typename iterator_traits<_RandomAccessIterator>::value_type
1825:/usr/include/c++/7/bits/stl_algo.h **** 	__val = _GLIBCXX_MOVE(*__last);
1826:/usr/include/c++/7/bits/stl_algo.h ****       _RandomAccessIterator __next = __last;
1827:/usr/include/c++/7/bits/stl_algo.h ****       --__next;
1828:/usr/include/c++/7/bits/stl_algo.h ****       while (__comp(__val, __next))
1829:/usr/include/c++/7/bits/stl_algo.h **** 	{
1830:/usr/include/c++/7/bits/stl_algo.h **** 	  *__last = _GLIBCXX_MOVE(*__next);
1831:/usr/include/c++/7/bits/stl_algo.h **** 	  __last = __next;
1832:/usr/include/c++/7/bits/stl_algo.h **** 	  --__next;
1833:/usr/include/c++/7/bits/stl_algo.h **** 	}
1834:/usr/include/c++/7/bits/stl_algo.h ****       *__last = _GLIBCXX_MOVE(__val);
1835:/usr/include/c++/7/bits/stl_algo.h ****     }
1836:/usr/include/c++/7/bits/stl_algo.h **** 
1837:/usr/include/c++/7/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1838:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1839:/usr/include/c++/7/bits/stl_algo.h ****     void
1840:/usr/include/c++/7/bits/stl_algo.h ****     __insertion_sort(_RandomAccessIterator __first,
1841:/usr/include/c++/7/bits/stl_algo.h **** 		     _RandomAccessIterator __last, _Compare __comp)
1842:/usr/include/c++/7/bits/stl_algo.h ****     {
1843:/usr/include/c++/7/bits/stl_algo.h ****       if (__first == __last) return;
1844:/usr/include/c++/7/bits/stl_algo.h **** 
1845:/usr/include/c++/7/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
1846:/usr/include/c++/7/bits/stl_algo.h **** 	{
1847:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__comp(__i, __first))
1848:/usr/include/c++/7/bits/stl_algo.h **** 	    {
1849:/usr/include/c++/7/bits/stl_algo.h **** 	      typename iterator_traits<_RandomAccessIterator>::value_type
1850:/usr/include/c++/7/bits/stl_algo.h **** 		__val = _GLIBCXX_MOVE(*__i);
1851:/usr/include/c++/7/bits/stl_algo.h **** 	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
1852:/usr/include/c++/7/bits/stl_algo.h **** 	      *__first = _GLIBCXX_MOVE(__val);
1853:/usr/include/c++/7/bits/stl_algo.h **** 	    }
1854:/usr/include/c++/7/bits/stl_algo.h **** 	  else
1855:/usr/include/c++/7/bits/stl_algo.h **** 	    std::__unguarded_linear_insert(__i,
1856:/usr/include/c++/7/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
1857:/usr/include/c++/7/bits/stl_algo.h **** 	}
1858:/usr/include/c++/7/bits/stl_algo.h ****     }
1859:/usr/include/c++/7/bits/stl_algo.h **** 
1860:/usr/include/c++/7/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1861:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1862:/usr/include/c++/7/bits/stl_algo.h ****     inline void
1863:/usr/include/c++/7/bits/stl_algo.h ****     __unguarded_insertion_sort(_RandomAccessIterator __first,
1864:/usr/include/c++/7/bits/stl_algo.h **** 			       _RandomAccessIterator __last, _Compare __comp)
1865:/usr/include/c++/7/bits/stl_algo.h ****     {
1866:/usr/include/c++/7/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
1867:/usr/include/c++/7/bits/stl_algo.h **** 	std::__unguarded_linear_insert(__i,
1868:/usr/include/c++/7/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
1869:/usr/include/c++/7/bits/stl_algo.h ****     }
1870:/usr/include/c++/7/bits/stl_algo.h **** 
1871:/usr/include/c++/7/bits/stl_algo.h ****   /**
1872:/usr/include/c++/7/bits/stl_algo.h ****    *  @doctodo
1873:/usr/include/c++/7/bits/stl_algo.h ****    *  This controls some aspect of the sort routines.
1874:/usr/include/c++/7/bits/stl_algo.h ****   */
1875:/usr/include/c++/7/bits/stl_algo.h ****   enum { _S_threshold = 16 };
1876:/usr/include/c++/7/bits/stl_algo.h **** 
1877:/usr/include/c++/7/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1878:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1879:/usr/include/c++/7/bits/stl_algo.h ****     void
1880:/usr/include/c++/7/bits/stl_algo.h ****     __final_insertion_sort(_RandomAccessIterator __first,
1881:/usr/include/c++/7/bits/stl_algo.h **** 			   _RandomAccessIterator __last, _Compare __comp)
1882:/usr/include/c++/7/bits/stl_algo.h ****     {
1883:/usr/include/c++/7/bits/stl_algo.h ****       if (__last - __first > int(_S_threshold))
1884:/usr/include/c++/7/bits/stl_algo.h **** 	{
1885:/usr/include/c++/7/bits/stl_algo.h **** 	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
1886:/usr/include/c++/7/bits/stl_algo.h **** 	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
1887:/usr/include/c++/7/bits/stl_algo.h **** 					  __comp);
1888:/usr/include/c++/7/bits/stl_algo.h **** 	}
1889:/usr/include/c++/7/bits/stl_algo.h ****       else
1890:/usr/include/c++/7/bits/stl_algo.h **** 	std::__insertion_sort(__first, __last, __comp);
1891:/usr/include/c++/7/bits/stl_algo.h ****     }
1892:/usr/include/c++/7/bits/stl_algo.h **** 
1893:/usr/include/c++/7/bits/stl_algo.h ****   /// This is a helper function...
1894:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1895:/usr/include/c++/7/bits/stl_algo.h ****     _RandomAccessIterator
1896:/usr/include/c++/7/bits/stl_algo.h ****     __unguarded_partition(_RandomAccessIterator __first,
1897:/usr/include/c++/7/bits/stl_algo.h **** 			  _RandomAccessIterator __last,
1898:/usr/include/c++/7/bits/stl_algo.h **** 			  _RandomAccessIterator __pivot, _Compare __comp)
1899:/usr/include/c++/7/bits/stl_algo.h ****     {
1900:/usr/include/c++/7/bits/stl_algo.h ****       while (true)
1901:/usr/include/c++/7/bits/stl_algo.h **** 	{
1902:/usr/include/c++/7/bits/stl_algo.h **** 	  while (__comp(__first, __pivot))
1903:/usr/include/c++/7/bits/stl_algo.h **** 	    ++__first;
1904:/usr/include/c++/7/bits/stl_algo.h **** 	  --__last;
1905:/usr/include/c++/7/bits/stl_algo.h **** 	  while (__comp(__pivot, __last))
1906:/usr/include/c++/7/bits/stl_algo.h **** 	    --__last;
1907:/usr/include/c++/7/bits/stl_algo.h **** 	  if (!(__first < __last))
1908:/usr/include/c++/7/bits/stl_algo.h **** 	    return __first;
1909:/usr/include/c++/7/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1910:/usr/include/c++/7/bits/stl_algo.h **** 	  ++__first;
1911:/usr/include/c++/7/bits/stl_algo.h **** 	}
1912:/usr/include/c++/7/bits/stl_algo.h ****     }
1913:/usr/include/c++/7/bits/stl_algo.h **** 
1914:/usr/include/c++/7/bits/stl_algo.h ****   /// This is a helper function...
1915:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1916:/usr/include/c++/7/bits/stl_algo.h ****     inline _RandomAccessIterator
1917:/usr/include/c++/7/bits/stl_algo.h ****     __unguarded_partition_pivot(_RandomAccessIterator __first,
1918:/usr/include/c++/7/bits/stl_algo.h **** 				_RandomAccessIterator __last, _Compare __comp)
1919:/usr/include/c++/7/bits/stl_algo.h ****     {
1920:/usr/include/c++/7/bits/stl_algo.h ****       _RandomAccessIterator __mid = __first + (__last - __first) / 2;
1921:/usr/include/c++/7/bits/stl_algo.h ****       std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
1922:/usr/include/c++/7/bits/stl_algo.h **** 				  __comp);
1923:/usr/include/c++/7/bits/stl_algo.h ****       return std::__unguarded_partition(__first + 1, __last, __first, __comp);
1924:/usr/include/c++/7/bits/stl_algo.h ****     }
1925:/usr/include/c++/7/bits/stl_algo.h **** 
1926:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1927:/usr/include/c++/7/bits/stl_algo.h ****     inline void
1928:/usr/include/c++/7/bits/stl_algo.h ****     __partial_sort(_RandomAccessIterator __first,
1929:/usr/include/c++/7/bits/stl_algo.h **** 		   _RandomAccessIterator __middle,
1930:/usr/include/c++/7/bits/stl_algo.h **** 		   _RandomAccessIterator __last,
1931:/usr/include/c++/7/bits/stl_algo.h **** 		   _Compare __comp)
1932:/usr/include/c++/7/bits/stl_algo.h ****     {
1933:/usr/include/c++/7/bits/stl_algo.h ****       std::__heap_select(__first, __middle, __last, __comp);
1934:/usr/include/c++/7/bits/stl_algo.h ****       std::__sort_heap(__first, __middle, __comp);
1935:/usr/include/c++/7/bits/stl_algo.h ****     }
1936:/usr/include/c++/7/bits/stl_algo.h **** 
1937:/usr/include/c++/7/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1938:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size, typename _Compare>
1939:/usr/include/c++/7/bits/stl_algo.h ****     void
1940:/usr/include/c++/7/bits/stl_algo.h ****     __introsort_loop(_RandomAccessIterator __first,
 4659              		.loc 20 1940 0
 4660              		.cfi_startproc
 4661              	.LVL346:
 4662 0cc0 4157     		pushq	%r15	#
 4663              		.cfi_def_cfa_offset 16
 4664              		.cfi_offset 15, -16
 4665 0cc2 4989D7   		movq	%rdx, %r15	# __depth_limit, __depth_limit
 4666              	# /usr/include/c++/7/bits/stl_algo.h:1944:       while (__last - __first > int(_S_threshold))
1941:/usr/include/c++/7/bits/stl_algo.h **** 		     _RandomAccessIterator __last,
1942:/usr/include/c++/7/bits/stl_algo.h **** 		     _Size __depth_limit, _Compare __comp)
1943:/usr/include/c++/7/bits/stl_algo.h ****     {
1944:/usr/include/c++/7/bits/stl_algo.h ****       while (__last - __first > int(_S_threshold))
 4667              		.loc 20 1944 0
 4668 0cc5 4889F2   		movq	%rsi, %rdx	# __last, _5
 4669              	.LVL347:
 4670              	# /usr/include/c++/7/bits/stl_algo.h:1940:     __introsort_loop(_RandomAccessIterator __first,
1940:/usr/include/c++/7/bits/stl_algo.h **** 		     _RandomAccessIterator __last,
 4671              		.loc 20 1940 0
 4672 0cc8 4156     		pushq	%r14	#
 4673              		.cfi_def_cfa_offset 24
 4674              		.cfi_offset 14, -24
 4675              	# /usr/include/c++/7/bits/stl_algo.h:1944:       while (__last - __first > int(_S_threshold))
 4676              		.loc 20 1944 0
 4677 0cca 4829FA   		subq	%rdi, %rdx	# __first, _5
 4678              	# /usr/include/c++/7/bits/stl_algo.h:1940:     __introsort_loop(_RandomAccessIterator __first,
1940:/usr/include/c++/7/bits/stl_algo.h **** 		     _RandomAccessIterator __last,
 4679              		.loc 20 1940 0
 4680 0ccd 4155     		pushq	%r13	#
 4681              		.cfi_def_cfa_offset 32
 4682              		.cfi_offset 13, -32
 4683 0ccf 4154     		pushq	%r12	#
 4684              		.cfi_def_cfa_offset 40
 4685              		.cfi_offset 12, -40
 4686 0cd1 55       		pushq	%rbp	#
 4687              		.cfi_def_cfa_offset 48
 4688              		.cfi_offset 6, -48
 4689 0cd2 53       		pushq	%rbx	#
 4690              		.cfi_def_cfa_offset 56
 4691              		.cfi_offset 3, -56
 4692 0cd3 4883EC08 		subq	$8, %rsp	#,
 4693              		.cfi_def_cfa_offset 64
 4694              	# /usr/include/c++/7/bits/stl_algo.h:1944:       while (__last - __first > int(_S_threshold))
 4695              		.loc 20 1944 0
 4696 0cd7 4881FA00 		cmpq	$256, %rdx	#, _5
 4696      010000
 4697 0cde 0F8E7301 		jle	.L338	#,
 4697      0000
 4698 0ce4 4C8D6710 		leaq	16(%rdi), %r12	#, _33
 4699 0ce8 4989FE   		movq	%rdi, %r14	# __first, __first
 4700 0ceb 4889CD   		movq	%rcx, %rbp	# __comp, __comp
 4701              	.LBB2670:
 4702              	# /usr/include/c++/7/bits/stl_algo.h:1946: 	  if (__depth_limit == 0)
1945:/usr/include/c++/7/bits/stl_algo.h **** 	{
1946:/usr/include/c++/7/bits/stl_algo.h **** 	  if (__depth_limit == 0)
 4703              		.loc 20 1946 0
 4704 0cee 4D85FF   		testq	%r15, %r15	# __depth_limit
 4705 0cf1 0F84C001 		je	.L342	#,
 4705      0000
 4706              	.LVL348:
 4707              	.L316:
 4708              	.LBB2671:
 4709              	.LBB2672:
 4710              	# /usr/include/c++/7/bits/stl_algo.h:1920:       _RandomAccessIterator __mid = __first + (__last - 
1920:/usr/include/c++/7/bits/stl_algo.h ****       std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 4711              		.loc 20 1920 0
 4712 0cf7 48C1FA05 		sarq	$5, %rdx	#, tmp145
 4713              	.LBB2673:
 4714              	.LBB2674:
 4715              	.LBB2675:
 4716              	.LBB2676:
 4717              	.LBB2677:
 4718              	# Measure.h:199:     return left < right;
 199:Measure.h     **** }
 4719              		.loc 2 199 0
 4720 0cfb 498B4E10 		movq	16(%r14), %rcx	# MEM[(long unsigned int *)__first_3(D) + 16B], _92
 4721              	.LBE2677:
 4722              	.LBE2676:
 4723              	.LBE2675:
 4724              	.LBE2674:
 4725              	.LBE2673:
 4726              	.LBE2672:
 4727              	.LBE2671:
 4728              	# /usr/include/c++/7/bits/stl_algo.h:1951: 	  --__depth_limit;
1947:/usr/include/c++/7/bits/stl_algo.h **** 	    {
1948:/usr/include/c++/7/bits/stl_algo.h **** 	      std::__partial_sort(__first, __last, __last, __comp);
1949:/usr/include/c++/7/bits/stl_algo.h **** 	      return;
1950:/usr/include/c++/7/bits/stl_algo.h **** 	    }
1951:/usr/include/c++/7/bits/stl_algo.h **** 	  --__depth_limit;
 4729              		.loc 20 1951 0
 4730 0cff 4983EF01 		subq	$1, %r15	#, __depth_limit
 4731              	.LVL349:
 4732              	.LBB2705:
 4733              	.LBB2702:
 4734              	# /usr/include/c++/7/bits/stl_algo.h:1920:       _RandomAccessIterator __mid = __first + (__last - 
1920:/usr/include/c++/7/bits/stl_algo.h ****       std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 4735              		.loc 20 1920 0
 4736 0d03 48C1E204 		salq	$4, %rdx	#, tmp146
 4737 0d07 4C8B46F0 		movq	-16(%rsi), %r8	# MEM[(long unsigned int *)__last_109 + -16B], pretmp_161
 4738 0d0b 498D0416 		leaq	(%r14,%rdx), %rax	#, __mid
 4739              	.LVL350:
 4740 0d0f 498B3E   		movq	(%r14), %rdi	# MEM[(struct SortableRef &)__first_3(D)], prephitmp_147
 4741              	.LBB2692:
 4742              	.LBB2690:
 4743              	.LBB2680:
 4744              	.LBB2679:
 4745              	.LBB2678:
 4746              	# Measure.h:199:     return left < right;
 199:Measure.h     **** }
 4747              		.loc 2 199 0
 4748 0d12 488B10   		movq	(%rax), %rdx	# MEM[(long unsigned int *)__mid_54], _93
 4749              	.LVL351:
 4750 0d15 4D8B4E08 		movq	8(%r14), %r9	# MEM[(struct SortableRef &)__first_3(D) + 8], pretmp_186
 4751              	.LBE2678:
 4752              	.LBE2679:
 4753              	.LBE2680:
 4754              	# /usr/include/c++/7/bits/stl_algo.h:81:       if (__comp(__a, __b))
  81:/usr/include/c++/7/bits/stl_algo.h **** 	{
 4755              		.loc 20 81 0
 4756 0d19 4839D1   		cmpq	%rdx, %rcx	# _93, _92
 4757 0d1c 0F834E01 		jnb	.L320	#,
 4757      0000
 4758              	.LVL352:
 4759              	# /usr/include/c++/7/bits/stl_algo.h:83: 	  if (__comp(__b, __c))
  83:/usr/include/c++/7/bits/stl_algo.h **** 	    std::iter_swap(__result, __b);
 4760              		.loc 20 83 0
 4761 0d22 4C39C2   		cmpq	%r8, %rdx	# pretmp_161, _93
 4762 0d25 0F825301 		jb	.L326	#,
 4762      0000
 4763              	.LVL353:
 4764              	# /usr/include/c++/7/bits/stl_algo.h:85: 	  else if (__comp(__a, __c))
  85:/usr/include/c++/7/bits/stl_algo.h **** 	    std::iter_swap(__result, __c);
 4765              		.loc 20 85 0
 4766 0d2b 4C39C1   		cmpq	%r8, %rcx	# pretmp_161, _92
 4767 0d2e 0F826C01 		jb	.L340	#,
 4767      0000
 4768              	.LVL354:
 4769              	.L341:
 4770              	.LBB2681:
 4771              	.LBB2682:
 4772              	.LBB2683:
 4773              	# /usr/include/c++/7/bits/move.h:199:       __a = _GLIBCXX_MOVE(__b);
 199:/usr/include/c++/7/bits/move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 4774              		.loc 17 199 0
 4775 0d34 C4C17A6F 		vmovdqu	16(%r14), %xmm0	# MEM[(struct SortableRef &)__first_3(D) + 16], MEM[(struct SortableRef &)
 4775      4610
 4776              	# /usr/include/c++/7/bits/move.h:200:       __b = _GLIBCXX_MOVE(__tmp);
 4777              		.loc 17 200 0
 4778 0d3a 49897E10 		movq	%rdi, 16(%r14)	# prephitmp_147, MEM[(struct SortableRef *)__first_3(D) + 16B]
 4779 0d3e 4D894E18 		movq	%r9, 24(%r14)	# pretmp_186, MEM[(struct SortableRef *)__first_3(D) + 24B]
 4780              	# /usr/include/c++/7/bits/move.h:199:       __a = _GLIBCXX_MOVE(__b);
 199:/usr/include/c++/7/bits/move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 4781              		.loc 17 199 0
 4782 0d42 C4C17811 		vmovups	%xmm0, (%r14)	# MEM[(struct SortableRef &)__first_3(D) + 16], *__first_3(D)
 4782      06
 4783              	.LVL355:
 4784 0d47 488B7EF0 		movq	-16(%rsi), %rdi	# MEM[(long unsigned int *)__last_109 + -16B], prephitmp_147
 4785              	.LVL356:
 4786              	.L322:
 4787 0d4b 498B16   		movq	(%r14), %rdx	# MEM[(long unsigned int *)__first_3(D)], prephitmp_174
 4788 0d4e 4C89E3   		movq	%r12, %rbx	# _33, ivtmp.616
 4789              	.LBE2683:
 4790              	.LBE2682:
 4791              	.LBE2681:
 4792              	.LBE2690:
 4793              	.LBE2692:
 4794              	.LBE2702:
 4795              	.LBE2705:
 4796              	# /usr/include/c++/7/bits/stl_algo.h:1946: 	  if (__depth_limit == 0)
1946:/usr/include/c++/7/bits/stl_algo.h **** 	    {
 4797              		.loc 20 1946 0
 4798 0d51 4889F0   		movq	%rsi, %rax	# __last, __last
 4799              	.LVL357:
 4800              		.p2align 4,,10
 4801 0d54 0F1F4000 		.p2align 3
 4802              	.L324:
 4803              	.LBB2706:
 4804              	.LBB2703:
 4805              	.LBB2693:
 4806              	.LBB2694:
 4807              	.LBB2695:
 4808              	.LBB2696:
 4809              	.LBB2697:
 4810              	# Measure.h:199:     return left < right;
 199:Measure.h     **** }
 4811              		.loc 2 199 0
 4812 0d58 488B0B   		movq	(%rbx), %rcx	# MEM[base: __first_59, offset: 0B], _107
 4813 0d5b 4989DD   		movq	%rbx, %r13	# ivtmp.616, __first
 4814              	.LVL358:
 4815              	.LBE2697:
 4816              	.LBE2696:
 4817              	.LBE2695:
 4818              	# /usr/include/c++/7/bits/stl_algo.h:1902: 	  while (__comp(__first, __pivot))
1902:/usr/include/c++/7/bits/stl_algo.h **** 	    ++__first;
 4819              		.loc 20 1902 0
 4820 0d5e 4839D1   		cmpq	%rdx, %rcx	# prephitmp_174, _107
 4821 0d61 7235     		jb	.L327	#,
 4822 0d63 4883E810 		subq	$16, %rax	#, __last
 4823              	.LVL359:
 4824              	# /usr/include/c++/7/bits/stl_algo.h:1905: 	  while (__comp(__pivot, __last))
1905:/usr/include/c++/7/bits/stl_algo.h **** 	    --__last;
 4825              		.loc 20 1905 0
 4826 0d67 4839D7   		cmpq	%rdx, %rdi	# prephitmp_174, prephitmp_147
 4827 0d6a 760D     		jbe	.L328	#,
 4828              	.LVL360:
 4829 0d6c 0F1F4000 		.p2align 4,,10
 4830              		.p2align 3
 4831              	.L329:
 4832              	# /usr/include/c++/7/bits/stl_algo.h:1906: 	    --__last;
1906:/usr/include/c++/7/bits/stl_algo.h **** 	  if (!(__first < __last))
 4833              		.loc 20 1906 0
 4834 0d70 4883E810 		subq	$16, %rax	#, __last
 4835              	.LVL361:
 4836              	# /usr/include/c++/7/bits/stl_algo.h:1905: 	  while (__comp(__pivot, __last))
1905:/usr/include/c++/7/bits/stl_algo.h **** 	    --__last;
 4837              		.loc 20 1905 0
 4838 0d74 483910   		cmpq	%rdx, (%rax)	# prephitmp_174, MEM[base: __last_66, offset: 0B]
 4839 0d77 77F7     		ja	.L329	#,
 4840              	.LVL362:
 4841              	.L328:
 4842              	# /usr/include/c++/7/bits/stl_algo.h:1907: 	  if (!(__first < __last))
1907:/usr/include/c++/7/bits/stl_algo.h **** 	    return __first;
 4843              		.loc 20 1907 0
 4844 0d79 4839C3   		cmpq	%rax, %rbx	# __last, ivtmp.616
 4845 0d7c 7322     		jnb	.L343	#,
 4846              	.LVL363:
 4847              	.LBB2698:
 4848              	.LBB2699:
 4849              	.LBB2700:
 4850              	# /usr/include/c++/7/bits/move.h:198:       _Tp __tmp = _GLIBCXX_MOVE(__a);
 198:/usr/include/c++/7/bits/move.h ****       __a = _GLIBCXX_MOVE(__b);
 4851              		.loc 17 198 0
 4852 0d7e 488B5308 		movq	8(%rbx), %rdx	# MEM[base: __first_59, offset: 8], __tmp$reference
 4853              	.LVL364:
 4854              	# /usr/include/c++/7/bits/move.h:199:       __a = _GLIBCXX_MOVE(__b);
 199:/usr/include/c++/7/bits/move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 4855              		.loc 17 199 0
 4856 0d82 C5FA6F00 		vmovdqu	(%rax), %xmm0	# *__last_158, *__last_158
 4857 0d86 C5F81103 		vmovups	%xmm0, (%rbx)	# *__last_158, MEM[base: __first_59, offset: 0B]
 4858 0d8a 488B78F0 		movq	-16(%rax), %rdi	# MEM[(long unsigned int *)__last_158 + -16B], prephitmp_147
 4859              	# /usr/include/c++/7/bits/move.h:200:       __b = _GLIBCXX_MOVE(__tmp);
 4860              		.loc 17 200 0
 4861 0d8e 488908   		movq	%rcx, (%rax)	# _107, MEM[(struct SortableRef *)__last_158]
 4862 0d91 48895008 		movq	%rdx, 8(%rax)	# __tmp$reference, MEM[(struct SortableRef *)__last_158 + 8B]
 4863              	.LVL365:
 4864 0d95 498B16   		movq	(%r14), %rdx	# MEM[(long unsigned int *)__first_3(D)], prephitmp_174
 4865              	.LVL366:
 4866              	.L327:
 4867 0d98 4883C310 		addq	$16, %rbx	#, ivtmp.616
 4868 0d9c EBBA     		jmp	.L324	#
 4869              	.LVL367:
 4870 0d9e 6690     		.p2align 4,,10
 4871              		.p2align 3
 4872              	.L343:
 4873              	.LBE2700:
 4874              	.LBE2699:
 4875              	.LBE2698:
 4876              	.LBE2694:
 4877              	.LBE2693:
 4878              	.LBE2703:
 4879              	.LBE2706:
 4880              	# /usr/include/c++/7/bits/stl_algo.h:1954: 	  std::__introsort_loop(__cut, __last, __depth_limit, _
1952:/usr/include/c++/7/bits/stl_algo.h **** 	  _RandomAccessIterator __cut =
1953:/usr/include/c++/7/bits/stl_algo.h **** 	    std::__unguarded_partition_pivot(__first, __last, __comp);
1954:/usr/include/c++/7/bits/stl_algo.h **** 	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 4881              		.loc 20 1954 0
 4882 0da0 4C89FA   		movq	%r15, %rdx	# __depth_limit,
 4883 0da3 4889E9   		movq	%rbp, %rcx	# __comp,
 4884 0da6 4889DF   		movq	%rbx, %rdi	# ivtmp.616,
 4885 0da9 E812FFFF 		call	_ZSt16__introsort_loopIP11SortableReflN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRS0_S5_EEEEvT_S9_
 4885      FF
 4886              	.LVL368:
 4887              	.LBE2670:
 4888              	# /usr/include/c++/7/bits/stl_algo.h:1944:       while (__last - __first > int(_S_threshold))
1944:/usr/include/c++/7/bits/stl_algo.h **** 	{
 4889              		.loc 20 1944 0
 4890 0dae 4889DA   		movq	%rbx, %rdx	# ivtmp.616, _5
 4891 0db1 4C29F2   		subq	%r14, %rdx	# __first, _5
 4892 0db4 4881FA00 		cmpq	$256, %rdx	#, _5
 4892      010000
 4893 0dbb 0F8E9600 		jle	.L338	#,
 4893      0000
 4894 0dc1 4889DE   		movq	%rbx, %rsi	# ivtmp.616, __last
 4895              	.LBB2717:
 4896              	# /usr/include/c++/7/bits/stl_algo.h:1946: 	  if (__depth_limit == 0)
1946:/usr/include/c++/7/bits/stl_algo.h **** 	    {
 4897              		.loc 20 1946 0
 4898 0dc4 4D85FF   		testq	%r15, %r15	# __depth_limit
 4899 0dc7 0F852AFF 		jne	.L316	#,
 4899      FFFF
 4900              	.LVL369:
 4901              	.L314:
 4902              	.LBB2707:
 4903              	.LBB2708:
 4904              	.LBB2709:
 4905              	.LBB2710:
 4906              	# /usr/include/c++/7/bits/stl_heap.h:337:       const _DistanceType __len = __last - __first;
 240:/usr/include/c++/7/bits/stl_heap.h **** 
 241:/usr/include/c++/7/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Compare>
 242:/usr/include/c++/7/bits/stl_heap.h ****     inline void
 243:/usr/include/c++/7/bits/stl_heap.h ****     __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 244:/usr/include/c++/7/bits/stl_heap.h **** 	       _RandomAccessIterator __result, _Compare& __comp)
 245:/usr/include/c++/7/bits/stl_heap.h ****     {
 246:/usr/include/c++/7/bits/stl_heap.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
 247:/usr/include/c++/7/bits/stl_heap.h **** 	_ValueType;
 248:/usr/include/c++/7/bits/stl_heap.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 249:/usr/include/c++/7/bits/stl_heap.h **** 	_DistanceType;
 250:/usr/include/c++/7/bits/stl_heap.h **** 
 251:/usr/include/c++/7/bits/stl_heap.h ****       _ValueType __value = _GLIBCXX_MOVE(*__result);
 252:/usr/include/c++/7/bits/stl_heap.h ****       *__result = _GLIBCXX_MOVE(*__first);
 253:/usr/include/c++/7/bits/stl_heap.h ****       std::__adjust_heap(__first, _DistanceType(0),
 254:/usr/include/c++/7/bits/stl_heap.h **** 			 _DistanceType(__last - __first),
 255:/usr/include/c++/7/bits/stl_heap.h **** 			 _GLIBCXX_MOVE(__value), __comp);
 256:/usr/include/c++/7/bits/stl_heap.h ****     }
 257:/usr/include/c++/7/bits/stl_heap.h **** 
 258:/usr/include/c++/7/bits/stl_heap.h ****   /**
 259:/usr/include/c++/7/bits/stl_heap.h ****    *  @brief  Pop an element off a heap.
 260:/usr/include/c++/7/bits/stl_heap.h ****    *  @param  __first  Start of heap.
 261:/usr/include/c++/7/bits/stl_heap.h ****    *  @param  __last   End of heap.
 262:/usr/include/c++/7/bits/stl_heap.h ****    *  @pre    [__first, __last) is a valid, non-empty range.
 263:/usr/include/c++/7/bits/stl_heap.h ****    *  @ingroup heap_algorithms
 264:/usr/include/c++/7/bits/stl_heap.h ****    *
 265:/usr/include/c++/7/bits/stl_heap.h ****    *  This operation pops the top of the heap.  The elements __first
 266:/usr/include/c++/7/bits/stl_heap.h ****    *  and __last-1 are swapped and [__first,__last-1) is made into a
 267:/usr/include/c++/7/bits/stl_heap.h ****    *  heap.
 268:/usr/include/c++/7/bits/stl_heap.h ****   */
 269:/usr/include/c++/7/bits/stl_heap.h ****   template<typename _RandomAccessIterator>
 270:/usr/include/c++/7/bits/stl_heap.h ****     inline void
 271:/usr/include/c++/7/bits/stl_heap.h ****     pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
 272:/usr/include/c++/7/bits/stl_heap.h ****     {
 273:/usr/include/c++/7/bits/stl_heap.h ****       // concept requirements
 274:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
 275:/usr/include/c++/7/bits/stl_heap.h **** 	    _RandomAccessIterator>)
 276:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
 277:/usr/include/c++/7/bits/stl_heap.h **** 	typename iterator_traits<_RandomAccessIterator>::value_type>)
 278:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_non_empty_range(__first, __last);
 279:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_valid_range(__first, __last);
 280:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_irreflexive(__first, __last);
 281:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_heap(__first, __last);
 282:/usr/include/c++/7/bits/stl_heap.h **** 
 283:/usr/include/c++/7/bits/stl_heap.h ****       if (__last - __first > 1)
 284:/usr/include/c++/7/bits/stl_heap.h **** 	{
 285:/usr/include/c++/7/bits/stl_heap.h **** 	  --__last;
 286:/usr/include/c++/7/bits/stl_heap.h **** 	  __gnu_cxx::__ops::_Iter_less_iter __comp;
 287:/usr/include/c++/7/bits/stl_heap.h **** 	  std::__pop_heap(__first, __last, __last, __comp);
 288:/usr/include/c++/7/bits/stl_heap.h **** 	}
 289:/usr/include/c++/7/bits/stl_heap.h ****     }
 290:/usr/include/c++/7/bits/stl_heap.h **** 
 291:/usr/include/c++/7/bits/stl_heap.h ****   /**
 292:/usr/include/c++/7/bits/stl_heap.h ****    *  @brief  Pop an element off a heap using comparison functor.
 293:/usr/include/c++/7/bits/stl_heap.h ****    *  @param  __first  Start of heap.
 294:/usr/include/c++/7/bits/stl_heap.h ****    *  @param  __last   End of heap.
 295:/usr/include/c++/7/bits/stl_heap.h ****    *  @param  __comp   Comparison functor to use.
 296:/usr/include/c++/7/bits/stl_heap.h ****    *  @ingroup heap_algorithms
 297:/usr/include/c++/7/bits/stl_heap.h ****    *
 298:/usr/include/c++/7/bits/stl_heap.h ****    *  This operation pops the top of the heap.  The elements __first
 299:/usr/include/c++/7/bits/stl_heap.h ****    *  and __last-1 are swapped and [__first,__last-1) is made into a
 300:/usr/include/c++/7/bits/stl_heap.h ****    *  heap.  Comparisons are made using comp.
 301:/usr/include/c++/7/bits/stl_heap.h ****   */
 302:/usr/include/c++/7/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Compare>
 303:/usr/include/c++/7/bits/stl_heap.h ****     inline void
 304:/usr/include/c++/7/bits/stl_heap.h ****     pop_heap(_RandomAccessIterator __first,
 305:/usr/include/c++/7/bits/stl_heap.h **** 	     _RandomAccessIterator __last, _Compare __comp)
 306:/usr/include/c++/7/bits/stl_heap.h ****     {
 307:/usr/include/c++/7/bits/stl_heap.h ****       // concept requirements
 308:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
 309:/usr/include/c++/7/bits/stl_heap.h **** 	    _RandomAccessIterator>)
 310:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_valid_range(__first, __last);
 311:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
 312:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_non_empty_range(__first, __last);
 313:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_heap_pred(__first, __last, __comp);
 314:/usr/include/c++/7/bits/stl_heap.h **** 
 315:/usr/include/c++/7/bits/stl_heap.h ****       if (__last - __first > 1)
 316:/usr/include/c++/7/bits/stl_heap.h **** 	{
 317:/usr/include/c++/7/bits/stl_heap.h **** 	  typedef __decltype(__comp) _Cmp;
 318:/usr/include/c++/7/bits/stl_heap.h **** 	  __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(_GLIBCXX_MOVE(__comp));
 319:/usr/include/c++/7/bits/stl_heap.h **** 	  --__last;
 320:/usr/include/c++/7/bits/stl_heap.h **** 	  std::__pop_heap(__first, __last, __last, __cmp);
 321:/usr/include/c++/7/bits/stl_heap.h **** 	}
 322:/usr/include/c++/7/bits/stl_heap.h ****     }
 323:/usr/include/c++/7/bits/stl_heap.h **** 
 324:/usr/include/c++/7/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Compare>
 325:/usr/include/c++/7/bits/stl_heap.h ****     void
 326:/usr/include/c++/7/bits/stl_heap.h ****     __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 327:/usr/include/c++/7/bits/stl_heap.h **** 		_Compare& __comp)
 328:/usr/include/c++/7/bits/stl_heap.h ****     {
 329:/usr/include/c++/7/bits/stl_heap.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
 330:/usr/include/c++/7/bits/stl_heap.h **** 	  _ValueType;
 331:/usr/include/c++/7/bits/stl_heap.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 332:/usr/include/c++/7/bits/stl_heap.h **** 	  _DistanceType;
 333:/usr/include/c++/7/bits/stl_heap.h **** 
 334:/usr/include/c++/7/bits/stl_heap.h ****       if (__last - __first < 2)
 335:/usr/include/c++/7/bits/stl_heap.h **** 	return;
 336:/usr/include/c++/7/bits/stl_heap.h **** 
 337:/usr/include/c++/7/bits/stl_heap.h ****       const _DistanceType __len = __last - __first;
 4907              		.loc 18 337 0
 4908 0dcd 4889D3   		movq	%rdx, %rbx	# _5, _5
 4909 0dd0 48C1FB04 		sarq	$4, %rbx	#, _5
 4910              	.LVL370:
 4911              	# /usr/include/c++/7/bits/stl_heap.h:338:       _DistanceType __parent = (__len - 2) / 2;
 338:/usr/include/c++/7/bits/stl_heap.h ****       _DistanceType __parent = (__len - 2) / 2;
 4912              		.loc 18 338 0
 4913 0dd4 4C8D7BFE 		leaq	-2(%rbx), %r15	#, tmp129
 4914              	.LVL371:
 4915 0dd8 49D1FF   		sarq	%r15	# __parent
 4916              	.LVL372:
 4917 0ddb 4D89FC   		movq	%r15, %r12	# __parent, tmp130
 4918 0dde 49C1E404 		salq	$4, %r12	#, tmp130
 4919 0de2 4D01F4   		addq	%r14, %r12	# __first, ivtmp.605
 4920 0de5 EB0D     		jmp	.L318	#
 4921              	.LVL373:
 4922 0de7 660F1F84 		.p2align 4,,10
 4922      00000000 
 4922      00
 4923              		.p2align 3
 4924              	.L344:
 4925              	.LBB2711:
 4926              	# /usr/include/c++/7/bits/stl_heap.h:346: 	  __parent--;
 339:/usr/include/c++/7/bits/stl_heap.h ****       while (true)
 340:/usr/include/c++/7/bits/stl_heap.h **** 	{
 341:/usr/include/c++/7/bits/stl_heap.h **** 	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 342:/usr/include/c++/7/bits/stl_heap.h **** 	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 343:/usr/include/c++/7/bits/stl_heap.h **** 			     __comp);
 344:/usr/include/c++/7/bits/stl_heap.h **** 	  if (__parent == 0)
 345:/usr/include/c++/7/bits/stl_heap.h **** 	    return;
 346:/usr/include/c++/7/bits/stl_heap.h **** 	  __parent--;
 4927              		.loc 18 346 0
 4928 0df0 4983EF01 		subq	$1, %r15	#, __parent
 4929              	.LVL374:
 4930              	.L318:
 4931              	# /usr/include/c++/7/bits/stl_heap.h:341: 	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __paren
 341:/usr/include/c++/7/bits/stl_heap.h **** 	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 4932              		.loc 18 341 0
 4933 0df4 498B0C24 		movq	(%r12), %rcx	# MEM[base: _13, offset: 0], __value
 4934              	.LVL375:
 4935              	# /usr/include/c++/7/bits/stl_heap.h:342: 	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_
 342:/usr/include/c++/7/bits/stl_heap.h **** 			     __comp);
 4936              		.loc 18 342 0
 4937 0df8 4989E9   		movq	%rbp, %r9	# __comp,
 4938 0dfb 4889DA   		movq	%rbx, %rdx	# tmp128,
 4939 0dfe 4C89FE   		movq	%r15, %rsi	# __parent,
 4940 0e01 4D8B4424 		movq	8(%r12), %r8	# MEM[base: _13, offset: 0], tmp157
 4940      08
 4941 0e06 4C89F7   		movq	%r14, %rdi	# __first,
 4942 0e09 4983EC10 		subq	$16, %r12	#, ivtmp.605
 4943 0e0d E8000000 		call	_ZSt13__adjust_heapIP11SortableReflS0_N9__gnu_cxx5__ops15_Iter_comp_iterIPFbRS0_S5_EEEEvT_T0_
 4943      00
 4944              	.LVL376:
 4945              	# /usr/include/c++/7/bits/stl_heap.h:344: 	  if (__parent == 0)
 344:/usr/include/c++/7/bits/stl_heap.h **** 	    return;
 4946              		.loc 18 344 0
 4947 0e12 4D85FF   		testq	%r15, %r15	# __parent
 4948 0e15 75D9     		jne	.L344	#,
 4949              	.LVL377:
 4950 0e17 660F1F84 		.p2align 4,,10
 4950      00000000 
 4950      00
 4951              		.p2align 3
 4952              	.L319:
 4953              	.LBE2711:
 4954              	.LBE2710:
 4955              	.LBE2709:
 4956              	.LBE2708:
 4957              	.LBB2712:
 4958              	.LBB2713:
 4959              	# /usr/include/c++/7/bits/stl_heap.h:407: 	  --__last;
 347:/usr/include/c++/7/bits/stl_heap.h **** 	}
 348:/usr/include/c++/7/bits/stl_heap.h ****     }
 349:/usr/include/c++/7/bits/stl_heap.h ****   
 350:/usr/include/c++/7/bits/stl_heap.h ****   /**
 351:/usr/include/c++/7/bits/stl_heap.h ****    *  @brief  Construct a heap over a range.
 352:/usr/include/c++/7/bits/stl_heap.h ****    *  @param  __first  Start of heap.
 353:/usr/include/c++/7/bits/stl_heap.h ****    *  @param  __last   End of heap.
 354:/usr/include/c++/7/bits/stl_heap.h ****    *  @ingroup heap_algorithms
 355:/usr/include/c++/7/bits/stl_heap.h ****    *
 356:/usr/include/c++/7/bits/stl_heap.h ****    *  This operation makes the elements in [__first,__last) into a heap.
 357:/usr/include/c++/7/bits/stl_heap.h ****   */
 358:/usr/include/c++/7/bits/stl_heap.h ****   template<typename _RandomAccessIterator>
 359:/usr/include/c++/7/bits/stl_heap.h ****     inline void
 360:/usr/include/c++/7/bits/stl_heap.h ****     make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
 361:/usr/include/c++/7/bits/stl_heap.h ****     {
 362:/usr/include/c++/7/bits/stl_heap.h ****       // concept requirements
 363:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
 364:/usr/include/c++/7/bits/stl_heap.h **** 	    _RandomAccessIterator>)
 365:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
 366:/usr/include/c++/7/bits/stl_heap.h **** 	    typename iterator_traits<_RandomAccessIterator>::value_type>)
 367:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_valid_range(__first, __last);
 368:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_irreflexive(__first, __last);
 369:/usr/include/c++/7/bits/stl_heap.h **** 
 370:/usr/include/c++/7/bits/stl_heap.h ****       __gnu_cxx::__ops::_Iter_less_iter __comp;
 371:/usr/include/c++/7/bits/stl_heap.h ****       std::__make_heap(__first, __last, __comp);
 372:/usr/include/c++/7/bits/stl_heap.h ****     }
 373:/usr/include/c++/7/bits/stl_heap.h **** 
 374:/usr/include/c++/7/bits/stl_heap.h ****   /**
 375:/usr/include/c++/7/bits/stl_heap.h ****    *  @brief  Construct a heap over a range using comparison functor.
 376:/usr/include/c++/7/bits/stl_heap.h ****    *  @param  __first  Start of heap.
 377:/usr/include/c++/7/bits/stl_heap.h ****    *  @param  __last   End of heap.
 378:/usr/include/c++/7/bits/stl_heap.h ****    *  @param  __comp   Comparison functor to use.
 379:/usr/include/c++/7/bits/stl_heap.h ****    *  @ingroup heap_algorithms
 380:/usr/include/c++/7/bits/stl_heap.h ****    *
 381:/usr/include/c++/7/bits/stl_heap.h ****    *  This operation makes the elements in [__first,__last) into a heap.
 382:/usr/include/c++/7/bits/stl_heap.h ****    *  Comparisons are made using __comp.
 383:/usr/include/c++/7/bits/stl_heap.h ****   */
 384:/usr/include/c++/7/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Compare>
 385:/usr/include/c++/7/bits/stl_heap.h ****     inline void
 386:/usr/include/c++/7/bits/stl_heap.h ****     make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 387:/usr/include/c++/7/bits/stl_heap.h **** 	      _Compare __comp)
 388:/usr/include/c++/7/bits/stl_heap.h ****     {
 389:/usr/include/c++/7/bits/stl_heap.h ****       // concept requirements
 390:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
 391:/usr/include/c++/7/bits/stl_heap.h **** 	    _RandomAccessIterator>)
 392:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_valid_range(__first, __last);
 393:/usr/include/c++/7/bits/stl_heap.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
 394:/usr/include/c++/7/bits/stl_heap.h **** 
 395:/usr/include/c++/7/bits/stl_heap.h ****       typedef __decltype(__comp) _Cmp;
 396:/usr/include/c++/7/bits/stl_heap.h ****       __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(_GLIBCXX_MOVE(__comp));
 397:/usr/include/c++/7/bits/stl_heap.h ****       std::__make_heap(__first, __last, __cmp);
 398:/usr/include/c++/7/bits/stl_heap.h ****     }
 399:/usr/include/c++/7/bits/stl_heap.h **** 
 400:/usr/include/c++/7/bits/stl_heap.h ****   template<typename _RandomAccessIterator, typename _Compare>
 401:/usr/include/c++/7/bits/stl_heap.h ****     void
 402:/usr/include/c++/7/bits/stl_heap.h ****     __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 403:/usr/include/c++/7/bits/stl_heap.h **** 		_Compare& __comp)
 404:/usr/include/c++/7/bits/stl_heap.h ****     {
 405:/usr/include/c++/7/bits/stl_heap.h ****       while (__last - __first > 1)
 406:/usr/include/c++/7/bits/stl_heap.h **** 	{
 407:/usr/include/c++/7/bits/stl_heap.h **** 	  --__last;
 4960              		.loc 18 407 0
 4961 0e20 4983ED10 		subq	$16, %r13	#, __first
 4962              	.LVL378:
 4963              	.LBB2714:
 4964              	.LBB2715:
 4965              	# /usr/include/c++/7/bits/stl_heap.h:251:       _ValueType __value = _GLIBCXX_MOVE(*__result);
 251:/usr/include/c++/7/bits/stl_heap.h ****       *__result = _GLIBCXX_MOVE(*__first);
 4966              		.loc 18 251 0
 4967 0e24 498B4D00 		movq	0(%r13), %rcx	# MEM[base: __last_24, offset: 0], __value
 4968              	.LVL379:
 4969              	# /usr/include/c++/7/bits/stl_heap.h:253:       std::__adjust_heap(__first, _DistanceType(0),
 253:/usr/include/c++/7/bits/stl_heap.h **** 			 _DistanceType(__last - __first),
 4970              		.loc 18 253 0
 4971 0e28 31F6     		xorl	%esi, %esi	#
 4972 0e2a 4989E9   		movq	%rbp, %r9	# __comp,
 4973              	# /usr/include/c++/7/bits/stl_heap.h:251:       _ValueType __value = _GLIBCXX_MOVE(*__result);
 251:/usr/include/c++/7/bits/stl_heap.h ****       *__result = _GLIBCXX_MOVE(*__first);
 4974              		.loc 18 251 0
 4975 0e2d 4D8B4508 		movq	8(%r13), %r8	# MEM[base: __last_24, offset: 0], __value
 4976              	# /usr/include/c++/7/bits/stl_heap.h:254: 			 _DistanceType(__last - __first),
 254:/usr/include/c++/7/bits/stl_heap.h **** 			 _GLIBCXX_MOVE(__value), __comp);
 4977              		.loc 18 254 0
 4978 0e31 4C89EB   		movq	%r13, %rbx	# __first, _26
 4979              	# /usr/include/c++/7/bits/stl_heap.h:253:       std::__adjust_heap(__first, _DistanceType(0),
 253:/usr/include/c++/7/bits/stl_heap.h **** 			 _DistanceType(__last - __first),
 4980              		.loc 18 253 0
 4981 0e34 4C89F7   		movq	%r14, %rdi	# __first,
 4982              	# /usr/include/c++/7/bits/stl_heap.h:254: 			 _DistanceType(__last - __first),
 254:/usr/include/c++/7/bits/stl_heap.h **** 			 _GLIBCXX_MOVE(__value), __comp);
 4983              		.loc 18 254 0
 4984 0e37 4C29F3   		subq	%r14, %rbx	# __first, _26
 4985              	# /usr/include/c++/7/bits/stl_heap.h:252:       *__result = _GLIBCXX_MOVE(*__first);
 252:/usr/include/c++/7/bits/stl_heap.h ****       std::__adjust_heap(__first, _DistanceType(0),
 4986              		.loc 18 252 0
 4987 0e3a C4C17A6F 		vmovdqu	(%r14), %xmm0	# *__first_3(D), *__first_3(D)
 4987      06
 4988              	# /usr/include/c++/7/bits/stl_heap.h:254: 			 _DistanceType(__last - __first),
 254:/usr/include/c++/7/bits/stl_heap.h **** 			 _GLIBCXX_MOVE(__value), __comp);
 4989              		.loc 18 254 0
 4990 0e3f 4889DA   		movq	%rbx, %rdx	# _26, tmp141
 4991 0e42 48C1FA04 		sarq	$4, %rdx	#, tmp141
 4992              	# /usr/include/c++/7/bits/stl_heap.h:252:       *__result = _GLIBCXX_MOVE(*__first);
 252:/usr/include/c++/7/bits/stl_heap.h ****       std::__adjust_heap(__first, _DistanceType(0),
 4993              		.loc 18 252 0
 4994 0e46 C4C17811 		vmovups	%xmm0, 0(%r13)	# *__first_3(D), MEM[base: __last_24, offset: 0B]
 4994      4500
 4995              	# /usr/include/c++/7/bits/stl_heap.h:253:       std::__adjust_heap(__first, _DistanceType(0),
 253:/usr/include/c++/7/bits/stl_heap.h **** 			 _DistanceType(__last - __first),
 4996              		.loc 18 253 0
 4997 0e4c E8000000 		call	_ZSt13__adjust_heapIP11SortableReflS0_N9__gnu_cxx5__ops15_Iter_comp_iterIPFbRS0_S5_EEEEvT_T0_
 4997      00
 4998              	.LVL380:
 4999              	.LBE2715:
 5000              	.LBE2714:
 5001              	# /usr/include/c++/7/bits/stl_heap.h:405:       while (__last - __first > 1)
 405:/usr/include/c++/7/bits/stl_heap.h **** 	{
 5002              		.loc 18 405 0
 5003 0e51 4883FB10 		cmpq	$16, %rbx	#, _26
 5004 0e55 7FC9     		jg	.L319	#,
 5005              	.LVL381:
 5006              	.L338:
 5007              	.LBE2713:
 5008              	.LBE2712:
 5009              	.LBE2707:
 5010              	.LBE2717:
 5011              	# /usr/include/c++/7/bits/stl_algo.h:1957:     }
1955:/usr/include/c++/7/bits/stl_algo.h **** 	  __last = __cut;
1956:/usr/include/c++/7/bits/stl_algo.h **** 	}
1957:/usr/include/c++/7/bits/stl_algo.h ****     }
 5012              		.loc 20 1957 0
 5013 0e57 4883C408 		addq	$8, %rsp	#,
 5014              		.cfi_remember_state
 5015              		.cfi_def_cfa_offset 56
 5016 0e5b 5B       		popq	%rbx	#
 5017              		.cfi_def_cfa_offset 48
 5018 0e5c 5D       		popq	%rbp	#
 5019              		.cfi_def_cfa_offset 40
 5020              	.LVL382:
 5021 0e5d 415C     		popq	%r12	#
 5022              		.cfi_def_cfa_offset 32
 5023 0e5f 415D     		popq	%r13	#
 5024              		.cfi_def_cfa_offset 24
 5025 0e61 415E     		popq	%r14	#
 5026              		.cfi_def_cfa_offset 16
 5027 0e63 415F     		popq	%r15	#
 5028              		.cfi_def_cfa_offset 8
 5029 0e65 C3       		ret
 5030              	.LVL383:
 5031 0e66 662E0F1F 		.p2align 4,,10
 5031      84000000 
 5031      0000
 5032              		.p2align 3
 5033              	.L320:
 5034              		.cfi_restore_state
 5035              	.LBB2718:
 5036              	.LBB2716:
 5037              	.LBB2704:
 5038              	.LBB2701:
 5039              	.LBB2691:
 5040              	# /usr/include/c++/7/bits/stl_algo.h:90:       else if (__comp(__a, __c))
  90:/usr/include/c++/7/bits/stl_algo.h **** 	std::iter_swap(__result, __a);
 5041              		.loc 20 90 0
 5042 0e70 4C39C1   		cmpq	%r8, %rcx	# pretmp_161, _92
 5043 0e73 0F82BBFE 		jb	.L341	#,
 5043      FFFF
 5044              	.LVL384:
 5045              	# /usr/include/c++/7/bits/stl_algo.h:92:       else if (__comp(__b, __c))
  92:/usr/include/c++/7/bits/stl_algo.h **** 	std::iter_swap(__result, __c);
 5046              		.loc 20 92 0
 5047 0e79 4C39C2   		cmpq	%r8, %rdx	# pretmp_161, _93
 5048 0e7c 7222     		jb	.L340	#,
 5049              	.LVL385:
 5050              	.L326:
 5051              	.LBB2684:
 5052              	.LBB2685:
 5053              	.LBB2686:
 5054              	# /usr/include/c++/7/bits/move.h:199:       __a = _GLIBCXX_MOVE(__b);
 199:/usr/include/c++/7/bits/move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 5055              		.loc 17 199 0
 5056 0e7e C5FA6F00 		vmovdqu	(%rax), %xmm0	# *__mid_54, *__mid_54
 5057 0e82 C4C17811 		vmovups	%xmm0, (%r14)	# *__mid_54, *__first_3(D)
 5057      06
 5058              	.LVL386:
 5059              	# /usr/include/c++/7/bits/move.h:200:       __b = _GLIBCXX_MOVE(__tmp);
 5060              		.loc 17 200 0
 5061 0e87 488938   		movq	%rdi, (%rax)	# prephitmp_147, MEM[(struct SortableRef *)__mid_54]
 5062 0e8a 4C894808 		movq	%r9, 8(%rax)	# pretmp_186, MEM[(struct SortableRef *)__mid_54 + 8B]
 5063              	.LVL387:
 5064 0e8e 488B7EF0 		movq	-16(%rsi), %rdi	# MEM[(long unsigned int *)__last_109 + -16B], prephitmp_147
 5065 0e92 E9B4FEFF 		jmp	.L322	#
 5065      FF
 5066              	.LVL388:
 5067 0e97 660F1F84 		.p2align 4,,10
 5067      00000000 
 5067      00
 5068              		.p2align 3
 5069              	.L340:
 5070              	.LBE2686:
 5071              	.LBE2685:
 5072              	.LBE2684:
 5073              	.LBB2687:
 5074              	.LBB2688:
 5075              	.LBB2689:
 5076              	# /usr/include/c++/7/bits/move.h:199:       __a = _GLIBCXX_MOVE(__b);
 199:/usr/include/c++/7/bits/move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 5077              		.loc 17 199 0
 5078 0ea0 C5FA6F46 		vmovdqu	-16(%rsi), %xmm0	# MEM[(struct SortableRef &)__last_109 + 18446744073709551600], MEM[(stru
 5078      F0
 5079 0ea5 C4C17811 		vmovups	%xmm0, (%r14)	# MEM[(struct SortableRef &)__last_109 + 18446744073709551600], *__first_3(D
 5079      06
 5080              	.LVL389:
 5081              	# /usr/include/c++/7/bits/move.h:200:       __b = _GLIBCXX_MOVE(__tmp);
 5082              		.loc 17 200 0
 5083 0eaa 48897EF0 		movq	%rdi, -16(%rsi)	# prephitmp_147, MEM[(struct SortableRef *)__last_109 + -16B]
 5084 0eae 4C894EF8 		movq	%r9, -8(%rsi)	# pretmp_186, MEM[(struct SortableRef *)__last_109 + -8B]
 5085              	.LVL390:
 5086 0eb2 E994FEFF 		jmp	.L322	#
 5086      FF
 5087              	.LVL391:
 5088              	.L342:
 5089              	.LBE2689:
 5090              	.LBE2688:
 5091              	.LBE2687:
 5092              	.LBE2691:
 5093              	.LBE2701:
 5094              	.LBE2704:
 5095              	.LBE2716:
 5096              	# /usr/include/c++/7/bits/stl_algo.h:1946: 	  if (__depth_limit == 0)
1946:/usr/include/c++/7/bits/stl_algo.h **** 	    {
 5097              		.loc 20 1946 0
 5098 0eb7 4989F5   		movq	%rsi, %r13	# __last, __first
 5099 0eba E90EFFFF 		jmp	.L314	#
 5099      FF
 5100              	.LBE2718:
 5101              		.cfi_endproc
 5102              	.LFE4159:
 5104              		.section	.rodata.str1.1
 5105              	.LC7:
 5106 0026 436F7272 		.string	"Correct sort qs copy"
 5106      65637420 
 5106      736F7274 
 5106      20717320 
 5106      636F7079 
 5107              	.LC8:
 5108 003b 57726F6E 		.string	"Wrong sort qs copy"
 5108      6720736F 
 5108      72742071 
 5108      7320636F 
 5108      707900
 5109              	.LC9:
 5110 004e 57726F6E 		.string	"Wrong sort std sort"
 5110      6720736F 
 5110      72742073 
 5110      74642073 
 5110      6F727400 
 5111              	.LC10:
 5112 0062 436F7272 		.string	"Correct sort std sort"
 5112      65637420 
 5112      736F7274 
 5112      20737464 
 5112      20736F72 
 5113              		.text
 5114 0ebf 90       		.p2align 4,,15
 5115              		.globl	_Z4Testv
 5117              	_Z4Testv:
 5118              	.LFB3387:
 5119              		.file 21 "test.cc"
   1:test.cc       **** 
   2:test.cc       **** #include <iostream>
   3:test.cc       **** 
   4:test.cc       **** #include "Sortable.generated.h"
   5:test.cc       **** #include "BestNetworks.generated.h"
   6:test.cc       **** #include "BoseNelson.generated.h"
   7:test.cc       **** #include "BoseNelsonParallel.generated.h"
   8:test.cc       **** #include "BoseNelsonParameter.generated.h"
   9:test.cc       **** #include "NetworkSort.h"
  10:test.cc       **** #include "Randomisation.generated.h"
  11:test.cc       **** #include "Quicksort_Copy.h"
  12:test.cc       **** #include "Measure.h"
  13:test.cc       **** #include "DebugHelper.h"
  14:test.cc       **** 
  15:test.cc       **** 
  16:test.cc       **** 
  17:test.cc       **** void Test()
  18:test.cc       **** {
 5120              		.loc 21 18 0
 5121              		.cfi_startproc
 5122              	.LVL392:
 5123 0ec0 4157     		pushq	%r15	#
 5124              		.cfi_def_cfa_offset 16
 5125              		.cfi_offset 15, -16
 5126              	# test.cc:20:     SortableRef* arr = (SortableRef*) malloc(sizeof(SortableRef) * arraySize);
  19:test.cc       ****     int arraySize = 1024 * 16;
  20:test.cc       ****     SortableRef* arr = (SortableRef*) malloc(sizeof(SortableRef) * arraySize);
 5127              		.loc 21 20 0
 5128 0ec2 BF000004 		movl	$262144, %edi	#,
 5128      00
 5129              	# test.cc:18: {
  18:test.cc       ****     int arraySize = 1024 * 16;
 5130              		.loc 21 18 0
 5131 0ec7 4156     		pushq	%r14	#
 5132              		.cfi_def_cfa_offset 24
 5133              		.cfi_offset 14, -24
 5134 0ec9 4155     		pushq	%r13	#
 5135              		.cfi_def_cfa_offset 32
 5136              		.cfi_offset 13, -32
 5137 0ecb 4154     		pushq	%r12	#
 5138              		.cfi_def_cfa_offset 40
 5139              		.cfi_offset 12, -40
 5140 0ecd 55       		pushq	%rbp	#
 5141              		.cfi_def_cfa_offset 48
 5142              		.cfi_offset 6, -48
 5143 0ece 53       		pushq	%rbx	#
 5144              		.cfi_def_cfa_offset 56
 5145              		.cfi_offset 3, -56
 5146 0ecf 4883EC28 		subq	$40, %rsp	#,
 5147              		.cfi_def_cfa_offset 96
 5148              	# test.cc:20:     SortableRef* arr = (SortableRef*) malloc(sizeof(SortableRef) * arraySize);
 5149              		.loc 21 20 0
 5150 0ed3 E8000000 		call	malloc@PLT	#
 5150      00
 5151              	.LVL393:
 5152              	.LBB2885:
 5153              	.LBB2886:
 5154              	.LBB2887:
 5155              	.LBB2888:
 5156              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 5157              		.loc 4 20 0
 5158 0ed8 49B80500 		movabsq	$8589934597, %r8	#, tmp182
 5158      00000200 
 5158      0000
 5159 0ee2 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp179
 5159      0000008F 
 5159      BC0000
 5160              	.LBE2888:
 5161              	.LBE2887:
 5162              	.LBE2886:
 5163              	.LBE2885:
 5164              	# test.cc:20:     SortableRef* arr = (SortableRef*) malloc(sizeof(SortableRef) * arraySize);
 5165              		.loc 21 20 0
 5166 0eed 4889C5   		movq	%rax, %rbp	#, arr
 5167              	.LVL394:
 5168 0ef0 488D5D08 		leaq	8(%rbp), %rbx	#, ivtmp.700
 5169              	.LBB2899:
 5170              	.LBB2898:
 5171              	.LBB2890:
 5172              	.LBB2889:
 5173              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 5174              		.loc 4 20 0
 5175 0ef4 4889DE   		movq	%rbx, %rsi	# ivtmp.700, ivtmp.757
 5176 0ef7 4889C8   		movq	%rcx, %rax	# tmp179, tmp253
 5177 0efa 49F7E0   		mulq	%r8	# tmp182
 5178 0efd 4889C8   		movq	%rcx, %rax	# tmp179, tmp183
 5179 0f00 4829D0   		subq	%rdx, %rax	# tmp181, tmp183
 5180 0f03 48D1E8   		shrq	%rax	# tmp184
 5181 0f06 4801C2   		addq	%rax, %rdx	# tmp184, tmp185
 5182 0f09 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.640
 5183 0f0d 4889D0   		movq	%rdx, %rax	# _seed_lsm.640, tmp187
 5184 0f10 48C1E01F 		salq	$31, %rax	#, tmp187
 5185 0f14 4829D0   		subq	%rdx, %rax	# _seed_lsm.640, tmp188
 5186 0f17 4829C1   		subq	%rax, %rcx	# tmp188, tmp179
 5187 0f1a 4C8D8900 		leaq	16384(%rcx), %r9	#, _130
 5187      400000
 5188 0f21 4889CA   		movq	%rcx, %rdx	# tmp179, _seed_lsm.640
 5189              	.LVL395:
 5190              		.p2align 4,,10
 5191 0f24 0F1F4000 		.p2align 3
 5192              	.L346:
 5193              	.LBE2889:
 5194              	.LBE2890:
 5195              	.LBB2891:
 5196              	.LBB2892:
 5197              	.LBB2893:
 5198 0f28 4869FA8F 		imulq	$48271, %rdx, %rdi	#, _seed_lsm.640, tmp189
 5198      BC0000
 5199              	.LBE2893:
 5200              	.LBE2892:
 5201              	# Randomisation.generated.h:28: 		arr[i].reference = reference + i;
  28:Randomisation.generated.h **** 	}
 5202              		.loc 5 28 0
 5203 0f2f 48890E   		movq	%rcx, (%rsi)	# ivtmp.756, MEM[base: _138, offset: 0B]
 5204 0f32 4883C101 		addq	$1, %rcx	#, ivtmp.756
 5205              	.LVL396:
 5206 0f36 4883C610 		addq	$16, %rsi	#, ivtmp.757
 5207              	.LBB2896:
 5208              	.LBB2894:
 5209              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 5210              		.loc 4 20 0
 5211 0f3a 4889F8   		movq	%rdi, %rax	# tmp189, tmp254
 5212 0f3d 49F7E0   		mulq	%r8	# tmp191
 5213 0f40 4889F8   		movq	%rdi, %rax	# tmp189, tmp192
 5214 0f43 4829D0   		subq	%rdx, %rax	# tmp190, tmp192
 5215 0f46 48D1E8   		shrq	%rax	# tmp193
 5216 0f49 4801C2   		addq	%rax, %rdx	# tmp193, tmp194
 5217 0f4c 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.640
 5218 0f50 4889D0   		movq	%rdx, %rax	# _seed_lsm.640, tmp196
 5219 0f53 48C1E01F 		salq	$31, %rax	#, tmp196
 5220 0f57 4829D0   		subq	%rdx, %rax	# _seed_lsm.640, tmp197
 5221 0f5a 4829C7   		subq	%rax, %rdi	# tmp197, tmp189
 5222              	.LBE2894:
 5223              	.LBE2896:
 5224              	# Randomisation.generated.h:27: 		arr[i].key = randomisation::GenerateRandomUint64();
  27:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 5225              		.loc 5 27 0
 5226 0f5d 48897EE8 		movq	%rdi, -24(%rsi)	# _seed_lsm.640, MEM[base: _138, offset: -8B]
 5227              	.LBB2897:
 5228              	.LBB2895:
 5229              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 5230              		.loc 4 20 0
 5231 0f61 4889FA   		movq	%rdi, %rdx	# tmp189, _seed_lsm.640
 5232              	.LBE2895:
 5233              	.LBE2897:
 5234              	# Randomisation.generated.h:25: 	for (int i = 0; i < arraySize; i += 1)
  25:Randomisation.generated.h **** 	{
 5235              		.loc 5 25 0
 5236 0f64 4939C9   		cmpq	%rcx, %r9	# ivtmp.756, _130
 5237 0f67 75BF     		jne	.L346	#,
 5238              	.LBE2891:
 5239              	.LBE2898:
 5240              	.LBE2899:
 5241              	# test.cc:22:     quicksortcopy::Quicksort_Copy_Stl(arr, arr + arraySize, &measurement::IteratorCom
  21:test.cc       ****     randomisation::GenerateRandomArray(arr, arraySize);
  22:test.cc       ****     quicksortcopy::Quicksort_Copy_Stl(arr, arr + arraySize, &measurement::IteratorCompare<SortableR
 5242              		.loc 21 22 0
 5243 0f69 4C8DBD00 		leaq	262144(%rbp), %r15	#, _235
 5243      000400
 5244              	.LBB2900:
 5245              	.LBB2901:
 5246              	.LBB2902:
 5247              	.LBB2903:
 5248              	.LBB2904:
 5249              	# CustomMath.h:14:         );
 5250              		.file 22 "CustomMath.h"
   1:CustomMath.h  **** 
   2:CustomMath.h  **** #ifndef CUSTOM_MATH_H
   3:CustomMath.h  **** #define CUSTOM_MATH_H
   4:CustomMath.h  **** 
   5:CustomMath.h  **** namespace custommath
   6:CustomMath.h  **** {
   7:CustomMath.h  ****     static int intlog2(const int x)
   8:CustomMath.h  ****     {
   9:CustomMath.h  ****         int y;
  10:CustomMath.h  ****         __asm__(
  11:CustomMath.h  ****             "bsr %[in],%[out]\n\t"
  12:CustomMath.h  ****             : [out] "=r"(y)
  13:CustomMath.h  ****             : [in] "r"(x) 
  14:CustomMath.h  ****         );
 5251              		.loc 22 14 0
 5252 0f70 BA004000 		movl	$16384, %edx	#, tmp207
 5252      00
 5253 0f75 48893D00 		movq	%rdi, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.640, _seed
 5253      000000
 5254              	.LVL397:
 5255              	.LBE2904:
 5256              	.LBE2903:
 5257              	# Quicksort_Copy.h:273:         introsort_loop(first, last, (int64_t) custommath::intlog2((int) (la
 267:Quicksort_Copy.h **** 
 268:Quicksort_Copy.h **** template <typename TValueType, typename TCompare>
 269:Quicksort_Copy.h **** void Quicksort_Copy_Stl(TValueType* first, TValueType* last, TCompare compare)
 270:Quicksort_Copy.h **** {
 271:Quicksort_Copy.h ****     if (first != last)
 272:Quicksort_Copy.h **** 	{
 273:Quicksort_Copy.h ****         introsort_loop(first, last, (int64_t) custommath::intlog2((int) (last - first)) * 2, compar
 5258              		.loc 16 273 0
 5259 0f7c 4889EF   		movq	%rbp, %rdi	# arr,
 5260              	.LBB2906:
 5261              	.LBB2905:
 5262              	# CustomMath.h:14:         );
 5263              		.loc 22 14 0
 5264              	#APP
 5265              	# 14 "CustomMath.h" 1
  15              	        return y;
  16              	    }
 5266              		bsr %edx,%edx	# tmp207, y
 5267              		
 5268              	# 0 "" 2
 5269              	.LVL398:
 5270              	#NO_APP
 5271              	.LBE2905:
 5272              	.LBE2906:
 5273              	.LBB2907:
 5274              	.LBB2908:
 5275              	.LBB2909:
 5276              	# Quicksort_Copy.h:175:         insertion_sort(first, first + S_threshold, compare);
 175:Quicksort_Copy.h ****         unguarded_insertion_sort(first + S_threshold, last, compare);
 5277              		.loc 16 175 0
 5278 0f82 4C8DA500 		leaq	256(%rbp), %r12	#, _87
 5278      010000
 5279              	.LBE2909:
 5280              	.LBE2908:
 5281              	.LBE2907:
 5282              	# Quicksort_Copy.h:273:         introsort_loop(first, last, (int64_t) custommath::intlog2((int) (la
 5283              		.loc 16 273 0
 5284 0f89 4863D2   		movslq	%edx, %rdx	# y, y
 5285 0f8c 4C89FE   		movq	%r15, %rsi	# _235,
 5286 0f8f 4801D2   		addq	%rdx, %rdx	# tmp209
 5287 0f92 E859FBFF 		call	_ZN13quicksortcopy14introsort_loopI11SortableReflPFbPS1_S2_EEEvPT_S6_T0_T1_.constprop.61	#
 5287      FF
 5288              	.LVL399:
 5289              	.LBB2950:
 5290              	.LBB2947:
 5291              	.LBB2944:
 5292              	.LBB2910:
 5293              	.LBB2911:
 5294              	# Quicksort_Copy.h:154:     for (TValueType* i = first + 1; i != last; ++i)
 154:Quicksort_Copy.h ****     {
 5295              		.loc 16 154 0
 5296 0f97 488D4510 		leaq	16(%rbp), %rax	#, tmp250
 5297 0f9b 4989C6   		movq	%rax, %r14	# tmp250, tmp250
 5298 0f9e 48894424 		movq	%rax, 8(%rsp)	# tmp250, %sfp
 5298      08
 5299 0fa3 4989C5   		movq	%rax, %r13	# tmp250, __i
 5300              	.LVL400:
 5301 0fa6 EB45     		jmp	.L353	#
 5302              	.LVL401:
 5303 0fa8 0F1F8400 		.p2align 4,,10
 5303      00000000 
 5304              		.p2align 3
 5305              	.L393:
 5306              	.LBB2912:
 5307              	.LBB2913:
 5308              	.LBB2914:
 5309              	.LBB2915:
 5310              	.LBB2916:
 5311              	.LBB2917:
 5312              	.LBB2918:
 5313              	.LBB2919:
 5314              	# /usr/include/c++/7/bits/stl_algobase.h:569: 	  if (_Num)
 5315              		.file 23 "/usr/include/c++/7/bits/stl_algobase.h"
   1:/usr/include/c++/7/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/include/c++/7/bits/stl_algobase.h **** 
   3:/usr/include/c++/7/bits/stl_algobase.h **** // Copyright (C) 2001-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/bits/stl_algobase.h **** //
   5:/usr/include/c++/7/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/bits/stl_algobase.h **** // any later version.
  10:/usr/include/c++/7/bits/stl_algobase.h **** 
  11:/usr/include/c++/7/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/include/c++/7/bits/stl_algobase.h **** 
  16:/usr/include/c++/7/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/bits/stl_algobase.h **** 
  20:/usr/include/c++/7/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/bits/stl_algobase.h **** 
  25:/usr/include/c++/7/bits/stl_algobase.h **** /*
  26:/usr/include/c++/7/bits/stl_algobase.h ****  *
  27:/usr/include/c++/7/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/include/c++/7/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/7/bits/stl_algobase.h ****  *
  30:/usr/include/c++/7/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/7/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/7/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/7/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/7/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/7/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/7/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/7/bits/stl_algobase.h ****  *
  38:/usr/include/c++/7/bits/stl_algobase.h ****  *
  39:/usr/include/c++/7/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/7/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/7/bits/stl_algobase.h ****  *
  42:/usr/include/c++/7/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/7/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/7/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/7/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/7/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/7/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/7/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/7/bits/stl_algobase.h ****  */
  50:/usr/include/c++/7/bits/stl_algobase.h **** 
  51:/usr/include/c++/7/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/include/c++/7/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/7/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/c++/7/bits/stl_algobase.h ****  */
  55:/usr/include/c++/7/bits/stl_algobase.h **** 
  56:/usr/include/c++/7/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/include/c++/7/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/include/c++/7/bits/stl_algobase.h **** 
  59:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/include/c++/7/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/include/c++/7/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/include/c++/7/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
  71:/usr/include/c++/7/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/include/c++/7/bits/stl_algobase.h **** 
  73:/usr/include/c++/7/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  74:/usr/include/c++/7/bits/stl_algobase.h **** {
  75:/usr/include/c++/7/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:/usr/include/c++/7/bits/stl_algobase.h **** 
  77:/usr/include/c++/7/bits/stl_algobase.h **** #if __cplusplus < 201103L
  78:/usr/include/c++/7/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  79:/usr/include/c++/7/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  80:/usr/include/c++/7/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  81:/usr/include/c++/7/bits/stl_algobase.h ****   template<bool _BoolType>
  82:/usr/include/c++/7/bits/stl_algobase.h ****     struct __iter_swap
  83:/usr/include/c++/7/bits/stl_algobase.h ****     {
  84:/usr/include/c++/7/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  85:/usr/include/c++/7/bits/stl_algobase.h ****         static void
  86:/usr/include/c++/7/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  87:/usr/include/c++/7/bits/stl_algobase.h ****         {
  88:/usr/include/c++/7/bits/stl_algobase.h ****           typedef typename iterator_traits<_ForwardIterator1>::value_type
  89:/usr/include/c++/7/bits/stl_algobase.h ****             _ValueType1;
  90:/usr/include/c++/7/bits/stl_algobase.h ****           _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
  91:/usr/include/c++/7/bits/stl_algobase.h ****           *__a = _GLIBCXX_MOVE(*__b);
  92:/usr/include/c++/7/bits/stl_algobase.h ****           *__b = _GLIBCXX_MOVE(__tmp);
  93:/usr/include/c++/7/bits/stl_algobase.h **** 	}
  94:/usr/include/c++/7/bits/stl_algobase.h ****     };
  95:/usr/include/c++/7/bits/stl_algobase.h **** 
  96:/usr/include/c++/7/bits/stl_algobase.h ****   template<>
  97:/usr/include/c++/7/bits/stl_algobase.h ****     struct __iter_swap<true>
  98:/usr/include/c++/7/bits/stl_algobase.h ****     {
  99:/usr/include/c++/7/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 100:/usr/include/c++/7/bits/stl_algobase.h ****         static void 
 101:/usr/include/c++/7/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 102:/usr/include/c++/7/bits/stl_algobase.h ****         {
 103:/usr/include/c++/7/bits/stl_algobase.h ****           swap(*__a, *__b);
 104:/usr/include/c++/7/bits/stl_algobase.h ****         }
 105:/usr/include/c++/7/bits/stl_algobase.h ****     };
 106:/usr/include/c++/7/bits/stl_algobase.h **** #endif
 107:/usr/include/c++/7/bits/stl_algobase.h **** 
 108:/usr/include/c++/7/bits/stl_algobase.h ****   /**
 109:/usr/include/c++/7/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 110:/usr/include/c++/7/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 111:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 112:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 113:/usr/include/c++/7/bits/stl_algobase.h ****    *  @return   Nothing.
 114:/usr/include/c++/7/bits/stl_algobase.h ****    *
 115:/usr/include/c++/7/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 116:/usr/include/c++/7/bits/stl_algobase.h ****    *  iterators themselves.
 117:/usr/include/c++/7/bits/stl_algobase.h ****   */
 118:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 119:/usr/include/c++/7/bits/stl_algobase.h ****     inline void
 120:/usr/include/c++/7/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 121:/usr/include/c++/7/bits/stl_algobase.h ****     {
 122:/usr/include/c++/7/bits/stl_algobase.h ****       // concept requirements
 123:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 124:/usr/include/c++/7/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 125:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 126:/usr/include/c++/7/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 127:/usr/include/c++/7/bits/stl_algobase.h **** 
 128:/usr/include/c++/7/bits/stl_algobase.h **** #if __cplusplus < 201103L
 129:/usr/include/c++/7/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 130:/usr/include/c++/7/bits/stl_algobase.h **** 	_ValueType1;
 131:/usr/include/c++/7/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 132:/usr/include/c++/7/bits/stl_algobase.h **** 	_ValueType2;
 133:/usr/include/c++/7/bits/stl_algobase.h **** 
 134:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 135:/usr/include/c++/7/bits/stl_algobase.h **** 				  _ValueType2>)
 136:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 137:/usr/include/c++/7/bits/stl_algobase.h **** 				  _ValueType1>)
 138:/usr/include/c++/7/bits/stl_algobase.h **** 
 139:/usr/include/c++/7/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 140:/usr/include/c++/7/bits/stl_algobase.h **** 	_ReferenceType1;
 141:/usr/include/c++/7/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 142:/usr/include/c++/7/bits/stl_algobase.h **** 	_ReferenceType2;
 143:/usr/include/c++/7/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 144:/usr/include/c++/7/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 145:/usr/include/c++/7/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 146:/usr/include/c++/7/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 147:/usr/include/c++/7/bits/stl_algobase.h **** #else
 148:/usr/include/c++/7/bits/stl_algobase.h ****       swap(*__a, *__b);
 149:/usr/include/c++/7/bits/stl_algobase.h **** #endif
 150:/usr/include/c++/7/bits/stl_algobase.h ****     }
 151:/usr/include/c++/7/bits/stl_algobase.h **** 
 152:/usr/include/c++/7/bits/stl_algobase.h ****   /**
 153:/usr/include/c++/7/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 154:/usr/include/c++/7/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 155:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 156:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 157:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 158:/usr/include/c++/7/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 159:/usr/include/c++/7/bits/stl_algobase.h ****    *
 160:/usr/include/c++/7/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 161:/usr/include/c++/7/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 162:/usr/include/c++/7/bits/stl_algobase.h ****    *  The ranges must not overlap.
 163:/usr/include/c++/7/bits/stl_algobase.h ****   */
 164:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 165:/usr/include/c++/7/bits/stl_algobase.h ****     _ForwardIterator2
 166:/usr/include/c++/7/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 167:/usr/include/c++/7/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 168:/usr/include/c++/7/bits/stl_algobase.h ****     {
 169:/usr/include/c++/7/bits/stl_algobase.h ****       // concept requirements
 170:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 171:/usr/include/c++/7/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 172:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 173:/usr/include/c++/7/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 174:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 175:/usr/include/c++/7/bits/stl_algobase.h **** 
 176:/usr/include/c++/7/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 177:/usr/include/c++/7/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 178:/usr/include/c++/7/bits/stl_algobase.h ****       return __first2;
 179:/usr/include/c++/7/bits/stl_algobase.h ****     }
 180:/usr/include/c++/7/bits/stl_algobase.h **** 
 181:/usr/include/c++/7/bits/stl_algobase.h ****   /**
 182:/usr/include/c++/7/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 183:/usr/include/c++/7/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 184:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 185:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 186:/usr/include/c++/7/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 187:/usr/include/c++/7/bits/stl_algobase.h ****    *
 188:/usr/include/c++/7/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 189:/usr/include/c++/7/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 190:/usr/include/c++/7/bits/stl_algobase.h ****    *  preprocessor macro.
 191:/usr/include/c++/7/bits/stl_algobase.h ****   */
 192:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _Tp>
 193:/usr/include/c++/7/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 194:/usr/include/c++/7/bits/stl_algobase.h ****     inline const _Tp&
 195:/usr/include/c++/7/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 196:/usr/include/c++/7/bits/stl_algobase.h ****     {
 197:/usr/include/c++/7/bits/stl_algobase.h ****       // concept requirements
 198:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 199:/usr/include/c++/7/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 200:/usr/include/c++/7/bits/stl_algobase.h ****       if (__b < __a)
 201:/usr/include/c++/7/bits/stl_algobase.h **** 	return __b;
 202:/usr/include/c++/7/bits/stl_algobase.h ****       return __a;
 203:/usr/include/c++/7/bits/stl_algobase.h ****     }
 204:/usr/include/c++/7/bits/stl_algobase.h **** 
 205:/usr/include/c++/7/bits/stl_algobase.h ****   /**
 206:/usr/include/c++/7/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 207:/usr/include/c++/7/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 208:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 209:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 210:/usr/include/c++/7/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 211:/usr/include/c++/7/bits/stl_algobase.h ****    *
 212:/usr/include/c++/7/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 213:/usr/include/c++/7/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 214:/usr/include/c++/7/bits/stl_algobase.h ****    *  preprocessor macro.
 215:/usr/include/c++/7/bits/stl_algobase.h ****   */
 216:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _Tp>
 217:/usr/include/c++/7/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 218:/usr/include/c++/7/bits/stl_algobase.h ****     inline const _Tp&
 219:/usr/include/c++/7/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 220:/usr/include/c++/7/bits/stl_algobase.h ****     {
 221:/usr/include/c++/7/bits/stl_algobase.h ****       // concept requirements
 222:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 223:/usr/include/c++/7/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 224:/usr/include/c++/7/bits/stl_algobase.h ****       if (__a < __b)
 225:/usr/include/c++/7/bits/stl_algobase.h **** 	return __b;
 226:/usr/include/c++/7/bits/stl_algobase.h ****       return __a;
 227:/usr/include/c++/7/bits/stl_algobase.h ****     }
 228:/usr/include/c++/7/bits/stl_algobase.h **** 
 229:/usr/include/c++/7/bits/stl_algobase.h ****   /**
 230:/usr/include/c++/7/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 231:/usr/include/c++/7/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 232:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 233:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 234:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 235:/usr/include/c++/7/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 236:/usr/include/c++/7/bits/stl_algobase.h ****    *
 237:/usr/include/c++/7/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 238:/usr/include/c++/7/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 239:/usr/include/c++/7/bits/stl_algobase.h ****   */
 240:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 241:/usr/include/c++/7/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 242:/usr/include/c++/7/bits/stl_algobase.h ****     inline const _Tp&
 243:/usr/include/c++/7/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 244:/usr/include/c++/7/bits/stl_algobase.h ****     {
 245:/usr/include/c++/7/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 246:/usr/include/c++/7/bits/stl_algobase.h ****       if (__comp(__b, __a))
 247:/usr/include/c++/7/bits/stl_algobase.h **** 	return __b;
 248:/usr/include/c++/7/bits/stl_algobase.h ****       return __a;
 249:/usr/include/c++/7/bits/stl_algobase.h ****     }
 250:/usr/include/c++/7/bits/stl_algobase.h **** 
 251:/usr/include/c++/7/bits/stl_algobase.h ****   /**
 252:/usr/include/c++/7/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 253:/usr/include/c++/7/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 254:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 255:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 256:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 257:/usr/include/c++/7/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 258:/usr/include/c++/7/bits/stl_algobase.h ****    *
 259:/usr/include/c++/7/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 260:/usr/include/c++/7/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 261:/usr/include/c++/7/bits/stl_algobase.h ****   */
 262:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 263:/usr/include/c++/7/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 264:/usr/include/c++/7/bits/stl_algobase.h ****     inline const _Tp&
 265:/usr/include/c++/7/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 266:/usr/include/c++/7/bits/stl_algobase.h ****     {
 267:/usr/include/c++/7/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 268:/usr/include/c++/7/bits/stl_algobase.h ****       if (__comp(__a, __b))
 269:/usr/include/c++/7/bits/stl_algobase.h **** 	return __b;
 270:/usr/include/c++/7/bits/stl_algobase.h ****       return __a;
 271:/usr/include/c++/7/bits/stl_algobase.h ****     }
 272:/usr/include/c++/7/bits/stl_algobase.h **** 
 273:/usr/include/c++/7/bits/stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 274:/usr/include/c++/7/bits/stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
 275:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _Iterator>
 276:/usr/include/c++/7/bits/stl_algobase.h ****     inline _Iterator
 277:/usr/include/c++/7/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 278:/usr/include/c++/7/bits/stl_algobase.h ****     { return __it; }
 279:/usr/include/c++/7/bits/stl_algobase.h **** 
 280:/usr/include/c++/7/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 281:/usr/include/c++/7/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 282:/usr/include/c++/7/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 283:/usr/include/c++/7/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 284:/usr/include/c++/7/bits/stl_algobase.h ****   // a for loop with an explicit count.
 285:/usr/include/c++/7/bits/stl_algobase.h **** 
 286:/usr/include/c++/7/bits/stl_algobase.h ****   template<bool, bool, typename>
 287:/usr/include/c++/7/bits/stl_algobase.h ****     struct __copy_move
 288:/usr/include/c++/7/bits/stl_algobase.h ****     {
 289:/usr/include/c++/7/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 290:/usr/include/c++/7/bits/stl_algobase.h ****         static _OI
 291:/usr/include/c++/7/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 292:/usr/include/c++/7/bits/stl_algobase.h ****         {
 293:/usr/include/c++/7/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 294:/usr/include/c++/7/bits/stl_algobase.h **** 	    *__result = *__first;
 295:/usr/include/c++/7/bits/stl_algobase.h **** 	  return __result;
 296:/usr/include/c++/7/bits/stl_algobase.h **** 	}
 297:/usr/include/c++/7/bits/stl_algobase.h ****     };
 298:/usr/include/c++/7/bits/stl_algobase.h **** 
 299:/usr/include/c++/7/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 300:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _Category>
 301:/usr/include/c++/7/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 302:/usr/include/c++/7/bits/stl_algobase.h ****     {
 303:/usr/include/c++/7/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 304:/usr/include/c++/7/bits/stl_algobase.h ****         static _OI
 305:/usr/include/c++/7/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 306:/usr/include/c++/7/bits/stl_algobase.h ****         {
 307:/usr/include/c++/7/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 308:/usr/include/c++/7/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 309:/usr/include/c++/7/bits/stl_algobase.h **** 	  return __result;
 310:/usr/include/c++/7/bits/stl_algobase.h **** 	}
 311:/usr/include/c++/7/bits/stl_algobase.h ****     };
 312:/usr/include/c++/7/bits/stl_algobase.h **** #endif
 313:/usr/include/c++/7/bits/stl_algobase.h **** 
 314:/usr/include/c++/7/bits/stl_algobase.h ****   template<>
 315:/usr/include/c++/7/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 316:/usr/include/c++/7/bits/stl_algobase.h ****     {
 317:/usr/include/c++/7/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 318:/usr/include/c++/7/bits/stl_algobase.h ****         static _OI
 319:/usr/include/c++/7/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 320:/usr/include/c++/7/bits/stl_algobase.h ****         { 
 321:/usr/include/c++/7/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 322:/usr/include/c++/7/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 323:/usr/include/c++/7/bits/stl_algobase.h **** 	    {
 324:/usr/include/c++/7/bits/stl_algobase.h **** 	      *__result = *__first;
 325:/usr/include/c++/7/bits/stl_algobase.h **** 	      ++__first;
 326:/usr/include/c++/7/bits/stl_algobase.h **** 	      ++__result;
 327:/usr/include/c++/7/bits/stl_algobase.h **** 	    }
 328:/usr/include/c++/7/bits/stl_algobase.h **** 	  return __result;
 329:/usr/include/c++/7/bits/stl_algobase.h **** 	}
 330:/usr/include/c++/7/bits/stl_algobase.h ****     };
 331:/usr/include/c++/7/bits/stl_algobase.h **** 
 332:/usr/include/c++/7/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 333:/usr/include/c++/7/bits/stl_algobase.h ****   template<>
 334:/usr/include/c++/7/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 335:/usr/include/c++/7/bits/stl_algobase.h ****     {
 336:/usr/include/c++/7/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 337:/usr/include/c++/7/bits/stl_algobase.h ****         static _OI
 338:/usr/include/c++/7/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 339:/usr/include/c++/7/bits/stl_algobase.h ****         { 
 340:/usr/include/c++/7/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 341:/usr/include/c++/7/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 342:/usr/include/c++/7/bits/stl_algobase.h **** 	    {
 343:/usr/include/c++/7/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 344:/usr/include/c++/7/bits/stl_algobase.h **** 	      ++__first;
 345:/usr/include/c++/7/bits/stl_algobase.h **** 	      ++__result;
 346:/usr/include/c++/7/bits/stl_algobase.h **** 	    }
 347:/usr/include/c++/7/bits/stl_algobase.h **** 	  return __result;
 348:/usr/include/c++/7/bits/stl_algobase.h **** 	}
 349:/usr/include/c++/7/bits/stl_algobase.h ****     };
 350:/usr/include/c++/7/bits/stl_algobase.h **** #endif
 351:/usr/include/c++/7/bits/stl_algobase.h **** 
 352:/usr/include/c++/7/bits/stl_algobase.h ****   template<bool _IsMove>
 353:/usr/include/c++/7/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 354:/usr/include/c++/7/bits/stl_algobase.h ****     {
 355:/usr/include/c++/7/bits/stl_algobase.h ****       template<typename _Tp>
 356:/usr/include/c++/7/bits/stl_algobase.h ****         static _Tp*
 357:/usr/include/c++/7/bits/stl_algobase.h ****         __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 358:/usr/include/c++/7/bits/stl_algobase.h ****         {
 359:/usr/include/c++/7/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 360:/usr/include/c++/7/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 361:/usr/include/c++/7/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 362:/usr/include/c++/7/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 363:/usr/include/c++/7/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 364:/usr/include/c++/7/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 365:/usr/include/c++/7/bits/stl_algobase.h **** #endif
 366:/usr/include/c++/7/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 367:/usr/include/c++/7/bits/stl_algobase.h **** 	  if (_Num)
 368:/usr/include/c++/7/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 369:/usr/include/c++/7/bits/stl_algobase.h **** 	  return __result + _Num;
 370:/usr/include/c++/7/bits/stl_algobase.h **** 	}
 371:/usr/include/c++/7/bits/stl_algobase.h ****     };
 372:/usr/include/c++/7/bits/stl_algobase.h **** 
 373:/usr/include/c++/7/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 374:/usr/include/c++/7/bits/stl_algobase.h ****     inline _OI
 375:/usr/include/c++/7/bits/stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 376:/usr/include/c++/7/bits/stl_algobase.h ****     {
 377:/usr/include/c++/7/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::value_type _ValueTypeI;
 378:/usr/include/c++/7/bits/stl_algobase.h ****       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
 379:/usr/include/c++/7/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 380:/usr/include/c++/7/bits/stl_algobase.h ****       const bool __simple = (__is_trivial(_ValueTypeI)
 381:/usr/include/c++/7/bits/stl_algobase.h **** 	                     && __is_pointer<_II>::__value
 382:/usr/include/c++/7/bits/stl_algobase.h **** 	                     && __is_pointer<_OI>::__value
 383:/usr/include/c++/7/bits/stl_algobase.h **** 			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 384:/usr/include/c++/7/bits/stl_algobase.h **** 
 385:/usr/include/c++/7/bits/stl_algobase.h ****       return std::__copy_move<_IsMove, __simple,
 386:/usr/include/c++/7/bits/stl_algobase.h **** 	                      _Category>::__copy_m(__first, __last, __result);
 387:/usr/include/c++/7/bits/stl_algobase.h ****     }
 388:/usr/include/c++/7/bits/stl_algobase.h **** 
 389:/usr/include/c++/7/bits/stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 390:/usr/include/c++/7/bits/stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 391:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _CharT>
 392:/usr/include/c++/7/bits/stl_algobase.h ****     struct char_traits;
 393:/usr/include/c++/7/bits/stl_algobase.h **** 
 394:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 395:/usr/include/c++/7/bits/stl_algobase.h ****     class istreambuf_iterator;
 396:/usr/include/c++/7/bits/stl_algobase.h **** 
 397:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 398:/usr/include/c++/7/bits/stl_algobase.h ****     class ostreambuf_iterator;
 399:/usr/include/c++/7/bits/stl_algobase.h **** 
 400:/usr/include/c++/7/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 401:/usr/include/c++/7/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 402:/usr/include/c++/7/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 403:/usr/include/c++/7/bits/stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 404:/usr/include/c++/7/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 405:/usr/include/c++/7/bits/stl_algobase.h **** 
 406:/usr/include/c++/7/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 407:/usr/include/c++/7/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 408:/usr/include/c++/7/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 409:/usr/include/c++/7/bits/stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 410:/usr/include/c++/7/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 411:/usr/include/c++/7/bits/stl_algobase.h **** 
 412:/usr/include/c++/7/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 413:/usr/include/c++/7/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 414:/usr/include/c++/7/bits/stl_algobase.h **** 				    _CharT*>::__type
 415:/usr/include/c++/7/bits/stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 416:/usr/include/c++/7/bits/stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 417:/usr/include/c++/7/bits/stl_algobase.h **** 
 418:/usr/include/c++/7/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 419:/usr/include/c++/7/bits/stl_algobase.h ****     inline _OI
 420:/usr/include/c++/7/bits/stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 421:/usr/include/c++/7/bits/stl_algobase.h ****     {
 422:/usr/include/c++/7/bits/stl_algobase.h ****       return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 423:/usr/include/c++/7/bits/stl_algobase.h **** 					     std::__niter_base(__last),
 424:/usr/include/c++/7/bits/stl_algobase.h **** 					     std::__niter_base(__result)));
 425:/usr/include/c++/7/bits/stl_algobase.h ****     }
 426:/usr/include/c++/7/bits/stl_algobase.h **** 
 427:/usr/include/c++/7/bits/stl_algobase.h ****   /**
 428:/usr/include/c++/7/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 429:/usr/include/c++/7/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 430:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 431:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 432:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 433:/usr/include/c++/7/bits/stl_algobase.h ****    *  @return   result + (first - last)
 434:/usr/include/c++/7/bits/stl_algobase.h ****    *
 435:/usr/include/c++/7/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 436:/usr/include/c++/7/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 437:/usr/include/c++/7/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 438:/usr/include/c++/7/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 439:/usr/include/c++/7/bits/stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 440:/usr/include/c++/7/bits/stl_algobase.h ****    *
 441:/usr/include/c++/7/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 442:/usr/include/c++/7/bits/stl_algobase.h ****    *  within [first,last).
 443:/usr/include/c++/7/bits/stl_algobase.h ****   */
 444:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 445:/usr/include/c++/7/bits/stl_algobase.h ****     inline _OI
 446:/usr/include/c++/7/bits/stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 447:/usr/include/c++/7/bits/stl_algobase.h ****     {
 448:/usr/include/c++/7/bits/stl_algobase.h ****       // concept requirements
 449:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 450:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 451:/usr/include/c++/7/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 452:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 453:/usr/include/c++/7/bits/stl_algobase.h **** 
 454:/usr/include/c++/7/bits/stl_algobase.h ****       return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
 455:/usr/include/c++/7/bits/stl_algobase.h **** 	      (std::__miter_base(__first), std::__miter_base(__last),
 456:/usr/include/c++/7/bits/stl_algobase.h **** 	       __result));
 457:/usr/include/c++/7/bits/stl_algobase.h ****     }
 458:/usr/include/c++/7/bits/stl_algobase.h **** 
 459:/usr/include/c++/7/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 460:/usr/include/c++/7/bits/stl_algobase.h ****   /**
 461:/usr/include/c++/7/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 462:/usr/include/c++/7/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 463:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 464:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 465:/usr/include/c++/7/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 466:/usr/include/c++/7/bits/stl_algobase.h ****    *  @return   result + (first - last)
 467:/usr/include/c++/7/bits/stl_algobase.h ****    *
 468:/usr/include/c++/7/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 469:/usr/include/c++/7/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 470:/usr/include/c++/7/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 471:/usr/include/c++/7/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 472:/usr/include/c++/7/bits/stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 473:/usr/include/c++/7/bits/stl_algobase.h ****    *
 474:/usr/include/c++/7/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 475:/usr/include/c++/7/bits/stl_algobase.h ****    *  within [first,last).
 476:/usr/include/c++/7/bits/stl_algobase.h ****   */
 477:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 478:/usr/include/c++/7/bits/stl_algobase.h ****     inline _OI
 479:/usr/include/c++/7/bits/stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 480:/usr/include/c++/7/bits/stl_algobase.h ****     {
 481:/usr/include/c++/7/bits/stl_algobase.h ****       // concept requirements
 482:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 483:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 484:/usr/include/c++/7/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 485:/usr/include/c++/7/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 486:/usr/include/c++/7/bits/stl_algobase.h **** 
 487:/usr/include/c++/7/bits/stl_algobase.h ****       return std::__copy_move_a2<true>(std::__miter_base(__first),
 488:/usr/include/c++/7/bits/stl_algobase.h **** 				       std::__miter_base(__last), __result);
 489:/usr/include/c++/7/bits/stl_algobase.h ****     }
 490:/usr/include/c++/7/bits/stl_algobase.h **** 
 491:/usr/include/c++/7/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 492:/usr/include/c++/7/bits/stl_algobase.h **** #else
 493:/usr/include/c++/7/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 494:/usr/include/c++/7/bits/stl_algobase.h **** #endif
 495:/usr/include/c++/7/bits/stl_algobase.h **** 
 496:/usr/include/c++/7/bits/stl_algobase.h ****   template<bool, bool, typename>
 497:/usr/include/c++/7/bits/stl_algobase.h ****     struct __copy_move_backward
 498:/usr/include/c++/7/bits/stl_algobase.h ****     {
 499:/usr/include/c++/7/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 500:/usr/include/c++/7/bits/stl_algobase.h ****         static _BI2
 501:/usr/include/c++/7/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 502:/usr/include/c++/7/bits/stl_algobase.h ****         {
 503:/usr/include/c++/7/bits/stl_algobase.h **** 	  while (__first != __last)
 504:/usr/include/c++/7/bits/stl_algobase.h **** 	    *--__result = *--__last;
 505:/usr/include/c++/7/bits/stl_algobase.h **** 	  return __result;
 506:/usr/include/c++/7/bits/stl_algobase.h **** 	}
 507:/usr/include/c++/7/bits/stl_algobase.h ****     };
 508:/usr/include/c++/7/bits/stl_algobase.h **** 
 509:/usr/include/c++/7/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 510:/usr/include/c++/7/bits/stl_algobase.h ****   template<typename _Category>
 511:/usr/include/c++/7/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 512:/usr/include/c++/7/bits/stl_algobase.h ****     {
 513:/usr/include/c++/7/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 514:/usr/include/c++/7/bits/stl_algobase.h ****         static _BI2
 515:/usr/include/c++/7/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 516:/usr/include/c++/7/bits/stl_algobase.h ****         {
 517:/usr/include/c++/7/bits/stl_algobase.h **** 	  while (__first != __last)
 518:/usr/include/c++/7/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 519:/usr/include/c++/7/bits/stl_algobase.h **** 	  return __result;
 520:/usr/include/c++/7/bits/stl_algobase.h **** 	}
 521:/usr/include/c++/7/bits/stl_algobase.h ****     };
 522:/usr/include/c++/7/bits/stl_algobase.h **** #endif
 523:/usr/include/c++/7/bits/stl_algobase.h **** 
 524:/usr/include/c++/7/bits/stl_algobase.h ****   template<>
 525:/usr/include/c++/7/bits/stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 526:/usr/include/c++/7/bits/stl_algobase.h ****     {
 527:/usr/include/c++/7/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 528:/usr/include/c++/7/bits/stl_algobase.h ****         static _BI2
 529:/usr/include/c++/7/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 530:/usr/include/c++/7/bits/stl_algobase.h ****         {
 531:/usr/include/c++/7/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 532:/usr/include/c++/7/bits/stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 533:/usr/include/c++/7/bits/stl_algobase.h **** 	    *--__result = *--__last;
 534:/usr/include/c++/7/bits/stl_algobase.h **** 	  return __result;
 535:/usr/include/c++/7/bits/stl_algobase.h **** 	}
 536:/usr/include/c++/7/bits/stl_algobase.h ****     };
 537:/usr/include/c++/7/bits/stl_algobase.h **** 
 538:/usr/include/c++/7/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 539:/usr/include/c++/7/bits/stl_algobase.h ****   template<>
 540:/usr/include/c++/7/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 541:/usr/include/c++/7/bits/stl_algobase.h ****     {
 542:/usr/include/c++/7/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 543:/usr/include/c++/7/bits/stl_algobase.h ****         static _BI2
 544:/usr/include/c++/7/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 545:/usr/include/c++/7/bits/stl_algobase.h ****         {
 546:/usr/include/c++/7/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 547:/usr/include/c++/7/bits/stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 548:/usr/include/c++/7/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 549:/usr/include/c++/7/bits/stl_algobase.h **** 	  return __result;
 550:/usr/include/c++/7/bits/stl_algobase.h **** 	}
 551:/usr/include/c++/7/bits/stl_algobase.h ****     };
 552:/usr/include/c++/7/bits/stl_algobase.h **** #endif
 553:/usr/include/c++/7/bits/stl_algobase.h **** 
 554:/usr/include/c++/7/bits/stl_algobase.h ****   template<bool _IsMove>
 555:/usr/include/c++/7/bits/stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 556:/usr/include/c++/7/bits/stl_algobase.h ****     {
 557:/usr/include/c++/7/bits/stl_algobase.h ****       template<typename _Tp>
 558:/usr/include/c++/7/bits/stl_algobase.h ****         static _Tp*
 559:/usr/include/c++/7/bits/stl_algobase.h ****         __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 560:/usr/include/c++/7/bits/stl_algobase.h ****         {
 561:/usr/include/c++/7/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 562:/usr/include/c++/7/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 563:/usr/include/c++/7/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 564:/usr/include/c++/7/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 565:/usr/include/c++/7/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 566:/usr/include/c++/7/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 567:/usr/include/c++/7/bits/stl_algobase.h **** #endif
 568:/usr/include/c++/7/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 569:/usr/include/c++/7/bits/stl_algobase.h **** 	  if (_Num)
 5316              		.loc 23 569 0
 5317 0fb0 4939EE   		cmpq	%rbp, %r14	# arr, i
 5318 0fb3 7427     		je	.L348	#,
 5319              	# /usr/include/c++/7/bits/stl_algobase.h:570: 	    __builtin_memmove(__result - _Num, __first, size
 570:/usr/include/c++/7/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 5320              		.loc 23 570 0
 5321 0fb5 488B7C24 		movq	8(%rsp), %rdi	# %sfp, tmp213
 5321      08
 5322 0fba 4C89F2   		movq	%r14, %rdx	# i, tmp210
 5323 0fbd 4889EE   		movq	%rbp, %rsi	# arr,
 5324 0fc0 4C894C24 		movq	%r9, 24(%rsp)	# pretmp_120, %sfp
 5324      18
 5325 0fc5 4829EA   		subq	%rbp, %rdx	# arr, tmp210
 5326 0fc8 48894C24 		movq	%rcx, 16(%rsp)	# _115, %sfp
 5326      10
 5327 0fcd E8000000 		call	memmove@PLT	#
 5327      00
 5328              	.LVL402:
 5329 0fd2 4C8B4C24 		movq	24(%rsp), %r9	# %sfp, pretmp_120
 5329      18
 5330 0fd7 488B4C24 		movq	16(%rsp), %rcx	# %sfp, _115
 5330      10
 5331              	.LVL403:
 5332              	.L348:
 5333              	.LBE2919:
 5334              	.LBE2918:
 5335              	.LBE2917:
 5336              	.LBE2916:
 5337              	.LBE2915:
 5338              	.LBE2914:
 5339              	.LBE2913:
 5340              	.LBE2912:
 5341              	# Quicksort_Copy.h:154:     for (TValueType* i = first + 1; i != last; ++i)
 154:Quicksort_Copy.h ****     {
 5342              		.loc 16 154 0
 5343 0fdc 4983C610 		addq	$16, %r14	#, i
 5344              	.LVL404:
 5345              	.LBB2927:
 5346              	.LBB2920:
 5347              	# Quicksort_Copy.h:160:             *first = std::move(val);
 160:Quicksort_Copy.h ****         }
 5348              		.loc 16 160 0
 5349 0fe0 48894D00 		movq	%rcx, 0(%rbp)	# _115, MEM[(struct SortableRef *)arr_6]
 5350 0fe4 4C894D08 		movq	%r9, 8(%rbp)	# pretmp_120, MEM[(struct SortableRef *)arr_6 + 8B]
 5351              	.LVL405:
 5352              	.LBE2920:
 5353              	.LBE2927:
 5354              	# Quicksort_Copy.h:154:     for (TValueType* i = first + 1; i != last; ++i)
 154:Quicksort_Copy.h ****     {
 5355              		.loc 16 154 0
 5356 0fe8 4D39F4   		cmpq	%r14, %r12	# i, _87
 5357 0feb 7453     		je	.L352	#,
 5358              	.LVL406:
 5359              	.L353:
 5360              	.LBB2928:
 5361              	.LBB2921:
 5362              	.LBB2922:
 5363              	# Measure.h:193:     return *left < *right;
 193:Measure.h     **** }
 5364              		.loc 2 193 0
 5365 0fed 498B0E   		movq	(%r14), %rcx	# MEM[base: i_215, offset: 0B], _115
 5366              	.LVL407:
 5367 0ff0 4D8B4E08 		movq	8(%r14), %r9	# MEM[base: i_215, offset: 8], pretmp_120
 5368              	.LBE2922:
 5369              	.LBE2921:
 5370              	# Quicksort_Copy.h:156:         if (compare(i, first))
 156:Quicksort_Copy.h ****         {
 5371              		.loc 16 156 0
 5372 0ff4 483B4D00 		cmpq	0(%rbp), %rcx	# MEM[(long unsigned int *)arr_6], _115
 5373 0ff8 72B6     		jb	.L393	#,
 5374              	.LVL408:
 5375 0ffa 498D46F0 		leaq	-16(%r14), %rax	#, last
 5376              	.LVL409:
 5377              	.LBB2923:
 5378              	.LBB2924:
 5379              	# Quicksort_Copy.h:128:     while (compare(&val, next))
 128:Quicksort_Copy.h ****     {
 5380              		.loc 16 128 0
 5381 0ffe 493B4EF0 		cmpq	-16(%r14), %rcx	# MEM[base: i_215, offset: -16B], _115
 5382 1002 720F     		jb	.L351	#,
 5383 1004 E9C80200 		jmp	.L394	#
 5383      00
 5384              	.LVL410:
 5385 1009 0F1F8000 		.p2align 4,,10
 5385      000000
 5386              		.p2align 3
 5387              	.L378:
 5388 1010 4889D0   		movq	%rdx, %rax	# next, last
 5389              	.LVL411:
 5390              	.L351:
 5391              	# Quicksort_Copy.h:130:         *last = std::move(*next);
 130:Quicksort_Copy.h ****         last = next;
 5392              		.loc 16 130 0
 5393 1013 C5FA6F00 		vmovdqu	(%rax), %xmm0	# MEM[base: next_217, offset: 0], MEM[base: next_217, offset: 0]
 5394              	# Quicksort_Copy.h:132:         --next;
 132:Quicksort_Copy.h ****     }
 5395              		.loc 16 132 0
 5396 1017 488D50F0 		leaq	-16(%rax), %rdx	#, next
 5397              	# Quicksort_Copy.h:130:         *last = std::move(*next);
 130:Quicksort_Copy.h ****         last = next;
 5398              		.loc 16 130 0
 5399 101b C5F81140 		vmovups	%xmm0, 16(%rax)	# MEM[base: next_217, offset: 0], MEM[base: next_217, offset: 16B]
 5399      10
 5400              	.LVL412:
 5401              	# Quicksort_Copy.h:128:     while (compare(&val, next))
 128:Quicksort_Copy.h ****     {
 5402              		.loc 16 128 0
 5403 1020 483B48F0 		cmpq	-16(%rax), %rcx	# MEM[base: next_112, offset: 0B], _115
 5404 1024 72EA     		jb	.L378	#,
 5405              	# Quicksort_Copy.h:134:     *last = std::move(val);
 134:Quicksort_Copy.h **** }
 5406              		.loc 16 134 0
 5407 1026 488908   		movq	%rcx, (%rax)	# _115, MEM[(struct SortableRef *)last_225]
 5408 1029 4C894808 		movq	%r9, 8(%rax)	# pretmp_120, MEM[(struct SortableRef *)last_225 + 8B]
 5409              	.LVL413:
 5410              	.L405:
 5411              	.LBE2924:
 5412              	.LBE2923:
 5413              	.LBE2928:
 5414              	# Quicksort_Copy.h:154:     for (TValueType* i = first + 1; i != last; ++i)
 154:Quicksort_Copy.h ****     {
 5415              		.loc 16 154 0
 5416 102d 4983C610 		addq	$16, %r14	#, i
 5417              	.LVL414:
 5418 1031 4D39F4   		cmpq	%r14, %r12	# i, _87
 5419 1034 75B7     		jne	.L353	#,
 5420              	.LVL415:
 5421 1036 662E0F1F 		.p2align 4,,10
 5421      84000000 
 5421      0000
 5422              		.p2align 3
 5423              	.L352:
 5424              	.LBE2911:
 5425              	.LBE2910:
 5426              	.LBB2931:
 5427              	.LBB2932:
 5428              	.LBB2933:
 5429              	.LBB2934:
 5430              	# Quicksort_Copy.h:125:     TValueType val = std::move(*last);
 125:Quicksort_Copy.h ****     TValueType* next = last;
 5431              		.loc 16 125 0
 5432 1040 498B0E   		movq	(%r14), %rcx	# MEM[base: i_208, offset: 0], val
 5433              	.LVL416:
 5434 1043 498D46F0 		leaq	-16(%r14), %rax	#, last
 5435 1047 498B7608 		movq	8(%r14), %rsi	# MEM[base: i_208, offset: 8], val$reference
 5436              	.LVL417:
 5437              	# Quicksort_Copy.h:128:     while (compare(&val, next))
 128:Quicksort_Copy.h ****     {
 5438              		.loc 16 128 0
 5439 104b 49394EF0 		cmpq	%rcx, -16(%r14)	# val, MEM[base: i_208, offset: -16B]
 5440 104f 7712     		ja	.L357	#,
 5441 1051 E9430200 		jmp	.L395	#
 5441      00
 5442              	.LVL418:
 5443 1056 662E0F1F 		.p2align 4,,10
 5443      84000000 
 5443      0000
 5444              		.p2align 3
 5445              	.L380:
 5446 1060 4889D0   		movq	%rdx, %rax	# next, last
 5447              	.LVL419:
 5448              	.L357:
 5449              	# Quicksort_Copy.h:130:         *last = std::move(*next);
 130:Quicksort_Copy.h ****         last = next;
 5450              		.loc 16 130 0
 5451 1063 C5FA6F00 		vmovdqu	(%rax), %xmm0	# MEM[base: next_209, offset: 0], MEM[base: next_209, offset: 0]
 5452              	# Quicksort_Copy.h:132:         --next;
 132:Quicksort_Copy.h ****     }
 5453              		.loc 16 132 0
 5454 1067 488D50F0 		leaq	-16(%rax), %rdx	#, next
 5455              	# Quicksort_Copy.h:130:         *last = std::move(*next);
 130:Quicksort_Copy.h ****         last = next;
 5456              		.loc 16 130 0
 5457 106b C5F81140 		vmovups	%xmm0, 16(%rax)	# MEM[base: next_209, offset: 0], MEM[base: next_209, offset: 16B]
 5457      10
 5458              	.LVL420:
 5459              	# Quicksort_Copy.h:128:     while (compare(&val, next))
 128:Quicksort_Copy.h ****     {
 5460              		.loc 16 128 0
 5461 1070 483948F0 		cmpq	%rcx, -16(%rax)	# val, MEM[base: next_93, offset: 0B]
 5462 1074 77EA     		ja	.L380	#,
 5463              	.LBE2934:
 5464              	.LBE2933:
 5465              	# Quicksort_Copy.h:140:     for (TValueType* i = first; i != last; ++i)
 140:Quicksort_Copy.h ****     {
 5466              		.loc 16 140 0
 5467 1076 4983C610 		addq	$16, %r14	#, i
 5468              	.LVL421:
 5469              	.LBB2938:
 5470              	.LBB2935:
 5471              	# Quicksort_Copy.h:134:     *last = std::move(val);
 134:Quicksort_Copy.h **** }
 5472              		.loc 16 134 0
 5473 107a 488908   		movq	%rcx, (%rax)	# val, MEM[(struct SortableRef *)last_247]
 5474 107d 48897008 		movq	%rsi, 8(%rax)	# val$reference, MEM[(struct SortableRef *)last_247 + 8B]
 5475              	.LVL422:
 5476              	.LBE2935:
 5477              	.LBE2938:
 5478              	# Quicksort_Copy.h:140:     for (TValueType* i = first; i != last; ++i)
 140:Quicksort_Copy.h ****     {
 5479              		.loc 16 140 0
 5480 1081 4D39F7   		cmpq	%r14, %r15	# i, _235
 5481 1084 75BA     		jne	.L352	#,
 5482              	.LVL423:
 5483              	.L403:
 5484              	.LBE2932:
 5485              	.LBE2931:
 5486              	.LBE2944:
 5487              	.LBE2947:
 5488              	.LBE2950:
 5489              	.LBE2902:
 5490              	.LBE2901:
 5491              	.LBE2900:
 5492              	.LBB2957:
 5493              	.LBB2958:
 5494              	# ArrayHelpers.h:61:         if (__builtin_expect(items[i] > items[i + 1], 0)) 
 5495              		.file 24 "ArrayHelpers.h"
   1:ArrayHelpers.h **** 
   2:ArrayHelpers.h **** #ifndef ARRAY_HELPERS_H
   3:ArrayHelpers.h **** #define ARRAY_HELPERS_H
   4:ArrayHelpers.h **** 
   5:ArrayHelpers.h **** #include <iostream>
   6:ArrayHelpers.h **** #include <string>
   7:ArrayHelpers.h **** #include <vector>
   8:ArrayHelpers.h **** #include "Sortable.generated.h"
   9:ArrayHelpers.h **** #include "StructHelpers.generated.h"
  10:ArrayHelpers.h **** #include "DebugHelper.h"
  11:ArrayHelpers.h **** 
  12:ArrayHelpers.h **** template<typename TValueType>
  13:ArrayHelpers.h **** void PrintArray(TValueType* source, int arraySize, std::string comment, uint64_t(*getKeyFunc)(TValu
  14:ArrayHelpers.h **** {
  15:ArrayHelpers.h ****     if (getKeyFunc == nullptr)
  16:ArrayHelpers.h ****     {
  17:ArrayHelpers.h ****         getKeyFunc = &GetKey<TValueType>;
  18:ArrayHelpers.h ****     }
  19:ArrayHelpers.h ****     printf("%s: ", comment.c_str());
  20:ArrayHelpers.h ****     for (int i = 0; i < arraySize; i += 1)
  21:ArrayHelpers.h ****     {
  22:ArrayHelpers.h ****         printf("%" PRIu64 ", ", getKeyFunc(source[i]));
  23:ArrayHelpers.h ****     }
  24:ArrayHelpers.h ****     printf("\n");
  25:ArrayHelpers.h **** }
  26:ArrayHelpers.h **** 
  27:ArrayHelpers.h **** template <typename TValueType>
  28:ArrayHelpers.h **** void PrintVector(std::vector<TValueType> source, std::string comment)
  29:ArrayHelpers.h **** {
  30:ArrayHelpers.h ****     printf("%s: ", comment.c_str());
  31:ArrayHelpers.h ****     for (TValueType ele : source)
  32:ArrayHelpers.h ****     {
  33:ArrayHelpers.h ****         printf("%" PRIu64 ", ", GetKey(ele));
  34:ArrayHelpers.h ****     }
  35:ArrayHelpers.h ****     printf("\n");
  36:ArrayHelpers.h **** }
  37:ArrayHelpers.h **** 
  38:ArrayHelpers.h **** template <typename TValueType>
  39:ArrayHelpers.h **** void CopyArray(TValueType* source, std::vector<TValueType>& destination, int arraySize) 
  40:ArrayHelpers.h **** {
  41:ArrayHelpers.h ****     for (int i = 0; i < arraySize; i += 1) 
  42:ArrayHelpers.h ****     {
  43:ArrayHelpers.h ****         destination.push_back(source[i]);
  44:ArrayHelpers.h ****     }
  45:ArrayHelpers.h **** }
  46:ArrayHelpers.h **** 
  47:ArrayHelpers.h **** template <typename TValueType>
  48:ArrayHelpers.h **** void CopyArray(TValueType* source, TValueType* destination, size_t arraySize)
  49:ArrayHelpers.h **** {
  50:ArrayHelpers.h ****     for (int i = 0; i < arraySize; i += 1) 
  51:ArrayHelpers.h ****     {
  52:ArrayHelpers.h ****         destination[i] = source[i];
  53:ArrayHelpers.h ****     }
  54:ArrayHelpers.h **** }
  55:ArrayHelpers.h **** 
  56:ArrayHelpers.h **** template <typename TComparable>
  57:ArrayHelpers.h **** bool IsSorted(TComparable* items, size_t arraySize) 
  58:ArrayHelpers.h **** {
  59:ArrayHelpers.h ****     for (int i = 0; i < arraySize - 1; i += 1) 
  60:ArrayHelpers.h ****     {
  61:ArrayHelpers.h ****         if (__builtin_expect(items[i] > items[i + 1], 0)) 
 5496              		.loc 24 61 0
 5497 1086 488B4D10 		movq	16(%rbp), %rcx	# MEM[(long unsigned int *)arr_6 + 16B], D__lsm0.643
 5498              	.LVL424:
 5499 108a 488D4520 		leaq	32(%rbp), %rax	#, ivtmp.711
 5500 108e 48394D00 		cmpq	%rcx, 0(%rbp)	# D__lsm0.643, MEM[(long unsigned int *)arr_6]
 5501 1092 761C     		jbe	.L360	#,
 5502 1094 EB22     		jmp	.L354	#
 5503              	.LVL425:
 5504 1096 662E0F1F 		.p2align 4,,10
 5504      84000000 
 5504      0000
 5505              		.p2align 3
 5506              	.L397:
 5507 10a0 4883C010 		addq	$16, %rax	#, ivtmp.711
 5508 10a4 4889D1   		movq	%rdx, %rcx	# _19, D__lsm0.643
 5509              	# ArrayHelpers.h:59:     for (int i = 0; i < arraySize - 1; i += 1) 
  59:ArrayHelpers.h ****     {
 5510              		.loc 24 59 0
 5511 10a7 4939C7   		cmpq	%rax, %r15	# ivtmp.711, _235
 5512 10aa 0F84D801 		je	.L396	#,
 5512      0000
 5513              	.L360:
 5514              	.LVL426:
 5515              	# ArrayHelpers.h:61:         if (__builtin_expect(items[i] > items[i + 1], 0)) 
 5516              		.loc 24 61 0
 5517 10b0 488B10   		movq	(%rax), %rdx	# MEM[base: _132, offset: 0B], _19
 5518              	.LVL427:
 5519 10b3 4839CA   		cmpq	%rcx, %rdx	# D__lsm0.643, _19
 5520 10b6 73E8     		jnb	.L397	#,
 5521              	.LVL428:
 5522              	.L354:
 5523              	.LBE2958:
 5524              	.LBE2957:
 5525              	# test.cc:25:         debug::WriteLine("Wrong sort qs copy");
  23:test.cc       ****     if (!IsSorted(arr, arraySize))
  24:test.cc       ****     {
  25:test.cc       ****         debug::WriteLine("Wrong sort qs copy");
 5526              		.loc 21 25 0
 5527 10b8 488D3D00 		leaq	.LC8(%rip), %rdi	#,
 5527      000000
 5528 10bf E8000000 		call	_ZN5debug9WriteLineIJPKcEEEvDpT_	#
 5528      00
 5529              	.LVL429:
 5530              	.L376:
 5531              	.LBB2959:
 5532              	.LBB2960:
 5533              	.LBB2961:
 5534              	.LBB2962:
 5535              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 5536              		.loc 4 20 0
 5537 10c4 48690D00 		imulq	$48271, _ZN13randomisation5_seedE(%rip), %rcx	#, _seed, tmp216
 5537      0000008F 
 5537      BC0000
 5538 10cf 48BF0500 		movabsq	$8589934597, %rdi	#, tmp219
 5538      00000200 
 5538      0000
 5539 10d9 4889C8   		movq	%rcx, %rax	# tmp216, tmp255
 5540 10dc 48F7E7   		mulq	%rdi	# tmp219
 5541 10df 4889C8   		movq	%rcx, %rax	# tmp216, tmp220
 5542 10e2 4829D0   		subq	%rdx, %rax	# tmp218, tmp220
 5543 10e5 48D1E8   		shrq	%rax	# tmp221
 5544 10e8 4801C2   		addq	%rax, %rdx	# tmp221, tmp222
 5545 10eb 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.638
 5546 10ef 4889D0   		movq	%rdx, %rax	# _seed_lsm.638, tmp224
 5547 10f2 48C1E01F 		salq	$31, %rax	#, tmp224
 5548 10f6 4829D0   		subq	%rdx, %rax	# _seed_lsm.638, tmp225
 5549 10f9 4829C1   		subq	%rax, %rcx	# tmp225, tmp216
 5550 10fc 4C8D8900 		leaq	16384(%rcx), %r9	#, _141
 5550      400000
 5551 1103 4889CA   		movq	%rcx, %rdx	# tmp216, _seed_lsm.638
 5552              	.LVL430:
 5553 1106 662E0F1F 		.p2align 4,,10
 5553      84000000 
 5553      0000
 5554              		.p2align 3
 5555              	.L361:
 5556              	.LBE2962:
 5557              	.LBE2961:
 5558              	.LBB2963:
 5559              	.LBB2964:
 5560              	.LBB2965:
 5561 1110 4869F28F 		imulq	$48271, %rdx, %rsi	#, _seed_lsm.638, tmp226
 5561      BC0000
 5562              	.LBE2965:
 5563              	.LBE2964:
 5564              	# Randomisation.generated.h:28: 		arr[i].reference = reference + i;
  28:Randomisation.generated.h **** 	}
 5565              		.loc 5 28 0
 5566 1117 48890B   		movq	%rcx, (%rbx)	# ivtmp.699, MEM[base: _146, offset: 0B]
 5567 111a 4883C101 		addq	$1, %rcx	#, ivtmp.699
 5568              	.LVL431:
 5569 111e 4883C310 		addq	$16, %rbx	#, ivtmp.700
 5570              	.LBB2968:
 5571              	.LBB2966:
 5572              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 5573              		.loc 4 20 0
 5574 1122 4889F0   		movq	%rsi, %rax	# tmp226, tmp256
 5575 1125 48F7E7   		mulq	%rdi	# tmp228
 5576 1128 4889F0   		movq	%rsi, %rax	# tmp226, tmp229
 5577 112b 4829D0   		subq	%rdx, %rax	# tmp227, tmp229
 5578 112e 48D1E8   		shrq	%rax	# tmp230
 5579 1131 4801C2   		addq	%rax, %rdx	# tmp230, tmp231
 5580 1134 48C1EA1E 		shrq	$30, %rdx	#, _seed_lsm.638
 5581 1138 4889D0   		movq	%rdx, %rax	# _seed_lsm.638, tmp233
 5582 113b 48C1E01F 		salq	$31, %rax	#, tmp233
 5583 113f 4829D0   		subq	%rdx, %rax	# _seed_lsm.638, tmp234
 5584 1142 4829C6   		subq	%rax, %rsi	# tmp234, tmp226
 5585              	.LBE2966:
 5586              	.LBE2968:
 5587              	# Randomisation.generated.h:27: 		arr[i].key = randomisation::GenerateRandomUint64();
  27:Randomisation.generated.h **** 		arr[i].reference = reference + i;
 5588              		.loc 5 27 0
 5589 1145 488973E8 		movq	%rsi, -24(%rbx)	# _seed_lsm.638, MEM[base: _146, offset: -8B]
 5590              	.LBB2969:
 5591              	.LBB2967:
 5592              	# Randomisation.h:20:     _seed = _seed * 48271 % 2147483647;
  20:Randomisation.h ****     return _seed;
 5593              		.loc 4 20 0
 5594 1149 4889F2   		movq	%rsi, %rdx	# tmp226, _seed_lsm.638
 5595              	.LBE2967:
 5596              	.LBE2969:
 5597              	# Randomisation.generated.h:25: 	for (int i = 0; i < arraySize; i += 1)
  25:Randomisation.generated.h **** 	{
 5598              		.loc 5 25 0
 5599 114c 4939C9   		cmpq	%rcx, %r9	# ivtmp.699, _141
 5600 114f 75BF     		jne	.L361	#,
 5601 1151 48893500 		movq	%rsi, _ZN13randomisation5_seedE(%rip)	# _seed_lsm.638, _seed
 5601      000000
 5602              	.LVL432:
 5603              	.LBE2963:
 5604              	.LBE2960:
 5605              	.LBE2959:
 5606              	.LBB2970:
 5607              	.LBB2971:
 5608              	.LBB2972:
 5609              	# /usr/include/c++/7/bits/stl_algo.h:1968: 	  std::__introsort_loop(__first, __last,
1958:/usr/include/c++/7/bits/stl_algo.h **** 
1959:/usr/include/c++/7/bits/stl_algo.h ****   // sort
1960:/usr/include/c++/7/bits/stl_algo.h **** 
1961:/usr/include/c++/7/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1962:/usr/include/c++/7/bits/stl_algo.h ****     inline void
1963:/usr/include/c++/7/bits/stl_algo.h ****     __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
1964:/usr/include/c++/7/bits/stl_algo.h **** 	   _Compare __comp)
1965:/usr/include/c++/7/bits/stl_algo.h ****     {
1966:/usr/include/c++/7/bits/stl_algo.h ****       if (__first != __last)
1967:/usr/include/c++/7/bits/stl_algo.h **** 	{
1968:/usr/include/c++/7/bits/stl_algo.h **** 	  std::__introsort_loop(__first, __last,
 5610              		.loc 20 1968 0
 5611 1158 488D0D00 		leaq	_ZN11measurement13NormalCompareI11SortableRefEEbRT_S3_(%rip), %rcx	#,
 5611      000000
 5612 115f 4C89F6   		movq	%r14, %rsi	# i,
 5613 1162 4889EF   		movq	%rbp, %rdi	# arr,
 5614 1165 BA1C0000 		movl	$28, %edx	#,
 5614      00
 5615 116a E851FBFF 		call	_ZSt16__introsort_loopIP11SortableReflN9__gnu_cxx5__ops15_Iter_comp_iterIPFbRS0_S5_EEEEvT_S9_
 5615      FF
 5616              	.LVL433:
 5617 116f EB33     		jmp	.L368	#
 5618              	.LVL434:
 5619              	.L398:
 5620              	.LBB2973:
 5621              	.LBB2974:
 5622              	.LBB2975:
 5623              	.LBB2976:
 5624              	.LBB2977:
 5625              	.LBB2978:
 5626              	.LBB2979:
 5627              	.LBB2980:
 5628              	.LBB2981:
 5629              	.LBB2982:
 5630              	.LBB2983:
 5631              	# /usr/include/c++/7/bits/stl_algobase.h:569: 	  if (_Num)
 569:/usr/include/c++/7/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 5632              		.loc 23 569 0
 5633 1171 4939ED   		cmpq	%rbp, %r13	# arr, __i
 5634 1174 741D     		je	.L363	#,
 5635              	# /usr/include/c++/7/bits/stl_algobase.h:570: 	    __builtin_memmove(__result - _Num, __first, size
 5636              		.loc 23 570 0
 5637 1176 488B7C24 		movq	8(%rsp), %rdi	# %sfp, tmp246
 5637      08
 5638 117b 4C89EA   		movq	%r13, %rdx	# __i, tmp243
 5639 117e 4889EE   		movq	%rbp, %rsi	# arr,
 5640 1181 48894C24 		movq	%rcx, 16(%rsp)	# pretmp_140, %sfp
 5640      10
 5641 1186 4829EA   		subq	%rbp, %rdx	# arr, tmp243
 5642 1189 E8000000 		call	memmove@PLT	#
 5642      00
 5643              	.LVL435:
 5644 118e 488B4C24 		movq	16(%rsp), %rcx	# %sfp, pretmp_140
 5644      10
 5645              	.L363:
 5646              	.LBE2983:
 5647              	.LBE2982:
 5648              	.LBE2981:
 5649              	.LBE2980:
 5650              	.LBE2979:
 5651              	.LBE2978:
 5652              	.LBE2977:
 5653              	.LBE2976:
 5654              	# /usr/include/c++/7/bits/stl_algo.h:1845:       for (_RandomAccessIterator __i = __first + 1; __i 
1845:/usr/include/c++/7/bits/stl_algo.h **** 	{
 5655              		.loc 20 1845 0
 5656 1193 4983C510 		addq	$16, %r13	#, __i
 5657              	.LBB2994:
 5658              	.LBB2984:
 5659              	# /usr/include/c++/7/bits/stl_algo.h:1852: 	      *__first = _GLIBCXX_MOVE(__val);
1852:/usr/include/c++/7/bits/stl_algo.h **** 	    }
 5660              		.loc 20 1852 0
 5661 1197 48895D00 		movq	%rbx, 0(%rbp)	# _192, MEM[(struct SortableRef *)arr_6]
 5662 119b 48894D08 		movq	%rcx, 8(%rbp)	# pretmp_140, MEM[(struct SortableRef *)arr_6 + 8B]
 5663              	.LVL436:
 5664              	.LBE2984:
 5665              	.LBE2994:
 5666              	# /usr/include/c++/7/bits/stl_algo.h:1845:       for (_RandomAccessIterator __i = __first + 1; __i 
1845:/usr/include/c++/7/bits/stl_algo.h **** 	{
 5667              		.loc 20 1845 0
 5668 119f 4D39EC   		cmpq	%r13, %r12	# __i, _87
 5669 11a2 744C     		je	.L367	#,
 5670              	.LVL437:
 5671              	.L368:
 5672              	.LBB2995:
 5673              	.LBB2985:
 5674              	.LBB2986:
 5675              	.LBB2987:
 5676              	# Measure.h:199:     return left < right;
 199:Measure.h     **** }
 5677              		.loc 2 199 0
 5678 11a4 498B5D00 		movq	0(%r13), %rbx	# MEM[base: __i_285, offset: 0B], _192
 5679              	.LVL438:
 5680 11a8 498B4D08 		movq	8(%r13), %rcx	# MEM[base: __i_285, offset: 8], pretmp_140
 5681              	.LBE2987:
 5682              	.LBE2986:
 5683              	.LBE2985:
 5684              	# /usr/include/c++/7/bits/stl_algo.h:1847: 	  if (__comp(__i, __first))
1847:/usr/include/c++/7/bits/stl_algo.h **** 	    {
 5685              		.loc 20 1847 0
 5686 11ac 483B5D00 		cmpq	0(%rbp), %rbx	# MEM[(long unsigned int *)arr_6], _192
 5687 11b0 72BF     		jb	.L398	#,
 5688              	.LVL439:
 5689 11b2 498D45F0 		leaq	-16(%r13), %rax	#, __last
 5690              	.LVL440:
 5691              	.LBB2988:
 5692              	.LBB2989:
 5693              	# /usr/include/c++/7/bits/stl_algo.h:1828:       while (__comp(__val, __next))
1828:/usr/include/c++/7/bits/stl_algo.h **** 	{
 5694              		.loc 20 1828 0
 5695 11b6 49395DF0 		cmpq	%rbx, -16(%r13)	# _192, MEM[base: __i_285, offset: -16B]
 5696 11ba 770F     		ja	.L366	#,
 5697 11bc E91F0100 		jmp	.L399	#
 5697      00
 5698              	.LVL441:
 5699              		.p2align 4,,10
 5700 11c1 0F1F8000 		.p2align 3
 5700      000000
 5701              	.L382:
 5702 11c8 4889D0   		movq	%rdx, %rax	# __next, __last
 5703              	.LVL442:
 5704              	.L366:
 5705              	# /usr/include/c++/7/bits/stl_algo.h:1830: 	  *__last = _GLIBCXX_MOVE(*__next);
1830:/usr/include/c++/7/bits/stl_algo.h **** 	  __last = __next;
 5706              		.loc 20 1830 0
 5707 11cb C5FA6F00 		vmovdqu	(%rax), %xmm0	# MEM[base: __next_286, offset: 0], MEM[base: __next_286, offset: 0]
 5708              	# /usr/include/c++/7/bits/stl_algo.h:1832: 	  --__next;
1832:/usr/include/c++/7/bits/stl_algo.h **** 	}
 5709              		.loc 20 1832 0
 5710 11cf 488D50F0 		leaq	-16(%rax), %rdx	#, __next
 5711              	# /usr/include/c++/7/bits/stl_algo.h:1830: 	  *__last = _GLIBCXX_MOVE(*__next);
1830:/usr/include/c++/7/bits/stl_algo.h **** 	  __last = __next;
 5712              		.loc 20 1830 0
 5713 11d3 C5F81140 		vmovups	%xmm0, 16(%rax)	# MEM[base: __next_286, offset: 0], MEM[base: __next_286, offset: 16B]
 5713      10
 5714              	.LVL443:
 5715              	# /usr/include/c++/7/bits/stl_algo.h:1828:       while (__comp(__val, __next))
1828:/usr/include/c++/7/bits/stl_algo.h **** 	{
 5716              		.loc 20 1828 0
 5717 11d8 483B58F0 		cmpq	-16(%rax), %rbx	# MEM[base: __next_189, offset: 0B], _192
 5718 11dc 72EA     		jb	.L382	#,
 5719              	.LVL444:
 5720              	.L365:
 5721              	.LBE2989:
 5722              	.LBE2988:
 5723              	.LBE2995:
 5724              	# /usr/include/c++/7/bits/stl_algo.h:1845:       for (_RandomAccessIterator __i = __first + 1; __i 
1845:/usr/include/c++/7/bits/stl_algo.h **** 	{
 5725              		.loc 20 1845 0
 5726 11de 4983C510 		addq	$16, %r13	#, __i
 5727              	.LBB2996:
 5728              	.LBB2992:
 5729              	.LBB2990:
 5730              	# /usr/include/c++/7/bits/stl_algo.h:1834:       *__last = _GLIBCXX_MOVE(__val);
1834:/usr/include/c++/7/bits/stl_algo.h ****     }
 5731              		.loc 20 1834 0
 5732 11e2 488918   		movq	%rbx, (%rax)	# _192, MEM[(struct SortableRef *)__last_212]
 5733 11e5 48894808 		movq	%rcx, 8(%rax)	# pretmp_140, MEM[(struct SortableRef *)__last_212 + 8B]
 5734              	.LVL445:
 5735              	.LBE2990:
 5736              	.LBE2992:
 5737              	.LBE2996:
 5738              	# /usr/include/c++/7/bits/stl_algo.h:1845:       for (_RandomAccessIterator __i = __first + 1; __i 
1845:/usr/include/c++/7/bits/stl_algo.h **** 	{
 5739              		.loc 20 1845 0
 5740 11e9 4D39EC   		cmpq	%r13, %r12	# __i, _87
 5741 11ec 75B6     		jne	.L368	#,
 5742              	.LVL446:
 5743 11ee 6690     		.p2align 4,,10
 5744              		.p2align 3
 5745              	.L367:
 5746              	.LBE2975:
 5747              	.LBE2974:
 5748              	.LBB2999:
 5749              	.LBB3000:
 5750              	.LBB3001:
 5751              	.LBB3002:
 5752              	# /usr/include/c++/7/bits/stl_algo.h:1825: 	__val = _GLIBCXX_MOVE(*__last);
1825:/usr/include/c++/7/bits/stl_algo.h ****       _RandomAccessIterator __next = __last;
 5753              		.loc 20 1825 0
 5754 11f0 498B4D00 		movq	0(%r13), %rcx	# MEM[base: __i_226, offset: 0], __val
 5755              	.LVL447:
 5756 11f4 498D45F0 		leaq	-16(%r13), %rax	#, __last
 5757 11f8 498B7508 		movq	8(%r13), %rsi	# MEM[base: __i_226, offset: 8], __val$reference
 5758              	.LVL448:
 5759              	# /usr/include/c++/7/bits/stl_algo.h:1828:       while (__comp(__val, __next))
1828:/usr/include/c++/7/bits/stl_algo.h **** 	{
 5760              		.loc 20 1828 0
 5761 11fc 493B4DF0 		cmpq	-16(%r13), %rcx	# MEM[base: __i_226, offset: -16B], __val
 5762 1200 7211     		jb	.L372	#,
 5763 1202 E9AE0000 		jmp	.L400	#
 5763      00
 5764              	.LVL449:
 5765 1207 660F1F84 		.p2align 4,,10
 5765      00000000 
 5765      00
 5766              		.p2align 3
 5767              	.L384:
 5768 1210 4889D0   		movq	%rdx, %rax	# __next, __last
 5769              	.LVL450:
 5770              	.L372:
 5771              	# /usr/include/c++/7/bits/stl_algo.h:1830: 	  *__last = _GLIBCXX_MOVE(*__next);
1830:/usr/include/c++/7/bits/stl_algo.h **** 	  __last = __next;
 5772              		.loc 20 1830 0
 5773 1213 C5FA6F00 		vmovdqu	(%rax), %xmm0	# MEM[base: __next_280, offset: 0], MEM[base: __next_280, offset: 0]
 5774              	# /usr/include/c++/7/bits/stl_algo.h:1832: 	  --__next;
1832:/usr/include/c++/7/bits/stl_algo.h **** 	}
 5775              		.loc 20 1832 0
 5776 1217 488D50F0 		leaq	-16(%rax), %rdx	#, __next
 5777              	# /usr/include/c++/7/bits/stl_algo.h:1830: 	  *__last = _GLIBCXX_MOVE(*__next);
1830:/usr/include/c++/7/bits/stl_algo.h **** 	  __last = __next;
 5778              		.loc 20 1830 0
 5779 121b C5F81140 		vmovups	%xmm0, 16(%rax)	# MEM[base: __next_280, offset: 0], MEM[base: __next_280, offset: 16B]
 5779      10
 5780              	.LVL451:
 5781              	# /usr/include/c++/7/bits/stl_algo.h:1828:       while (__comp(__val, __next))
1828:/usr/include/c++/7/bits/stl_algo.h **** 	{
 5782              		.loc 20 1828 0
 5783 1220 483B48F0 		cmpq	-16(%rax), %rcx	# MEM[base: __next_169, offset: 0B], __val
 5784 1224 72EA     		jb	.L384	#,
 5785              	.LBE3002:
 5786              	.LBE3001:
 5787              	# /usr/include/c++/7/bits/stl_algo.h:1866:       for (_RandomAccessIterator __i = __first; __i != _
1866:/usr/include/c++/7/bits/stl_algo.h **** 	std::__unguarded_linear_insert(__i,
 5788              		.loc 20 1866 0
 5789 1226 4983C510 		addq	$16, %r13	#, __i
 5790              	.LBB3006:
 5791              	.LBB3003:
 5792              	# /usr/include/c++/7/bits/stl_algo.h:1834:       *__last = _GLIBCXX_MOVE(__val);
1834:/usr/include/c++/7/bits/stl_algo.h ****     }
 5793              		.loc 20 1834 0
 5794 122a 488908   		movq	%rcx, (%rax)	# __val, MEM[(struct SortableRef *)__last_246]
 5795 122d 48897008 		movq	%rsi, 8(%rax)	# __val$reference, MEM[(struct SortableRef *)__last_246 + 8B]
 5796              	.LVL452:
 5797              	.LBE3003:
 5798              	.LBE3006:
 5799              	# /usr/include/c++/7/bits/stl_algo.h:1866:       for (_RandomAccessIterator __i = __first; __i != _
1866:/usr/include/c++/7/bits/stl_algo.h **** 	std::__unguarded_linear_insert(__i,
 5800              		.loc 20 1866 0
 5801 1231 4D39EE   		cmpq	%r13, %r14	# __i, i
 5802 1234 75BA     		jne	.L367	#,
 5803              	.LVL453:
 5804              	.L404:
 5805              	.LBE3000:
 5806              	.LBE2999:
 5807              	.LBE2973:
 5808              	.LBE2972:
 5809              	.LBE2971:
 5810              	.LBE2970:
 5811              	.LBB3018:
 5812              	.LBB3019:
 5813              	# ArrayHelpers.h:61:         if (__builtin_expect(items[i] > items[i + 1], 0)) 
 5814              		.loc 24 61 0
 5815 1236 488B5510 		movq	16(%rbp), %rdx	# MEM[(long unsigned int *)arr_6 + 16B], D__lsm0.644
 5816              	.LVL454:
 5817 123a 483B5500 		cmpq	0(%rbp), %rdx	# MEM[(long unsigned int *)arr_6], D__lsm0.644
 5818 123e 7225     		jb	.L369	#,
 5819 1240 4883C520 		addq	$32, %rbp	#, ivtmp.654
 5820 1244 EB16     		jmp	.L375	#
 5821              	.LVL455:
 5822 1246 662E0F1F 		.p2align 4,,10
 5822      84000000 
 5822      0000
 5823              		.p2align 3
 5824              	.L402:
 5825 1250 4883C510 		addq	$16, %rbp	#, ivtmp.654
 5826 1254 4889C2   		movq	%rax, %rdx	# _45, D__lsm0.644
 5827              	# ArrayHelpers.h:59:     for (int i = 0; i < arraySize - 1; i += 1) 
  59:ArrayHelpers.h ****     {
 5828              		.loc 24 59 0
 5829 1257 4939EF   		cmpq	%rbp, %r15	# ivtmp.654, _235
 5830 125a 7423     		je	.L401	#,
 5831              	.L375:
 5832              	.LVL456:
 5833              	# ArrayHelpers.h:61:         if (__builtin_expect(items[i] > items[i + 1], 0)) 
 5834              		.loc 24 61 0
 5835 125c 488B4500 		movq	0(%rbp), %rax	# MEM[base: _248, offset: 0B], _45
 5836              	.LVL457:
 5837 1260 4839D0   		cmpq	%rdx, %rax	# D__lsm0.644, _45
 5838 1263 73EB     		jnb	.L402	#,
 5839              	.LVL458:
 5840              	.L369:
 5841              	.LBE3019:
 5842              	.LBE3018:
 5843              	# test.cc:35:         debug::WriteLine("Wrong sort std sort");
  26:test.cc       ****     }
  27:test.cc       ****     else
  28:test.cc       ****     {
  29:test.cc       ****         debug::WriteLine("Correct sort qs copy");
  30:test.cc       ****     }
  31:test.cc       ****     randomisation::GenerateRandomArray(arr, arraySize);
  32:test.cc       ****     std::sort(arr, arr + arraySize, &measurement::NormalCompare<SortableRef>);
  33:test.cc       ****     if (!IsSorted(arr, arraySize))
  34:test.cc       ****     {
  35:test.cc       ****         debug::WriteLine("Wrong sort std sort");
 5844              		.loc 21 35 0
 5845 1265 488D3D00 		leaq	.LC9(%rip), %rdi	#,
 5845      000000
 5846              	.L392:
 5847              	# test.cc:41: }
  36:test.cc       ****     }
  37:test.cc       ****     else
  38:test.cc       ****     {
  39:test.cc       ****         debug::WriteLine("Correct sort std sort");
  40:test.cc       ****     }
  41:test.cc       **** }
 5848              		.loc 21 41 0
 5849 126c 4883C428 		addq	$40, %rsp	#,
 5850              		.cfi_remember_state
 5851              		.cfi_def_cfa_offset 56
 5852 1270 5B       		popq	%rbx	#
 5853              		.cfi_def_cfa_offset 48
 5854 1271 5D       		popq	%rbp	#
 5855              		.cfi_def_cfa_offset 40
 5856 1272 415C     		popq	%r12	#
 5857              		.cfi_def_cfa_offset 32
 5858              	.LVL459:
 5859 1274 415D     		popq	%r13	#
 5860              		.cfi_def_cfa_offset 24
 5861 1276 415E     		popq	%r14	#
 5862              		.cfi_def_cfa_offset 16
 5863              	.LVL460:
 5864 1278 415F     		popq	%r15	#
 5865              		.cfi_def_cfa_offset 8
 5866              	.LVL461:
 5867              	# test.cc:39:         debug::WriteLine("Correct sort std sort");
  39:test.cc       ****     }
 5868              		.loc 21 39 0
 5869 127a E9000000 		jmp	_ZN5debug9WriteLineIJPKcEEEvDpT_	#
 5869      00
 5870              	.LVL462:
 5871              	.L401:
 5872              		.cfi_restore_state
 5873 127f 488D3D00 		leaq	.LC10(%rip), %rdi	#,
 5873      000000
 5874 1286 EBE4     		jmp	.L392	#
 5875              	.LVL463:
 5876              	.L396:
 5877              	# test.cc:29:         debug::WriteLine("Correct sort qs copy");
  29:test.cc       ****     }
 5878              		.loc 21 29 0
 5879 1288 488D3D00 		leaq	.LC7(%rip), %rdi	#,
 5879      000000
 5880 128f E8000000 		call	_ZN5debug9WriteLineIJPKcEEEvDpT_	#
 5880      00
 5881              	.LVL464:
 5882 1294 E92BFEFF 		jmp	.L376	#
 5882      FF
 5883              	.LVL465:
 5884              	.L395:
 5885              	.LBB3020:
 5886              	.LBB2955:
 5887              	.LBB2953:
 5888              	.LBB2951:
 5889              	.LBB2948:
 5890              	.LBB2945:
 5891              	.LBB2942:
 5892              	.LBB2941:
 5893              	.LBB2939:
 5894              	.LBB2936:
 5895              	# Quicksort_Copy.h:128:     while (compare(&val, next))
 128:Quicksort_Copy.h ****     {
 5896              		.loc 16 128 0
 5897 1299 4C89F0   		movq	%r14, %rax	# i, last
 5898              	.LVL466:
 5899              	.LBE2936:
 5900              	.LBE2939:
 5901              	# Quicksort_Copy.h:140:     for (TValueType* i = first; i != last; ++i)
 140:Quicksort_Copy.h ****     {
 5902              		.loc 16 140 0
 5903 129c 4983C610 		addq	$16, %r14	#, i
 5904              	.LVL467:
 5905              	.LBB2940:
 5906              	.LBB2937:
 5907              	# Quicksort_Copy.h:134:     *last = std::move(val);
 134:Quicksort_Copy.h **** }
 5908              		.loc 16 134 0
 5909 12a0 488908   		movq	%rcx, (%rax)	# val, MEM[(struct SortableRef *)last_247]
 5910 12a3 48897008 		movq	%rsi, 8(%rax)	# val$reference, MEM[(struct SortableRef *)last_247 + 8B]
 5911              	.LVL468:
 5912              	.LBE2937:
 5913              	.LBE2940:
 5914              	# Quicksort_Copy.h:140:     for (TValueType* i = first; i != last; ++i)
 140:Quicksort_Copy.h ****     {
 5915              		.loc 16 140 0
 5916 12a7 4D39F7   		cmpq	%r14, %r15	# i, _235
 5917 12aa 0F8590FD 		jne	.L352	#,
 5917      FFFF
 5918 12b0 E9D1FDFF 		jmp	.L403	#
 5918      FF
 5919              	.LVL469:
 5920              	.L400:
 5921              	.LBE2941:
 5922              	.LBE2942:
 5923              	.LBE2945:
 5924              	.LBE2948:
 5925              	.LBE2951:
 5926              	.LBE2953:
 5927              	.LBE2955:
 5928              	.LBE3020:
 5929              	.LBB3021:
 5930              	.LBB3016:
 5931              	.LBB3014:
 5932              	.LBB3012:
 5933              	.LBB3010:
 5934              	.LBB3009:
 5935              	.LBB3007:
 5936              	.LBB3004:
 5937              	# /usr/include/c++/7/bits/stl_algo.h:1828:       while (__comp(__val, __next))
1828:/usr/include/c++/7/bits/stl_algo.h **** 	{
 5938              		.loc 20 1828 0
 5939 12b5 4C89E8   		movq	%r13, %rax	# __i, __last
 5940              	.LVL470:
 5941              	.LBE3004:
 5942              	.LBE3007:
 5943              	# /usr/include/c++/7/bits/stl_algo.h:1866:       for (_RandomAccessIterator __i = __first; __i != _
1866:/usr/include/c++/7/bits/stl_algo.h **** 	std::__unguarded_linear_insert(__i,
 5944              		.loc 20 1866 0
 5945 12b8 4983C510 		addq	$16, %r13	#, __i
 5946              	.LVL471:
 5947              	.LBB3008:
 5948              	.LBB3005:
 5949              	# /usr/include/c++/7/bits/stl_algo.h:1834:       *__last = _GLIBCXX_MOVE(__val);
1834:/usr/include/c++/7/bits/stl_algo.h ****     }
 5950              		.loc 20 1834 0
 5951 12bc 488908   		movq	%rcx, (%rax)	# __val, MEM[(struct SortableRef *)__last_246]
 5952 12bf 48897008 		movq	%rsi, 8(%rax)	# __val$reference, MEM[(struct SortableRef *)__last_246 + 8B]
 5953              	.LVL472:
 5954              	.LBE3005:
 5955              	.LBE3008:
 5956              	# /usr/include/c++/7/bits/stl_algo.h:1866:       for (_RandomAccessIterator __i = __first; __i != _
1866:/usr/include/c++/7/bits/stl_algo.h **** 	std::__unguarded_linear_insert(__i,
 5957              		.loc 20 1866 0
 5958 12c3 4D39EE   		cmpq	%r13, %r14	# __i, i
 5959 12c6 0F8524FF 		jne	.L367	#,
 5959      FFFF
 5960 12cc E965FFFF 		jmp	.L404	#
 5960      FF
 5961              	.LVL473:
 5962              	.L394:
 5963              	.LBE3009:
 5964              	.LBE3010:
 5965              	.LBE3012:
 5966              	.LBE3014:
 5967              	.LBE3016:
 5968              	.LBE3021:
 5969              	.LBB3022:
 5970              	.LBB2956:
 5971              	.LBB2954:
 5972              	.LBB2952:
 5973              	.LBB2949:
 5974              	.LBB2946:
 5975              	.LBB2943:
 5976              	.LBB2930:
 5977              	.LBB2929:
 5978              	.LBB2926:
 5979              	.LBB2925:
 5980              	# Quicksort_Copy.h:128:     while (compare(&val, next))
 128:Quicksort_Copy.h ****     {
 5981              		.loc 16 128 0
 5982 12d1 4C89F0   		movq	%r14, %rax	# i, last
 5983              	.LVL474:
 5984              	# Quicksort_Copy.h:134:     *last = std::move(val);
 134:Quicksort_Copy.h **** }
 5985              		.loc 16 134 0
 5986 12d4 488908   		movq	%rcx, (%rax)	# _115, MEM[(struct SortableRef *)last_225]
 5987 12d7 4C894808 		movq	%r9, 8(%rax)	# pretmp_120, MEM[(struct SortableRef *)last_225 + 8B]
 5988              	.LVL475:
 5989 12db E94DFDFF 		jmp	.L405	#
 5989      FF
 5990              	.LVL476:
 5991              	.L399:
 5992              	.LBE2925:
 5993              	.LBE2926:
 5994              	.LBE2929:
 5995              	.LBE2930:
 5996              	.LBE2943:
 5997              	.LBE2946:
 5998              	.LBE2949:
 5999              	.LBE2952:
 6000              	.LBE2954:
 6001              	.LBE2956:
 6002              	.LBE3022:
 6003              	.LBB3023:
 6004              	.LBB3017:
 6005              	.LBB3015:
 6006              	.LBB3013:
 6007              	.LBB3011:
 6008              	.LBB2998:
 6009              	.LBB2997:
 6010              	.LBB2993:
 6011              	.LBB2991:
 6012              	# /usr/include/c++/7/bits/stl_algo.h:1828:       while (__comp(__val, __next))
1828:/usr/include/c++/7/bits/stl_algo.h **** 	{
 6013              		.loc 20 1828 0
 6014 12e0 4C89E8   		movq	%r13, %rax	# __i, __last
 6015              	.LVL477:
 6016 12e3 E9F6FEFF 		jmp	.L365	#
 6016      FF
 6017              	.LBE2991:
 6018              	.LBE2993:
 6019              	.LBE2997:
 6020              	.LBE2998:
 6021              	.LBE3011:
 6022              	.LBE3013:
 6023              	.LBE3015:
 6024              	.LBE3017:
 6025              	.LBE3023:
 6026              		.cfi_endproc
 6027              	.LFE3387:
 6029              		.section	.text.startup,"ax",@progbits
 6030              		.p2align 4,,15
 6032              	_GLOBAL__sub_I__ZN13randomisation5_seedE:
 6033              	.LFB4095:
 6034              		.loc 21 41 0
 6035              		.cfi_startproc
 6036              	.LVL478:
 6037              	.LBB3024:
 6038              	.LBB3025:
 6039              	# /usr/include/c++/7/iostream:74:   static ios_base::Init __ioinit;
 6040              		.file 25 "/usr/include/c++/7/iostream"
   1:/usr/include/c++/7/iostream **** // Standard iostream objects -*- C++ -*-
   2:/usr/include/c++/7/iostream **** 
   3:/usr/include/c++/7/iostream **** // Copyright (C) 1997-2017 Free Software Foundation, Inc.
   4:/usr/include/c++/7/iostream **** //
   5:/usr/include/c++/7/iostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/7/iostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/7/iostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/7/iostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/7/iostream **** // any later version.
  10:/usr/include/c++/7/iostream **** 
  11:/usr/include/c++/7/iostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/7/iostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/7/iostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/7/iostream **** // GNU General Public License for more details.
  15:/usr/include/c++/7/iostream **** 
  16:/usr/include/c++/7/iostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/7/iostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/7/iostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/7/iostream **** 
  20:/usr/include/c++/7/iostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/7/iostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/7/iostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/7/iostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/7/iostream **** 
  25:/usr/include/c++/7/iostream **** /** @file include/iostream
  26:/usr/include/c++/7/iostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/7/iostream ****  */
  28:/usr/include/c++/7/iostream **** 
  29:/usr/include/c++/7/iostream **** //
  30:/usr/include/c++/7/iostream **** // ISO C++ 14882: 27.3  Standard iostream objects
  31:/usr/include/c++/7/iostream **** //
  32:/usr/include/c++/7/iostream **** 
  33:/usr/include/c++/7/iostream **** #ifndef _GLIBCXX_IOSTREAM
  34:/usr/include/c++/7/iostream **** #define _GLIBCXX_IOSTREAM 1
  35:/usr/include/c++/7/iostream **** 
  36:/usr/include/c++/7/iostream **** #pragma GCC system_header
  37:/usr/include/c++/7/iostream **** 
  38:/usr/include/c++/7/iostream **** #include <bits/c++config.h>
  39:/usr/include/c++/7/iostream **** #include <ostream>
  40:/usr/include/c++/7/iostream **** #include <istream>
  41:/usr/include/c++/7/iostream **** 
  42:/usr/include/c++/7/iostream **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/7/iostream **** {
  44:/usr/include/c++/7/iostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/7/iostream **** 
  46:/usr/include/c++/7/iostream ****   /**
  47:/usr/include/c++/7/iostream ****    *  @name Standard Stream Objects
  48:/usr/include/c++/7/iostream ****    *
  49:/usr/include/c++/7/iostream ****    *  The &lt;iostream&gt; header declares the eight <em>standard stream
  50:/usr/include/c++/7/iostream ****    *  objects</em>.  For other declarations, see
  51:/usr/include/c++/7/iostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html
  52:/usr/include/c++/7/iostream ****    *  and the @link iosfwd I/O forward declarations @endlink
  53:/usr/include/c++/7/iostream ****    *
  54:/usr/include/c++/7/iostream ****    *  They are required by default to cooperate with the global C
  55:/usr/include/c++/7/iostream ****    *  library's @c FILE streams, and to be available during program
  56:/usr/include/c++/7/iostream ****    *  startup and termination. For more information, see the section of the
  57:/usr/include/c++/7/iostream ****    *  manual linked to above.
  58:/usr/include/c++/7/iostream ****   */
  59:/usr/include/c++/7/iostream ****   //@{
  60:/usr/include/c++/7/iostream ****   extern istream cin;		/// Linked to standard input
  61:/usr/include/c++/7/iostream ****   extern ostream cout;		/// Linked to standard output
  62:/usr/include/c++/7/iostream ****   extern ostream cerr;		/// Linked to standard error (unbuffered)
  63:/usr/include/c++/7/iostream ****   extern ostream clog;		/// Linked to standard error (buffered)
  64:/usr/include/c++/7/iostream **** 
  65:/usr/include/c++/7/iostream **** #ifdef _GLIBCXX_USE_WCHAR_T
  66:/usr/include/c++/7/iostream ****   extern wistream wcin;		/// Linked to standard input
  67:/usr/include/c++/7/iostream ****   extern wostream wcout;	/// Linked to standard output
  68:/usr/include/c++/7/iostream ****   extern wostream wcerr;	/// Linked to standard error (unbuffered)
  69:/usr/include/c++/7/iostream ****   extern wostream wclog;	/// Linked to standard error (buffered)
  70:/usr/include/c++/7/iostream **** #endif
  71:/usr/include/c++/7/iostream ****   //@}
  72:/usr/include/c++/7/iostream **** 
  73:/usr/include/c++/7/iostream ****   // For construction of filebuffers for cout, cin, cerr, clog et. al.
  74:/usr/include/c++/7/iostream ****   static ios_base::Init __ioinit;
 6041              		.loc 25 74 0
 6042 0000 488D3D00 		leaq	_ZStL8__ioinit(%rip), %rdi	#,
 6042      000000
 6043              	.LBE3025:
 6044              	.LBE3024:
 6045              	# test.cc:41: }
 6046              		.loc 21 41 0
 6047 0007 4883EC08 		subq	$8, %rsp	#,
 6048              		.cfi_def_cfa_offset 16
 6049              	.LBB3028:
 6050              	.LBB3026:
 6051              	# /usr/include/c++/7/iostream:74:   static ios_base::Init __ioinit;
 6052              		.loc 25 74 0
 6053 000b E8000000 		call	_ZNSt8ios_base4InitC1Ev@PLT	#
 6053      00
 6054              	.LVL479:
 6055 0010 488B3D00 		movq	_ZNSt8ios_base4InitD1Ev@GOTPCREL(%rip), %rdi	#,
 6055      000000
 6056              	.LBE3026:
 6057              	.LBE3028:
 6058              	# test.cc:41: }
 6059              		.loc 21 41 0
 6060 0017 4883C408 		addq	$8, %rsp	#,
 6061              		.cfi_def_cfa_offset 8
 6062              	.LBB3029:
 6063              	.LBB3027:
 6064              	# /usr/include/c++/7/iostream:74:   static ios_base::Init __ioinit;
 6065              		.loc 25 74 0
 6066 001b 488D1500 		leaq	__dso_handle(%rip), %rdx	#,
 6066      000000
 6067 0022 488D3500 		leaq	_ZStL8__ioinit(%rip), %rsi	#,
 6067      000000
 6068 0029 E9000000 		jmp	__cxa_atexit@PLT	#
 6068      00
 6069              	.LVL480:
 6070              	.LBE3027:
 6071              	.LBE3029:
 6072              		.cfi_endproc
 6073              	.LFE4095:
 6075              		.section	.init_array,"aw"
 6076              		.align 8
 6077 0000 00000000 		.quad	_GLOBAL__sub_I__ZN13randomisation5_seedE
 6077      00000000 
 6078              		.globl	_ZN13randomisation5_seedE
 6079              		.data
 6080              		.align 8
 6083              	_ZN13randomisation5_seedE:
 6084 0000 01000000 		.quad	1
 6084      00000000 
 6085              		.local	_ZStL8__ioinit
 6086              		.comm	_ZStL8__ioinit,1,1
 6087              		.text
 6088              	.Letext0:
 6089              		.file 26 "/usr/include/c++/7/bits/stringfwd.h"
 6090              		.file 27 "/usr/include/c++/7/cwchar"
 6091              		.file 28 "/usr/include/c++/7/new"
 6092              		.file 29 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h"
 6093              		.file 30 "/usr/include/c++/7/bits/exception_ptr.h"
 6094              		.file 31 "/usr/include/c++/7/type_traits"
 6095              		.file 32 "/usr/include/c++/7/bits/stl_pair.h"
 6096              		.file 33 "/usr/include/c++/7/bits/cpp_type_traits.h"
 6097              		.file 34 "/usr/include/c++/7/bits/stl_iterator_base_types.h"
 6098              		.file 35 "/usr/include/c++/7/debug/debug.h"
 6099              		.file 36 "/usr/include/c++/7/cstdint"
 6100              		.file 37 "/usr/include/c++/7/clocale"
 6101              		.file 38 "/usr/include/c++/7/bits/allocator.h"
 6102              		.file 39 "/usr/include/c++/7/cstdlib"
 6103              		.file 40 "/usr/include/c++/7/cstdio"
 6104              		.file 41 "/usr/include/c++/7/bits/alloc_traits.h"
 6105              		.file 42 "/usr/include/c++/7/initializer_list"
 6106              		.file 43 "/usr/include/c++/7/system_error"
 6107              		.file 44 "/usr/include/c++/7/bits/ios_base.h"
 6108              		.file 45 "/usr/include/c++/7/cwctype"
 6109              		.file 46 "/usr/include/c++/7/bits/ostream.tcc"
 6110              		.file 47 "/usr/include/c++/7/iosfwd"
 6111              		.file 48 "/usr/include/c++/7/bits/algorithmfwd.h"
 6112              		.file 49 "/usr/include/c++/7/bits/uses_allocator.h"
 6113              		.file 50 "/usr/include/c++/7/tuple"
 6114              		.file 51 "/usr/include/c++/7/bits/stl_vector.h"
 6115              		.file 52 "/usr/include/c++/7/bits/vector.tcc"
 6116              		.file 53 "/usr/include/c++/7/cmath"
 6117              		.file 54 "/usr/include/c++/7/cstring"
 6118              		.file 55 "/usr/include/c++/7/bits/ptr_traits.h"
 6119              		.file 56 "/usr/include/c++/7/bits/stl_construct.h"
 6120              		.file 57 "/usr/include/c++/7/bits/stl_iterator_base_funcs.h"
 6121              		.file 58 "/usr/include/c++/7/bits/functexcept.h"
 6122              		.file 59 "/usr/include/c++/7/bits/ostream_insert.h"
 6123              		.file 60 "/usr/include/c++/7/ext/numeric_traits.h"
 6124              		.file 61 "/usr/include/c++/7/ext/alloc_traits.h"
 6125              		.file 62 "/usr/include/c++/7/bits/stl_iterator.h"
 6126              		.file 63 "/usr/include/c++/7/ext/type_traits.h"
 6127              		.file 64 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h"
 6128              		.file 65 "<built-in>"
 6129              		.file 66 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h"
 6130              		.file 67 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h"
 6131              		.file 68 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h"
 6132              		.file 69 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h"
 6133              		.file 70 "/usr/include/x86_64-linux-gnu/bits/libio.h"
 6134              		.file 71 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 6135              		.file 72 "/usr/include/wchar.h"
 6136              		.file 73 "/usr/include/x86_64-linux-gnu/bits/wchar2.h"
 6137              		.file 74 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h"
 6138              		.file 75 "/usr/include/x86_64-linux-gnu/bits/types.h"
 6139              		.file 76 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h"
 6140              		.file 77 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
 6141              		.file 78 "/usr/include/stdint.h"
 6142              		.file 79 "/usr/include/locale.h"
 6143              		.file 80 "/usr/include/time.h"
 6144              		.file 81 "/usr/include/x86_64-linux-gnu/c++/7/bits/atomic_word.h"
 6145              		.file 82 "/usr/include/stdlib.h"
 6146              		.file 83 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h"
 6147              		.file 84 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h"
 6148              		.file 85 "/usr/include/x86_64-linux-gnu/bits/stdlib.h"
 6149              		.file 86 "/usr/include/x86_64-linux-gnu/bits/_G_config.h"
 6150              		.file 87 "/usr/include/stdio.h"
 6151              		.file 88 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 6152              		.file 89 "/usr/include/x86_64-linux-gnu/bits/stdio.h"
 6153              		.file 90 "/usr/include/errno.h"
 6154              		.file 91 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h"
 6155              		.file 92 "/usr/include/wctype.h"
 6156              		.file 93 "/usr/include/c++/7/stdlib.h"
 6157              		.file 94 "/usr/include/asm-generic/int-ll64.h"
 6158              		.file 95 "/usr/include/linux/perf_event.h"
 6159              		.file 96 "/usr/include/unistd.h"
 6160              		.file 97 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h"
 6161              		.file 98 "Performancing.h"
 6162              		.file 99 "/usr/include/math.h"
 6163              		.file 100 "/usr/include/c++/7/math.h"
 6164              		.file 101 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h"
 6165              		.file 102 "/usr/include/string.h"
 6166              		.file 103 "Enumerations.h"
 44219              		.align 8
 44222              	DW.ref.__gxx_personality_v0:
 44223 0000 00000000 		.quad	__gxx_personality_v0
 44223      00000000 
 44224              		.hidden	__dso_handle
 44225              		.ident	"GCC: (Ubuntu 7.3.0-27ubuntu1~18.04) 7.3.0"
 44226              		.section	.note.GNU-stack,"",@progbits
