
#include <string>
#include "FunctionalHelpers.hpp"

#include "GenerateNetworkVerifier.hpp"

namespace codegeneration
{

void WriteNetworkVerification(CPlusPlusCodeGenerator* gen)
{
    gen->WriteLine(GetAutogeneratedPreamble());
    gen->WriteHeaderPragma("VERIFY_NETWORKS_GENERATED_H", [=](){
        gen->WriteIncludeBrackets(
            "inttypes.h",
            "ostream");
        gen->WriteLine("");

        gen->WriteIncludeQuotes(
            "networks/BestNetworks.generated.h",
            "networks/BoseNelson.generated.h",
            "networks/BoseNelsonParallel.generated.h",
            "networks/BoseNelsonParameter.generated.h",
            "networks/BoseNelsonRecursive.generated.h",
            "networks/Batcher.generated.h",
            "conditional_swap/ConditionalSwapX86.h",
            "VerifyNetworks.h",
            "DebugHelper.h");
        gen->WriteLine("");

        gen->WriteNamespace("verification", [=](){
            gen->WriteLine("");

            std::vector<std::string> network_nested_namespaces = {"best", "bosenelson", "bosenelsonparallel", "bosenelsonparameter", "bosenelsonrecursive", "batcher"};
            gen->WriteLine("void VerifyNetworks()");
            gen->WriteBlock([=]{
                gen->WriteLine("int numberOfIncorrectNetworks = 0;");
                Multicall<std::string>(
                    [=](std::string name)
                    {
                        gen->WriteLine("debug::WriteLine(\"verifying ", name, " networks\");");
                        gen->WriteForLoop("arraySize", 2, 17, [=](){
                            gen->WriteLine("debug::WriteLine(\"verifying size \", arraySize);");
                            gen->WriteLine("bool result = verification::VerifyNetwork(arraySize, &networks::", name, "::sortN<conditional_swap::CS_Int, int>);");
                            gen->WriteLine("if (!result)");
                            gen->WriteBlock([=]{
                                gen->WriteLine("debug::WriteLine(\"incorrect network: '", name, "' for size '\", arraySize, \"'.\");");
                                gen->WriteLine("numberOfIncorrectNetworks += 1;");
                            });
                        });
                    },
                    network_nested_namespaces);
                int totalNetworks = network_nested_namespaces.size() * (16-2+1);
                gen->WriteLine("debug::WriteLine(\"finished verification. \", ", totalNetworks, " - numberOfIncorrectNetworks, \" networks out of ", totalNetworks, " sorted correctly.\");");
            });
        }, "");
    });
}

}