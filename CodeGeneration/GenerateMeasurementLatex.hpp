
#ifndef GENERATE_MEASUREMENT_LATEX_HPP
#define GENERATE_MEASUREMENT_LATEX_HPP

#include <string>

#include "CodeGeneration.hpp"

namespace codegeneration
{

std::string Format(int number)
{
    auto result = std::to_string(number);
    if (number < 10)
    {
        result = "0" + result;
    }
    return result;
}

void GenerateCombinedLatex(LatexCodeGenerator* gen)
{
    gen->WriteLine(GetAutogeneratedPreamble("%"));
    gen->WriteLine("\\documentclass[12pt,a4paper,twoside]{scrartcl}");
    gen->WriteUsepackage("inputenc", "utf8");
    gen->WriteUsepackage("graphicx");
    gen->WriteLine("");

    gen->WriteEnvironment("document", [=]{
        auto width = "width=1.0\\textwidth";
        std::string plotPath = "../plots/boxplot-";
        auto includeLineStart = "\\includegraphics[width=1.0\\textwidth]{../plots/";
        for (int i = 2; i <= 16; i += 1)
        {
            gen->WriteCommand("includegraphics", plotPath + "normal-array_size" + Format(i) + ".pdf", width);
        }
        for (int i = 2; i <= 16; i += 1)
        {
            gen->WriteCommand("includegraphics", plotPath + "in_row-array_size" + Format(i) + ".pdf", width);
        }
        gen->WriteCommand("includegraphics", plotPath + "complete.pdf", width);
        std::vector<std::string> sampleSortBaseCases = 
        {
            "best",
            "bosenelson",
            "insertionsort"
        };
        for (auto baseCase : sampleSortBaseCases)
        {
            gen->WriteCommand("includegraphics", plotPath + "sample-sort-" + baseCase + ".pdf", width);
        }
        for (int i = 1; i <= 5; i += 1)
        {
            gen->WriteCommand("includegraphics", plotPath + "sample-sort-3" + std::to_string(i) + ".pdf", width);
        }
        for (int i = 1; i <= 5; i += 1)
        {
            gen->WriteCommand("includegraphics", plotPath + "sample-sort-3_" + std::to_string(i) + ".pdf", width);
        }
    }, "");
}

}

#endif