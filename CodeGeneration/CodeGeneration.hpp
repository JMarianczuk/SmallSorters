
#ifndef CODE_GENERATION_H
#define CODE_GENERATION_H

#include <string>
#include <vector>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <functional>
#include <tuple>
#include <cstdarg>

namespace codegeneration
{

std::string GetAutogeneratedPreamble(std::string commentString = "//", std::string newline = "\n");

class CodeGenerator
{
private:
    std::string _filename;
    std::vector<std::string> _indentationStack;
    std::ofstream _fileStream;
    bool _indentBeforeWrite;
    void MakeStream();
protected:
    std::string _indent;
    void WriteIndent();
    void WriteEndl();
public:
    CodeGenerator(std::string filename, std::string indent = "\t");
    ~CodeGenerator();
    void Write(std::string content);
    void Write(int number);
    template <typename... TInputs> void WriteLine(TInputs... inputs);
    void PushIndent();
    void PushIndent(std::string indent);
    void PopIndent();
    void WriteIndented(std::function<void()> writeFunc);
    void WriteIndented(std::function<void()> writeFunc, std::string indent);
    void WriteBlock(std::function<void()> writeFunc);
    void WriteBlock(std::function<void()> writeFunc, std::string indent);
    void WriteForLoop(std::string loopVariableName, int lowerInclusive, int upperExclusive, std::function<void()> writeFunc);
    void WriteForLoop(std::string loopVariableName, int lowerInclusive, int upperExclusive, std::function<void()> writeFunc, std::string indent);
    void WriteForLoop(std::string loopVariableName, int lowerInclusive, std::string upperExclusive, std::function<void()> writeFunc);
    void WriteForLoop(std::string loopVariableName, int lowerInclusive, std::string upperExclusive, std::function<void()> writeFunc, std::string indent);
    void WriteForEachLoop(std::string loopVariableName, std::string source, std::function<void()> writeFunc, std::string loopVariableType = "auto");
    void WriteForEachLoop(std::string loopVariableName, std::string source, std::function<void()> writeFunc, std::string indent, std::string loopVariableType = "auto");
};

template <typename... TInputs>
void CodeGenerator::WriteLine(TInputs... inputs)
{
    std::vector<std::string> args = {inputs...};
    
    for (std::string arg : args)
    {
        Write(arg);
    }
    WriteEndl();
}

class CPlusPlusCodeGenerator : public CodeGenerator
{
protected:
    void WriteInclude(std::vector<std::string> fileNames, std::string beforeFileName, std::string afterFileName);
    void WriteStructOrClassBlock(std::function<void()> writeFunc, std::string indent);
public:
    using CodeGenerator::CodeGenerator;
    void WriteStruct(std::string structName, std::function<void()> writeFunc);
    void WriteStruct(std::string structName, std::function<void()> writeFunc, std::string indent);
    void WriteClassDeclaration(std::string className, std::function<void()> writePrivateFunc, std::function<void()> writePublicFunc);
    void WriteClassDeclaration(std::string className, std::function<void()> writePrivateFunc, std::function<void()> writePublicFunc, std::string indent);
    void WriteHeaderPragma(std::string headerName, std::function<void()> writeFunc);
    void WriteNamespace(std::string namespaceName, std::function<void()> writeFunc);
    void WriteNamespace(std::string namespaceName, std::function<void()> writeFunc, std::string indent);    
    template <typename... TInputs> void WriteIncludeBrackets(TInputs... inputs);
    template <typename... TInputs> void WriteIncludeQuotes(TInputs... inputs);
};

template <typename... TInputs>
void CPlusPlusCodeGenerator::WriteIncludeBrackets(TInputs... inputs)
{
    std::vector<std::string> args = {inputs...};
    WriteInclude(args, "<", ">");
}
template <typename... TInputs>
void CPlusPlusCodeGenerator::WriteIncludeQuotes(TInputs... inputs)
{
    std::vector<std::string> args = {inputs...};
    WriteInclude(args, "\"", "\"");
}

class LatexCodeGenerator : public CodeGenerator
{
public:
    using CodeGenerator::CodeGenerator;
    void WriteCommand(std::string commandName, std::string content);
    void WriteCommand(std::string commandName, std::string content, std::string options);
    void WriteUsepackage(std::string packageName);
    void WriteUsepackage(std::string packageName, std::string options);
    void WriteEnvironment(std::string environmentName, std::function<void()> writeFunc);
    void WriteEnvironment(std::string environmentName, std::function<void()> writeFunc, std::string indent);
};
    
}

#endif