

#include "GenerateSortableStructs.hpp"

namespace codegeneration
{

void WriteVariables(CodeGenerator* gen, SortableStruct* sortableStruct)
{
    gen->WriteLine("uint64_t key;");
    if (sortableStruct->HasReference)
    {
        gen->WriteLine("uint64_t reference;");
    }
}

void WriteOperator(CodeGenerator* gen, SortableStruct* sortableStruct, std::string op)
{
    gen->WriteLine("friend bool operator", op, "(const ", sortableStruct->FullName(), "& left, const ", sortableStruct->FullName(), "& right)");

    gen->WriteBlock([=]{
        gen->WriteLine("return left.key ", op, " right.key;");
    });
}

void WriteOperators(CodeGenerator* gen, SortableStruct* sortableStruct)
{
    Multicall<std::string>(
        [=](std::string op){
            WriteOperator(gen, sortableStruct, op);
        },
        {">", ">=", "==", "<", "<=", "!="});
}

void WriteSortableStructs(CPlusPlusCodeGenerator* gen)
{
    gen->WriteLine(GetAutogeneratedPreamble());
    gen->WriteLine("");
    gen->WriteHeaderPragma("SORTABLE_GENERATED_H", [=]{
        gen->WriteLine("#define ArraySize 16");
        gen->WriteIncludeBrackets("inttypes.h");
        for (SortableStruct* sortableStruct : *sortableStructs())
        {
            gen->WriteStruct(sortableStruct->FullName(), [=]{
                WriteVariables(gen, sortableStruct);
                WriteOperators(gen, sortableStruct);
            });
        }
    });
}

}