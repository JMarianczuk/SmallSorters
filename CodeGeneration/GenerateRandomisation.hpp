
#ifndef GENERATE_RANDOMISATION_H
#define GENERATE_RANDOMISATION_H

#include <string>

#include "CodeGeneration.hpp"
#include "SortableDefinitions.hpp"

namespace codegeneration
{

void GenerateRandomArrayMethod(CodeGenerator* gen, std::string fullName, bool hasReference)
{
    gen->WriteLine("template<>");
    gen->WriteLine("void GenerateRandomArray<", fullName, ">(", fullName, "* arr, size_t arraySize)");

    gen->WriteBlock([=]{
        if (hasReference)
        {
            gen->WriteLine("uint64_t reference = randomisation::GenerateRandomUint64();");
        }
        gen->WriteForLoop("i", 0, "arraySize", [=]{
            gen->WriteLine("arr[i].key = randomisation::GenerateRandomUint64();");
            if (hasReference)
            {
                gen->WriteLine("arr[i].reference = reference + i;");
            }
        });
    });
}

void WriteRandomisation(CodeGenerator* gen)
{
    gen->WriteLine(AutogeneratedPreamble);
    gen->WriteHeaderPragma("RANDOMISATION_GENERATED_H", [=]{
        gen->WriteIncludeQuotes("Randomisation.h");
        gen->WriteNamespace("randomisation", [=]{
            gen->WriteLine("template <typename TValueType>");
            gen->WriteLine("void GenerateRandomArray(TValueType* arr, size_t arraySize)");
            gen->WriteBlock([=]{
                gen->WriteLine("throw std::logic_error(\"randomisation::GenerateRandomArray => Not implemented for generic type\");");
            });
            
            for (SortableStruct* sortableStruct : sortableStructs)
            {
                GenerateRandomArrayMethod(gen, sortableStruct->FullName(), sortableStruct->HasReference);
            }
        }, "");

    });
}

}

#endif