
#ifndef GENERATE_MEASUREMENTS_H
#define GENERATE_MEASUREMENTS_H

#include <string>

#include "CodeGeneration.hpp"
#include "SortableDefinitions.hpp"
#include "VectorHelpers.hpp"
#include "FunctionalHelpers.hpp"

namespace codegeneration
{

struct MeasureParams
{
    std::vector<SortableStruct*>* Structs;
    std::string Sorter;
    std::string SortMethod;
};

MeasureParams GetParams(std::vector<SortableStruct*>* structs, std::string sorter, std::string sortMethod)
{
    MeasureParams result =
    {
        structs, sorter, sortMethod
    };
    return result;
}

void WriteMeasureLine(
    CodeGenerator* gen, 
    std::vector<SortableStruct*>* structs, 
    std::string measureMethod, 
    std::string sorter, 
    std::string sortMethod)
{
    for (SortableStruct *sortableStruct : *structs)
    {
        gen->WriteLine("randomisation::SetSeed(seed);");
        gen->WriteLine("measurement::", measureMethod, "<", sortableStruct->FullName(), ">(perf, numberOfIterations, arraySize, measureIteration, \"", sorter, " ", sortableStruct->DisplayName, "\", &", sortMethod, "<", sortableStruct->FullName(), ">);");
    }
}

void WriteMeasureMethod(
    CodeGenerator *gen,
    std::string measureMethodName,
    std::vector<MeasureParams> measureParamsList,
    std::function<void(MeasureParams)> multicallAction)
{
    gen->WriteLine("void ", measureMethodName, "(Performancing* perf, uint64_t seed, int numberOfIterations, size_t arraySize, int measureIteration)");
    gen->WriteBlock([=](){
        Multicall<MeasureParams>(
            multicallAction, 
            measureParamsList);
    });
}

void GenerateMeasurementMethod(CodeGenerator* gen)
{
    std::vector<MeasureParams> measureParamsList = 
    {
        GetParams(VectorWhere<SortableStruct*>(sortableStructs, [](SortableStruct* ss){return ss->UseForNetworkSort();}), "Netw. Best", "networks::sortNbest"),
        GetParams(VectorWhere<SortableStruct*>(sortableStructs, [](SortableStruct* ss){return ss->UseForNetworkSort();}), "Netw. BoseNelson", "networks::sortNbosenelson"),
        GetParams(VectorWhere<SortableStruct*>(sortableStructs, [](SortableStruct* ss){return ss->UseForInsertionSort();}), "Ins.", "insertionsort::InsertionSort")
    };
    gen->WriteLine(AutogeneratedPreamble);
    gen->WriteLine("");

    gen->WriteHeaderPragma("MEASUREMENT_GENERATED_H", [=](){
        gen->WriteIncludeBrackets("inttypes.h");
        gen->WriteIncludeQuotes(
            "Sortable.generated.h",
            "Performancing.h",
            "EnvironmentInfo.h",
            "Measure.h",
            "BestNetworks.generated.h",
            "BoseNelson.generated.h",
            "InsertionSort.h",
            "Randomisation.h");
        gen->WriteLine("");

        gen->WriteNamespace("measurement", [=](){
            WriteMeasureMethod(
                gen, 
                "MeasureSorting", 
                measureParamsList, 
                [=](MeasureParams measureParams){
                    WriteMeasureLine(
                        gen, 
                        measureParams.Structs, 
                        "Measure", 
                        measureParams.Sorter, 
                        measureParams.SortMethod);
                    gen->WriteLine("");
                }
            );
            WriteMeasureMethod(
                gen,
                "MeasureSortingInRow",
                measureParamsList,
                [=](MeasureParams measureParams){
                    WriteMeasureLine(
                        gen,
                        measureParams.Structs,
                        "MeasureInRow",
                        measureParams.Sorter + "InRow",
                        measureParams.SortMethod);
                    gen->WriteLine("");
                }
            );
            WriteMeasureMethod(
                gen,
                "MeasureCompleteSorting",
                measureParamsList,
                [=](MeasureParams measureParams) {
                    WriteMeasureLine(
                        gen,
                        measureParams.Structs,
                        "MeasureCompleteSorter",
                        measureParams.Sorter + "Complete",
                        measureParams.SortMethod);
                    gen->WriteLine("");
                }
            );
        }, "");
    });
}

}

#endif