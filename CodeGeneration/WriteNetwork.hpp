
#ifndef WRITE_NETWORK_H
#define WRITE_NETWORK_H

#include <string>
#include <iostream>
#include <fstream>

#include "CodeGeneration.hpp"
#include "nlohmann/json.hpp"

namespace codegeneration
{

void WriteNetwork(CodeGenerator *gen, std::string headerDefine, std::string sortMethodName, std::string networksJsonFilePath)
{
    std::ifstream input(networksJsonFilePath);
    nlohmann::json networksJson;
    input >> networksJson;

    gen->WriteLine(AutogeneratedPreamble);
    gen->WriteLine("");

    gen->WriteHeaderPragma(headerDefine, [=]{
        gen->WriteIncludeQuotes("NetworkSort.h");

        gen->WriteNamespace("networks", [=]{
            for (auto network : networksJson)
            {
                std::string sizeStr = std::to_string(network["NetworkSize"].get<int>());
                gen->WriteLine("template <typename TValueType> static inline");
                gen->WriteLine("void sort", sizeStr, sortMethodName, "(TValueType* A)");
                gen->WriteBlock([=]{
                    for (auto swap : network["Swaps"])
                    {
                        std::string leftStr = std::to_string(swap["LeftIndex"].get<int>());
                        std::string rightStr = std::to_string(swap["RightIndex"].get<int>());
                        gen->WriteLine("networks::ConditionalSwap(A[", leftStr, "], A[", rightStr, "]);");
                    }
                });
            }
            gen->WriteLine("");
            gen->WriteLine("template <typename TValueType> static inline");
            gen->WriteLine("void sortN", sortMethodName, "(TValueType* A, size_t n)");
            gen->WriteBlock([=]{
                gen->WriteLine("switch(n)");
                gen->WriteBlock([=]{
                    gen->WriteLine("case 0: break;");
                    gen->WriteLine("case 1: break;");
                    for (auto network : networksJson)
                    {
                        std::string sizeStr = std::to_string(network["NetworkSize"].get<int>());
                        gen->WriteLine("case ", sizeStr, ":");
                        gen->WriteIndented([=]{
                            gen->WriteLine("sort", sizeStr, sortMethodName, "(A);");
                            gen->WriteLine("break;");
                        });
                    }
                    gen->WriteLine("default:");
                    gen->WriteIndented([=]{
                        gen->WriteLine("abort();");
                        gen->WriteLine("break;");
                    });
                });
            });
        }, "");
    });
}

}

#endif