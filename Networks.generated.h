


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated from a T4 template
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#ifndef NETWORKS_GENERATED_H
#define NETWORKS_GENERATED_H

#include "NetworkSort.h"

namespace networks {

template <typename TValueType> static inline
void sort2(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
}
template <typename TValueType> static inline
void sort3(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[1]);
}
template <typename TValueType> static inline
void sort4(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[2]);
}
template <typename TValueType> static inline
void sort5(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[2]);
}
template <typename TValueType> static inline
void sort6(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[3]);
}
template <typename TValueType> static inline
void sort7(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[3]);
}
template <typename TValueType> static inline
void sort8(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[4]);
}
template <typename TValueType> static inline
void sort9(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[6]);
}
template <typename TValueType> static inline
void sort10(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[5]);
}
template <typename TValueType> static inline
void sort11(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[8]);
}
template <typename TValueType> static inline
void sort12(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[8]);
}
template <typename TValueType> static inline
void sort13(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[6]);
}
template <typename TValueType> static inline
void sort14(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[13]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[13]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[13]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[13]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[13]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[9]);
}
template <typename TValueType> static inline
void sort15(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[13]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[14]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[13]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[14]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[13]);
	networks::ConditionalSwap(A[0], A[14]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[14]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[13]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[14]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[13]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[9]);
}
template <typename TValueType> static inline
void sort16(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[13]);
	networks::ConditionalSwap(A[0], A[15]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[14]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[15]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[13]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[14]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[15]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[13]);
	networks::ConditionalSwap(A[0], A[14]);
	networks::ConditionalSwap(A[0], A[15]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[14]);
	networks::ConditionalSwap(A[0], A[11]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[13]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[14]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[13]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[0], A[9]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[10]);
	networks::ConditionalSwap(A[0], A[12]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[0], A[9]);
}

template <typename TValueType> static inline
void sortN(TValueType* A, size_t n)
{
    switch(n) {
        case 0: break;
        case 1: break;
        case 2:
			sort2(A);
			break;
		case 3:
			sort3(A);
			break;
		case 4:
			sort4(A);
			break;
		case 5:
			sort5(A);
			break;
		case 6:
			sort6(A);
			break;
		case 7:
			sort7(A);
			break;
		case 8:
			sort8(A);
			break;
		case 9:
			sort9(A);
			break;
		case 10:
			sort10(A);
			break;
		case 11:
			sort11(A);
			break;
		case 12:
			sort12(A);
			break;
		case 13:
			sort13(A);
			break;
		case 14:
			sort14(A);
			break;
		case 15:
			sort15(A);
			break;
		case 16:
			sort16(A);
			break;
        default:
            abort();
            break;
    }
}

}

#endif

