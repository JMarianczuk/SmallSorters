//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by CodeGeneration/Generate.cc
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


#ifndef BOSENELSON_RECURSIVE_GENERATED_H
#define BOSENELSON_RECURSIVE_GENERATED_H

#include "../conditional_swap/ConditionalSwapGeneric.h"
#include "../conditional_swap/ConditionalSwapX86.h"
namespace networks
{
namespace bosenelsonrecursive
{
template <typename CSwap, typename ValueType> static
inline
void merge1_1(ValueType* left, ValueType* right)
{
	CSwap::swap(left[0], right[0]);
}
template <typename CSwap, typename ValueType> static
inline
void sort2(ValueType* A)
{
	networks::bosenelsonrecursive::merge1_1<CSwap>(A, A + 1);
}

template <typename CSwap, typename ValueType> static
inline
void merge1_2(ValueType* left, ValueType* right)
{
	CSwap::swap(left[0], right[1]);
	CSwap::swap(left[0], right[0]);
}
template <typename CSwap, typename ValueType> static
inline
void sort3(ValueType* A)
{
	networks::bosenelsonrecursive::sort2<CSwap>(A + 1);
	networks::bosenelsonrecursive::merge1_2<CSwap>(A, A + 1);
}

template <typename CSwap, typename ValueType> static
inline
void merge2_2(ValueType* left, ValueType* right)
{
	networks::bosenelsonrecursive::merge1_1<CSwap>(left, right);
	networks::bosenelsonrecursive::merge1_1<CSwap>(left + 1, right + 1);
	networks::bosenelsonrecursive::merge1_1<CSwap>(left + 1, right);
}

template <typename CSwap, typename ValueType> static
void sort4(ValueType* A)
{
	networks::bosenelsonrecursive::sort2<CSwap>(A);
	networks::bosenelsonrecursive::sort2<CSwap>(A + 2);
	networks::bosenelsonrecursive::merge2_2<CSwap>(A, A + 2);
}

template <typename CSwap, typename ValueType> static
inline
void merge2_3(ValueType* left, ValueType* right)
{
	networks::bosenelsonrecursive::merge1_2<CSwap>(left, right);
	networks::bosenelsonrecursive::merge1_1<CSwap>(left + 1, right + 2);
	networks::bosenelsonrecursive::merge1_2<CSwap>(left + 1, right);
}

template <typename CSwap, typename ValueType> static
void sort5(ValueType* A)
{
	networks::bosenelsonrecursive::sort2<CSwap>(A);
	networks::bosenelsonrecursive::sort3<CSwap>(A + 2);
	networks::bosenelsonrecursive::merge2_3<CSwap>(A, A + 2);
}

template <typename CSwap, typename ValueType> static
inline
void merge2_1(ValueType* left, ValueType* right)
{
	CSwap::swap(left[0], right[0]);
	CSwap::swap(left[1], right[0]);
}
template <typename CSwap, typename ValueType> static
inline
void merge3_3(ValueType* left, ValueType* right)
{
	networks::bosenelsonrecursive::merge1_1<CSwap>(left, right);
	networks::bosenelsonrecursive::merge2_2<CSwap>(left + 1, right + 1);
	networks::bosenelsonrecursive::merge2_1<CSwap>(left + 1, right);
}

template <typename CSwap, typename ValueType> static
void sort6(ValueType* A)
{
	networks::bosenelsonrecursive::sort3<CSwap>(A);
	networks::bosenelsonrecursive::sort3<CSwap>(A + 3);
	networks::bosenelsonrecursive::merge3_3<CSwap>(A, A + 3);
}

template <typename CSwap, typename ValueType> static
inline
void merge3_4(ValueType* left, ValueType* right)
{
	networks::bosenelsonrecursive::merge1_2<CSwap>(left, right);
	networks::bosenelsonrecursive::merge2_2<CSwap>(left + 1, right + 2);
	networks::bosenelsonrecursive::merge2_2<CSwap>(left + 1, right);
}

template <typename CSwap, typename ValueType> static
void sort7(ValueType* A)
{
	networks::bosenelsonrecursive::sort3<CSwap>(A);
	networks::bosenelsonrecursive::sort4<CSwap>(A + 3);
	networks::bosenelsonrecursive::merge3_4<CSwap>(A, A + 3);
}

template <typename CSwap, typename ValueType> static
inline
void merge4_4(ValueType* left, ValueType* right)
{
	networks::bosenelsonrecursive::merge2_2<CSwap>(left, right);
	networks::bosenelsonrecursive::merge2_2<CSwap>(left + 2, right + 2);
	networks::bosenelsonrecursive::merge2_2<CSwap>(left + 2, right);
}

template <typename CSwap, typename ValueType> static
void sort8(ValueType* A)
{
	networks::bosenelsonrecursive::sort4<CSwap>(A);
	networks::bosenelsonrecursive::sort4<CSwap>(A + 4);
	networks::bosenelsonrecursive::merge4_4<CSwap>(A, A + 4);
}

template <typename CSwap, typename ValueType> static
inline
void merge4_5(ValueType* left, ValueType* right)
{
	networks::bosenelsonrecursive::merge2_3<CSwap>(left, right);
	networks::bosenelsonrecursive::merge2_2<CSwap>(left + 2, right + 3);
	networks::bosenelsonrecursive::merge2_3<CSwap>(left + 2, right);
}

template <typename CSwap, typename ValueType> static
void sort9(ValueType* A)
{
	networks::bosenelsonrecursive::sort4<CSwap>(A);
	networks::bosenelsonrecursive::sort5<CSwap>(A + 4);
	networks::bosenelsonrecursive::merge4_5<CSwap>(A, A + 4);
}

template <typename CSwap, typename ValueType> static
inline
void merge3_2(ValueType* left, ValueType* right)
{
	networks::bosenelsonrecursive::merge1_1<CSwap>(left, right);
	networks::bosenelsonrecursive::merge2_1<CSwap>(left + 1, right + 1);
	networks::bosenelsonrecursive::merge2_1<CSwap>(left + 1, right);
}

template <typename CSwap, typename ValueType> static
inline
void merge5_5(ValueType* left, ValueType* right)
{
	networks::bosenelsonrecursive::merge2_2<CSwap>(left, right);
	networks::bosenelsonrecursive::merge3_3<CSwap>(left + 2, right + 2);
	networks::bosenelsonrecursive::merge3_2<CSwap>(left + 2, right);
}

template <typename CSwap, typename ValueType> static
void sort10(ValueType* A)
{
	networks::bosenelsonrecursive::sort5<CSwap>(A);
	networks::bosenelsonrecursive::sort5<CSwap>(A + 5);
	networks::bosenelsonrecursive::merge5_5<CSwap>(A, A + 5);
}

template <typename CSwap, typename ValueType> static
inline
void merge5_6(ValueType* left, ValueType* right)
{
	networks::bosenelsonrecursive::merge2_3<CSwap>(left, right);
	networks::bosenelsonrecursive::merge3_3<CSwap>(left + 2, right + 3);
	networks::bosenelsonrecursive::merge3_3<CSwap>(left + 2, right);
}

template <typename CSwap, typename ValueType> static
void sort11(ValueType* A)
{
	networks::bosenelsonrecursive::sort5<CSwap>(A);
	networks::bosenelsonrecursive::sort6<CSwap>(A + 5);
	networks::bosenelsonrecursive::merge5_6<CSwap>(A, A + 5);
}

template <typename CSwap, typename ValueType> static
inline
void merge6_6(ValueType* left, ValueType* right)
{
	networks::bosenelsonrecursive::merge3_3<CSwap>(left, right);
	networks::bosenelsonrecursive::merge3_3<CSwap>(left + 3, right + 3);
	networks::bosenelsonrecursive::merge3_3<CSwap>(left + 3, right);
}

template <typename CSwap, typename ValueType> static
void sort12(ValueType* A)
{
	networks::bosenelsonrecursive::sort6<CSwap>(A);
	networks::bosenelsonrecursive::sort6<CSwap>(A + 6);
	networks::bosenelsonrecursive::merge6_6<CSwap>(A, A + 6);
}

template <typename CSwap, typename ValueType> static
inline
void merge6_7(ValueType* left, ValueType* right)
{
	networks::bosenelsonrecursive::merge3_4<CSwap>(left, right);
	networks::bosenelsonrecursive::merge3_3<CSwap>(left + 3, right + 4);
	networks::bosenelsonrecursive::merge3_4<CSwap>(left + 3, right);
}

template <typename CSwap, typename ValueType> static
void sort13(ValueType* A)
{
	networks::bosenelsonrecursive::sort6<CSwap>(A);
	networks::bosenelsonrecursive::sort7<CSwap>(A + 6);
	networks::bosenelsonrecursive::merge6_7<CSwap>(A, A + 6);
}

template <typename CSwap, typename ValueType> static
inline
void merge4_3(ValueType* left, ValueType* right)
{
	networks::bosenelsonrecursive::merge2_2<CSwap>(left, right);
	networks::bosenelsonrecursive::merge2_1<CSwap>(left + 2, right + 2);
	networks::bosenelsonrecursive::merge2_2<CSwap>(left + 2, right);
}

template <typename CSwap, typename ValueType> static
inline
void merge7_7(ValueType* left, ValueType* right)
{
	networks::bosenelsonrecursive::merge3_3<CSwap>(left, right);
	networks::bosenelsonrecursive::merge4_4<CSwap>(left + 3, right + 3);
	networks::bosenelsonrecursive::merge4_3<CSwap>(left + 3, right);
}

template <typename CSwap, typename ValueType> static
void sort14(ValueType* A)
{
	networks::bosenelsonrecursive::sort7<CSwap>(A);
	networks::bosenelsonrecursive::sort7<CSwap>(A + 7);
	networks::bosenelsonrecursive::merge7_7<CSwap>(A, A + 7);
}

template <typename CSwap, typename ValueType> static
inline
void merge7_8(ValueType* left, ValueType* right)
{
	networks::bosenelsonrecursive::merge3_4<CSwap>(left, right);
	networks::bosenelsonrecursive::merge4_4<CSwap>(left + 3, right + 4);
	networks::bosenelsonrecursive::merge4_4<CSwap>(left + 3, right);
}

template <typename CSwap, typename ValueType> static
void sort15(ValueType* A)
{
	networks::bosenelsonrecursive::sort7<CSwap>(A);
	networks::bosenelsonrecursive::sort8<CSwap>(A + 7);
	networks::bosenelsonrecursive::merge7_8<CSwap>(A, A + 7);
}

template <typename CSwap, typename ValueType> static
inline
void merge8_8(ValueType* left, ValueType* right)
{
	networks::bosenelsonrecursive::merge4_4<CSwap>(left, right);
	networks::bosenelsonrecursive::merge4_4<CSwap>(left + 4, right + 4);
	networks::bosenelsonrecursive::merge4_4<CSwap>(left + 4, right);
}

template <typename CSwap, typename ValueType> static
void sort16(ValueType* A)
{
	networks::bosenelsonrecursive::sort8<CSwap>(A);
	networks::bosenelsonrecursive::sort8<CSwap>(A + 8);
	networks::bosenelsonrecursive::merge8_8<CSwap>(A, A + 8);
}


template <typename CSwap, typename ValueType> static
void sortN(ValueType* A, size_t n)
{
	switch(n)
	{
		case 0: break;
		case 1: break;
		case 2:
			networks::bosenelsonrecursive::sort2<CSwap>(A);
			break;
		case 3:
			networks::bosenelsonrecursive::sort3<CSwap>(A);
			break;
		case 4:
			networks::bosenelsonrecursive::sort4<CSwap>(A);
			break;
		case 5:
			networks::bosenelsonrecursive::sort5<CSwap>(A);
			break;
		case 6:
			networks::bosenelsonrecursive::sort6<CSwap>(A);
			break;
		case 7:
			networks::bosenelsonrecursive::sort7<CSwap>(A);
			break;
		case 8:
			networks::bosenelsonrecursive::sort8<CSwap>(A);
			break;
		case 9:
			networks::bosenelsonrecursive::sort9<CSwap>(A);
			break;
		case 10:
			networks::bosenelsonrecursive::sort10<CSwap>(A);
			break;
		case 11:
			networks::bosenelsonrecursive::sort11<CSwap>(A);
			break;
		case 12:
			networks::bosenelsonrecursive::sort12<CSwap>(A);
			break;
		case 13:
			networks::bosenelsonrecursive::sort13<CSwap>(A);
			break;
		case 14:
			networks::bosenelsonrecursive::sort14<CSwap>(A);
			break;
		case 15:
			networks::bosenelsonrecursive::sort15<CSwap>(A);
			break;
		case 16:
			networks::bosenelsonrecursive::sort16<CSwap>(A);
			break;
	}
}
} // namespace bosenelsonrecursive
} // namespace networks

#endif // BOSENELSON_RECURSIVE_GENERATED_H
