//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


#ifndef BOSENELSON_PARAMETER_GENERATED_H
#define BOSENELSON_PARAMETER_GENERATED_H

#include "NetworkSort.h"
namespace networks
{
namespace bosenelsonparameter
{
template <typename ValueType> static
inline
void merge_1_1(ValueType& left0, ValueType& right0)
{
	networks::ConditionalSwap(left0, right0);
}
template <typename ValueType> static
inline
void sort2(ValueType& element0, ValueType& element1)
{
	networks::merge_1_1(element0, element1);
}

template <typename ValueType> static
inline
void merge_1_2(ValueType& left0, ValueType& right0, ValueType& right1)
{
	networks::ConditionalSwap(left0, right1);
	networks::ConditionalSwap(left0, right0);
}
template <typename ValueType> static
inline
void sort3(ValueType& element0, ValueType& element1, ValueType& element2)
{
	networks::sort2(element1, element2);
	networks::merge_1_2(element0, element1, element2);
}

template <typename ValueType> static
inline
void merge_2_2(ValueType& left0, ValueType& left1, ValueType& right0, ValueType& right1)
{
	networks::merge_1_1(left0, right0);
	networks::merge_1_1(left1, right1);
	networks::merge_1_1(left1, right0);
}

template <typename ValueType> static
inline
void sort4(ValueType& element0, ValueType& element1, ValueType& element2, ValueType& element3)
{
	networks::sort2(element0, element1);
	networks::sort2(element2, element3);
	networks::merge_2_2(element0, element1, element2, element3);
}

template <typename ValueType> static
inline
void merge_2_3(ValueType& left0, ValueType& left1, ValueType& right0, ValueType& right1, ValueType& right2)
{
	networks::merge_1_2(left0, right0, right1);
	networks::merge_1_1(left1, right2);
	networks::merge_1_2(left1, right0, right1);
}

template <typename ValueType> static
inline
void sort5(ValueType& element0, ValueType& element1, ValueType& element2, ValueType& element3, ValueType& element4)
{
	networks::sort2(element0, element1);
	networks::sort3(element2, element3, element4);
	networks::merge_2_3(element0, element1, element2, element3, element4);
}

template <typename ValueType> static
inline
void merge_2_1(ValueType& left0, ValueType& left1, ValueType& right0)
{
	networks::ConditionalSwap(left0, right0);
	networks::ConditionalSwap(left1, right0);
}
template <typename ValueType> static
inline
void merge_3_3(ValueType& left0, ValueType& left1, ValueType& left2, ValueType& right0, ValueType& right1, ValueType& right2)
{
	networks::merge_1_1(left0, right0);
	networks::merge_2_2(left1, left2, right1, right2);
	networks::merge_2_1(left1, left2, right0);
}

template <typename ValueType> static
inline
void sort6(ValueType& element0, ValueType& element1, ValueType& element2, ValueType& element3, ValueType& element4, ValueType& element5)
{
	networks::sort3(element0, element1, element2);
	networks::sort3(element3, element4, element5);
	networks::merge_3_3(element0, element1, element2, element3, element4, element5);
}

template <typename ValueType> static
inline
void merge_3_4(ValueType& left0, ValueType& left1, ValueType& left2, ValueType& right0, ValueType& right1, ValueType& right2, ValueType& right3)
{
	networks::merge_1_2(left0, right0, right1);
	networks::merge_2_2(left1, left2, right2, right3);
	networks::merge_2_2(left1, left2, right0, right1);
}

template <typename ValueType> static
inline
void sort7(ValueType& element0, ValueType& element1, ValueType& element2, ValueType& element3, ValueType& element4, ValueType& element5, ValueType& element6)
{
	networks::sort3(element0, element1, element2);
	networks::sort4(element3, element4, element5, element6);
	networks::merge_3_4(element0, element1, element2, element3, element4, element5, element6);
}

template <typename ValueType> static
inline
void merge_4_4(ValueType& left0, ValueType& left1, ValueType& left2, ValueType& left3, ValueType& right0, ValueType& right1, ValueType& right2, ValueType& right3)
{
	networks::merge_2_2(left0, left1, right0, right1);
	networks::merge_2_2(left2, left3, right2, right3);
	networks::merge_2_2(left2, left3, right0, right1);
}

template <typename ValueType> static
inline
void sort8(ValueType& element0, ValueType& element1, ValueType& element2, ValueType& element3, ValueType& element4, ValueType& element5, ValueType& element6, ValueType& element7)
{
	networks::sort4(element0, element1, element2, element3);
	networks::sort4(element4, element5, element6, element7);
	networks::merge_4_4(element0, element1, element2, element3, element4, element5, element6, element7);
}

template <typename ValueType> static
inline
void merge_4_5(ValueType& left0, ValueType& left1, ValueType& left2, ValueType& left3, ValueType& right0, ValueType& right1, ValueType& right2, ValueType& right3, ValueType& right4)
{
	networks::merge_2_3(left0, left1, right0, right1, right2);
	networks::merge_2_2(left2, left3, right3, right4);
	networks::merge_2_3(left2, left3, right0, right1, right2);
}

template <typename ValueType> static
inline
void sort9(ValueType& element0, ValueType& element1, ValueType& element2, ValueType& element3, ValueType& element4, ValueType& element5, ValueType& element6, ValueType& element7, ValueType& element8)
{
	networks::sort4(element0, element1, element2, element3);
	networks::sort5(element4, element5, element6, element7, element8);
	networks::merge_4_5(element0, element1, element2, element3, element4, element5, element6, element7, element8);
}

template <typename ValueType> static
inline
void merge_3_2(ValueType& left0, ValueType& left1, ValueType& left2, ValueType& right0, ValueType& right1)
{
	networks::merge_1_1(left0, right0);
	networks::merge_2_1(left1, left2, right1);
	networks::merge_2_1(left1, left2, right0);
}

template <typename ValueType> static
inline
void merge_5_5(ValueType& left0, ValueType& left1, ValueType& left2, ValueType& left3, ValueType& left4, ValueType& right0, ValueType& right1, ValueType& right2, ValueType& right3, ValueType& right4)
{
	networks::merge_2_2(left0, left1, right0, right1);
	networks::merge_3_3(left2, left3, left4, right2, right3, right4);
	networks::merge_3_2(left2, left3, left4, right0, right1);
}

template <typename ValueType> static
inline
void sort10(ValueType& element0, ValueType& element1, ValueType& element2, ValueType& element3, ValueType& element4, ValueType& element5, ValueType& element6, ValueType& element7, ValueType& element8, ValueType& element9)
{
	networks::sort5(element0, element1, element2, element3, element4);
	networks::sort5(element5, element6, element7, element8, element9);
	networks::merge_5_5(element0, element1, element2, element3, element4, element5, element6, element7, element8, element9);
}

template <typename ValueType> static
inline
void merge_5_6(ValueType& left0, ValueType& left1, ValueType& left2, ValueType& left3, ValueType& left4, ValueType& right0, ValueType& right1, ValueType& right2, ValueType& right3, ValueType& right4, ValueType& right5)
{
	networks::merge_2_3(left0, left1, right0, right1, right2);
	networks::merge_3_3(left2, left3, left4, right3, right4, right5);
	networks::merge_3_3(left2, left3, left4, right0, right1, right2);
}

template <typename ValueType> static
inline
void sort11(ValueType& element0, ValueType& element1, ValueType& element2, ValueType& element3, ValueType& element4, ValueType& element5, ValueType& element6, ValueType& element7, ValueType& element8, ValueType& element9, ValueType& element10)
{
	networks::sort5(element0, element1, element2, element3, element4);
	networks::sort6(element5, element6, element7, element8, element9, element10);
	networks::merge_5_6(element0, element1, element2, element3, element4, element5, element6, element7, element8, element9, element10);
}

template <typename ValueType> static
inline
void merge_6_6(ValueType& left0, ValueType& left1, ValueType& left2, ValueType& left3, ValueType& left4, ValueType& left5, ValueType& right0, ValueType& right1, ValueType& right2, ValueType& right3, ValueType& right4, ValueType& right5)
{
	networks::merge_3_3(left0, left1, left2, right0, right1, right2);
	networks::merge_3_3(left3, left4, left5, right3, right4, right5);
	networks::merge_3_3(left3, left4, left5, right0, right1, right2);
}

template <typename ValueType> static
inline
void sort12(ValueType& element0, ValueType& element1, ValueType& element2, ValueType& element3, ValueType& element4, ValueType& element5, ValueType& element6, ValueType& element7, ValueType& element8, ValueType& element9, ValueType& element10, ValueType& element11)
{
	networks::sort6(element0, element1, element2, element3, element4, element5);
	networks::sort6(element6, element7, element8, element9, element10, element11);
	networks::merge_6_6(element0, element1, element2, element3, element4, element5, element6, element7, element8, element9, element10, element11);
}

template <typename ValueType> static
inline
void merge_6_7(ValueType& left0, ValueType& left1, ValueType& left2, ValueType& left3, ValueType& left4, ValueType& left5, ValueType& right0, ValueType& right1, ValueType& right2, ValueType& right3, ValueType& right4, ValueType& right5, ValueType& right6)
{
	networks::merge_3_4(left0, left1, left2, right0, right1, right2, right3);
	networks::merge_3_3(left3, left4, left5, right4, right5, right6);
	networks::merge_3_4(left3, left4, left5, right0, right1, right2, right3);
}

template <typename ValueType> static
inline
void sort13(ValueType& element0, ValueType& element1, ValueType& element2, ValueType& element3, ValueType& element4, ValueType& element5, ValueType& element6, ValueType& element7, ValueType& element8, ValueType& element9, ValueType& element10, ValueType& element11, ValueType& element12)
{
	networks::sort6(element0, element1, element2, element3, element4, element5);
	networks::sort7(element6, element7, element8, element9, element10, element11, element12);
	networks::merge_6_7(element0, element1, element2, element3, element4, element5, element6, element7, element8, element9, element10, element11, element12);
}

template <typename ValueType> static
inline
void merge_4_3(ValueType& left0, ValueType& left1, ValueType& left2, ValueType& left3, ValueType& right0, ValueType& right1, ValueType& right2)
{
	networks::merge_2_2(left0, left1, right0, right1);
	networks::merge_2_1(left2, left3, right2);
	networks::merge_2_2(left2, left3, right0, right1);
}

template <typename ValueType> static
inline
void merge_7_7(ValueType& left0, ValueType& left1, ValueType& left2, ValueType& left3, ValueType& left4, ValueType& left5, ValueType& left6, ValueType& right0, ValueType& right1, ValueType& right2, ValueType& right3, ValueType& right4, ValueType& right5, ValueType& right6)
{
	networks::merge_3_3(left0, left1, left2, right0, right1, right2);
	networks::merge_4_4(left3, left4, left5, left6, right3, right4, right5, right6);
	networks::merge_4_3(left3, left4, left5, left6, right0, right1, right2);
}

template <typename ValueType> static
inline
void sort14(ValueType& element0, ValueType& element1, ValueType& element2, ValueType& element3, ValueType& element4, ValueType& element5, ValueType& element6, ValueType& element7, ValueType& element8, ValueType& element9, ValueType& element10, ValueType& element11, ValueType& element12, ValueType& element13)
{
	networks::sort7(element0, element1, element2, element3, element4, element5, element6);
	networks::sort7(element7, element8, element9, element10, element11, element12, element13);
	networks::merge_7_7(element0, element1, element2, element3, element4, element5, element6, element7, element8, element9, element10, element11, element12, element13);
}

template <typename ValueType> static
inline
void merge_7_8(ValueType& left0, ValueType& left1, ValueType& left2, ValueType& left3, ValueType& left4, ValueType& left5, ValueType& left6, ValueType& right0, ValueType& right1, ValueType& right2, ValueType& right3, ValueType& right4, ValueType& right5, ValueType& right6, ValueType& right7)
{
	networks::merge_3_4(left0, left1, left2, right0, right1, right2, right3);
	networks::merge_4_4(left3, left4, left5, left6, right4, right5, right6, right7);
	networks::merge_4_4(left3, left4, left5, left6, right0, right1, right2, right3);
}

template <typename ValueType> static
inline
void sort15(ValueType& element0, ValueType& element1, ValueType& element2, ValueType& element3, ValueType& element4, ValueType& element5, ValueType& element6, ValueType& element7, ValueType& element8, ValueType& element9, ValueType& element10, ValueType& element11, ValueType& element12, ValueType& element13, ValueType& element14)
{
	networks::sort7(element0, element1, element2, element3, element4, element5, element6);
	networks::sort8(element7, element8, element9, element10, element11, element12, element13, element14);
	networks::merge_7_8(element0, element1, element2, element3, element4, element5, element6, element7, element8, element9, element10, element11, element12, element13, element14);
}

template <typename ValueType> static
inline
void merge_8_8(ValueType& left0, ValueType& left1, ValueType& left2, ValueType& left3, ValueType& left4, ValueType& left5, ValueType& left6, ValueType& left7, ValueType& right0, ValueType& right1, ValueType& right2, ValueType& right3, ValueType& right4, ValueType& right5, ValueType& right6, ValueType& right7)
{
	networks::merge_4_4(left0, left1, left2, left3, right0, right1, right2, right3);
	networks::merge_4_4(left4, left5, left6, left7, right4, right5, right6, right7);
	networks::merge_4_4(left4, left5, left6, left7, right0, right1, right2, right3);
}

template <typename ValueType> static
inline
void sort16(ValueType& element0, ValueType& element1, ValueType& element2, ValueType& element3, ValueType& element4, ValueType& element5, ValueType& element6, ValueType& element7, ValueType& element8, ValueType& element9, ValueType& element10, ValueType& element11, ValueType& element12, ValueType& element13, ValueType& element14, ValueType& element15)
{
	networks::sort8(element0, element1, element2, element3, element4, element5, element6, element7);
	networks::sort8(element8, element9, element10, element11, element12, element13, element14, element15);
	networks::merge_8_8(element0, element1, element2, element3, element4, element5, element6, element7, element8, element9, element10, element11, element12, element13, element14, element15);
}


template <typename ValueType> static
void sortN(ValueType* A, size_t n)
{
	switch(n)
	{
		case 0: break;
		case 1: break;
		case 2:
			sort2(A[0], A[1]);
			break;
		case 3:
			sort3(A[0], A[1], A[2]);
			break;
		case 4:
			sort4(A[0], A[1], A[2], A[3]);
			break;
		case 5:
			sort5(A[0], A[1], A[2], A[3], A[4]);
			break;
		case 6:
			sort6(A[0], A[1], A[2], A[3], A[4], A[5]);
			break;
		case 7:
			sort7(A[0], A[1], A[2], A[3], A[4], A[5], A[6]);
			break;
		case 8:
			sort8(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7]);
			break;
		case 9:
			sort9(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8]);
			break;
		case 10:
			sort10(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9]);
			break;
		case 11:
			sort11(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10]);
			break;
		case 12:
			sort12(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10], A[11]);
			break;
		case 13:
			sort13(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10], A[11], A[12]);
			break;
		case 14:
			sort14(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10], A[11], A[12], A[13]);
			break;
		case 15:
			sort15(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10], A[11], A[12], A[13], A[14]);
			break;
		case 16:
			sort16(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10], A[11], A[12], A[13], A[14], A[15]);
			break;
	}
}
} // namespace bosenelsonparameter
} // namespace networks

#endif // BOSENELSON_PARAMETER_GENERATED_H
