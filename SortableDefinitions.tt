<#@ template language="C#" #>
<#@ output extension="/" #>

<#
    SortableStruct.transform = this;

    SortableStruct[] sortableStructs = {
        new SortableStruct("", true, "KR-Default"),
        new SortableStruct("JumpXchg", false),
        new SortableStruct("JumpXchg", true),
        new SortableStruct("TwoCmovTemp", false),
        new SortableStruct("FourCmovTemp", true),
        new SortableStruct("FourCmovTemp_Split", true),
        new SortableStruct("ThreeCmovRegisterTemp", false),
        new SortableStruct("SixCmovRegisterTemp", true),
        new SortableStruct("ClangVersion", true),
        new SortableStruct("StlVersion", true),
        new SortableStruct("PointerOptimized", true),
    };
#>
<#+
    class SortableStruct 
    { 
		public static GeneratedTextTransformation transform;
        public string Name {get;set;} 
        public string DisplayName {get;set;}
        public bool HasReference {get;set;}
        public SortableStruct(string name, bool hasReference, string displayName = null)
        {
            Name = name;
            HasReference = hasReference;
            if (!string.IsNullOrEmpty(displayName))
            {
                DisplayName = displayName;
            }
            else 
            {
                DisplayName = "K";
                if (HasReference)
                {
                    DisplayName += "R";
                }
                DisplayName += "-";
                DisplayName += Name.Replace("_", "-");
            }
        }
        public string FullName
        {
            get 
            {
                var result = "Sortable";
                if (HasReference)
                {
                    result += "Ref";
                }
                if (!string.IsNullOrEmpty(Name))
                {
                    result += $"_{Name}";
                }
                return result;
            }
        }
        public bool UseForNetworkSort => HasReference && !IsInsertionSortOnly;
        public bool UseForInsertionSort => FullName == "SortableRef" || IsInsertionSortOnly;
        private string[] InsertionSortOnlyNames = {"StlVersion", "PointerOptimized"};
        private bool IsInsertionSortOnly => InsertionSortOnlyNames.Any(name => FullName.Contains(name));
        public void WriteVariables()
        {
            transform.WriteLine("uint64_t key;");
            if (HasReference)
            {
                transform.WriteLine("uint64_t reference;");
            }
        }
        public void WriteOperators()
        {
            WriteOperatorInternal(">");
            WriteOperatorInternal("==");
            WriteOperatorInternal("<");
            WriteOperatorInternal("!=");
        }
        private void WriteOperatorInternal(string operatorSymbol)
        {
            transform.WriteLine($"friend bool operator{operatorSymbol}(const {FullName}& left, const {FullName}& right) {{");
            transform.PushIndent("\t");
            transform.WriteLine($"return left.key {operatorSymbol} right.key;");
            transform.PopIndent();
            transform.WriteLine("}");
        }
    }
#>
