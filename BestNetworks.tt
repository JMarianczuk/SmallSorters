<#@ template language="C#" hostspecific="True" compilerOptions="/langversion:7"#>
<#@ output extension=".generated.h"#>

<#@ include file="Networks.tt"#>

<#@ assembly name="System.Core"#>
<#@ assembly name="C:\\Users\\Jasper\\.nuget\\packages\\newtonsoft.json\\12.0.1\\lib\\net45\\Newtonsoft.Json.dll"#>

<#@ import namespace="System"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="Newtonsoft.Json"#>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated from a T4 template
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#ifndef BESTNETWORKS_GENERATED_H
#define BESTNETWORKS_GENERATED_H

#include "NetworkSort.h"

namespace networks {

<#    
    var networksJson = File.ReadAllText(Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "networks.json"));
    var networks = JsonConvert.DeserializeObject<Network[]>(networksJson);
    foreach (var network in networks)
    {
        WriteLine("template <typename TValueType> static inline");
        WriteLine($"void sort{network.Size}best(TValueType* A)");
        WriteLine("{");
        PushIndent("\t");
        WriteSwaps(network.Swaps);
        PopIndent();
        WriteLine("}");
    }
#>

template <typename TValueType> static inline
void sortNbest(TValueType* A, size_t n)
{
    switch(n) {
        case 0: break;
        case 1: break;
        <#
            PushIndent("\t");
            PushIndent("\t");
            for (var arraySize = 2; arraySize <= 16; arraySize += 1)
            {
                WriteLine($"case {arraySize}:");
                PushIndent("\t");
                WriteLine($"sort{arraySize}best(A);");
                WriteLine("break;");
                PopIndent();
            }
            PopIndent();
            PopIndent();
        #>
        default:
            abort();
            break;
    }
}

}

#endif