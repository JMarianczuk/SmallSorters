<#@ template language="C#" hostspecific="False" compilerOptions="/langversion:7"#>
<#@ output extension=".generated.h"#>
<#@ include file="SortableDefinitions.tt"#>
<#@ assembly name="System.Core"#>

<#@ import namespace="System"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Linq"#>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated from a T4 template
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#ifndef RANDOMISATION_GENERATED_H
#define RANDOMISATION_GENERATED_H

#include "Randomisation.h"

namespace randomisation
{

template<typename TValueType>
void GenerateRandomArray(TValueType* arr, size_t arraySize) {
    throw std::logic_error("Not implemented for generic type");
}

<#
    foreach (var sortableStruct in sortableStructs)
    {
        GenerateRandomArrayMethod(sortableStruct.FullName, sortableStruct.HasReference);
    }

    void GenerateRandomArrayMethod(string fullName, bool hasReference)
    {
        WriteLine("template<>");
        WriteLine($"void GenerateRandomArray<{fullName}>({fullName}* arr, size_t arraySize) {{");
        PushIndent("\t");
        if (hasReference)
        {
            WriteLine("uint64_t reference = randomisation::GenerateRandomUint64();");
        }
        WriteLine("for (int i = 0; i < arraySize; i += 1) {");
        PushIndent("\t");
        WriteLine("arr[i].key = randomisation::GenerateRandomUint64();");
        if (hasReference)
        {
            WriteLine("arr[i].reference = reference + i;");
        }
        PopIndent();
        WriteLine("}");
        PopIndent();
        WriteLine("}");
    }
#>

}

#endif