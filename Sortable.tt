<#@ template language="C#" hostspecific="False" compilerOptions="/langversion:6"
#><#@ output extension=".generated.h"
#>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


#ifndef SORTABLE_H
#define SORTABLE_H

#define ArraySize 16
#include <inttypes.h>


<#	SortableStruct.transform = this;

    SortableStruct[] sortableStructs = {
        new SortableStruct("", true),
        new SortableStruct("JumpXchg", false),
        new SortableStruct("JumpXchg", true),
        new SortableStruct("TwoCmovTemp", false),
        new SortableStruct("FourCmovTemp", true),
        new SortableStruct("FourCmovTemp_Split", true),
        new SortableStruct("ThreeCmovRegisterTemp", false),
        new SortableStruct("SixCmovRegisterTemp", true),
        new SortableStruct("ClangVersion", true)
    };

    foreach (var sortableStruct in sortableStructs)
    {
        WriteLine("struct " + sortableStruct.FullName + " {");
        PushIndent("\t");
        sortableStruct.WriteVariables();
        sortableStruct.WriteOperators();
        PopIndent();
        WriteLine("};");
    }
#>

#endif

<#+  
    class SortableStruct 
    { 
		public static GeneratedTextTransformation transform;
        public string Name {get;set;} 
        public bool HasReference {get;set;}
        public SortableStruct(string name, bool hasReference)
        {
            Name = name;
            HasReference = hasReference;
        }
        public string FullName
        {
            get 
            {
                var result = "Sortable";
                if (HasReference)
                {
                    result += "Ref";
                }
                if (!string.IsNullOrEmpty(Name))
                {
                    result += $"_{Name}";
                }
                return result;
            }
        }
        public void WriteVariables()
        {
            transform.WriteLine("uint64_t key;");
            if (HasReference)
            {
                transform.WriteLine("uint64_t reference;");
            }
        }
        public void WriteOperators()
        {
            transform.WriteLine($"friend bool operator>(const {FullName}& left, const {FullName}& right) {{");
            transform.PushIndent("\t");
            transform.WriteLine("return left.key > right.key;");
            transform.PopIndent();
            transform.WriteLine("}");
            transform.WriteLine($"friend bool operator==(const {FullName}&left, const {FullName}&right) {{");
            transform.PushIndent("\t");
            transform.WriteLine("return left.key == right.key;");
            transform.PopIndent();
            transform.WriteLine("}");
        }
    }
#>
