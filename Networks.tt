<#@ template language="C#" hostspecific="True" compilerOptions="/langversion:7"#>
<#@ output extension=".generated.h"#>

<#@ assembly name="System.Core"#>
<#@ assembly name="C:\\Users\\Jasper\\.nuget\\packages\\newtonsoft.json\\12.0.1\\lib\\net45\\Newtonsoft.Json.dll"#>

<#@ import namespace="System"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="Newtonsoft.Json"#>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated from a T4 template
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#ifndef NETWORKS_GENERATED_H
#define NETWORKS_GENERATED_H

#include "NetworkSort.h"

namespace networks {

<#    
    var networksJson = File.ReadAllText(Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "networks.json"));
    var networks = JsonConvert.DeserializeObject<Network[]>(networksJson);
    foreach (var network in networks)
    {
        WriteLine("template <typename TValueType> static inline");
        WriteLine($"void sort{network.Size}(TValueType* A)");
        WriteLine("{");
        PushIndent("\t");
        WriteSwaps(network);
        PopIndent();
        WriteLine("}");
    }

    void WriteSwaps(Network network)
    {
        foreach (var swap in network.Swaps)
        {
            WriteLine($"networks::ConditionalSwap(A[{swap.LeftIndex}], A[{swap.RightIndex}]);");
        }
    }
#>

template <typename TValueType> static inline
void sortN(TValueType* A, size_t n)
{
    switch(n) {
        case 0: break;
        case 1: break;
        <#
            PushIndent("\t");
            PushIndent("\t");
            for (var arraySize = 2; arraySize <= 16; arraySize += 1)
            {
                WriteLine($"case {arraySize}:");
                PushIndent("\t");
                WriteLine($"sort{arraySize}(A);");
                WriteLine("break;");
                PopIndent();
            }
            PopIndent();
            PopIndent();
        #>
        default:
            abort();
            break;
    }
}

}

#endif

<#+
    public class Network
    {
        public int Size { get; set; }
        public ConditionalSwap[] Swaps { get; set; }
        public Network(int size, ConditionalSwap[] swaps)
        {
            Size = size;
            Swaps = swaps;
        }
    }

    public class ConditionalSwap
    {
        public int LeftIndex { get; set; }
        public int RightIndex { get; set; }
        public ConditionalSwap(int leftIndex, int rightIndex)
        {
            LeftIndex = leftIndex;
            RightIndex = rightIndex;
        }
    }
#>