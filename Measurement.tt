<#@ template language="C#" hostspecific="False" compilerOptions="/langversion:7"#>
<#@ output extension=".generated.h"#>
<#@ include file="SortableDefinitions.tt"#>
<#@ assembly name="System.Core"#>

<#@ import namespace="System"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Linq"#>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated from a T4 template
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


#ifndef MEASUREMENT_GENERATED_H
#define MEASUREMENT_GENERATED_H

#include "Sortable.generated.h"
#include "Performancing.h"
#include "EnvironmentInfo.h"
#include "Measure.h"

namespace measurement
{

void MeasureSorting(Performancing* perf, EnvironmentInfo info, int numberOfIterations, size_t arraySize)
{
<#
    PushIndent("\t"); 
    WriteSorterMeasureLine(sortableStructs.Where(UseForNetworkSort), "Network");
    WriteLine("");
    WriteSorterMeasureLine(sortableStructs.Where(UseForInsertionSort), "Insertion");
    PopIndent();
#>
}

void MeasureRandomGenerationAndSortedChecking(Performancing* perf, EnvironmentInfo info, int numberOfIterations, size_t arraySize)
{
<#
    PushIndent("\t");
    WriteRandomMeasureLine(sortableStructs.Where(UseForNetworkSort), "Network");
    WriteLine("");
    WriteRandomMeasureLine(sortableStructs.Where(UseForInsertionSort), "Insertion");
    PopIndent();
#>
}

}

#endif

<#
    void WriteSorterMeasureLine(IEnumerable<SortableStruct> structs, string sorter)
    {
        WriteMeasureLine(structs, $"{sorter}Sort", sorter);
    }
    void WriteRandomMeasureLine(IEnumerable<SortableStruct> structs, string sorter)
    {
        WriteMeasureLine(structs, "RandomGeneration", sorter);
    }
    void WriteMeasureLine(IEnumerable<SortableStruct> structs, string toMeasure, string sorter)
    {
        foreach (var sortableStruct in structs)
        {
            WriteLine($"measurement::Measure{toMeasure}<{sortableStruct.FullName}>(perf, info, numberOfIterations, arraySize, \"{sorter} Sort {sortableStruct.DisplayName}\");");
        }
    }
    bool UseForNetworkSort(SortableStruct sortableStruct)
    {
        return sortableStruct.HasReference;
    }
    bool UseForInsertionSort(SortableStruct sortableStruct)
    {
        return sortableStruct.FullName == "SortableRef";
    }
#>