<#@ template language="C#" hostspecific="False" compilerOptions="/langversion:7"#>
<#@ output extension=".generated.h"#>
<#@ include file="SortableDefinitions.tt"#>
<#@ assembly name="System.Core"#>

<#@ import namespace="System.Linq"#>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated from a T4 template
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


#ifndef MEASUREMENT_GENERATED_H
#define MEASUREMENT_GENERATED_H

#include "Sortable.generated.h"
#include "Performancing.h"
#include "EnvironmentInfo.h"
#include "Measure.h"

namespace measurement
{

void MeasureSorting(Performancing* perf, EnvironmentInfo info, int numberOfIterations, size_t arraySize)
{
<#
    PushIndent("\t");
    foreach (var sortableStruct in sortableStructs.Where(UseForNetworkSort))
    {
        WriteLine($"MeasureNetworkSort<{sortableStruct.FullName}>(perf, info, numberOfIterations, arraySize, \"Network {sortableStruct.DisplayName}\")");
    }
    WriteLine("");
    foreach (var sortableStruct in sortableStructs.Where(UseForInsertionSort))
    {
        WriteLine($"MeasureInsertionSort<{sortableStruct.FullName}>(perf, info, numberOfIterations, arraySize, \"Insertion Sort {sortableStruct.DisplayName}\")");
    }
    PopIndent();
#>
}

void MeasureRandomGenerationAndSortedChecking(Performancing* perf, EnvironmentInfo info, int numberOfIterations, size_t arraySize)
{
<#
    PushIndent("\t");
    for (int i = 0; i < sortableStructs.Count(UseForNetworkSort) + sortableStructs.Count(UseForInsertionSort); i += 1)
    {
        WriteLine("MeasureRandomGeneration(perf, info, numberOfIterations, arraySize)");
    }
    PopIndent();
#>
}

}

#endif

<#
    bool UseForNetworkSort(SortableStruct sortableStruct)
    {
        return sortableStruct.HasReference;
    }
    bool UseForInsertionSort(SortableStruct sortableStruct)
    {
        return sortableStruct.FullName == "SortableRef";
    }
#>