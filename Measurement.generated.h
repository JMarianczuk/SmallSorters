



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated from a T4 template
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


#ifndef MEASUREMENT_GENERATED_H
#define MEASUREMENT_GENERATED_H

#include "Sortable.generated.h"
#include "Performancing.h"
#include "EnvironmentInfo.h"
#include "Measure.h"

namespace measurement
{

void MeasureSorting(Performancing* perf, EnvironmentInfo info, int numberOfIterations, size_t arraySize)
{
	MeasureNetworkSort<SortableRef>(perf, info, numberOfIterations, arraySize, "Network Key-Reference-Tuple")
	MeasureNetworkSort<SortableRef_JumpXchg>(perf, info, numberOfIterations, arraySize, "Network Key-Reference-JumpXchg")
	MeasureNetworkSort<SortableRef_FourCmovTemp>(perf, info, numberOfIterations, arraySize, "Network Key-Reference-FourCmovTemp")
	MeasureNetworkSort<SortableRef_FourCmovTemp_Split>(perf, info, numberOfIterations, arraySize, "Network Key-Reference-FourCmovTemp_Split")
	MeasureNetworkSort<SortableRef_SixCmovRegisterTemp>(perf, info, numberOfIterations, arraySize, "Network Key-Reference-SixCmovRegisterTemp")
	MeasureNetworkSort<SortableRef_ClangVersion>(perf, info, numberOfIterations, arraySize, "Network Key-Reference-ClangVersion")

	MeasureInsertionSort<SortableRef>(perf, info, numberOfIterations, arraySize, "Insertion Sort Key-Reference-Tuple")
}

void MeasureRandomGenerationAndSortedChecking(Performancing* perf, EnvironmentInfo info, int numberOfIterations, size_t arraySize)
{
	MeasureRandomGeneration(perf, info, numberOfIterations, arraySize)
	MeasureRandomGeneration(perf, info, numberOfIterations, arraySize)
	MeasureRandomGeneration(perf, info, numberOfIterations, arraySize)
	MeasureRandomGeneration(perf, info, numberOfIterations, arraySize)
	MeasureRandomGeneration(perf, info, numberOfIterations, arraySize)
	MeasureRandomGeneration(perf, info, numberOfIterations, arraySize)
	MeasureRandomGeneration(perf, info, numberOfIterations, arraySize)
}

}

#endif

