//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


#ifndef BOSENELSON_PARAMETER_GENERATED_H
#define BOSENELSON_PARAMETER_GENERATED_H

#include "NetworkSort.h"
namespace networks
{
template <typename TValueType> static
inline
void merge1_1bosenelsonparameter(TValueType& left0, TValueType& right0)
{
	networks::ConditionalSwap(left0, right0);
}
template <typename TValueType> static
inline
void sort2bosenelsonparameter(TValueType& element0, TValueType& element1)
{
	networks::merge1_1bosenelsonparameter(element0, element1);
}

template <typename TValueType> static
inline
void merge1_2bosenelsonparameter(TValueType& left0, TValueType& right0, TValueType& right1)
{
	networks::ConditionalSwap(left0, right1);
	networks::ConditionalSwap(left0, right0);
}
template <typename TValueType> static
void sort3bosenelsonparameter(TValueType& element0, TValueType& element1, TValueType& element2)
{
	networks::sort2bosenelsonparameter(element1, element2);
	networks::merge1_2bosenelsonparameter(element0, element1, element2);
}

template <typename TValueType> static
void merge2_2bosenelsonparameter(TValueType& left0, TValueType& left1, TValueType& right0, TValueType& right1)
{
	networks::merge1_1bosenelsonparameter(left0, right0);
	networks::merge1_1bosenelsonparameter(left1, right1);
	networks::merge1_1bosenelsonparameter(left1, right0);
}

template <typename TValueType> static
void sort4bosenelsonparameter(TValueType& element0, TValueType& element1, TValueType& element2, TValueType& element3)
{
	networks::sort2bosenelsonparameter(element0, element1);
	networks::sort2bosenelsonparameter(element2, element3);
	networks::merge2_2bosenelsonparameter(element0, element1, element2, element3);
}

template <typename TValueType> static
void merge2_3bosenelsonparameter(TValueType& left0, TValueType& left1, TValueType& right0, TValueType& right1, TValueType& right2)
{
	networks::merge1_2bosenelsonparameter(left0, right0, right1);
	networks::merge1_1bosenelsonparameter(left1, right2);
	networks::merge1_2bosenelsonparameter(left1, right0, right1);
}

template <typename TValueType> static
void sort5bosenelsonparameter(TValueType& element0, TValueType& element1, TValueType& element2, TValueType& element3, TValueType& element4)
{
	networks::sort2bosenelsonparameter(element0, element1);
	networks::sort3bosenelsonparameter(element2, element3, element4);
	networks::merge2_3bosenelsonparameter(element0, element1, element2, element3, element4);
}

template <typename TValueType> static
inline
void merge2_1bosenelsonparameter(TValueType& left0, TValueType& left1, TValueType& right0)
{
	networks::ConditionalSwap(left0, right0);
	networks::ConditionalSwap(left1, right0);
}
template <typename TValueType> static
void merge3_3bosenelsonparameter(TValueType& left0, TValueType& left1, TValueType& left2, TValueType& right0, TValueType& right1, TValueType& right2)
{
	networks::merge1_1bosenelsonparameter(left0, right0);
	networks::merge2_2bosenelsonparameter(left1, left2, right1, right2);
	networks::merge2_1bosenelsonparameter(left1, left2, right0);
}

template <typename TValueType> static
void sort6bosenelsonparameter(TValueType& element0, TValueType& element1, TValueType& element2, TValueType& element3, TValueType& element4, TValueType& element5)
{
	networks::sort3bosenelsonparameter(element0, element1, element2);
	networks::sort3bosenelsonparameter(element3, element4, element5);
	networks::merge3_3bosenelsonparameter(element0, element1, element2, element3, element4, element5);
}

template <typename TValueType> static
void merge3_4bosenelsonparameter(TValueType& left0, TValueType& left1, TValueType& left2, TValueType& right0, TValueType& right1, TValueType& right2, TValueType& right3)
{
	networks::merge1_2bosenelsonparameter(left0, right0, right1);
	networks::merge2_2bosenelsonparameter(left1, left2, right2, right3);
	networks::merge2_2bosenelsonparameter(left1, left2, right0, right1);
}

template <typename TValueType> static
void sort7bosenelsonparameter(TValueType& element0, TValueType& element1, TValueType& element2, TValueType& element3, TValueType& element4, TValueType& element5, TValueType& element6)
{
	networks::sort3bosenelsonparameter(element0, element1, element2);
	networks::sort4bosenelsonparameter(element3, element4, element5, element6);
	networks::merge3_4bosenelsonparameter(element0, element1, element2, element3, element4, element5, element6);
}

template <typename TValueType> static
void merge4_4bosenelsonparameter(TValueType& left0, TValueType& left1, TValueType& left2, TValueType& left3, TValueType& right0, TValueType& right1, TValueType& right2, TValueType& right3)
{
	networks::merge2_2bosenelsonparameter(left0, left1, right0, right1);
	networks::merge2_2bosenelsonparameter(left2, left3, right2, right3);
	networks::merge2_2bosenelsonparameter(left2, left3, right0, right1);
}

template <typename TValueType> static
void sort8bosenelsonparameter(TValueType& element0, TValueType& element1, TValueType& element2, TValueType& element3, TValueType& element4, TValueType& element5, TValueType& element6, TValueType& element7)
{
	networks::sort4bosenelsonparameter(element0, element1, element2, element3);
	networks::sort4bosenelsonparameter(element4, element5, element6, element7);
	networks::merge4_4bosenelsonparameter(element0, element1, element2, element3, element4, element5, element6, element7);
}

template <typename TValueType> static
void merge4_5bosenelsonparameter(TValueType& left0, TValueType& left1, TValueType& left2, TValueType& left3, TValueType& right0, TValueType& right1, TValueType& right2, TValueType& right3, TValueType& right4)
{
	networks::merge2_3bosenelsonparameter(left0, left1, right0, right1, right2);
	networks::merge2_2bosenelsonparameter(left2, left3, right3, right4);
	networks::merge2_3bosenelsonparameter(left2, left3, right0, right1, right2);
}

template <typename TValueType> static
void sort9bosenelsonparameter(TValueType& element0, TValueType& element1, TValueType& element2, TValueType& element3, TValueType& element4, TValueType& element5, TValueType& element6, TValueType& element7, TValueType& element8)
{
	networks::sort4bosenelsonparameter(element0, element1, element2, element3);
	networks::sort5bosenelsonparameter(element4, element5, element6, element7, element8);
	networks::merge4_5bosenelsonparameter(element0, element1, element2, element3, element4, element5, element6, element7, element8);
}

template <typename TValueType> static
void merge3_2bosenelsonparameter(TValueType& left0, TValueType& left1, TValueType& left2, TValueType& right0, TValueType& right1)
{
	networks::merge1_1bosenelsonparameter(left0, right0);
	networks::merge2_1bosenelsonparameter(left1, left2, right1);
	networks::merge2_1bosenelsonparameter(left1, left2, right0);
}

template <typename TValueType> static
void merge5_5bosenelsonparameter(TValueType& left0, TValueType& left1, TValueType& left2, TValueType& left3, TValueType& left4, TValueType& right0, TValueType& right1, TValueType& right2, TValueType& right3, TValueType& right4)
{
	networks::merge2_2bosenelsonparameter(left0, left1, right0, right1);
	networks::merge3_3bosenelsonparameter(left2, left3, left4, right2, right3, right4);
	networks::merge3_2bosenelsonparameter(left2, left3, left4, right0, right1);
}

template <typename TValueType> static
void sort10bosenelsonparameter(TValueType& element0, TValueType& element1, TValueType& element2, TValueType& element3, TValueType& element4, TValueType& element5, TValueType& element6, TValueType& element7, TValueType& element8, TValueType& element9)
{
	networks::sort5bosenelsonparameter(element0, element1, element2, element3, element4);
	networks::sort5bosenelsonparameter(element5, element6, element7, element8, element9);
	networks::merge5_5bosenelsonparameter(element0, element1, element2, element3, element4, element5, element6, element7, element8, element9);
}

template <typename TValueType> static
void merge5_6bosenelsonparameter(TValueType& left0, TValueType& left1, TValueType& left2, TValueType& left3, TValueType& left4, TValueType& right0, TValueType& right1, TValueType& right2, TValueType& right3, TValueType& right4, TValueType& right5)
{
	networks::merge2_3bosenelsonparameter(left0, left1, right0, right1, right2);
	networks::merge3_3bosenelsonparameter(left2, left3, left4, right3, right4, right5);
	networks::merge3_3bosenelsonparameter(left2, left3, left4, right0, right1, right2);
}

template <typename TValueType> static
void sort11bosenelsonparameter(TValueType& element0, TValueType& element1, TValueType& element2, TValueType& element3, TValueType& element4, TValueType& element5, TValueType& element6, TValueType& element7, TValueType& element8, TValueType& element9, TValueType& element10)
{
	networks::sort5bosenelsonparameter(element0, element1, element2, element3, element4);
	networks::sort6bosenelsonparameter(element5, element6, element7, element8, element9, element10);
	networks::merge5_6bosenelsonparameter(element0, element1, element2, element3, element4, element5, element6, element7, element8, element9, element10);
}

template <typename TValueType> static
void merge6_6bosenelsonparameter(TValueType& left0, TValueType& left1, TValueType& left2, TValueType& left3, TValueType& left4, TValueType& left5, TValueType& right0, TValueType& right1, TValueType& right2, TValueType& right3, TValueType& right4, TValueType& right5)
{
	networks::merge3_3bosenelsonparameter(left0, left1, left2, right0, right1, right2);
	networks::merge3_3bosenelsonparameter(left3, left4, left5, right3, right4, right5);
	networks::merge3_3bosenelsonparameter(left3, left4, left5, right0, right1, right2);
}

template <typename TValueType> static
void sort12bosenelsonparameter(TValueType& element0, TValueType& element1, TValueType& element2, TValueType& element3, TValueType& element4, TValueType& element5, TValueType& element6, TValueType& element7, TValueType& element8, TValueType& element9, TValueType& element10, TValueType& element11)
{
	networks::sort6bosenelsonparameter(element0, element1, element2, element3, element4, element5);
	networks::sort6bosenelsonparameter(element6, element7, element8, element9, element10, element11);
	networks::merge6_6bosenelsonparameter(element0, element1, element2, element3, element4, element5, element6, element7, element8, element9, element10, element11);
}

template <typename TValueType> static
void merge6_7bosenelsonparameter(TValueType& left0, TValueType& left1, TValueType& left2, TValueType& left3, TValueType& left4, TValueType& left5, TValueType& right0, TValueType& right1, TValueType& right2, TValueType& right3, TValueType& right4, TValueType& right5, TValueType& right6)
{
	networks::merge3_4bosenelsonparameter(left0, left1, left2, right0, right1, right2, right3);
	networks::merge3_3bosenelsonparameter(left3, left4, left5, right4, right5, right6);
	networks::merge3_4bosenelsonparameter(left3, left4, left5, right0, right1, right2, right3);
}

template <typename TValueType> static
void sort13bosenelsonparameter(TValueType& element0, TValueType& element1, TValueType& element2, TValueType& element3, TValueType& element4, TValueType& element5, TValueType& element6, TValueType& element7, TValueType& element8, TValueType& element9, TValueType& element10, TValueType& element11, TValueType& element12)
{
	networks::sort6bosenelsonparameter(element0, element1, element2, element3, element4, element5);
	networks::sort7bosenelsonparameter(element6, element7, element8, element9, element10, element11, element12);
	networks::merge6_7bosenelsonparameter(element0, element1, element2, element3, element4, element5, element6, element7, element8, element9, element10, element11, element12);
}

template <typename TValueType> static
void merge4_3bosenelsonparameter(TValueType& left0, TValueType& left1, TValueType& left2, TValueType& left3, TValueType& right0, TValueType& right1, TValueType& right2)
{
	networks::merge2_2bosenelsonparameter(left0, left1, right0, right1);
	networks::merge2_1bosenelsonparameter(left2, left3, right2);
	networks::merge2_2bosenelsonparameter(left2, left3, right0, right1);
}

template <typename TValueType> static
void merge7_7bosenelsonparameter(TValueType& left0, TValueType& left1, TValueType& left2, TValueType& left3, TValueType& left4, TValueType& left5, TValueType& left6, TValueType& right0, TValueType& right1, TValueType& right2, TValueType& right3, TValueType& right4, TValueType& right5, TValueType& right6)
{
	networks::merge3_3bosenelsonparameter(left0, left1, left2, right0, right1, right2);
	networks::merge4_4bosenelsonparameter(left3, left4, left5, left6, right3, right4, right5, right6);
	networks::merge4_3bosenelsonparameter(left3, left4, left5, left6, right0, right1, right2);
}

template <typename TValueType> static
void sort14bosenelsonparameter(TValueType& element0, TValueType& element1, TValueType& element2, TValueType& element3, TValueType& element4, TValueType& element5, TValueType& element6, TValueType& element7, TValueType& element8, TValueType& element9, TValueType& element10, TValueType& element11, TValueType& element12, TValueType& element13)
{
	networks::sort7bosenelsonparameter(element0, element1, element2, element3, element4, element5, element6);
	networks::sort7bosenelsonparameter(element7, element8, element9, element10, element11, element12, element13);
	networks::merge7_7bosenelsonparameter(element0, element1, element2, element3, element4, element5, element6, element7, element8, element9, element10, element11, element12, element13);
}

template <typename TValueType> static
void merge7_8bosenelsonparameter(TValueType& left0, TValueType& left1, TValueType& left2, TValueType& left3, TValueType& left4, TValueType& left5, TValueType& left6, TValueType& right0, TValueType& right1, TValueType& right2, TValueType& right3, TValueType& right4, TValueType& right5, TValueType& right6, TValueType& right7)
{
	networks::merge3_4bosenelsonparameter(left0, left1, left2, right0, right1, right2, right3);
	networks::merge4_4bosenelsonparameter(left3, left4, left5, left6, right4, right5, right6, right7);
	networks::merge4_4bosenelsonparameter(left3, left4, left5, left6, right0, right1, right2, right3);
}

template <typename TValueType> static
void sort15bosenelsonparameter(TValueType& element0, TValueType& element1, TValueType& element2, TValueType& element3, TValueType& element4, TValueType& element5, TValueType& element6, TValueType& element7, TValueType& element8, TValueType& element9, TValueType& element10, TValueType& element11, TValueType& element12, TValueType& element13, TValueType& element14)
{
	networks::sort7bosenelsonparameter(element0, element1, element2, element3, element4, element5, element6);
	networks::sort8bosenelsonparameter(element7, element8, element9, element10, element11, element12, element13, element14);
	networks::merge7_8bosenelsonparameter(element0, element1, element2, element3, element4, element5, element6, element7, element8, element9, element10, element11, element12, element13, element14);
}

template <typename TValueType> static
void merge8_8bosenelsonparameter(TValueType& left0, TValueType& left1, TValueType& left2, TValueType& left3, TValueType& left4, TValueType& left5, TValueType& left6, TValueType& left7, TValueType& right0, TValueType& right1, TValueType& right2, TValueType& right3, TValueType& right4, TValueType& right5, TValueType& right6, TValueType& right7)
{
	networks::merge4_4bosenelsonparameter(left0, left1, left2, left3, right0, right1, right2, right3);
	networks::merge4_4bosenelsonparameter(left4, left5, left6, left7, right4, right5, right6, right7);
	networks::merge4_4bosenelsonparameter(left4, left5, left6, left7, right0, right1, right2, right3);
}

template <typename TValueType> static
void sort16bosenelsonparameter(TValueType& element0, TValueType& element1, TValueType& element2, TValueType& element3, TValueType& element4, TValueType& element5, TValueType& element6, TValueType& element7, TValueType& element8, TValueType& element9, TValueType& element10, TValueType& element11, TValueType& element12, TValueType& element13, TValueType& element14, TValueType& element15)
{
	networks::sort8bosenelsonparameter(element0, element1, element2, element3, element4, element5, element6, element7);
	networks::sort8bosenelsonparameter(element8, element9, element10, element11, element12, element13, element14, element15);
	networks::merge8_8bosenelsonparameter(element0, element1, element2, element3, element4, element5, element6, element7, element8, element9, element10, element11, element12, element13, element14, element15);
}


template <typename TValueType> static
void sortNbosenelsonparameter(TValueType* A, size_t n)
{
	switch(n)
	{
		case 0: break;
		case 1: break;
		case 2:
			sort2bosenelsonparameter(A[0], A[1]);
			break;
		case 3:
			sort3bosenelsonparameter(A[0], A[1], A[2]);
			break;
		case 4:
			sort4bosenelsonparameter(A[0], A[1], A[2], A[3]);
			break;
		case 5:
			sort5bosenelsonparameter(A[0], A[1], A[2], A[3], A[4]);
			break;
		case 6:
			sort6bosenelsonparameter(A[0], A[1], A[2], A[3], A[4], A[5]);
			break;
		case 7:
			sort7bosenelsonparameter(A[0], A[1], A[2], A[3], A[4], A[5], A[6]);
			break;
		case 8:
			sort8bosenelsonparameter(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7]);
			break;
		case 9:
			sort9bosenelsonparameter(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8]);
			break;
		case 10:
			sort10bosenelsonparameter(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9]);
			break;
		case 11:
			sort11bosenelsonparameter(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10]);
			break;
		case 12:
			sort12bosenelsonparameter(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10], A[11]);
			break;
		case 13:
			sort13bosenelsonparameter(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10], A[11], A[12]);
			break;
		case 14:
			sort14bosenelsonparameter(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10], A[11], A[12], A[13]);
			break;
		case 15:
			sort15bosenelsonparameter(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10], A[11], A[12], A[13], A[14]);
			break;
		case 16:
			sort16bosenelsonparameter(A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10], A[11], A[12], A[13], A[14], A[15]);
			break;
	}
}
} // namespace networks

#endif // BOSENELSON_PARAMETER_GENERATED_H
