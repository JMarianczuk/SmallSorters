//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


#ifndef BOSENELSON_PARALLEL_GENERATED_H
#define BOSENELSON_PARALLEL_GENERATED_H

#include "NetworkSort.h"
namespace networks
{
template <typename TValueType> static inline
void sort2bosenelsonparallel(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
}
template <typename TValueType> static inline
void sort3bosenelsonparallel(TValueType* A)
{
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[1]);
}
template <typename TValueType> static inline
void sort4bosenelsonparallel(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[1], A[2]);
}
template <typename TValueType> static inline
void sort5bosenelsonparallel(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[1], A[2]);
}
template <typename TValueType> static inline
void sort6bosenelsonparallel(TValueType* A)
{
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[2], A[3]);
}
template <typename TValueType> static inline
void sort7bosenelsonparallel(TValueType* A)
{
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[5], A[6]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[1], A[5]);
	networks::ConditionalSwap(A[2], A[6]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[2], A[3]);
}
template <typename TValueType> static inline
void sort8bosenelsonparallel(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[6], A[7]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[5], A[6]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[1], A[5]);
	networks::ConditionalSwap(A[2], A[6]);
	networks::ConditionalSwap(A[3], A[7]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[3], A[6]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[3], A[4]);
}
template <typename TValueType> static inline
void sort9bosenelsonparallel(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[7], A[8]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[6], A[8]);
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[6], A[7]);
	networks::ConditionalSwap(A[4], A[7]);
	networks::ConditionalSwap(A[5], A[8]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[5], A[6]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[1], A[6]);
	networks::ConditionalSwap(A[2], A[7]);
	networks::ConditionalSwap(A[3], A[8]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[1], A[5]);
	networks::ConditionalSwap(A[3], A[7]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[3], A[6]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[3], A[4]);
}
template <typename TValueType> static inline
void sort10bosenelsonparallel(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[5], A[6]);
	networks::ConditionalSwap(A[8], A[9]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[7], A[9]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[7], A[8]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[5], A[8]);
	networks::ConditionalSwap(A[6], A[9]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[6], A[8]);
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[6], A[7]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[1], A[6]);
	networks::ConditionalSwap(A[2], A[7]);
	networks::ConditionalSwap(A[3], A[8]);
	networks::ConditionalSwap(A[4], A[9]);
	networks::ConditionalSwap(A[1], A[5]);
	networks::ConditionalSwap(A[4], A[8]);
	networks::ConditionalSwap(A[3], A[7]);
	networks::ConditionalSwap(A[4], A[7]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[3], A[6]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[4], A[5]);
}
template <typename TValueType> static inline
void sort11bosenelsonparallel(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[6], A[7]);
	networks::ConditionalSwap(A[9], A[10]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[8], A[10]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[5], A[6]);
	networks::ConditionalSwap(A[8], A[9]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[5], A[8]);
	networks::ConditionalSwap(A[6], A[9]);
	networks::ConditionalSwap(A[7], A[10]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[7], A[9]);
	networks::ConditionalSwap(A[6], A[8]);
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[7], A[8]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[1], A[7]);
	networks::ConditionalSwap(A[2], A[8]);
	networks::ConditionalSwap(A[3], A[9]);
	networks::ConditionalSwap(A[4], A[10]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[1], A[6]);
	networks::ConditionalSwap(A[4], A[9]);
	networks::ConditionalSwap(A[3], A[8]);
	networks::ConditionalSwap(A[1], A[5]);
	networks::ConditionalSwap(A[4], A[8]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[3], A[6]);
	networks::ConditionalSwap(A[4], A[7]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[4], A[5]);
}
template <typename TValueType> static inline
void sort12bosenelsonparallel(TValueType* A)
{
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[7], A[8]);
	networks::ConditionalSwap(A[10], A[11]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[6], A[8]);
	networks::ConditionalSwap(A[9], A[11]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[6], A[7]);
	networks::ConditionalSwap(A[9], A[10]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[6], A[9]);
	networks::ConditionalSwap(A[7], A[10]);
	networks::ConditionalSwap(A[8], A[11]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[8], A[10]);
	networks::ConditionalSwap(A[7], A[9]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[8], A[9]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[1], A[7]);
	networks::ConditionalSwap(A[2], A[8]);
	networks::ConditionalSwap(A[3], A[9]);
	networks::ConditionalSwap(A[4], A[10]);
	networks::ConditionalSwap(A[5], A[11]);
	networks::ConditionalSwap(A[2], A[7]);
	networks::ConditionalSwap(A[1], A[6]);
	networks::ConditionalSwap(A[5], A[10]);
	networks::ConditionalSwap(A[4], A[9]);
	networks::ConditionalSwap(A[2], A[6]);
	networks::ConditionalSwap(A[5], A[9]);
	networks::ConditionalSwap(A[3], A[6]);
	networks::ConditionalSwap(A[4], A[7]);
	networks::ConditionalSwap(A[5], A[8]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[5], A[6]);
}
template <typename TValueType> static inline
void sort13bosenelsonparallel(TValueType* A)
{
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[7], A[8]);
	networks::ConditionalSwap(A[9], A[10]);
	networks::ConditionalSwap(A[11], A[12]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[6], A[8]);
	networks::ConditionalSwap(A[9], A[11]);
	networks::ConditionalSwap(A[10], A[12]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[6], A[7]);
	networks::ConditionalSwap(A[10], A[11]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[6], A[10]);
	networks::ConditionalSwap(A[7], A[11]);
	networks::ConditionalSwap(A[8], A[12]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[6], A[9]);
	networks::ConditionalSwap(A[8], A[11]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[7], A[9]);
	networks::ConditionalSwap(A[8], A[10]);
	networks::ConditionalSwap(A[8], A[9]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[1], A[8]);
	networks::ConditionalSwap(A[2], A[9]);
	networks::ConditionalSwap(A[3], A[10]);
	networks::ConditionalSwap(A[4], A[11]);
	networks::ConditionalSwap(A[5], A[12]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[2], A[8]);
	networks::ConditionalSwap(A[5], A[11]);
	networks::ConditionalSwap(A[4], A[10]);
	networks::ConditionalSwap(A[1], A[6]);
	networks::ConditionalSwap(A[2], A[7]);
	networks::ConditionalSwap(A[5], A[10]);
	networks::ConditionalSwap(A[2], A[6]);
	networks::ConditionalSwap(A[3], A[7]);
	networks::ConditionalSwap(A[4], A[8]);
	networks::ConditionalSwap(A[5], A[9]);
	networks::ConditionalSwap(A[3], A[6]);
	networks::ConditionalSwap(A[5], A[8]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[5], A[6]);
}
template <typename TValueType> static inline
void sort14bosenelsonparallel(TValueType* A)
{
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[5], A[6]);
	networks::ConditionalSwap(A[8], A[9]);
	networks::ConditionalSwap(A[10], A[11]);
	networks::ConditionalSwap(A[12], A[13]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[7], A[9]);
	networks::ConditionalSwap(A[10], A[12]);
	networks::ConditionalSwap(A[11], A[13]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[7], A[8]);
	networks::ConditionalSwap(A[11], A[12]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[1], A[5]);
	networks::ConditionalSwap(A[2], A[6]);
	networks::ConditionalSwap(A[7], A[11]);
	networks::ConditionalSwap(A[8], A[12]);
	networks::ConditionalSwap(A[9], A[13]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[7], A[10]);
	networks::ConditionalSwap(A[9], A[12]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[8], A[10]);
	networks::ConditionalSwap(A[9], A[11]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[9], A[10]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[1], A[8]);
	networks::ConditionalSwap(A[2], A[9]);
	networks::ConditionalSwap(A[3], A[10]);
	networks::ConditionalSwap(A[4], A[11]);
	networks::ConditionalSwap(A[5], A[12]);
	networks::ConditionalSwap(A[6], A[13]);
	networks::ConditionalSwap(A[2], A[8]);
	networks::ConditionalSwap(A[1], A[7]);
	networks::ConditionalSwap(A[4], A[10]);
	networks::ConditionalSwap(A[6], A[12]);
	networks::ConditionalSwap(A[2], A[7]);
	networks::ConditionalSwap(A[5], A[10]);
	networks::ConditionalSwap(A[6], A[11]);
	networks::ConditionalSwap(A[6], A[10]);
	networks::ConditionalSwap(A[3], A[7]);
	networks::ConditionalSwap(A[4], A[8]);
	networks::ConditionalSwap(A[5], A[9]);
	networks::ConditionalSwap(A[4], A[7]);
	networks::ConditionalSwap(A[6], A[9]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[6], A[8]);
	networks::ConditionalSwap(A[6], A[7]);
}
template <typename TValueType> static inline
void sort15bosenelsonparallel(TValueType* A)
{
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[5], A[6]);
	networks::ConditionalSwap(A[7], A[8]);
	networks::ConditionalSwap(A[9], A[10]);
	networks::ConditionalSwap(A[11], A[12]);
	networks::ConditionalSwap(A[13], A[14]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[7], A[9]);
	networks::ConditionalSwap(A[8], A[10]);
	networks::ConditionalSwap(A[11], A[13]);
	networks::ConditionalSwap(A[12], A[14]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[8], A[9]);
	networks::ConditionalSwap(A[12], A[13]);
	networks::ConditionalSwap(A[7], A[11]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[1], A[5]);
	networks::ConditionalSwap(A[2], A[6]);
	networks::ConditionalSwap(A[8], A[12]);
	networks::ConditionalSwap(A[9], A[13]);
	networks::ConditionalSwap(A[10], A[14]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[8], A[11]);
	networks::ConditionalSwap(A[10], A[13]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[9], A[11]);
	networks::ConditionalSwap(A[10], A[12]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[10], A[11]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[1], A[9]);
	networks::ConditionalSwap(A[2], A[10]);
	networks::ConditionalSwap(A[3], A[11]);
	networks::ConditionalSwap(A[4], A[12]);
	networks::ConditionalSwap(A[5], A[13]);
	networks::ConditionalSwap(A[6], A[14]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[2], A[9]);
	networks::ConditionalSwap(A[4], A[11]);
	networks::ConditionalSwap(A[6], A[13]);
	networks::ConditionalSwap(A[1], A[7]);
	networks::ConditionalSwap(A[2], A[8]);
	networks::ConditionalSwap(A[5], A[11]);
	networks::ConditionalSwap(A[6], A[12]);
	networks::ConditionalSwap(A[2], A[7]);
	networks::ConditionalSwap(A[6], A[11]);
	networks::ConditionalSwap(A[3], A[7]);
	networks::ConditionalSwap(A[4], A[8]);
	networks::ConditionalSwap(A[5], A[9]);
	networks::ConditionalSwap(A[6], A[10]);
	networks::ConditionalSwap(A[4], A[7]);
	networks::ConditionalSwap(A[6], A[9]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[6], A[8]);
	networks::ConditionalSwap(A[6], A[7]);
}
template <typename TValueType> static inline
void sort16bosenelsonparallel(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[6], A[7]);
	networks::ConditionalSwap(A[8], A[9]);
	networks::ConditionalSwap(A[10], A[11]);
	networks::ConditionalSwap(A[12], A[13]);
	networks::ConditionalSwap(A[14], A[15]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[8], A[10]);
	networks::ConditionalSwap(A[9], A[11]);
	networks::ConditionalSwap(A[12], A[14]);
	networks::ConditionalSwap(A[13], A[15]);
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[5], A[6]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[9], A[10]);
	networks::ConditionalSwap(A[13], A[14]);
	networks::ConditionalSwap(A[8], A[12]);
	networks::ConditionalSwap(A[1], A[5]);
	networks::ConditionalSwap(A[2], A[6]);
	networks::ConditionalSwap(A[3], A[7]);
	networks::ConditionalSwap(A[9], A[13]);
	networks::ConditionalSwap(A[10], A[14]);
	networks::ConditionalSwap(A[11], A[15]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[3], A[6]);
	networks::ConditionalSwap(A[9], A[12]);
	networks::ConditionalSwap(A[11], A[14]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[10], A[12]);
	networks::ConditionalSwap(A[11], A[13]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[11], A[12]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[1], A[9]);
	networks::ConditionalSwap(A[2], A[10]);
	networks::ConditionalSwap(A[3], A[11]);
	networks::ConditionalSwap(A[4], A[12]);
	networks::ConditionalSwap(A[5], A[13]);
	networks::ConditionalSwap(A[6], A[14]);
	networks::ConditionalSwap(A[7], A[15]);
	networks::ConditionalSwap(A[1], A[8]);
	networks::ConditionalSwap(A[3], A[10]);
	networks::ConditionalSwap(A[5], A[12]);
	networks::ConditionalSwap(A[7], A[14]);
	networks::ConditionalSwap(A[2], A[8]);
	networks::ConditionalSwap(A[3], A[9]);
	networks::ConditionalSwap(A[6], A[12]);
	networks::ConditionalSwap(A[7], A[13]);
	networks::ConditionalSwap(A[3], A[8]);
	networks::ConditionalSwap(A[7], A[12]);
	networks::ConditionalSwap(A[4], A[8]);
	networks::ConditionalSwap(A[5], A[9]);
	networks::ConditionalSwap(A[6], A[10]);
	networks::ConditionalSwap(A[7], A[11]);
	networks::ConditionalSwap(A[5], A[8]);
	networks::ConditionalSwap(A[7], A[10]);
	networks::ConditionalSwap(A[6], A[8]);
	networks::ConditionalSwap(A[7], A[9]);
	networks::ConditionalSwap(A[7], A[8]);
}

template <typename TValueType> static inline
void sortNbosenelsonparallel(TValueType* A, size_t n)
{
	switch(n)
	{
		case 0: break;
		case 1: break;
		case 2:
			sort2bosenelsonparallel(A);
			break;
		case 3:
			sort3bosenelsonparallel(A);
			break;
		case 4:
			sort4bosenelsonparallel(A);
			break;
		case 5:
			sort5bosenelsonparallel(A);
			break;
		case 6:
			sort6bosenelsonparallel(A);
			break;
		case 7:
			sort7bosenelsonparallel(A);
			break;
		case 8:
			sort8bosenelsonparallel(A);
			break;
		case 9:
			sort9bosenelsonparallel(A);
			break;
		case 10:
			sort10bosenelsonparallel(A);
			break;
		case 11:
			sort11bosenelsonparallel(A);
			break;
		case 12:
			sort12bosenelsonparallel(A);
			break;
		case 13:
			sort13bosenelsonparallel(A);
			break;
		case 14:
			sort14bosenelsonparallel(A);
			break;
		case 15:
			sort15bosenelsonparallel(A);
			break;
		case 16:
			sort16bosenelsonparallel(A);
			break;
		default:
			abort();
			break;
	}
}
} // namespace networks

#endif // BOSENELSON_PARALLEL_GENERATED_H
