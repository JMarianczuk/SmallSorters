






//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated from a T4 template
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#ifndef BOSENELSON_GENERATED_H
#define BOSENELSON_GENERATED_H

#include "NetworkSort.h"

namespace networks {

template <typename TValueType> static inline
void sort2bosenelson(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
}
template <typename TValueType> static inline
void sort3bosenelson(TValueType* A)
{
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[1]);
}
template <typename TValueType> static inline
void sort4bosenelson(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[1], A[2]);
}
template <typename TValueType> static inline
void sort5bosenelson(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[1], A[2]);
}
template <typename TValueType> static inline
void sort6bosenelson(TValueType* A)
{
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[2], A[3]);
}
template <typename TValueType> static inline
void sort7bosenelson(TValueType* A)
{
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[5], A[6]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[1], A[5]);
	networks::ConditionalSwap(A[2], A[6]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[2], A[3]);
}
template <typename TValueType> static inline
void sort8bosenelson(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[6], A[7]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[5], A[6]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[1], A[5]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[2], A[6]);
	networks::ConditionalSwap(A[3], A[7]);
	networks::ConditionalSwap(A[3], A[6]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[3], A[4]);
}
template <typename TValueType> static inline
void sort9bosenelson(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[7], A[8]);
	networks::ConditionalSwap(A[6], A[8]);
	networks::ConditionalSwap(A[6], A[7]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[5], A[8]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[5], A[6]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[1], A[5]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[2], A[6]);
	networks::ConditionalSwap(A[3], A[8]);
	networks::ConditionalSwap(A[3], A[7]);
	networks::ConditionalSwap(A[3], A[6]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[3], A[4]);
}
template <typename TValueType> static inline
void sort10bosenelson(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[5], A[6]);
	networks::ConditionalSwap(A[8], A[9]);
	networks::ConditionalSwap(A[7], A[9]);
	networks::ConditionalSwap(A[7], A[8]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[6], A[9]);
	networks::ConditionalSwap(A[6], A[8]);
	networks::ConditionalSwap(A[6], A[7]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[1], A[6]);
	networks::ConditionalSwap(A[1], A[5]);
	networks::ConditionalSwap(A[2], A[7]);
	networks::ConditionalSwap(A[3], A[8]);
	networks::ConditionalSwap(A[4], A[9]);
	networks::ConditionalSwap(A[4], A[8]);
	networks::ConditionalSwap(A[3], A[7]);
	networks::ConditionalSwap(A[4], A[7]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[3], A[6]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[4], A[5]);
}
template <typename TValueType> static inline
void sort11bosenelson(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[6], A[7]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[5], A[6]);
	networks::ConditionalSwap(A[9], A[10]);
	networks::ConditionalSwap(A[8], A[10]);
	networks::ConditionalSwap(A[8], A[9]);
	networks::ConditionalSwap(A[5], A[8]);
	networks::ConditionalSwap(A[6], A[9]);
	networks::ConditionalSwap(A[7], A[10]);
	networks::ConditionalSwap(A[7], A[9]);
	networks::ConditionalSwap(A[6], A[8]);
	networks::ConditionalSwap(A[7], A[8]);
	networks::ConditionalSwap(A[0], A[5]);
	networks::ConditionalSwap(A[1], A[7]);
	networks::ConditionalSwap(A[1], A[6]);
	networks::ConditionalSwap(A[1], A[5]);
	networks::ConditionalSwap(A[2], A[8]);
	networks::ConditionalSwap(A[3], A[9]);
	networks::ConditionalSwap(A[4], A[10]);
	networks::ConditionalSwap(A[4], A[9]);
	networks::ConditionalSwap(A[3], A[8]);
	networks::ConditionalSwap(A[4], A[8]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[3], A[6]);
	networks::ConditionalSwap(A[4], A[7]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[4], A[5]);
}
template <typename TValueType> static inline
void sort12bosenelson(TValueType* A)
{
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[7], A[8]);
	networks::ConditionalSwap(A[6], A[8]);
	networks::ConditionalSwap(A[6], A[7]);
	networks::ConditionalSwap(A[10], A[11]);
	networks::ConditionalSwap(A[9], A[11]);
	networks::ConditionalSwap(A[9], A[10]);
	networks::ConditionalSwap(A[6], A[9]);
	networks::ConditionalSwap(A[7], A[10]);
	networks::ConditionalSwap(A[8], A[11]);
	networks::ConditionalSwap(A[8], A[10]);
	networks::ConditionalSwap(A[7], A[9]);
	networks::ConditionalSwap(A[8], A[9]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[1], A[7]);
	networks::ConditionalSwap(A[2], A[8]);
	networks::ConditionalSwap(A[2], A[7]);
	networks::ConditionalSwap(A[1], A[6]);
	networks::ConditionalSwap(A[2], A[6]);
	networks::ConditionalSwap(A[3], A[9]);
	networks::ConditionalSwap(A[4], A[10]);
	networks::ConditionalSwap(A[5], A[11]);
	networks::ConditionalSwap(A[5], A[10]);
	networks::ConditionalSwap(A[4], A[9]);
	networks::ConditionalSwap(A[5], A[9]);
	networks::ConditionalSwap(A[3], A[6]);
	networks::ConditionalSwap(A[4], A[7]);
	networks::ConditionalSwap(A[5], A[8]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[5], A[6]);
}
template <typename TValueType> static inline
void sort13bosenelson(TValueType* A)
{
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[7], A[8]);
	networks::ConditionalSwap(A[6], A[8]);
	networks::ConditionalSwap(A[6], A[7]);
	networks::ConditionalSwap(A[9], A[10]);
	networks::ConditionalSwap(A[11], A[12]);
	networks::ConditionalSwap(A[9], A[11]);
	networks::ConditionalSwap(A[10], A[12]);
	networks::ConditionalSwap(A[10], A[11]);
	networks::ConditionalSwap(A[6], A[10]);
	networks::ConditionalSwap(A[6], A[9]);
	networks::ConditionalSwap(A[7], A[11]);
	networks::ConditionalSwap(A[8], A[12]);
	networks::ConditionalSwap(A[8], A[11]);
	networks::ConditionalSwap(A[7], A[9]);
	networks::ConditionalSwap(A[8], A[10]);
	networks::ConditionalSwap(A[8], A[9]);
	networks::ConditionalSwap(A[0], A[6]);
	networks::ConditionalSwap(A[1], A[7]);
	networks::ConditionalSwap(A[2], A[8]);
	networks::ConditionalSwap(A[2], A[7]);
	networks::ConditionalSwap(A[1], A[6]);
	networks::ConditionalSwap(A[2], A[6]);
	networks::ConditionalSwap(A[3], A[10]);
	networks::ConditionalSwap(A[3], A[9]);
	networks::ConditionalSwap(A[4], A[11]);
	networks::ConditionalSwap(A[5], A[12]);
	networks::ConditionalSwap(A[5], A[11]);
	networks::ConditionalSwap(A[4], A[9]);
	networks::ConditionalSwap(A[5], A[10]);
	networks::ConditionalSwap(A[5], A[9]);
	networks::ConditionalSwap(A[3], A[6]);
	networks::ConditionalSwap(A[4], A[7]);
	networks::ConditionalSwap(A[5], A[8]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[5], A[6]);
}
template <typename TValueType> static inline
void sort14bosenelson(TValueType* A)
{
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[5], A[6]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[1], A[5]);
	networks::ConditionalSwap(A[2], A[6]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[8], A[9]);
	networks::ConditionalSwap(A[7], A[9]);
	networks::ConditionalSwap(A[7], A[8]);
	networks::ConditionalSwap(A[10], A[11]);
	networks::ConditionalSwap(A[12], A[13]);
	networks::ConditionalSwap(A[10], A[12]);
	networks::ConditionalSwap(A[11], A[13]);
	networks::ConditionalSwap(A[11], A[12]);
	networks::ConditionalSwap(A[7], A[11]);
	networks::ConditionalSwap(A[7], A[10]);
	networks::ConditionalSwap(A[8], A[12]);
	networks::ConditionalSwap(A[9], A[13]);
	networks::ConditionalSwap(A[9], A[12]);
	networks::ConditionalSwap(A[8], A[10]);
	networks::ConditionalSwap(A[9], A[11]);
	networks::ConditionalSwap(A[9], A[10]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[1], A[8]);
	networks::ConditionalSwap(A[2], A[9]);
	networks::ConditionalSwap(A[2], A[8]);
	networks::ConditionalSwap(A[1], A[7]);
	networks::ConditionalSwap(A[2], A[7]);
	networks::ConditionalSwap(A[3], A[10]);
	networks::ConditionalSwap(A[4], A[11]);
	networks::ConditionalSwap(A[4], A[10]);
	networks::ConditionalSwap(A[5], A[12]);
	networks::ConditionalSwap(A[6], A[13]);
	networks::ConditionalSwap(A[6], A[12]);
	networks::ConditionalSwap(A[5], A[10]);
	networks::ConditionalSwap(A[6], A[11]);
	networks::ConditionalSwap(A[6], A[10]);
	networks::ConditionalSwap(A[3], A[7]);
	networks::ConditionalSwap(A[4], A[7]);
	networks::ConditionalSwap(A[5], A[8]);
	networks::ConditionalSwap(A[6], A[9]);
	networks::ConditionalSwap(A[6], A[8]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[6], A[7]);
}
template <typename TValueType> static inline
void sort15bosenelson(TValueType* A)
{
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[5], A[6]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[0], A[3]);
	networks::ConditionalSwap(A[1], A[5]);
	networks::ConditionalSwap(A[2], A[6]);
	networks::ConditionalSwap(A[2], A[5]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[7], A[8]);
	networks::ConditionalSwap(A[9], A[10]);
	networks::ConditionalSwap(A[7], A[9]);
	networks::ConditionalSwap(A[8], A[10]);
	networks::ConditionalSwap(A[8], A[9]);
	networks::ConditionalSwap(A[11], A[12]);
	networks::ConditionalSwap(A[13], A[14]);
	networks::ConditionalSwap(A[11], A[13]);
	networks::ConditionalSwap(A[12], A[14]);
	networks::ConditionalSwap(A[12], A[13]);
	networks::ConditionalSwap(A[7], A[11]);
	networks::ConditionalSwap(A[8], A[12]);
	networks::ConditionalSwap(A[8], A[11]);
	networks::ConditionalSwap(A[9], A[13]);
	networks::ConditionalSwap(A[10], A[14]);
	networks::ConditionalSwap(A[10], A[13]);
	networks::ConditionalSwap(A[9], A[11]);
	networks::ConditionalSwap(A[10], A[12]);
	networks::ConditionalSwap(A[10], A[11]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[0], A[7]);
	networks::ConditionalSwap(A[1], A[9]);
	networks::ConditionalSwap(A[2], A[10]);
	networks::ConditionalSwap(A[2], A[9]);
	networks::ConditionalSwap(A[1], A[7]);
	networks::ConditionalSwap(A[2], A[8]);
	networks::ConditionalSwap(A[2], A[7]);
	networks::ConditionalSwap(A[3], A[11]);
	networks::ConditionalSwap(A[4], A[12]);
	networks::ConditionalSwap(A[4], A[11]);
	networks::ConditionalSwap(A[5], A[13]);
	networks::ConditionalSwap(A[6], A[14]);
	networks::ConditionalSwap(A[6], A[13]);
	networks::ConditionalSwap(A[5], A[11]);
	networks::ConditionalSwap(A[6], A[12]);
	networks::ConditionalSwap(A[6], A[11]);
	networks::ConditionalSwap(A[3], A[7]);
	networks::ConditionalSwap(A[4], A[8]);
	networks::ConditionalSwap(A[4], A[7]);
	networks::ConditionalSwap(A[5], A[9]);
	networks::ConditionalSwap(A[6], A[10]);
	networks::ConditionalSwap(A[6], A[9]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[6], A[8]);
	networks::ConditionalSwap(A[6], A[7]);
}
template <typename TValueType> static inline
void sort16bosenelson(TValueType* A)
{
	networks::ConditionalSwap(A[0], A[1]);
	networks::ConditionalSwap(A[2], A[3]);
	networks::ConditionalSwap(A[0], A[2]);
	networks::ConditionalSwap(A[1], A[3]);
	networks::ConditionalSwap(A[1], A[2]);
	networks::ConditionalSwap(A[4], A[5]);
	networks::ConditionalSwap(A[6], A[7]);
	networks::ConditionalSwap(A[4], A[6]);
	networks::ConditionalSwap(A[5], A[7]);
	networks::ConditionalSwap(A[5], A[6]);
	networks::ConditionalSwap(A[0], A[4]);
	networks::ConditionalSwap(A[1], A[5]);
	networks::ConditionalSwap(A[1], A[4]);
	networks::ConditionalSwap(A[2], A[6]);
	networks::ConditionalSwap(A[3], A[7]);
	networks::ConditionalSwap(A[3], A[6]);
	networks::ConditionalSwap(A[2], A[4]);
	networks::ConditionalSwap(A[3], A[5]);
	networks::ConditionalSwap(A[3], A[4]);
	networks::ConditionalSwap(A[8], A[9]);
	networks::ConditionalSwap(A[10], A[11]);
	networks::ConditionalSwap(A[8], A[10]);
	networks::ConditionalSwap(A[9], A[11]);
	networks::ConditionalSwap(A[9], A[10]);
	networks::ConditionalSwap(A[12], A[13]);
	networks::ConditionalSwap(A[14], A[15]);
	networks::ConditionalSwap(A[12], A[14]);
	networks::ConditionalSwap(A[13], A[15]);
	networks::ConditionalSwap(A[13], A[14]);
	networks::ConditionalSwap(A[8], A[12]);
	networks::ConditionalSwap(A[9], A[13]);
	networks::ConditionalSwap(A[9], A[12]);
	networks::ConditionalSwap(A[10], A[14]);
	networks::ConditionalSwap(A[11], A[15]);
	networks::ConditionalSwap(A[11], A[14]);
	networks::ConditionalSwap(A[10], A[12]);
	networks::ConditionalSwap(A[11], A[13]);
	networks::ConditionalSwap(A[11], A[12]);
	networks::ConditionalSwap(A[0], A[8]);
	networks::ConditionalSwap(A[1], A[9]);
	networks::ConditionalSwap(A[1], A[8]);
	networks::ConditionalSwap(A[2], A[10]);
	networks::ConditionalSwap(A[3], A[11]);
	networks::ConditionalSwap(A[3], A[10]);
	networks::ConditionalSwap(A[2], A[8]);
	networks::ConditionalSwap(A[3], A[9]);
	networks::ConditionalSwap(A[3], A[8]);
	networks::ConditionalSwap(A[4], A[12]);
	networks::ConditionalSwap(A[5], A[13]);
	networks::ConditionalSwap(A[5], A[12]);
	networks::ConditionalSwap(A[6], A[14]);
	networks::ConditionalSwap(A[7], A[15]);
	networks::ConditionalSwap(A[7], A[14]);
	networks::ConditionalSwap(A[6], A[12]);
	networks::ConditionalSwap(A[7], A[13]);
	networks::ConditionalSwap(A[7], A[12]);
	networks::ConditionalSwap(A[4], A[8]);
	networks::ConditionalSwap(A[5], A[9]);
	networks::ConditionalSwap(A[5], A[8]);
	networks::ConditionalSwap(A[6], A[10]);
	networks::ConditionalSwap(A[7], A[11]);
	networks::ConditionalSwap(A[7], A[10]);
	networks::ConditionalSwap(A[6], A[8]);
	networks::ConditionalSwap(A[7], A[9]);
	networks::ConditionalSwap(A[7], A[8]);
}


template <typename TValueType> static inline
void sortNbosenelson(TValueType* A, size_t n)
{
    switch(n) {
        case 0: break;
        case 1: break;
        case 2:
			sort2bosenelson(A);
			break;
		case 3:
			sort3bosenelson(A);
			break;
		case 4:
			sort4bosenelson(A);
			break;
		case 5:
			sort5bosenelson(A);
			break;
		case 6:
			sort6bosenelson(A);
			break;
		case 7:
			sort7bosenelson(A);
			break;
		case 8:
			sort8bosenelson(A);
			break;
		case 9:
			sort9bosenelson(A);
			break;
		case 10:
			sort10bosenelson(A);
			break;
		case 11:
			sort11bosenelson(A);
			break;
		case 12:
			sort12bosenelson(A);
			break;
		case 13:
			sort13bosenelson(A);
			break;
		case 14:
			sort14bosenelson(A);
			break;
		case 15:
			sort15bosenelson(A);
			break;
		case 16:
			sort16bosenelson(A);
			break;
    }
}

}

#endif